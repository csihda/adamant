{"version":3,"sources":["assets/header-image.png","components/utils/getValue.js","components/utils/checkIfFieldIDExist.js","FormContext.js","components/utils/updateRequired.js","components/EditElement.js","components/utils/deleteKey.js","components/elements/StringType.js","components/utils/getUnit.js","components/elements/NumberType.js","components/AddElement.js","components/elements/ObjectType.js","components/elements/IntegerType.js","components/elements/BooleanType.js","components/elements/array_items/ItemIntegerType.js","components/elements/array_items/ItemNumberType.js","components/elements/array_items/ItemStringType.js","components/elements/array_items/ItemObjectType.js","components/elements/ArrayItemRenderer.js","components/utils/generateUniqueID.js","components/elements/ArrayType.js","components/utils/object2array.js","components/elements/AnyOfKeyword.js","components/ElementRenderer.js","components/EditSchemaHeader.js","components/FormRenderer.js","components/JSONSchemaViewer.js","components/utils/array2object.js","components/utils/deleteKeySchema.js","components/utils/validateAgainstSchema.js","components/CreateELabFTWExperimentDialog.js","components/utils/createDescriptionList.js","components/utils/convData2DescList.js","components/utils/getPaths.js","components/utils/getValueInSchema.js","components/utils/getPathURIsAndLabels.js","components/utils/preProcessB4DescList.js","components/utils/nicelySort.js","components/utils/array2objectAnyOf.js","pages/AdamantMain.jsx","App.js","index.js"],"names":["getValue","json","path","undefined","jsonData","JSON","parse","stringify","split","tempValue","i","length","checkIfFieldIDExist","schema","fieldId","result","forEach","element","value","newPath","pop","join","FormContext","createContext","updateRequired","selectedType","requiredChecked","field_id","convertedSchema","set","require","immediateValue","requiredArray","push","Set","includes","filter","item","EditElement","makeStyles","theme","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","enumerated","field_enumerate","field_required","UISchema","pathFormData","openDialog","setOpenDialog","defaultValue","useState","setSelectedType","title","setTitle","setFieldId","description","setDescription","defValue","setDefValue","useContext","updateParent","updateFormDataId","setRequiredChecked","enumChecked","setEnumChecked","enumList","setEnumList","tempUISchema","notImplemented","handleUpdateSchemaOnClick","toString","replace","existed","alert","newConvertedSchema","newList","Array","isArray","parsed","map","parseInt","parseFloat","handleChangeUISchema","event","keyword","target","handleCancelEdit","handleCheckBoxOnChange","prev","Dialog","open","DialogTitle","id","style","display","verticalAlign","color","alignSelf","IconButton","onClick","Divider","DialogContent","DialogActions","Button","disabled","autoFocus","DialogContentText","component","FormControl","FormLabel","TextField","margin","required","onChange","marginTop","variant","fullWidth","label","helperText","multiline","rows","select","SelectProps","native","content","index","FormControlLabel","control","Checkbox","checked","marginBottom","paddingTop","paddingBottom","FormGroup","deleteKey","elementValue","deleteIndex","at","splice","useStyles","StringType","dataInputItems","setDataInputItems","withinArray","field_index","edit","field_label","field_description","handleDataInput","handleDataDelete","handleConvertedDataInput","fieldValue","setFieldValue","classes","e","handleDeleteElement","handleOnBlur","type","newPathFormData","arr","items","from","useEffect","onBlur","className","marginLeft","height","getUnit","addorn","match","NumberType","inputValue","setInputValue","unit","handleInputOnChange","inputValueVar","handleInputOnBlur","isNaN","InputProps","endAdornment","InputAdornment","position","AddElement","defaultSchema","schemaTitle","inputProps","maxLength","handleOnBlurFieldId","properties","ObjectType","pathSchema","field_properties","openDialogAddElement","setOpenDialogAddElement","expand","setExpand","padding","Accordion","expanded","AccordionSummary","expandIcon","IconButtonProps","Typography","AccordionDetails","onDragEnd","destination","source","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","Object","keys","isDragDisabled","draggableId","draggableProps","dragHandleProps","fieldIndex","elementRequired","field","placeholder","justifyContent","IntegerType","BooleanType","alignItems","paddingLeft","textAlign","FormHelperText","ItemIntegerType","handleDeleteArrayItem","ItemNumberType","field_type","ItemStringType","ItemObjectType","field_items","objectIndex","justifySelf","tempField","ArrayItemRenderer","enumerate","generateUID","firstPart","Math","random","secondPart","slice","ArrayType","field_prefixItems","inputItems","setInputItems","generateUniqueID","newFieldItems","arr2","items2","reorderedItem2","handleAddArrayItem","object2array","propert","someArray","tempVariable2","tempVariable","item_","AnyOfKeyword","anyOf_list","setField_items","globalIndex","setGlobalIndex","schemaList","fill","x","val","console","log","val2","val3","prop","handleChooseAnyOfSchema","ElementRenderer","anyOf","EditSchemaHeader","schemaID","schemaURI","_schemaID","_setSchemaID","_title","_setTitle","_description","_setDescription","_schemaURI","_setSchemaURI","FormRenderer","revertAllChanges","$schema","paddingRight","JSONSchemaViewer","jsonschema","overflowX","whiteSpace","wordWrap","array2object","someObject","tempKey","tempElements","enumContent","deleteKeySchema","pathArray","tobeDeleted","validateAgainstSchema","formData","ajv","Ajv","allErrors","validate","compile","CreateELabFTWExperimentDialog","getTagsELabFTW","eLabURL","setELabURL","setTags","setRetrievedTags","tags","retrievedTags","setExperimentTitle","setToken","token","setOpenSubmitDialog","openSubmitDialog","createExperimentELabFTW","Autocomplete","multiple","freeSolo","options","getOptionLabel","option","tag","values","renderInput","params","trim","createDescriptionList","data","descList","emptyString","pathArr","titleDiv","some","convData2DescList","convDataProp","getPaths","object","reduce","r","k","kk","p","getValueInSchema","getPathURIsAndLabels","uris","labels","thePath","pathPreProcess","processedArr","preProcessB4DescList","originalContent","originalSchema","path_key","path_label","URIsAndLabels","nicelySort","sortedArr","loc","checkObjectExistance","key","$id","newObj","array2objectAnyOf","createFormDataBlueprint","schemaProperties","newObject","removeEmpty","obj","AdamantMain","disable","setDisable","schemaMessage","setSchemaMessage","schemaValidity","setSchemaValidity","setSchema","setSchemaIntermediate","renderReady","setRenderReady","editMode","setEditMode","setSchemaList","schemaNameList","setSchemaNameList","selectedSchemaName","setSelectedSchemaName","setOriginalSchema","inputMode","setInputMode","setConvertedSchema","createScratchMode","setCreateScratchMode","setJsonData","descriptionList","setDescriptionList","setSchemaWithValues","experimentTitle","onlineMode","setOnlineMode","anchorEl","setAnchorEl","Boolean","handleClose","ajax","url","success","toast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","error","SchemaOne","SchemaTwo","SchemaThree","SchemaFour","warning","onDrop","useCallback","acceptedFile","schemaFile","reader","FileReader","onabort","onerror","onload","binaryStr","oriSchema","readAsText","checkSchemaValidity","useDropzone","getRootProps","getInputProps","isDragActive","clearSchemaOnClick","Provider","newValue","updatedSchema","tempSchema","updatedSchema2","tempSchema2","jData","oldFieldId","newFieldId","convSchemaData","borderRadius","alt","src","HeaderImage","selectedSchema","indexOf","handleSelectSchemaOnChange","createSchemaFromScratch","marginRight","toEditMode","float","convSch","cleaned","preProcessed","nicelySorted","descListHeading","contentSchema","valid","validation","errorMessages","errors","message","currentMessage","handleOnClickProceedButton","currentTarget","Menu","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","sha256_hash","CryptoJS","SHA256","a","document","createElement","file","Blob","href","URL","createObjectURL","download","click","compileOnClick","async","dataType","javascript_data","eLabToken","body","status","App","exact","to","rootElement","getElementById","ReactDOM","render","CssBaseline"],"mappings":"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","file":"static/js/main.de175ad9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/header-image.37bfe931.png\";","// get json value given path\r\nconst getValue = (json, path) => {\r\n    if (path === undefined) {\r\n        return json[\"properties\"]\r\n    }\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValue;","import getValue from \"./getValue\";\r\nconst checkIfFieldIDExist = (schema, path, fieldId) => {\r\n    let result\r\n    if (path === undefined) {\r\n        let value = schema[\"properties\"]\r\n        value.forEach(element => {\r\n            if (element[\"fieldId\"] === fieldId) {\r\n                return result = true;\r\n            }\r\n        });\r\n    } else {\r\n\r\n        let value = getValue(schema, path)[\"properties\"]\r\n\r\n        if (value === undefined) {\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n            let value = getValue(schema, newPath)\r\n            value.forEach(element => {\r\n                if (element[\"fieldId\"] === fieldId) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        } else {\r\n            value.forEach(element => {\r\n                if (element[\"fieldId\"] === fieldId) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    if (result) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n\r\n}\r\n\r\nexport default checkIfFieldIDExist;","import { createContext } from 'react';\r\nexport const FormContext = createContext(null);","/*\r\nFunction to add or remove \"required\" flag for a specific field\r\n*/\r\n\r\n\r\n// get json value given path\r\nconst getValue = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n}\r\n\r\nconst updateRequired = ({ selectedType, path, requiredChecked, field_id, convertedSchema }) => {\r\n\r\n    if (selectedType === \"object\") {\r\n        requiredChecked = false\r\n    }\r\n\r\n    const set = require(\"set-value\");\r\n\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const immediateValue = getValue(convertedSchema, newPath)\r\n    if (immediateValue !== undefined) {\r\n        // check if there is required array\r\n        if (immediateValue[\"required\"] !== undefined) {\r\n            let requiredArray = immediateValue[\"required\"]\r\n            if (requiredChecked) {\r\n                requiredArray.push(field_id)\r\n                requiredArray = [...new Set(requiredArray)]\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            } else {\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_id)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_id)\r\n                    set(convertedSchema, newPath + \".required\", requiredArray)\r\n\r\n                    if (requiredArray.length === 0) {\r\n                        delete immediateValue[\"required\"]\r\n                        set(convertedSchema, newPath, immediateValue)\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_id}`]\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            }\r\n        }\r\n    } else {\r\n        // check if there is required array\r\n        if (convertedSchema[\"required\"] !== undefined) {\r\n            let requiredArray = convertedSchema[\"required\"]\r\n            if (requiredChecked) {\r\n                requiredArray.push(field_id)\r\n                requiredArray = [...new Set(requiredArray)]\r\n                convertedSchema[\"required\"] = requiredArray\r\n            } else {\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_id)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_id)\r\n                    convertedSchema[\"required\"] = requiredArray\r\n                    if (requiredArray.length === 0) {\r\n                        delete convertedSchema[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_id}`]\r\n                convertedSchema[\"required\"] = requiredArray\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return convertedSchema;\r\n}\r\n\r\nexport default updateRequired;","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport checkIfFieldIDExist from './utils/checkIfFieldIDExist';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport { FormGroup } from '@material-ui/core';\r\nimport updateRequired from './utils/updateRequired';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\nconst EditElement = ({ enumerated, field_enumerate, field_required, field_id, UISchema, path, pathFormData, openDialog, setOpenDialog, defaultValue }) => {\r\n\r\n    const [selectedType, setSelectedType] = useState(UISchema[\"type\"])\r\n    const [title, setTitle] = useState(UISchema[\"title\"])\r\n    const [fieldId, setFieldId] = useState(UISchema[\"fieldId\"])\r\n    const [description, setDescription] = useState(UISchema[\"description\"])\r\n    const [defValue, setDefValue] = useState(defaultValue)\r\n    const { updateParent, convertedSchema, updateFormDataId } = useContext(FormContext);\r\n    const [requiredChecked, setRequiredChecked] = useState(field_required === undefined ? false : field_required)\r\n    const [enumChecked, setEnumChecked] = useState(enumerated === undefined ? false : enumerated)\r\n    const [enumList, setEnumList] = useState(field_enumerate === undefined ? [] : field_enumerate);\r\n\r\n    let tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n\r\n    let notImplemented = false;\r\n    if (![\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\"].includes(UISchema[\"type\"])) {\r\n        notImplemented = true;\r\n    }\r\n\r\n\r\n    const datatypes = [\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\"]\r\n\r\n\r\n    const handleOnChangeListField = (event) => {\r\n        setEnumList(event.target.value);\r\n    }\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        // update default value\r\n        if (defValue === undefined & defaultValue === undefined) {\r\n            // do nothing\r\n        } else if (defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n            // do nothing\r\n        } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n            // do nothing\r\n        } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') !== \"\" & defaultValue !== undefined) {\r\n            tempUISchema[\"defaultValue\"] = (defValue === \"true\")\r\n        } else if (defValue.toString().replace(/\\s+/g, '') === \"\") {\r\n            delete tempUISchema[\"defaultValue\"]\r\n        }\r\n        else {\r\n            tempUISchema[\"defaultValue\"] = defValue\r\n        };\r\n\r\n        // check if fieldId already exist\r\n        let existed = checkIfFieldIDExist(convertedSchema, path, fieldId)\r\n        if (UISchema[\"fieldId\"] !== fieldId) {\r\n            if (existed) {\r\n                alert(\"Field ID already exists!\")\r\n                return\r\n            }\r\n        }\r\n\r\n        if (fieldId === undefined | fieldId.replace(/\\s+/g, '') === \"\") {\r\n            alert(\"Field ID must be defined!\")\r\n            return\r\n        }\r\n\r\n        tempUISchema[\"fieldId\"] = fieldId;\r\n        tempUISchema[\"type\"] = selectedType;\r\n        if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n        if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n        if (tempUISchema[\"type\"] === \"object\" & tempUISchema[\"properties\"] === undefined) {\r\n            tempUISchema[\"properties\"] = []\r\n        }\r\n        if (tempUISchema[\"type\"] === \"array\" & tempUISchema[\"items\"] === undefined) {\r\n            tempUISchema[\"items\"] = {}\r\n        }\r\n        if (![\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"])) {\r\n            setEnumChecked(false);\r\n        }\r\n        const set = require(\"set-value\");\r\n        set(convertedSchema, path, tempUISchema)\r\n        // update the required value\r\n        const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_id, convertedSchema })\r\n        // update enum\r\n        if ([\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"]) & enumChecked) {\r\n            let newList = enumList\r\n\r\n            switch (tempUISchema[\"type\"]) {\r\n                case 'string':\r\n                    if (Array.isArray(newList)) {\r\n                        set(newConvertedSchema, path + \".enumerate\", newList)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                    }\r\n                case 'integer':\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    }\r\n                case 'number':\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    }\r\n            }\r\n        }\r\n        // update main component\r\n        updateParent(newConvertedSchema)\r\n        setOpenDialog(false)\r\n\r\n        //* update form data if fieldId change\r\n        // update pathFormData with new fieldId\r\n        updateFormDataId(field_id, fieldId, pathFormData, defaultValue)\r\n\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'type':\r\n                return setSelectedType(event.target.value)\r\n            case 'title':\r\n                return setTitle(event.target.value)\r\n            case 'description':\r\n                return setDescription(event.target.value)\r\n            case 'fieldId':\r\n                return setFieldId(event.target.value.replace(/ /g, \"_\"))\r\n            case 'defaultValue':\r\n                return setDefValue(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n        setOpenDialog(false)\r\n        setEnumList(field_enumerate)\r\n        setDefValue(defaultValue)\r\n        setSelectedType(UISchema[\"type\"])\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleCheckBoxOnChange = () => {\r\n        setRequiredChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleEnumBoxOnChange = () => {\r\n        setEnumChecked(prev => !prev)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {notImplemented ?\r\n                <Dialog\r\n                    open={openDialog}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">\r\n                        <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                            <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                                Edit \"{tempUISchema[\"title\"]}\"\r\n                            </div>\r\n                            <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        We are sorry! Editing feature for the \"{UISchema[\"type\"]}\" type/keyword is not yet implemented.\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button disabled onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                :\r\n                <Dialog\r\n                    open={openDialog}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">\r\n                        <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                            <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                                Edit \"{tempUISchema[\"title\"]}\"\r\n                            </div>\r\n                            <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                            <div>\r\n                                <FormControl component=\"widget-type\">\r\n                                    <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                                    <TextField margin=\"normal\" required onChange={event => handleChangeUISchema(event, \"fieldId\")} style={{ marginTop: \"20px\" }} defaultValue={field_id} variant=\"outlined\" fullWidth={true} label={\"Field ID or Key\"} helperText='A unique json key or id for this field. Usually short and no spaces (use \"_\" instead). Spaces are replaced automatically with \"_\" upon saving.' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"title\"]} variant=\"outlined\" fullWidth={true} label={\"Field Title\"} helperText='Label or title of the field. For a field that requires a unit, the unit can be placed within a square bracket, e,g., \"Chamber Pressure [Pa]\".' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"description\"]} variant=\"outlined\" fullWidth={true} label={\"Field Description\"} multiline rows={3} helperText='A detailed description of the field, how the input should be formated, etc.' />\r\n                                    <TextField\r\n                                        margin=\"normal\"\r\n                                        helperText='Data type of the field input.'\r\n                                        onChange={event => handleChangeUISchema(event, \"type\")}\r\n                                        style={{ marginTop: \"10px\" }}\r\n                                        defaultValue={tempUISchema[\"type\"]}\r\n                                        select\r\n                                        fullWidth={true}\r\n                                        id={field_id}\r\n                                        label={\"Field Data Type\"}\r\n                                        variant=\"outlined\"\r\n                                        SelectProps={{\r\n                                            native: true,\r\n                                        }}\r\n                                    >\r\n                                        {datatypes.map((content, index) => (\r\n                                            <option key={index} value={content}>\r\n                                                {content}\r\n                                            </option>\r\n                                        ))}\r\n                                    </TextField>\r\n                                    {[\"string\", \"integer\", \"number\"].includes(selectedType) ?\r\n                                        <>\r\n                                            <FormControlLabel control={<Checkbox onChange={() => handleEnumBoxOnChange()} checked={enumChecked} />} label=\"Enumerated. Choose from an available list of inputs.\" />\r\n                                            <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\r\n                                                {enumChecked ? <TextField defaultValue={enumList !== undefined ? enumList : \"\"} onChange={handleOnChangeListField} variant=\"outlined\" fullWidth={true} label=\"Enumerate List\" multiline rows={4} helperText=\"A list of inputs separated by commas, e,g.: item 1, item 2, item 3. Make sure that the item data type matches the field input data type. Invalid items will be replaced with NaN upon saving.\" /> : null}\r\n                                            </div>\r\n                                        </> : null}\r\n                                </FormControl>\r\n                                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\" }}>\r\n                                    <FormControl component=\"validation-related\">\r\n                                        <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Validation Related:</FormLabel>\r\n                                    </FormControl>\r\n                                    <FormGroup>\r\n                                        {selectedType === \"array\" ?\r\n                                            <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                            : null}\r\n                                        {selectedType !== \"object\" & selectedType !== \"array\" & selectedType !== \"boolean\" ?\r\n                                            <>\r\n                                                <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                                <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"defaultValue\")} style={{ marginTop: \"10px\" }} defaultValue={defaultValue} variant=\"outlined\" fullWidth={true} label={\"Field Default Value\"} helperText=\"Initial value of the field.\" />\r\n                                            </>\r\n                                            : null}\r\n                                        {selectedType === \"boolean\" ?\r\n                                            <>\r\n                                                <TextField\r\n                                                    margin='normal'\r\n                                                    onChange={event => handleChangeUISchema(event, \"defaultValue\")}\r\n                                                    style={{ marginTop: \"20px\" }}\r\n                                                    defaultValue={defaultValue !== undefined ? defaultValue : \"\"}\r\n                                                    select\r\n                                                    fullWidth={true}\r\n                                                    id={field_id}\r\n                                                    label={\"Boolean Field Default Value\"}\r\n                                                    variant=\"outlined\"\r\n                                                    SelectProps={{\r\n                                                        native: true,\r\n                                                    }}\r\n                                                >\r\n                                                    {[\"\", \"true\", \"false\"].map((content, index) => (\r\n                                                        <option key={index} value={content}>\r\n                                                            {content}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </TextField>\r\n                                            </>\r\n                                            : null}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditElement;","import getValue from \"./getValue\";\r\n\r\n// delete key and value given path\r\nconst deleteKey = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const elementValue = getValue(jsonData, newPath);\r\n\r\n    if (Array.isArray(elementValue)) {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        elementValue.splice(parseInt(deleteIndex), 1)\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    } else {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        delete elementValue[deleteIndex]\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    }\r\n\r\n};\r\n\r\nexport default deleteKey;","import React, { useContext, useEffect, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst StringType = ({ dataInputItems, setDataInputItems, withinArray, path, pathFormData, field_required, field_index, edit, field_id, field_label, field_description, field_enumerate, defaultValue, value }) => {\r\n\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [fieldValue, setFieldValue] = useState(defaultValue !== undefined ? defaultValue : value)\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"type\": \"string\",\r\n        \"value\": value,\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle on blur\r\n    const handleOnBlur = (event, pathFormData, type) => {\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = event.target.value;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let value = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(value, newPathFormData, \"string\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(value, newPath + \".value\", \"string\")\r\n\r\n            // update field value\r\n            setFieldValue(event.target.value)\r\n        } else {\r\n            handleDataInput(event, pathFormData, type)\r\n            // conv. schema data\r\n            handleConvertedDataInput(event, path + \".value\", \"string\")\r\n            // update field value\r\n            setFieldValue(event.target.value)\r\n        }\r\n    }\r\n\r\n\r\n    // if enumerate and no defaultValue then already store the first enumerate value to form data\r\n    // this is for any enumerate in a subschema (e.g., in anyOf), for the rest of enumerate is taken care of in AdamantMain.jsx\r\n    useEffect(() => {\r\n        if (field_enumerate !== undefined & withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = field_enumerate[0];\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(event, newPathFormData, \"string\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(event, newPath + \".value\", \"string\")\r\n            // update field value\r\n            setFieldValue(field_enumerate[0])\r\n        } else if (field_enumerate !== undefined & withinArray === undefined) {\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        field_enumerate[0]\r\n                }\r\n            }\r\n            handleDataInput(event, pathFormData, \"string\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(event, path + \".value\", \"string\")\r\n            // update field value\r\n            setFieldValue(field_enumerate[0])\r\n        } else if (field_enumerate === undefined & withinArray === undefined & defaultValue !== undefined) {\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        defaultValue\r\n                }\r\n            }\r\n            handleDataInput(event, pathFormData, \"string\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(event, path + \".value\", \"string\")\r\n            // update field value\r\n            setFieldValue(defaultValue)\r\n        } else if (field_enumerate === undefined & withinArray !== undefined & defaultValue !== undefined) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = defaultValue;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(event, newPathFormData, \"string\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(event, newPath + \".value\", \"string\")\r\n            // update field value\r\n            setFieldValue(defaultValue)\r\n        }\r\n    }, [])\r\n\r\n    if (field_enumerate === undefined) {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onBlur={(event) => handleOnBlur(event, pathFormData, \"string\")} required={required} helperText={field_description} defaultValue={fieldValue} fullWidth={true} className={classes.heading} id={field_id} label={field_label} variant=\"outlined\" />\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement pathFormData={pathFormData} defaultValue={defaultValue} enumerated={enumerated} field_enumerate={field_enumerate} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    < TextField\r\n                        onBlur={(event) => handleOnBlur(event, pathFormData, \"string\")}\r\n                        required={required}\r\n                        select\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_id}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }\r\n                        }\r\n                        helperText={field_description}\r\n                        defaultValue={fieldValue}\r\n                    >\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField >\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div >\r\n                {openDialog ? <EditElement pathFormData={pathFormData} enumerated={enumerated} defaultValue={defaultValue} field_enumerate={field_enumerate} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default StringType;\r\n","const getUnit = (field_label) => {\r\n\r\n    if (field_label === undefined) {\r\n        return \"\"\r\n    }\r\n\r\n    let addorn = field_label.match(/[^[\\]]+(?=])/g)\r\n    if (addorn === null) {\r\n        return \"\"\r\n    } else {\r\n        return addorn\r\n    }\r\n}\r\n\r\nexport default getUnit;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { InputAdornment } from '@material-ui/core';\r\nimport getUnit from '../utils/getUnit';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst NumberType = ({ value, dataInputItems, setDataInputItems, withinArray, path, pathFormData, defaultValue, field_required, field_index, edit, field_id, field_label, field_description, field_enumerate }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue !== undefined & value === undefined ? defaultValue : value === undefined ? \"\" : value)//useState(defaultValue !== undefined ? defaultValue : value)\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    let unit = getUnit(field_label)\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"type\": \"number\",\r\n        \"value\": value,\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_id] = value;\r\n                setDataInputItems(items);\r\n\r\n                // store to the main form data\r\n                handleDataInput(items, newPathFormData, \"number\")\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, newPath + \".value\", \"number\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                handleDataInput(parseFloat(inputValue), pathFormData, \"number\")\r\n                // conv. schema data\r\n                handleConvertedDataInput(parseFloat(inputValue), path + \".value\", \"number\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // if enumerate and no defaultValue then already store the first enumerate value to form data\r\n    // this is for any enumerate in a subschema (e.g., in anyOf), for the rest of enumerate is taken care of in AdamantMain.jsx\r\n    useEffect(() => {\r\n        if (field_enumerate !== undefined & withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = (defaultValue === undefined ? field_enumerate[0] : defaultValue);\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(event, newPathFormData, \"number\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(field_enumerate[0], newPath + \".value\", \"number\")\r\n            // update field value\r\n            setInputValue(field_enumerate[0])\r\n        } else if (field_enumerate !== undefined & withinArray === undefined) {\r\n            handleDataInput(field_enumerate[0], pathFormData, \"number\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(field_enumerate[0], path + \".value\", \"number\")\r\n            // update field value\r\n            setInputValue(field_enumerate[0])\r\n        } else if (field_enumerate === undefined & withinArray === undefined & defaultValue !== undefined) {\r\n            handleDataInput(defaultValue, pathFormData, \"number\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(defaultValue, path + \".value\", \"number\")\r\n            // update field value\r\n            setInputValue(defaultValue)\r\n        } else if (field_enumerate === undefined & withinArray !== undefined & defaultValue !== undefined) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = defaultValue;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(event, newPathFormData, \"number\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(defaultValue, newPath + \".value\", \"number\")\r\n            // update field value\r\n            setInputValue(defaultValue)\r\n        }\r\n    }, [])\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} helperText={field_description} fullWidth={true} className={classes.heading} id={field_id} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{unit}</InputAdornment>,\r\n                    }} />\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        helperText={field_description}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_id}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{unit}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default NumberType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport { FormGroup } from '@material-ui/core';\r\nimport updateRequired from './utils/updateRequired';\r\nimport getValue from './utils/getValue';\r\nimport checkIfFieldIDExist from './utils/checkIfFieldIDExist';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst AddElement = ({ enumerated, field_enumerate, field_required, defaultSchema, path, openDialog, setOpenDialog, UISchema, schemaTitle }) => {\r\n\r\n    const [selectedType, setSelectedType] = useState(\"string\")\r\n    const [fieldId, setFieldId] = useState(undefined)\r\n    const [title, setTitle] = useState(undefined)\r\n    const [description, setDescription] = useState(undefined)\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n    const [requiredChecked, setRequiredChecked] = useState(field_required === undefined ? false : field_required)\r\n    const [enumChecked, setEnumChecked] = useState(enumerated === undefined ? false : enumerated)\r\n    const [enumList, setEnumList] = useState(field_enumerate === undefined ? [] : field_enumerate.join(\",\"));\r\n\r\n    let tempUISchema = JSON.parse(JSON.stringify(defaultSchema))\r\n\r\n\r\n    const datatypes = [\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\"]\r\n\r\n\r\n    const handleOnChangeListField = (event) => {\r\n        setEnumList(event.target.value);\r\n    }\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        // check if fieldId already exist\r\n        if (checkIfFieldIDExist(convertedSchema, path, fieldId)) {\r\n            alert(\"Field ID already exists!\")\r\n            return\r\n        }\r\n\r\n        tempUISchema[\"fieldId\"] = fieldId;\r\n        tempUISchema[\"type\"] = selectedType;\r\n        if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n        if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n        if (fieldId === undefined) {\r\n            alert(\"Field ID must be defined!\")\r\n            return\r\n        }\r\n\r\n        if (typeof (fieldId) === \"string\" & fieldId.replace(/\\s+/g, '') === \"\") {\r\n            alert(\"Field ID must be defined!\")\r\n            return\r\n        }\r\n\r\n        if (tempUISchema[\"type\"] === \"object\") {\r\n            tempUISchema[\"properties\"] = []\r\n        }\r\n        if (tempUISchema[\"type\"] === \"array\") {\r\n            tempUISchema[\"items\"] = {}\r\n        }\r\n        if (tempUISchema[\"type\"] !== \"string\") {\r\n            setEnumChecked(false);\r\n        }\r\n\r\n        if (path !== undefined) {\r\n            const set = require(\"set-value\");\r\n\r\n            let properties = getValue(convertedSchema, path)[\"properties\"]\r\n            properties.push(tempUISchema)\r\n            set(convertedSchema, path + \".properties\", properties)\r\n\r\n            // create a new path to the new element\r\n            path = path + \".properties.\" + (properties.length - 1).toString()\r\n            let field_id = fieldId\r\n            // update the required value\r\n            const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_id, convertedSchema })\r\n            // update enum\r\n            if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                let newList = enumList\r\n                if (Array.isArray(newList)) {\r\n                    set(newConvertedSchema, path + \".enumerate\", newList)\r\n                } else {\r\n                    newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                    set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                }\r\n\r\n            }\r\n\r\n            updateParent(newConvertedSchema)\r\n            setOpenDialog(false)\r\n        } else {\r\n            const set = require(\"set-value\");\r\n            let properties = convertedSchema[\"properties\"]\r\n            properties.push(tempUISchema)\r\n            convertedSchema[\"properties\"] = properties\r\n\r\n            // create a new path to the new element\r\n            path = \"properties.\" + (properties.length - 1).toString()\r\n            let field_id = fieldId\r\n            // update the required value\r\n            const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_id, convertedSchema })\r\n            // update enum\r\n            if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                let newList = enumList\r\n                if (Array.isArray(newList)) {\r\n                    set(newConvertedSchema, path + \".enumerate\", newList)\r\n                } else {\r\n                    newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                    set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                }\r\n\r\n            }\r\n\r\n            updateParent(newConvertedSchema)\r\n            setOpenDialog(false)\r\n        }\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'type':\r\n                return setSelectedType(event.target.value)\r\n            case 'title':\r\n                return setTitle(event.target.value)\r\n            case 'description':\r\n                return setDescription(event.target.value)\r\n            case 'fieldId':\r\n                return setFieldId(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        tempUISchema = JSON.parse(JSON.stringify(defaultSchema))\r\n        setOpenDialog(false)\r\n        setEnumList(field_enumerate)\r\n        setSelectedType(\"string\")\r\n    }\r\n\r\n    // handle field id on change\r\n    const handleOnBlurFieldId = (event) => {\r\n        setFieldId(event.target.value)\r\n        tempUISchema[\"fieldId\"] = event.target.value\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleCheckBoxOnChange = () => {\r\n        setRequiredChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleEnumBoxOnChange = () => {\r\n        setEnumChecked(prev => !prev)\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <AddIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Add Element in \"{UISchema !== undefined ? UISchema[\"title\"] : schemaTitle}\"\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                            <TextField inputProps={{ maxLength: 12 }} required onBlur={event => handleOnBlurFieldId(event)} onChange={event => handleChangeUISchema(event, \"fieldId\")} style={{ marginTop: \"20px\" }} defaultValue={tempUISchema[\"fieldId\"]} variant=\"outlined\" fullWidth={true} label={\"Field ID or Key\"} />\r\n                            <TextField onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"title\"]} variant=\"outlined\" fullWidth={true} label={\"Field Title\"} />\r\n                            <TextField onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"description\"]} variant=\"outlined\" fullWidth={true} label={\"Field Description\"} multiline rows={3} />\r\n                            <TextField\r\n                                onChange={event => handleChangeUISchema(event, \"type\")}\r\n                                style={{ marginTop: \"10px\" }}\r\n                                defaultValue={selectedType}\r\n                                select\r\n                                fullWidth={true}\r\n                                label={\"Field Data Type\"}\r\n                                variant=\"outlined\"\r\n                                SelectProps={{\r\n                                    native: true,\r\n                                }}\r\n                            >\r\n                                {datatypes.map((content, index) => (\r\n                                    <option key={index} value={content}>\r\n                                        {content}\r\n                                    </option>\r\n                                ))}\r\n                            </TextField>\r\n                            {selectedType === \"string\" ?\r\n                                <>\r\n                                    <FormControlLabel control={<Checkbox onChange={() => handleEnumBoxOnChange()} checked={enumChecked} />} label=\"Enumerated\" />\r\n                                    <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\r\n                                        {enumChecked ? <TextField defaultValue={enumList !== undefined ? enumList : \"\"} onChange={handleOnChangeListField} variant=\"outlined\" fullWidth={true} label=\"Enumerate List\" multiline rows={4} /> : null}\r\n                                    </div>\r\n                                </> : null}\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                    ADD\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default AddElement;","import React, { useState, useContext } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"../ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport AddElement from \"../AddElement\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst ObjectType = ({ path, pathSchema, pathFormData, field_required, field_id, field_index, edit, field_label, field_description, field_properties }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema, handleDataDelete } = useContext(FormContext);\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(field_properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        const set = require(\"set-value\");\r\n        let value = { ...convertedSchema }\r\n        set(convertedSchema, path + \".properties\", items)\r\n        updateParent(value);\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"properties\": field_properties,\r\n        \"type\": \"object\"\r\n    }\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    style={{ height: \"auto\" }}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography className={classes.heading}>{field_label}</Typography>\r\n                            {expand ? <div style={{ color: \"gray\" }}>\r\n                                {field_description}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <><Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button></> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(field_properties).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={!edit} key={field_properties[item][\"fieldId\"]} draggableId={field_properties[item][\"fieldId\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <DragHandleIcon fontSize=\"small\" />\r\n                                                            </div> : null}\r\n                                                            <ElementRenderer path={path + \".properties\"} pathSchema={pathSchema + \".properties\"} pathFormData={pathFormData} fieldId={field_properties[item][\"fieldId\"]} fieldIndex={item} elementRequired={field_required} edit={edit} field={field_properties[item]} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                                    </div> : null}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement pathFormData={pathFormData} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} /> : null}\r\n        {openDialogAddElement ? <AddElement openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} path={path} defaultSchema={defaultSchema} UISchema={UISchema} /> : null}\r\n    </>);\r\n};\r\n\r\nexport default ObjectType;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport getUnit from '../utils/getUnit';\r\nimport { InputAdornment } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst IntegerType = ({ value, dataInputItems, setDataInputItems, withinArray, defaultValue, path, pathFormData, field_required, field_index, edit, field_id, field_label, field_description, field_enumerate }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue !== undefined & value === undefined ? defaultValue : value === undefined ? \"\" : value)// useState(defaultValue !== undefined ? defaultValue : value);\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    let unit = getUnit(field_label)\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"type\": \"integer\",\r\n        \"value\": value\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_id] = value;\r\n                setDataInputItems(items);\r\n\r\n                // store to the main form data\r\n                handleDataInput(items, newPathFormData, \"integer\")\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, newPath + \".value\", \"integer\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                handleDataInput(parseInt(inputValue), pathFormData, \"integer\")\r\n                // conv. schema data\r\n                handleConvertedDataInput(parseInt(inputValue), path + \".value\", \"integer\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // if enumerate and no defaultValue then already store the first enumerate value to form data\r\n    // this is for any enumerate in a subschema (e.g., in anyOf), for the rest of enumerate is taken care of in AdamantMain.jsx\r\n    useEffect(() => {\r\n        if (field_enumerate !== undefined & withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = (defaultValue === undefined ? field_enumerate[0] : defaultValue);\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(event, newPathFormData, \"integer\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(field_enumerate[0], newPath + \".value\", \"integer\")\r\n            // update field value\r\n            setInputValue(field_enumerate[0])\r\n        } else if (field_enumerate !== undefined & withinArray === undefined) {\r\n            // conv. schema data\r\n            handleConvertedDataInput(field_enumerate[0], path + \".value\", \"integer\")\r\n            // update field value\r\n            setInputValue(field_enumerate[0])\r\n        } else if (field_enumerate === undefined & withinArray === undefined & defaultValue !== undefined) {\r\n            // conv. schema data\r\n            handleConvertedDataInput(defaultValue, path + \".value\", \"integer\")\r\n            // update field value\r\n            setInputValue(defaultValue)\r\n        } else if (field_enumerate === undefined & withinArray !== undefined & defaultValue !== undefined) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = defaultValue;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(event, newPathFormData, \"integer\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(defaultValue, newPath + \".value\", \"integer\")\r\n            // update field value\r\n            setInputValue(defaultValue)\r\n        }\r\n    }, [])\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} helperText={field_description} fullWidth={true} className={classes.heading} id={field_id} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{unit}</InputAdornment>,\r\n                    }} />\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        helperText={field_description}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_id}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{unit}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default IntegerType;\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport { Checkbox, FormLabel, FormHelperText, FormControl } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst BooleanType = ({ withinArray, value, dataInputItems, setDataInputItems, path, pathFormData, field_required, field_index, edit, field_id, field_label, field_description, defaultValue }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(value !== undefined ? value : typeof (defaultValue) === \"boolean\" ? defaultValue : false);\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"type\": \"boolean\",\r\n        \"value\": value\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for checkbox (boolean type: checked is true unchecked is false)\r\n    const handleInputOnChange = () => {\r\n        let value = inputValue\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = !value;\r\n            setDataInputItems(items);\r\n\r\n            setInputValue(!value)\r\n            handleDataInput(items, newPathFormData, \"boolean\")\r\n            handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n\r\n        } else {\r\n            setInputValue(!value)\r\n            handleDataInput(!value, pathFormData, \"boolean\")\r\n            handleConvertedDataInput(!value, path + \".value\", \"boolean\")\r\n        }\r\n    }\r\n\r\n    // if boolean field is newly created then store a false input data already to the form data\r\n    useEffect(() => {\r\n        if (defaultValue === undefined) {\r\n            if (withinArray !== undefined & withinArray === true) {\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_id] = false;\r\n                setDataInputItems(items);\r\n\r\n                handleDataInput(items, newPathFormData, \"boolean\")\r\n                handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n            }\r\n            else {\r\n                handleDataInput(false, pathFormData, \"boolean\")\r\n                handleConvertedDataInput(false, path + \".value\", \"boolean\")\r\n            }\r\n        } else {\r\n            if (withinArray !== undefined & withinArray === true) {\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_id] = defaultValue;\r\n                setDataInputItems(items);\r\n\r\n                handleDataInput(items, newPathFormData, \"boolean\")\r\n                handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n            }\r\n            else {\r\n                handleDataInput(defaultValue, pathFormData, \"boolean\")\r\n                handleConvertedDataInput(defaultValue, path + \".value\", \"boolean\")\r\n            }\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', alignItems: \"center\", width: '100%' }}>\r\n                <div style={{ paddingLeft: \"15px\", width: \"100%\" }}>\r\n                    <FormControl >\r\n                        <FormLabel>{field_label === undefined ? \"\" : field_label + \":\"}</FormLabel>\r\n                        <div style={{ textAlign: \"center\", width: \"100%\" }}>\r\n                            <Checkbox onChange={() => handleInputOnChange()} checked={inputValue} />\r\n                        </div>\r\n                        <FormHelperText>{field_description}</FormHelperText>\r\n                    </FormControl>\r\n                </div>\r\n                {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                    <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n            {openDialog ? <EditElement pathFormData={pathFormData} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default BooleanType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemIntegerType = ({ value, path, pathFormData, dataInputItems, setDataInputItems, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const [inputValue, setInputValue] = useState(value === undefined ? \"\" : value[index] === undefined ? \"\" : value[index]);\r\n    const { handleDataInput, handleConvertedDataInput } = useContext(FormContext);\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        let value = inputValue;\r\n        value = parseInt(value)\r\n        if (!isNaN(value)) {\r\n            setInputValue(value)\r\n\r\n            // store it to input data array\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[index] = value;\r\n            setDataInputItems(items);\r\n\r\n            // store to form data\r\n            handleDataInput(items, pathFormData, \"array\")\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items, path + \".value\", \"array\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_id} variant=\"outlined\" />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemIntegerType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemNumberType = ({ value, pathFormData, dataInputItems, setDataInputItems, path, field_type, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const [inputValue, setInputValue] = useState(value === undefined ? \"\" : value[index] === undefined ? \"\" : value[index]);\r\n    const { handleDataInput, handleConvertedDataInput } = useContext(FormContext);\r\n\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        let value = inputValue;\r\n        value = parseFloat(value)\r\n        if (!isNaN(value)) {\r\n            setInputValue(value)\r\n\r\n            // store it to input data array\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[index] = value;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            handleDataInput(items, pathFormData, \"array\")\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items, path + \".value\", \"array\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_id} variant=\"outlined\" />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemNumberType;\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemStringType = ({ value, pathFormData, dataInputItems, setDataInputItems, path, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const { handleDataInput, handleConvertedDataInput } = useContext(FormContext)\r\n    const [fieldValue, setFieldValue] = useState(value === undefined ? undefined : value[index])\r\n\r\n    // handle input field on blur\r\n    const handleOnBlur = (event, index) => {\r\n        let arr = dataInputItems;\r\n        const items = Array.from(arr);\r\n        items[index] = event.target.value;\r\n        setDataInputItems(items);\r\n        setFieldValue(event.target.value)\r\n\r\n        // store to form data\r\n        handleDataInput(items, pathFormData, \"array\")\r\n\r\n        // conv. schema data\r\n        handleConvertedDataInput(items, path + \".value\", \"array\")\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={(event) => handleOnBlur(event, index)} id={field_id} fullWidth={true} className={classes.heading} variant=\"outlined\" defaultValue={fieldValue} />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default ItemStringType;\r\n","import React, { useContext, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"../../ElementRenderer\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { FormContext } from \"../../../FormContext\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemObjectType = ({ path, dataInputItems, setDataInputItems, field_label, pathFormData, field_required, field_items, field_type, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    let objectIndex = index;\r\n    let field_properties = field_items[\"properties\"]\r\n    let withinArray = true;\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n\r\n    //const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    style={{ height: \"auto\" }}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\", justifySelf: \"center\" }}>\r\n                            {field_label + \" #\" + parseInt(index + 1)}\r\n                        </div>\r\n                        {edit ? <Button onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div style={{ width: \"100%\" }}>\r\n                        {Object.keys(field_properties).map((item, index) => {\r\n                            let tempField = JSON.parse(JSON.stringify(field_properties[item]));\r\n                            if (tempField[\"enum\"]) {\r\n                                tempField[\"enumerate\"] = tempField[\"enum\"]\r\n                            }\r\n                            if (tempField[\"default\"]) {\r\n                                tempField[\"defaultValue\"] = tempField[\"default\"]\r\n                            }\r\n                            return (\r\n                                <div key={item} style={{ display: \"flex\" }}>\r\n                                    <ElementRenderer path={path} pathFormData={pathFormData} withinArray={withinArray} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} fieldId={item} fieldIndex={objectIndex} elementRequired={field_required} edit={false} field={tempField} />\r\n                                </div>\r\n                            )\r\n                        })\r\n                        }\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div >\r\n    </>);\r\n\r\n};\r\n\r\nexport default ItemObjectType;\r\n","import React from 'react';\r\nimport ItemIntegerType from './array_items/ItemIntegerType';\r\nimport ItemNumberType from './array_items/ItemNumberType';\r\nimport ItemStringType from \"./array_items/ItemStringType\";\r\nimport ItemObjectType from \"./array_items/ItemObjectType\";\r\n\r\n\r\nconst ArrayItemRenderer = ({ value, pathSchema, pathFormData, dataInputItems, setDataInputItems, field_label, field_items, path, type, edit, fieldIndex, fieldId, enumerate, handleDeleteArrayItem, properties }) => {\r\n\r\n    switch (type) {\r\n        case 'string':\r\n            return (<ItemStringType\r\n                value={value}\r\n                setDataInputItems={setDataInputItems}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                dataInputItems={dataInputItems}\r\n                path={path}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'number':\r\n            return (<ItemNumberType\r\n                value={value}\r\n                path={path}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'integer':\r\n            return (<ItemIntegerType\r\n                value={value}\r\n                path={path}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'object':\r\n            return (<ItemObjectType\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                field_label={field_label}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                path={path}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n                field_items={field_items}\r\n            />)\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ArrayItemRenderer;\r\n","const generateUID = () => {\r\n    // I generate the UID from two parts here \r\n    // to ensure the random number provide enough bits.\r\n    var firstPart = (Math.random() * 46656) | 0;\r\n    var secondPart = (Math.random() * 46656) | 0;\r\n    firstPart = (\"000\" + firstPart.toString(36)).slice(-3);\r\n    secondPart = (\"000\" + secondPart.toString(36)).slice(-3);\r\n    return firstPart + secondPart;\r\n}\r\n\r\nexport default generateUID;","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ArrayItemRenderer from \"./ArrayItemRenderer\";\r\nimport generateUniqueID from \"../utils/generateUniqueID\";\r\nimport { IconButton } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst ArrayType = ({ value, pathFormData, path, pathSchema, field_required, field_id, field_index, edit, field_label, field_description, field_items, field_prefixItems }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputItems, setInputItems] = useState([]);\r\n    const [dataInputItems, setDataInputItems] = useState([]);\r\n    const [itemSchema, setItemSchema] = useState();\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        if (value !== undefined) {\r\n            if (field_prefixItems === undefined & field_items !== undefined) {\r\n                if (Object.keys(field_items).length === 0) {\r\n                    // create field_items if items is empty\r\n                    let items = [];\r\n                    for (let i = 0; i < value.length; i++) {\r\n                        field_items = { type: \"string\", field_id: `${generateUniqueID()}` }\r\n                        items.push(field_items);\r\n                    }\r\n                    setInputItems(items);\r\n                    setDataInputItems(value);\r\n                } else {\r\n                    // use existing schema if items is not empty\r\n                    let items = [];\r\n                    for (let i = 0; i < value.length; i++) {\r\n                        let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                        newFieldItems[\"field_id\"] = generateUniqueID();\r\n                        items.push(newFieldItems);\r\n                    }\r\n                    setInputItems(items);\r\n                    setDataInputItems(value);\r\n                }\r\n            }\r\n        }\r\n    }, [])\r\n\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n        setInputItems(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems\r\n        const items2 = Array.from(arr2);\r\n        const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n        items2.splice(result.destination.index, 0, reorderedItem2);\r\n        setDataInputItems(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathFormData, \"array\");\r\n\r\n        // conv. schema data\r\n        handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"items\": field_items,\r\n        \"type\": \"array\",\r\n        \"value\": value\r\n    }\r\n\r\n    // handle add array item\r\n    const handleAddArrayItem = () => {\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (Object.keys(field_items).length === 0) {\r\n                // create field_items if items is empty\r\n                field_items = { type: \"string\", field_id: `${generateUniqueID()}` }\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(field_items);\r\n                setInputItems(items);\r\n\r\n                // push a new item for the data\r\n                let arr2 = dataInputItems;\r\n                const items2 = Array.from(arr2);\r\n                items2.push(\"\");\r\n                setDataInputItems(items2)\r\n            } else {\r\n                // use existing schema if items is not empty\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                newFieldItems[\"field_id\"] = generateUniqueID();\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(newFieldItems);\r\n                setInputItems(items);\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    setDataInputItems(items2)\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push({});\r\n                    setDataInputItems(items2)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle delete item\r\n    const handleDeleteArrayItem = (index) => {\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        items.splice(index, 1);\r\n        setInputItems(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems;\r\n        const items2 = Array.from(arr2);\r\n        items2.splice(index, 1);\r\n        setDataInputItems(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathFormData, \"array\");\r\n        // conv. schema data\r\n        handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n    }\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography className={classes.heading}>{field_label + (required ? \"*\" : \"\")}</Typography>\r\n                            {expand ? <div style={{ color: \"gray\" }}>\r\n                                {field_description}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <><Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button></> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(inputItems).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={false} key={inputItems[index][\"field_id\"]} draggableId={inputItems[index][\"field_id\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <DragHandleIcon fontSize=\"small\" />\r\n                                                            </div>\r\n                                                            <ArrayItemRenderer value={value} pathSchema={pathSchema} pathFormData={pathFormData} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} field_label={field_label} field_items={field_items} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path} fieldIndex={index} fieldId={inputItems[index][\"field_id\"]} type={inputItems[index][\"type\"]} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <IconButton onClick={() => { handleAddArrayItem() }} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><AddIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement pathFormData={pathFormData} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default ArrayType;","// convert json schema properties to an iterable array\r\nconst object2array = (propert) => {\r\n    let someArray = [];\r\n    Object.keys(propert).forEach((item) => {\r\n        var tempVariable = {};\r\n        var tempVariable2;\r\n        tempVariable2 = propert[item];\r\n        tempVariable[\"fieldId\"] = item;\r\n        Object.keys(tempVariable2).forEach((item_) => {\r\n            // make enum indexable by changing the key to \"enumerate\"\r\n            if (item_ === \"enum\") {\r\n                tempVariable[\"enumerate\"] = tempVariable2[item_];\r\n            }\r\n            if (item_ === \"default\") {\r\n                tempVariable[\"defaultValue\"] = tempVariable2[item_];\r\n            }\r\n            tempVariable[item_] = tempVariable2[item_];\r\n            if (item_ === \"properties\") {\r\n                // recursive on action to access nested properties\r\n                tempVariable[item_] = object2array(tempVariable2[item_]);\r\n            }\r\n        });\r\n        someArray.push(tempVariable);\r\n    });\r\n\r\n    return someArray;\r\n};\r\n\r\nexport default object2array;","import React, { useState, useContext } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ArrayItemRenderer from \"./ArrayItemRenderer\";\r\nimport generateUniqueID from \"../utils/generateUniqueID\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport ElementRenderer from \"../ElementRenderer\";\r\nimport ObjectType from \"./ObjectType\";\r\nimport object2array from \"../utils/object2array\";\r\nimport getValue from \"../utils/getValue\";\r\nimport set from \"set-value\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst AnyOfKeyword = ({ pathFormData, path, field_required, field_id, field_index, edit, field_label, field_description, field_prefixItems, anyOf_list }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [field_items, setField_items] = useState(Array.isArray(anyOf_list) & anyOf_list[0][\"type\"] === \"array\" ? anyOf_list[0][\"items\"] : anyOf_list[0])\r\n    const [globalIndex, setGlobalIndex] = useState(0);\r\n    const [inputItems, setInputItems] = useState([]);\r\n    const [dataInputItems, setDataInputItems] = useState([]);\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n\r\n    let newPath = path.split(\".\")\r\n    newPath.pop()\r\n    newPath = newPath.join(\".\")\r\n\r\n    let newPathFormData = pathFormData.split(\".\")\r\n    newPathFormData.pop()\r\n    newPathFormData = newPathFormData.join(\".\")\r\n\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    let schemaList = Array(anyOf_list.length).fill().map((x, i) => i)\r\n\r\n    // select existing schema option from anyOf list\r\n    const handleChooseAnyOfSchema = (event) => {\r\n        // reset states\r\n        setDataInputItems([]);\r\n        setInputItems([]);\r\n\r\n        // get rid of the current value everytime the subschema changes\r\n        handleDataDelete(pathFormData)\r\n        let val = getValue(convertedSchema, path)\r\n        delete val[\"value\"]\r\n        set(convertedSchema, path, val)\r\n        console.log(convertedSchema)\r\n        // if properties exist then delete it\r\n        let val2 = getValue(convertedSchema, path)\r\n        if (val2[\"properties\"] !== undefined) {\r\n            delete val2[\"properties\"]\r\n            set(convertedSchema, path, val2)\r\n        }\r\n        // if type exist then delete it\r\n        let val3 = getValue(convertedSchema, path)\r\n        if (val3[\"type\"] !== undefined) {\r\n            delete val3[\"type\"]\r\n            set(convertedSchema, path, val3)\r\n        }\r\n\r\n        const index = parseInt(event.target.value)\r\n        setGlobalIndex(index)\r\n        if (anyOf_list[index][\"type\"] === \"array\") {\r\n            setField_items(anyOf_list[index][\"items\"])\r\n        }\r\n        else if (anyOf_list[index][\"type\"] === \"object\") {\r\n            let prop = object2array(anyOf_list[index][\"properties\"])\r\n            let val = getValue(convertedSchema, path)\r\n            val[\"properties\"] = prop\r\n            val[\"type\"] = \"object\"\r\n            set(convertedSchema, path, val)\r\n            updateParent(convertedSchema)\r\n            setField_items(prop)\r\n        }\r\n        else {\r\n            setField_items(anyOf_list[index])\r\n        }\r\n    }\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n        setInputItems(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems\r\n        const items2 = Array.from(arr2);\r\n        const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n        items2.splice(result.destination.index, 0, reorderedItem2);\r\n        setDataInputItems(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathFormData, \"array\");\r\n        // conv. schema data\r\n        handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    /*\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"items\": field_items,\r\n        \"type\": [anyOf_list[globalIndex][\"type\"]]\r\n    }*/\r\n\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"items\": field_items,\r\n        \"type\": \"anyOf\",\r\n    }\r\n\r\n    // handle add array item\r\n    const handleAddArrayItem = () => {\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (Object.keys(field_items).length === 0) {\r\n                // create field_items if items is empty\r\n                field_items = { type: \"string\", field_id: `${generateUniqueID()}` }\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(field_items);\r\n                setInputItems(items);\r\n\r\n                // push a new item for the data\r\n                let arr2 = dataInputItems;\r\n                const items2 = Array.from(arr2);\r\n                items2.push(\"\");\r\n                setDataInputItems(items2)\r\n            } else {\r\n                // use existing schema if items is not empty\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                newFieldItems[\"field_id\"] = generateUniqueID();\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(newFieldItems);\r\n                setInputItems(items);\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    setDataInputItems(items2)\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push({});\r\n                    setDataInputItems(items2)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle delete item\r\n    const handleDeleteArrayItem = (index) => {\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        items.splice(index, 1);\r\n        setInputItems(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems;\r\n        const items2 = Array.from(arr2);\r\n        items2.splice(index, 1);\r\n        setDataInputItems(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathFormData, \"array\");\r\n        // conv. schema data\r\n        handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n    }\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography className={classes.heading}>{field_label + (required ? \"*\" : \"\")}</Typography>\r\n                            {expand ? <div style={{ color: \"gray\" }}>\r\n                                {field_description}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <><Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button></> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <TextField\r\n                    onChange={(event) => handleChooseAnyOfSchema(event)}\r\n                    style={{ width: \"220px\", marginLeft: \"10px\", marginTop: \"20px\" }}\r\n                    fullWidth={false}\r\n                    select\r\n                    id={\"select-schema\"}\r\n                    label={\"Choose a subschema\"}\r\n                    SelectProps={{ native: true }}\r\n                >\r\n                    {schemaList.map((content, index) => (\r\n                        <option key={index} value={content}>\r\n                            {content}\r\n                        </option>\r\n                    ))}\r\n                </TextField>\r\n                {anyOf_list[globalIndex][\"type\"] === \"array\" ?\r\n                    <AccordionDetails>\r\n                        <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                            <Droppable droppableId=\"subforms\">\r\n                                {(provided) => (\r\n                                    <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                        {Object.keys(inputItems).map((item, index) => {\r\n                                            return (\r\n                                                <Draggable key={inputItems[index][\"field_id\"]} draggableId={inputItems[index][\"field_id\"]} index={index}>\r\n                                                    {(provided) => (\r\n                                                        <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                            <div style={{ display: \"flex\" }}>\r\n                                                                <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                    <DragHandleIcon fontSize=\"small\" />\r\n                                                                </div>\r\n                                                                {/*\r\n                                                                <ArrayItemRenderer field_label={field_label} field_items={inputItems[index]} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path + \".properties\"} fieldIndex={index} fieldId={inputItems[index][\"field_id\"]} type={inputItems[index][\"type\"]} />\r\n                                                                */}\r\n\r\n                                                                <ArrayItemRenderer pathFormData={pathFormData} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} field_label={field_label} field_items={field_items} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path} fieldIndex={index} fieldId={inputItems[index][\"field_id\"]} type={inputItems[index][\"type\"]} />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    )}\r\n                                                </Draggable>\r\n                                            );\r\n                                        })}\r\n                                        {provided.placeholder}\r\n                                        <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                            <IconButton onClick={() => { handleAddArrayItem() }} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><AddIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                        </DragDropContext>\r\n                    </AccordionDetails>\r\n                    :\r\n                    anyOf_list[globalIndex][\"type\"] === \"object\" ?\r\n                        <div style={{ padding: \"10px\" }}>\r\n                            <ObjectType\r\n                                path={path}\r\n                                pathFormData={pathFormData !== undefined ? pathFormData : field_id}\r\n                                field_id={field_id}\r\n                                field_label={undefined}\r\n                                field_description={undefined}\r\n                                field_required={field_required}\r\n                                field_properties={field_items}\r\n                                edit={false}\r\n                            />\r\n                        </div>\r\n                        :\r\n                        <div style={{ padding: \"10px\" }}>\r\n                            <ElementRenderer pathFormData={newPathFormData} path={newPath} fieldId={field_id} fieldIndex={field_index} elementRequired={field_required} edit={false} field={field_items} />\r\n                        </div>}\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement anyOf_list={anyOf_list} pathFormData={pathFormData} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default AnyOfKeyword;","import React from 'react';\r\nimport StringType from \"./elements/StringType\";\r\nimport NumberType from \"./elements/NumberType\";\r\nimport ObjectType from './elements/ObjectType';\r\nimport IntegerType from './elements/IntegerType';\r\nimport BooleanType from './elements/BooleanType';\r\nimport ArrayType from './elements/ArrayType';\r\nimport AnyOfKeyword from './elements/AnyOfKeyword';\r\n\r\n\r\nconst ElementRenderer = ({ dataInputItems, setDataInputItems, withinArray, path, pathSchema, pathFormData, elementRequired, fieldId, fieldIndex, edit, field: { type, title, description, properties, required, enumerate, items, defaultValue, value, anyOf } }) => {\r\n\r\n    switch (type) {\r\n        case 'string':\r\n            return (<StringType\r\n                value={value}\r\n                withinArray={withinArray}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldId}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'number':\r\n            return (<NumberType\r\n                value={value}\r\n                withinArray={withinArray}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldId}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'integer':\r\n            return (<IntegerType\r\n                value={value}\r\n                withinArray={withinArray}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldId}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'boolean':\r\n            return (<BooleanType\r\n                value={value}\r\n                withinArray={withinArray}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldId}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'array':\r\n            return (<ArrayType\r\n                value={value}\r\n                withinArray={withinArray}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldId}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_items={items}\r\n                edit={edit}\r\n            />)\r\n        case 'object':\r\n            if (anyOf !== undefined) {\r\n                return (\r\n                    <AnyOfKeyword\r\n                        pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                        withinArray={withinArray}\r\n                        path={path + \".\" + fieldIndex}\r\n                        field_index={fieldIndex}\r\n                        field_id={fieldId}\r\n                        field_label={title}\r\n                        field_description={description}\r\n                        field_required={elementRequired}\r\n                        anyOf_list={anyOf}\r\n                        edit={edit}\r\n                    />\r\n                )\r\n            } else {\r\n                return (<ObjectType\r\n                    withinArray={withinArray}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldId}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                    field_id={fieldId}\r\n                    field_label={title}\r\n                    field_description={description}\r\n                    field_required={required}\r\n                    field_properties={properties}\r\n                    edit={edit}\r\n                />)\r\n            }\r\n        case undefined:\r\n            if (anyOf) {\r\n                return (\r\n                    <AnyOfKeyword\r\n                        pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                        withinArray={withinArray}\r\n                        path={path + \".\" + fieldIndex}\r\n                        field_index={fieldIndex}\r\n                        field_id={fieldId}\r\n                        field_label={title}\r\n                        field_description={description}\r\n                        field_required={elementRequired}\r\n                        anyOf_list={anyOf}\r\n                        edit={edit}\r\n                    />\r\n                )\r\n            } else {\r\n                return null\r\n            }\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ElementRenderer;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst EditSchemaHeader = ({ schemaID, title, description, schemaURI, openDialog, setOpenDialog }) => {\r\n\r\n    const [_schemaID, _setSchemaID] = useState(schemaID);\r\n    const [_title, _setTitle] = useState(title);\r\n    const [_description, _setDescription] = useState(description);\r\n    const [_schemaURI, _setSchemaURI] = useState(schemaURI);\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n\r\n\r\n\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n\r\n        if (_schemaURI === undefined) {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else if (_schemaURI.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else {\r\n            convertedSchema[\"$schema\"] = _schemaURI\r\n        };\r\n\r\n        if (_schemaID === undefined) {\r\n            delete convertedSchema[\"id\"]\r\n        } else if (_schemaID.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"id\"]\r\n        } else {\r\n            convertedSchema[\"id\"] = _schemaID\r\n        };\r\n\r\n        if (_title === undefined) {\r\n            delete convertedSchema[\"title\"]\r\n        } else if (_title.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"title\"]\r\n        } else {\r\n            convertedSchema[\"title\"] = _title\r\n        };\r\n\r\n        if (_description === undefined) {\r\n            delete convertedSchema[\"description\"]\r\n        } else if (_description.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"description\"]\r\n        } else {\r\n            convertedSchema[\"description\"] = _description\r\n        };\r\n\r\n        updateParent(convertedSchema)\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'title':\r\n                return _setTitle(event.target.value)\r\n            case 'description':\r\n                return _setDescription(event.target.value)\r\n            case 'id':\r\n                return _setSchemaID(event.target.value)\r\n            case 'uri':\r\n                return _setSchemaURI(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        _setDescription(description);\r\n        _setSchemaID(schemaID);\r\n        _setSchemaURI(schemaURI);\r\n        _setTitle(title);\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Edit schema \"{title}\"\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                            <TextField disabled margin='normal' onChange={event => handleChangeUISchema(event, \"id\")} style={{ marginTop: \"20px\" }} defaultValue={schemaURI} variant=\"outlined\" fullWidth={true} label={\"$schema\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"id\")} style={{ marginTop: \"10px\" }} defaultValue={schemaID} variant=\"outlined\" fullWidth={true} label={\"Schema ID\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={title} variant=\"outlined\" fullWidth={true} label={\"Schema Title\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={description} variant=\"outlined\" fullWidth={true} label={\"Schema Description\"} multiline rows={3} />\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditSchemaHeader;","import React, { useContext, useState } from \"react\";\r\n//import { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"./ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from '../FormContext';\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport RevertIvon from \"@material-ui/icons/History\";\r\nimport AddElement from \"./AddElement\";\r\nimport EditSchemaHeader from \"./EditSchemaHeader\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst FormRenderer = ({ revertAllChanges, schema, edit }) => {\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    // deconstruct\r\n    const { properties, title, description, required, $schema, id } = schema ?? {}\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        let value = { ...convertedSchema };\r\n        value[\"properties\"] = items;\r\n        updateParent(value);\r\n    }\r\n\r\n    /*\r\n    console.log(\"converted:\", convertedSchema)\r\n    let deconvertedSchema = JSON.parse(JSON.stringify(convertedSchema))\r\n    deconvertedSchema[\"properties\"] = array2object(convertedSchema[\"properties\"])\r\n    console.log(\"deconverted:\", deconvertedSchema)\r\n    */\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <Typography className={classes.heading} style={{ width: \"100%\" }}>{title}</Typography>\r\n                {edit ? <> <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}> <EditIcon color=\"primary\" /></Button> <Button onClick={() => revertAllChanges()} style={{ marginLeft: \"5px\" }}> <RevertIvon color=\"primary\" /></Button>  </> : null}\r\n            </div>\r\n            <Divider />\r\n            <Typography>{description}</Typography>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"forms\">\r\n                    {(provided) => (\r\n                        <form {...provided.droppableProps} ref={provided.innerRef}>\r\n                            {Object.keys(properties).map((item, index) => {\r\n                                return (\r\n                                    <Draggable isDragDisabled={!edit} key={properties[item][\"fieldId\"]} draggableId={properties[item][\"fieldId\"]} index={index}>\r\n                                        {(provided) => (\r\n                                            <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                <div style={{ display: \"flex\" }}>\r\n                                                    {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                        <DragHandleIcon fontSize=\"small\" />\r\n                                                    </div> : null}\r\n                                                    <ElementRenderer schema={schema} path={\"properties\"} pathSchema={\"properties\"} fieldId={properties[item][\"fieldId\"]} fieldIndex={item} elementRequired={required} edit={edit} field={properties[item]} />\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                );\r\n                            })}\r\n                            {provided.placeholder}\r\n                            {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                            </div> : null}\r\n                        </form>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n        {openDialogAddElement ? <AddElement openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} defaultSchema={defaultSchema} schemaTitle={title} /> : null}\r\n        {openDialog ? <EditSchemaHeader schemaID={id} title={title} description={description} schemaURI={$schema} openDialog={openDialog} setOpenDialog={setOpenDialog} /> : null}\r\n    </>);\r\n};\r\n\r\nexport default FormRenderer;","import React, { useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst JSONSchemaViewer = ({ jsonschema }) => {\r\n    //console.log(\"path:\", path)\r\n    const [expand, setExpand] = useState(false); // set to \"true\" for normally open accordion\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div>\r\n                            <Typography className={classes.heading}>JSON Schema Viewer</Typography>\r\n                        </div>\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div >\r\n                        <pre style={{ overflowX: \"auto\", whiteSpace: \"pre-wrap\", wordWrap: \"break-word\" }}>\r\n                            {JSON.stringify(jsonschema, null, 2)}\r\n                        </pre>\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n    </>);\r\n};\r\n\r\nexport default JSONSchemaViewer;","// convert iterable array to json schema properties\r\nconst array2object = (propert) => {\r\n    var someObject = {};\r\n    propert.forEach((item) => {\r\n        const tempKey = item[\"fieldId\"];\r\n        delete item[\"fieldId\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        Object.keys(tempElements).forEach((item) => {\r\n            // change \"enumerate\" to \"enum\"\r\n            if (item === \"enumerate\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"enumerate\"])\r\n                );\r\n                delete someObject[tempKey][\"enumerate\"];\r\n                someObject[tempKey][\"enum\"] = enumContent;\r\n            }\r\n            if (item === \"defaultValue\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"defaultValue\"])\r\n                );\r\n                delete someObject[tempKey][\"defaultValue\"];\r\n                someObject[tempKey][\"default\"] = enumContent;\r\n            }\r\n            if (item === \"properties\") {\r\n                // some recursion\r\n                someObject[tempKey][\"properties\"] = array2object(\r\n                    someObject[tempKey][\"properties\"]\r\n                );\r\n            }\r\n            if (item === \"value\") {\r\n                delete someObject[tempKey][\"value\"]\r\n            }\r\n        });\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default array2object;","import getValue from \"./getValue\";\r\nimport set from \"set-value\";\r\n\r\n// delete key and value given path\r\nconst deleteKeySchema = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json));\r\n    let pathArray = path.split('.');\r\n\r\n    if (pathArray.length === 1) {\r\n        delete jsonData[pathArray[0]];\r\n    } else {\r\n        let tobeDeleted = pathArray.pop();\r\n        pathArray = pathArray.join(\".\");\r\n        let value = getValue(jsonData, pathArray);\r\n        delete value[tobeDeleted]\r\n        set(jsonData, pathArray, value);\r\n    }\r\n\r\n    return jsonData;\r\n\r\n\r\n};\r\n\r\nexport default deleteKeySchema;","// validate form data against its schema using the Ajv package\r\n\r\n//\r\n// TO DO: since AJV does not really check the nested schemas easily, we must then implement a recursion to check every object type that has subschemas\r\n//      : for both formData and schema\r\n\r\nimport Ajv from \"ajv\";\r\nimport deleteKeySchema from \"./deleteKeySchema\";\r\n\r\nconst validateAgainstSchema = (formData, schema) => {\r\n    const ajv = new Ajv({ allErrors: true });\r\n\r\n    if (schema[\"$schema\"] !== undefined) {\r\n        schema = deleteKeySchema(schema, \"$schema\")\r\n    }\r\n    if (schema[\"id\"] !== undefined) {\r\n        schema = deleteKeySchema(schema, \"id\")\r\n    }\r\n\r\n    const validate = ajv.compile(schema);\r\n    const valid = validate(formData)\r\n\r\n    return [valid, validate];\r\n}\r\n\r\nexport default validateAgainstSchema;","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { Autocomplete } from '@material-ui/lab';\r\n\r\n\r\nconst CreateELabFTWExperimentDialog = ({ getTagsELabFTW, eLabURL, setELabURL, setTags, tags, setRetrievedTags, retrievedTags, setExperimentTitle, setToken, token, setOpenSubmitDialog, openSubmitDialog, createExperimentELabFTW }) => {\r\n\r\n    const onTagsChange = (event, values) => {\r\n        setTags(values);\r\n    };\r\n\r\n    // cancel submit\r\n    const handleCancelEdit = () => {\r\n        setOpenSubmitDialog(false)\r\n        setRetrievedTags([])\r\n        setELabURL(\"\")\r\n        setToken(\"\")\r\n        setTags([])\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openSubmitDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Create eLabFTW Experiment\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">eLabFTW</FormLabel>\r\n                            <TextField required margin='normal' onChange={event => setELabURL(event.target.value)} style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Your eLabFTW main URL\"} />\r\n                            <TextField required margin='normal' onChange={event => setToken(event.target.value)} style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Your eLabFTW token\"} />\r\n                            <TextField margin='normal' onBlur={event => setExperimentTitle(event.target.value)} style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Experiment title\"} />\r\n                            <div style={{ display: 'inline-flex', width: '100%' }}>\r\n                                <Autocomplete\r\n                                    style={{ width: \"100%\" }}\r\n                                    disabled={retrievedTags.length === 0 ? true : false}\r\n                                    multiple\r\n                                    freeSolo\r\n                                    options={retrievedTags}\r\n                                    getOptionLabel={option => option.tag || option}\r\n                                    onChange={onTagsChange}\r\n                                    renderInput={params => (\r\n                                        <TextField\r\n                                            {...params}\r\n                                            disabled={retrievedTags.length === 0 ? true : false}\r\n                                            variant=\"outlined\"\r\n                                            label=\"Tags\"\r\n                                            margin=\"normal\"\r\n                                            style={{ marginTop: \"10px\" }}\r\n                                            helperText='Press the \"GET TAGS\" button to retrieve available tags from your eLabFTW system.Note: you have to provide the eLabFTW main URL and token to enable the button.'\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                {/*<TextField disabled={retrievedTags.length === 0 ? true : false} margin='normal' style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Tags\"} helperText='Press the \"GET TAGS\" button to retrieve available tags from your eLabFTW system. Note: you have to provide the eLabFTW main URL and token to enable the button.' />*/}\r\n                                <Button onClick={() => getTagsELabFTW()} disabled={(token.trim() === \"\" | eLabURL.trim() === \"\") | (token === undefined | eLabURL === undefined) ? true : false} style={{ marginLeft: \"5px\", height: \"55px\", marginTop: \"11px\" }} variant=\"contained\" color=\"primary\">Get Tags</Button>\r\n                            </div>\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={(token.trim() === \"\" | eLabURL.trim() === \"\") | (token === undefined | eLabURL === undefined) ? true : false} onClick={() => createExperimentELabFTW()} color=\"primary\" autoFocus>\r\n                    Create Experiment\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default CreateELabFTWExperimentDialog;","const createDescriptionList = (data) => {\r\n    let descList = \"\";\r\n    const emptyString = (element) => element === \"\";\r\n\r\n    data.forEach(element => {\r\n        if (element[\"path\"] === \"\") {\r\n            descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span style=\"color: #ffffff;\"><a style=\"color: #ffffff;\" title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                } else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                }\r\n            })\r\n            descList += \"</dl>\\n\"\r\n        } else {\r\n            let pathArr = element[\"path\"].split(\".\");\r\n            let titleDiv = \"<div>\"\r\n            pathArr.forEach((item, index) => {\r\n                if (element[\"pathURIs\"] !== undefined & !element[\"pathURIs\"].some(emptyString)) {\r\n                    if (item !== \"\") {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}>${element[\"pathLabels\"][index]}</a>/`\r\n                        }\r\n                    } else {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<strong>${element[\"pathLabels\"][index]}</strong>`\r\n\r\n                        } else {\r\n                            titleDiv += `${element[\"pathLabels\"][index]}/`\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (index === (pathArr.length - 1)) {\r\n                        titleDiv += `<strong>${element[\"pathLabels\"][index]}</strong>`\r\n\r\n                    } else {\r\n                        titleDiv += `${element[\"pathLabels\"][index]}/`\r\n                    }\r\n                }\r\n            })\r\n            titleDiv += \"</div>\\n\"\r\n\r\n            descList += titleDiv\r\n            descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span style=\"color: #ffffff;\"><a style=\"color: #ffffff;\" title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                } else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                }\r\n            })\r\n            descList += \"</dl>\\n\"\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    return descList;\r\n}\r\n\r\nexport default createDescriptionList;","const convData2DescList = (convDataProp) => {\r\n    let someObject = {};\r\n    convDataProp.forEach((item) => {\r\n        const fieldId = item[\"fieldId\"];\r\n        const type = item[\"type\"];\r\n\r\n        if (type === \"object\") {\r\n            someObject[fieldId] = convData2DescList(item[\"properties\"])\r\n        } else {\r\n            if (item[\"value\"] !== undefined) {\r\n                someObject[fieldId] = { value: item[\"value\"] }\r\n                someObject[fieldId][\"label\"] = item[\"title\"]\r\n                someObject[fieldId][\"key\"] = item[\"fieldId\"]\r\n                someObject[fieldId][\"$id\"] = item[\"$id\"]\r\n            }\r\n        }\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default convData2DescList;","const getPaths = (object, value) => {\r\n    return Object\r\n        .keys(object)\r\n        .reduce((r, k) => {\r\n            var kk = Array.isArray(object) ? `[${k}]` : `${k}`;\r\n            if (object[k] === value) {\r\n                r.push(kk);\r\n            }\r\n            if (object[k] && typeof object[k] === 'object') {\r\n                r.push(...getPaths(object[k], value).map(p => kk + (p[0] === '[' ? '' : '.') + p));\r\n            }\r\n            return r;\r\n        }, []);\r\n}\r\n\r\nexport default getPaths;","// get json value in schema given path\r\nconst getValueInSchema = (json, path) => {\r\n    if (path === undefined) {\r\n        return json[\"properties\"]\r\n    }\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    if (path[0] === \"\") {\r\n        return undefined;\r\n    }\r\n    let tempValue = jsonData[\"properties\"]\r\n    for (let i = 0; i < path.length; i++) {\r\n        if (tempValue[\"type\"] === \"object\") {\r\n            tempValue = tempValue[\"properties\"][path[i]]\r\n        } else {\r\n            tempValue = tempValue[path[i]]\r\n        }\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValueInSchema;","import getValueInSchema from \"./getValueInSchema\";\r\n\r\nconst getPathURIsAndLabels = (object, path) => {\r\n\r\n    let pathArr = path.split(\".\")\r\n    let newPath = []\r\n    let uris = []\r\n    let labels = []\r\n    for (let i = 0; i < pathArr.length; i++) {\r\n        newPath.push(pathArr[i])\r\n\r\n        let thePath = JSON.parse(JSON.stringify(newPath));\r\n        thePath = thePath.join(\".\")\r\n        let value = getValueInSchema(object, thePath)\r\n        if (typeof (value) === \"object\") {\r\n            if (value[\"$id\"] !== undefined) {\r\n                uris.push(value[\"$id\"])\r\n            } else {\r\n                uris.push(\"\")\r\n            }\r\n            if (value[\"title\"] !== undefined) {\r\n                labels.push(value[\"title\"])\r\n            } else {\r\n                labels.push(\"\")\r\n            }\r\n        } else {\r\n            uris.push(\"\")\r\n            labels.push(\"\")\r\n        }\r\n    }\r\n\r\n    return [uris, labels];\r\n\r\n}\r\n\r\nexport default getPathURIsAndLabels;","import getPaths from \"./getPaths\";\r\nimport getPathURIsAndLabels from \"./getPathURIsAndLabels\";\r\n\r\n/**\r\n * Get rid of the last two items of each path in pathArr\r\n * @param {*} pathArr \r\n * @returns processedArr\r\n */\r\nconst pathPreProcess = (pathArr) => {\r\n    let processedArr = []\r\n    pathArr.forEach((item) => {\r\n        item = item.split(\".\");\r\n        item.pop();\r\n        item.pop();\r\n        item = item.join(\".\");\r\n        processedArr.push(item)\r\n    })\r\n\r\n    return processedArr\r\n}\r\n\r\nconst preProcessB4DescList = (content, originalContent, originalSchema, arr) => {\r\n\r\n    Object.keys(content).forEach((item) => {\r\n        if (content[item][\"label\"] === undefined) {\r\n            preProcessB4DescList(content[item], originalContent, originalSchema, arr)\r\n        }\r\n        else {\r\n            /*\r\n             a function to get a path of a given a key:attribute pair\r\n            */\r\n            let path_key = getPaths(originalContent, content[item][\"key\"])\r\n            path_key = pathPreProcess(path_key)\r\n            let path_label = getPaths(originalContent, content[item][\"label\"])\r\n            path_label = pathPreProcess(path_label)\r\n            let path = path_key.filter(value => path_label.includes(value));\r\n            let URIsAndLabels = getPathURIsAndLabels(originalSchema, path[0])\r\n\r\n            arr.push({\r\n                \"path\": path[0],\r\n                \"pathURIs\": URIsAndLabels[0],\r\n                \"pathLabels\": URIsAndLabels[1],\r\n                \"key\": content[item][\"key\"],\r\n                \"label\": content[item][\"label\"],\r\n                \"value\": content[item][\"value\"],\r\n                \"$id\": content[item][\"$id\"]\r\n            })\r\n        }\r\n    })\r\n\r\n    return arr;\r\n};\r\n\r\nexport default preProcessB4DescList;","const checkObjectExistance = (arr, path) => {\r\n    let loc = false\r\n    arr.forEach((element, index) => {\r\n        if (element[\"path\"] === path) {\r\n            loc = index\r\n        }\r\n    })\r\n    return loc;\r\n}\r\n\r\nconst nicelySort = (arr) => {\r\n    let sortedArr = []\r\n    arr.forEach(element => {\r\n        // check if an object with element[\"path\"] already exists\r\n        let loc = checkObjectExistance(sortedArr, element[\"path\"])\r\n\r\n        if (loc !== false) {\r\n            let fieldArr = sortedArr[loc][\"fields\"]\r\n            fieldArr.push({ key: element[\"key\"], label: element[\"label\"], value: element[\"value\"], $id: element[\"$id\"] })\r\n        } else {\r\n            // if not then create a new object\r\n            let newObj = {}\r\n            newObj[\"path\"] = element[\"path\"]\r\n            newObj[\"pathURIs\"] = element[\"pathURIs\"]\r\n            newObj[\"pathLabels\"] = element[\"pathLabels\"]\r\n            newObj[\"fields\"] = [{ key: element[\"key\"], label: element[\"label\"], value: element[\"value\"], $id: element[\"$id\"] }]\r\n            //console.log(newObj)\r\n            sortedArr.push(newObj)\r\n        }\r\n    });\r\n\r\n\r\n    return sortedArr;\r\n}\r\n\r\nexport default nicelySort;","// convert iterable array to json schema properties\r\nconst array2objectAnyOf = (propert) => {\r\n    var someObject = {};\r\n    propert.forEach((item) => {\r\n        const tempKey = item[\"fieldId\"];\r\n        delete item[\"fieldId\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        Object.keys(tempElements).forEach((item) => {\r\n            // change \"enumerate\" to \"enum\"\r\n            if (item === \"enumerate\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"enumerate\"])\r\n                );\r\n                delete someObject[tempKey][\"enumerate\"];\r\n                someObject[tempKey][\"enum\"] = enumContent;\r\n            }\r\n            if (item === \"defaultValue\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"defaultValue\"])\r\n                );\r\n                delete someObject[tempKey][\"defaultValue\"];\r\n                someObject[tempKey][\"default\"] = enumContent;\r\n            }\r\n            if (item === \"properties\") {\r\n                if (someObject[tempKey][\"anyOf\"] !== undefined) {\r\n                    delete someObject[tempKey][\"properties\"]\r\n                    delete someObject[tempKey][\"type\"]\r\n                } else {\r\n                    // some recursion\r\n                    someObject[tempKey][\"properties\"] = array2objectAnyOf(\r\n                        someObject[tempKey][\"properties\"]\r\n                    );\r\n                }\r\n            }\r\n            if (item === \"value\") {\r\n                delete someObject[tempKey][\"value\"]\r\n            }\r\n        });\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default array2objectAnyOf;","import React, { useCallback, useState } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport HeaderImage from \"../assets/header-image.png\";\r\nimport FormRenderer from \"../components/FormRenderer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { FormContext } from \"../FormContext\";\r\nimport JSONSchemaViewer from \"../components/JSONSchemaViewer\";\r\nimport array2object from \"../components/utils/array2object\";\r\nimport object2array from \"../components/utils/object2array\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport DownloadIcon from \"@material-ui/icons/GetApp\";\r\nimport set from \"set-value\";\r\nimport getValue from \"../components/utils/getValue\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport deleteKeySchema from \"../components/utils/deleteKeySchema\";\r\nimport validateAgainstSchema from \"../components/utils/validateAgainstSchema\";\r\nimport CreateELabFTWExperimentDialog from \"../components/CreateELabFTWExperimentDialog\";\r\nimport { useEffect } from \"react\";\r\nimport createDescriptionList from \"../components/utils/createDescriptionList\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport convData2DescList from \"../components/utils/convData2DescList\";\r\nimport preProcessB4DescList from \"../components/utils/preProcessB4DescList\";\r\nimport nicelySort from \"../components/utils/nicelySort\";\r\nimport array2objectAnyOf from \"../components/utils/array2objectAnyOf\";\r\nimport SchemaOne from \"../schemas/plasma-mds.json\";\r\nimport SchemaTwo from \"../schemas/pak-schema.json\";\r\nimport SchemaThree from \"../schemas/appj-schema.json\";\r\nimport SchemaFour from \"../schemas/all-types.json\";\r\n\r\n// function that receive the schema and convert it to Form/json data blueprint\r\n// also to already put the default value to this blueprint\r\nconst createFormDataBlueprint = (schemaProperties) => {\r\n  let newObject = {};\r\n\r\n  Object.keys(schemaProperties).forEach((item) => {\r\n    if (schemaProperties[item][\"type\"] !== \"object\") {\r\n      if (schemaProperties[item][\"default\"] !== undefined) {\r\n        newObject[item] = schemaProperties[item][\"default\"];\r\n      } else if (\r\n        (schemaProperties[item][\"default\"] === undefined) &\r\n        (schemaProperties[item][\"enum\"] !== undefined)\r\n      ) {\r\n        newObject[item] = schemaProperties[item][\"enum\"][0];\r\n      } else if (\r\n        (schemaProperties[item][\"type\"] === \"boolean\") &\r\n        (schemaProperties[item][\"default\"] === undefined)\r\n      ) {\r\n        newObject[item] = false;\r\n      }\r\n    } else {\r\n      if (schemaProperties[item][\"properties\"] !== undefined) {\r\n        newObject[item] = createFormDataBlueprint(\r\n          schemaProperties[item][\"properties\"]\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return newObject;\r\n};\r\n\r\n/*\r\n// function to remove empty artributes\r\nconst removeEmpty = (obj) => {\r\n  return Object.fromEntries(\r\n    Object.entries(obj)\r\n      .filter(([_, v]) => (v !== null) & (v !== \"\") & (v !== {}) & (v !== []))\r\n      .map(([k, v]) => [k, v === Object(v) ? removeEmpty(v) : v])\r\n  );\r\n};\r\n*/\r\n\r\n// function to remove empty artributes\r\nconst removeEmpty = (obj) => {\r\n  Object.keys(obj).forEach((key) => {\r\n    if (obj[key] && typeof obj[key] === \"object\") {\r\n      const childObject = removeEmpty(obj[key]);\r\n      if (childObject === undefined) {\r\n        delete obj[key];\r\n      }\r\n    } else if (obj[key] === \"\" || obj[key] === null || obj[key] === undefined) {\r\n      delete obj[key];\r\n    }\r\n  });\r\n  return Object.keys(obj).length > 0 || obj instanceof Array ? obj : undefined;\r\n};\r\n\r\nconst AdamantMain = () => {\r\n  // state management\r\n  const [disable, setDisable] = useState(true);\r\n  const [schemaMessage, setSchemaMessage] = useState(null);\r\n  const [schemaValidity, setSchemaValidity] = useState(false);\r\n  const [schema, setSchema] = useState(null);\r\n  const [schemaIntermediate, setSchemaIntermediate] = useState(null);\r\n  const [renderReady, setRenderReady] = useState(false);\r\n  const [editMode, setEditMode] = useState(true);\r\n  const [schemaList, setSchemaList] = useState([]);\r\n  const [schemaNameList, setSchemaNameList] = useState([]);\r\n  const [selectedSchemaName, setSelectedSchemaName] = useState(\"\");\r\n  const [originalSchema, setOriginalSchema] = useState();\r\n  const [inputMode, setInputMode] = useState(false);\r\n  const [convertedSchema, setConvertedSchema] = useState(null);\r\n  const [createScratchMode, setCreateScratchMode] = useState(false);\r\n  const [jsonData, setJsonData] = useState({});\r\n  const [descriptionList, setDescriptionList] = useState(\"\");\r\n  const [schemaWithValues, setSchemaWithValues] = useState({});\r\n  const [token, setToken] = useState(\"\");\r\n  const [eLabURL, setELabURL] = useState(\"\");\r\n  const [experimentTitle, setExperimentTitle] = useState(\"\");\r\n  const [onlineMode, setOnlineMode] = useState(false);\r\n  const [tags, setTags] = useState([]);\r\n  const [retrievedTags, setRetrievedTags] = useState([]);\r\n  // for dropdown buttons\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [openSubmitDialog, setOpenSubmitDialog] = useState(false);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  }; //\r\n\r\n  // check if the front-end is connected to backend at all\r\n  useEffect(() => {\r\n    let $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"GET\",\r\n      url: \"/adamant/api/check_mode\",\r\n      success: function () {\r\n        console.log(\"Connection to server is established. Online mode\");\r\n        setOnlineMode(true);\r\n        toast.success(\"Connection to server is established. Online mode.\", {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        });\r\n      },\r\n      error: function () {\r\n        console.log(\"Unable to establish connection to server. Offline mode\");\r\n        setOnlineMode(false);\r\n\r\n        // use available schema as a place holder\r\n        setSchemaNameList([\r\n          \"\",\r\n          \"plasma-mds.json\",\r\n          \"pak-schema.json\",\r\n          \"appj-schema.json\",\r\n          \"all-types.json\",\r\n        ]);\r\n        setSchemaList([null, SchemaOne, SchemaTwo, SchemaThree, SchemaFour]);\r\n\r\n        toast.warning(\r\n          \"Unable to establish connection to server. Offline mode.\",\r\n          {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false,\r\n            progress: undefined,\r\n          }\r\n        );\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // get schemas from server when onlinemode is true\r\n  useEffect(() => {\r\n    // if online mode then get available schemas from server\r\n    if (onlineMode === true) {\r\n      // use available schema as a place holder\r\n      setSchemaNameList([\r\n        \"\",\r\n        \"plasma-mds.json\",\r\n        \"pak-schema.json\",\r\n        \"appj-schema.json\",\r\n        \"all-types.json\",\r\n      ]);\r\n      setSchemaList([null, SchemaOne, SchemaTwo, SchemaThree, SchemaFour]);\r\n    }\r\n  }, [onlineMode]);\r\n\r\n  // handle select schema on change\r\n  const handleSelectSchemaOnChange = (event) => {\r\n    // first reset states\r\n    setRenderReady(false);\r\n    setDisable(true);\r\n    setCreateScratchMode(false);\r\n    setJsonData({});\r\n    //\r\n\r\n    console.log(\"selected schema:\", event.target.value);\r\n    setSelectedSchemaName(event.target.value);\r\n\r\n    let selectedSchema = schemaList[schemaNameList.indexOf(event.target.value)];\r\n\r\n    // reset everything when selectedSchema is empty\r\n    if (selectedSchema === null) {\r\n      setDisable(true);\r\n      setRenderReady(false);\r\n      setSchema(null);\r\n      setSchemaValidity(false);\r\n      setSchemaMessage();\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      return;\r\n    }\r\n\r\n    // convert selectedSchema schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n    try {\r\n      convertedSchema[\"properties\"] = object2array(\r\n        selectedSchema[\"properties\"]\r\n      );\r\n\r\n      // update states\r\n      setSchemaValidity(true);\r\n      setSchemaMessage(`${event.target.value} is a valid schema`);\r\n      setSchema(selectedSchema);\r\n      let oriSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n      setOriginalSchema(oriSchema);\r\n      setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n      setConvertedSchema(convertedSchema);\r\n      setEditMode(true);\r\n\r\n      // create form data\r\n      let formData = createFormDataBlueprint(selectedSchema[\"properties\"]);\r\n      setJsonData(formData);\r\n    } catch (error) {\r\n      console.log(error);\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${event.target.value} is invalid`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // function to check if the file accepted is of json format and json schema valid\r\n  const checkSchemaValidity = (schemaFile) => {\r\n    // place holder\r\n    if (schemaFile[0][\"type\"] === \"application/json\") {\r\n      // read the file with FileReadr API\r\n      const reader = new FileReader();\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = () => {\r\n        const binaryStr = reader.result;\r\n        const obj = JSON.parse(binaryStr);\r\n\r\n        // convert obj schema to iterable array properties\r\n        let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n        try {\r\n          convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n          // update states\r\n          setSchemaValidity(true);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is a valid schema`);\r\n          setSchema(obj);\r\n          let oriSchema = JSON.parse(JSON.stringify(obj));\r\n          setOriginalSchema(oriSchema);\r\n          setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n          setConvertedSchema(convertedSchema);\r\n          setEditMode(true);\r\n\r\n          // create form data\r\n          let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n          setJsonData(formData);\r\n        } catch (error) {\r\n          console.log(error);\r\n          // update states\r\n          setSchemaValidity(false);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is invalid`);\r\n          setSchema(null);\r\n        }\r\n      };\r\n      reader.readAsText(schemaFile[0]);\r\n    } else {\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${schemaFile[0][\"name\"]} is of incorrect file type`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // browse or drag&drop schema file\r\n  const onDrop = useCallback(\r\n    (acceptedFile) => {\r\n      // process the schema, validation etc\r\n      checkSchemaValidity(acceptedFile);\r\n\r\n      // store schema file in the state\r\n      // update states\r\n      setRenderReady(false);\r\n      setDisable(true);\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      setSelectedSchemaName(\"\");\r\n    },\r\n    [setRenderReady]\r\n  );\r\n  //\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    multiple: false,\r\n  });\r\n\r\n  // render on-click handle\r\n  const renderOnClick = () => {\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // clear schema on-click handle\r\n  const clearSchemaOnClick = () => {\r\n    setDisable(true);\r\n    setRenderReady(false);\r\n    setSchema(null);\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setCreateScratchMode(false);\r\n  };\r\n\r\n  // create new schema from scratch\r\n  const createSchemaFromScratch = () => {\r\n    // update browse schema render states\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setJsonData({});\r\n    setSelectedSchemaName(\"\");\r\n\r\n    let schemaBlueprint = {\r\n      $schema: \"http://json-schema.org/draft-04/schema#\",\r\n      properties: {},\r\n      type: \"object\",\r\n    };\r\n    const obj = JSON.parse(JSON.stringify(schemaBlueprint));\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n    setJsonData(formData);\r\n\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n    convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n    // update states\r\n    setCreateScratchMode(true);\r\n    setSchema(obj);\r\n    let oriSchema = JSON.parse(JSON.stringify(obj));\r\n    setOriginalSchema(oriSchema);\r\n    setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n    setConvertedSchema(convertedSchema);\r\n    setEditMode(true);\r\n\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // compile on-click handle\r\n  const compileOnClick = () => {\r\n    const value = schema;\r\n    setInputMode(true);\r\n    setSchema(value);\r\n    setEditMode(false);\r\n    setDisable(true);\r\n  };\r\n\r\n  // return to edit mode handle\r\n  const toEditMode = () => {\r\n    const value = schema;\r\n    setInputMode(false);\r\n    setSchema(value);\r\n    setEditMode(true);\r\n    setDisable(false);\r\n  };\r\n\r\n  // update parent (re-render everything)\r\n  const updateParent = (value) => {\r\n    const newValue = { ...value };\r\n\r\n    // update original schema\r\n    const updatedSchema = JSON.parse(JSON.stringify(newValue));\r\n    const tempSchema = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema[\"properties\"] = array2object(tempSchema[\"properties\"]);\r\n\r\n    setConvertedSchema(newValue);\r\n    setSchema(updatedSchema);\r\n\r\n    // update intermediate schema\r\n    const updatedSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    const tempSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema2[\"properties\"] = array2objectAnyOf(tempSchema2[\"properties\"]);\r\n    setSchemaIntermediate(updatedSchema2);\r\n  };\r\n\r\n  // revert all changes to the schema\r\n  const revertAllChanges = () => {\r\n    const value = { ...originalSchema };\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(value));\r\n    convertedSchema[\"properties\"] = object2array(value[\"properties\"]);\r\n    setConvertedSchema(convertedSchema);\r\n    setSchema(value);\r\n    setSchemaWithValues(value);\r\n    setDescriptionList(\"\");\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(value[\"properties\"]);\r\n    setJsonData(formData);\r\n  };\r\n\r\n  // handle data input on blur\r\n  const handleDataInput = (event, path, type) => {\r\n    let jData = { ...jsonData };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(jData, path, value);\r\n    console.log(\"Current form data    (jData):\", jData);\r\n    setJsonData(jData);\r\n  };\r\n  //\r\n\r\n  // handle data input on blur to convertedSchema\r\n  const handleConvertedDataInput = (event, path, type) => {\r\n    let convSchemaData = { ...convertedSchema };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(convSchemaData, path, value);\r\n    setConvertedSchema(convSchemaData);\r\n    //console.log(convSchemaData);\r\n\r\n    // convert to form data\r\n    /*\r\n    console.log(\r\n      \"Current form data (convData):\",\r\n      convData2FormData(\r\n        JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n      )\r\n    );\r\n    */\r\n  };\r\n\r\n  // delete data in jsonData when the field in schema is deleted\r\n  const handleDataDelete = (path) => {\r\n    let jData = { ...jsonData };\r\n    let value = deleteKeySchema(jData, path);\r\n    setJsonData(value);\r\n    console.log(\"Current form data:\", value);\r\n  };\r\n\r\n  // update form data id if a fieldId changes, simply delete key value pair of the oldfieldid from jsonData\r\n  const updateFormDataId = (\r\n    oldFieldId,\r\n    newFieldId,\r\n    pathFormData,\r\n    defaultValue\r\n  ) => {\r\n    if (oldFieldId === newFieldId) {\r\n      return;\r\n    }\r\n    if (defaultValue === undefined) {\r\n      let jData = { ...jsonData };\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    } else {\r\n      let newPathFormData = pathFormData.split(\".\");\r\n      newPathFormData.pop();\r\n      newPathFormData.push(newFieldId);\r\n\r\n      let jData = { ...jsonData };\r\n      let value = getValue(jData, pathFormData);\r\n      set(jData, newPathFormData, value);\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    }\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadJsonSchema = () => {\r\n    let content = { ...schema };\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `jsonschema-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadFormData = () => {\r\n    let content = { ...jsonData };\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, validation] = validateAgainstSchema(content, contentSchema);\r\n    if (!valid) {\r\n      let errorMessages = \"\";\r\n      for (let i = 0; i < validation.errors.length; i++) {\r\n        let currentMessage = validation.errors[i].message + \".\";\r\n        errorMessages += currentMessage + \"\\n\";\r\n      }\r\n      errorMessages = errorMessages.split(\"\\n\");\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {errorMessages.map((item) => {\r\n            return <div>{item}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `formdata-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadDescriptionList = () => {\r\n    let content = { ...jsonData };\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, validation] = validateAgainstSchema(content, contentSchema);\r\n    if (!valid) {\r\n      let errorMessages = \"\";\r\n      for (let i = 0; i < validation.errors.length; i++) {\r\n        let currentMessage = validation.errors[i].message + \".\";\r\n        errorMessages += currentMessage + \"\\n\";\r\n      }\r\n      errorMessages = errorMessages.split(\"\\n\");\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {errorMessages.map((item) => {\r\n            return <div>{item}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    let cleaned = removeEmpty(convData2DescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to download. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    let preProcessed = preProcessB4DescList(cleaned, cleaned, schema, []);\r\n    //console.log(preProcessed);\r\n    let nicelySorted = nicelySort(preProcessed);\r\n    let descList = createDescriptionList(nicelySorted);\r\n    let descListHeading = `<h1><strong>${convSch[\"title\"]}</strong></h1>\\n`;\r\n    descListHeading += descList;\r\n    descListHeading += `<div> This experiment template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>ADAMANT v0.0.1</a></span> </div>`;\r\n    console.log(\"created description list:\\n\", descListHeading);\r\n    setDescriptionList(descList);\r\n\r\n    let sha256_hash = CryptoJS.SHA256(descListHeading);\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([descListHeading], {\r\n      type: \"text/plain\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `desclist-${sha256_hash}.tpl`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // get available tags from elabftw\r\n  const getTagsELabFTW = () => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/adamant/api/get_tags\",\r\n      dataType: \"json\",\r\n      data: {\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n      },\r\n      success: function (status) {\r\n        console.log(\"Tags retrieved successfully\");\r\n        //let arr = [];\r\n        //for (let i = 0; i < status.length; i++) {\r\n        //  arr.push(status[i][\"tag\"]);\r\n        //}\r\n        setRetrievedTags(status);\r\n        toast.success(`Successfully retrieved the tags!`, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        });\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Failed to retrieve tags\");\r\n        console.log(status);\r\n        toast.error(`Failed to get the tags!\\nMaybe wrong url or token?`, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // create an experiment in elabftw based on the schema and data\r\n  const createExperimentELabFTW = () => {\r\n    // validate the data first using ajv\r\n    let content = { ...jsonData };\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, validation] = validateAgainstSchema(\r\n      content,\r\n      JSON.parse(JSON.stringify(contentSchema))\r\n    );\r\n    if (!valid) {\r\n      let errorMessages = \"\";\r\n      for (let i = 0; i < validation.errors.length; i++) {\r\n        let currentMessage = validation.errors[i].message + \".\";\r\n        errorMessages += currentMessage + \"\\n\";\r\n      }\r\n      errorMessages = errorMessages.split(\"\\n\");\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {errorMessages.map((item) => {\r\n            return <div>{item}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      // clear states\r\n      setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    }\r\n\r\n    // call create experiment api\r\n    console.log(\"tags:\", tags);\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/adamant/api/create_experiment\",\r\n      async: false,\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n        title: experimentTitle,\r\n        body: descriptionList,\r\n        tags: JSON.stringify(tags),\r\n      },\r\n      success: function (status) {\r\n        console.log(\"SUCCESS\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenSubmitDialog(false);\r\n        toast.success(\r\n          `Successfully created an experiment with id: ${status[\"experimentId\"]}!`,\r\n          {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false,\r\n            progress: undefined,\r\n          }\r\n        );\r\n\r\n        // clear states\r\n        setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenSubmitDialog(false);\r\n        toast.error(\r\n          `Failed to create an experiment!\\nMaybe wrong url or token?`,\r\n          {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false,\r\n            progress: undefined,\r\n          }\r\n        );\r\n        // clear states\r\n        setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleOnClickProceedButton = () => {\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    let cleaned = removeEmpty(convData2DescList(convSch[\"properties\"]));\r\n    //console.log(cleaned);\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to proceed. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    let preProcessed = preProcessB4DescList(cleaned, cleaned, schema, []);\r\n    //console.log(preProcessed);\r\n    let nicelySorted = nicelySort(preProcessed);\r\n    let descList = createDescriptionList(nicelySorted);\r\n    let descListHeading = `<h1><strong>${convSch[\"title\"]}</strong></h1>\\n`;\r\n    descListHeading += descList;\r\n    descListHeading += `<div> This experiment template was generated with <span ><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>ADAMANT v0.0.1</a></span> </div>`;\r\n    console.log(\"created description list:\\n\", descListHeading);\r\n    setDescriptionList(descListHeading);\r\n\r\n    // validate the data first using ajv\r\n    let content = { ...jsonData };\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, validation] = validateAgainstSchema(content, contentSchema);\r\n    if (!valid) {\r\n      let errorMessages = \"\";\r\n      for (let i = 0; i < validation.errors.length; i++) {\r\n        let currentMessage = validation.errors[i].message + \".\";\r\n        errorMessages += currentMessage + \"\\n\";\r\n      }\r\n      errorMessages = errorMessages.split(\"\\n\");\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {errorMessages.map((item) => {\r\n            return <div>{item}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      // clear states\r\n      setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    } else {\r\n      setOpenSubmitDialog(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormContext.Provider\r\n        value={{\r\n          updateParent,\r\n          convertedSchema,\r\n          handleDataInput,\r\n          updateFormDataId,\r\n          handleDataDelete,\r\n          handleConvertedDataInput,\r\n        }}\r\n      >\r\n        <div style={{ paddingBottom: \"5px\" }}>\r\n          <img\r\n            style={{ width: \"100%\", borderRadius: \"5px\" }}\r\n            alt=\"header\"\r\n            src={HeaderImage}\r\n          />\r\n          {!inputMode ? (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                textAlign: \"left\",\r\n                padding: \"10px 10px 0px 10px\",\r\n              }}\r\n            >\r\n              <Button variant=\"contained\" color=\"primary\" {...getRootProps()}>\r\n                <input {...getInputProps()} />\r\n                {isDragActive ? \"Drop here\" : \"Browse Schema\"}\r\n              </Button>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <TextField\r\n                onChange={(event) => handleSelectSchemaOnChange(event)}\r\n                style={{ width: \"220px\", marginLeft: \"10px\" }}\r\n                fullWidth={false}\r\n                value={selectedSchemaName}\r\n                select\r\n                id={\"select-schema\"}\r\n                label={\"Select existing schema\"}\r\n                variant=\"outlined\"\r\n                SelectProps={{ native: true }}\r\n              >\r\n                {schemaNameList.map((content, index) => (\r\n                  <option key={index} value={content}>\r\n                    {content}\r\n                  </option>\r\n                ))}\r\n              </TextField>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <Button\r\n                onClick={() => createSchemaFromScratch()}\r\n                style={{\r\n                  marginLeft: \"10px\",\r\n                  marginRight: \"10px\",\r\n                }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                CREATE FROM SCRATCH\r\n              </Button>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        {!inputMode ? (\r\n          <div\r\n            style={{\r\n              paddingLeft: \"10px\",\r\n              display: \"flex\",\r\n              width: \"100%\",\r\n              textAlign: \"left\",\r\n            }}\r\n          >\r\n            {schemaValidity === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}. You can now render the form.\r\n                </div>\r\n                <Button\r\n                  style={{ marginRight: \"5px\" }}\r\n                  onClick={() => renderOnClick()}\r\n                  variant=\"outlined\"\r\n                >\r\n                  Render\r\n                </Button>\r\n                <Button\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    paddingTop: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"red\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}\r\n                </div>\r\n              </>\r\n            )}\r\n            {createScratchMode === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  Create from scratch mode. You can now start editing.\r\n                </div>\r\n                <Button\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : null}\r\n          </div>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        {renderReady === true ? (\r\n          <FormRenderer\r\n            revertAllChanges={revertAllChanges}\r\n            schema={convertedSchema}\r\n            edit={editMode}\r\n          />\r\n        ) : null}\r\n        {renderReady === true ? <JSONSchemaViewer jsonschema={schema} /> : null}\r\n        <div\r\n          style={{\r\n            padding: \"10px 10px\",\r\n            display: \"flex\",\r\n            justifyContent: \"right\",\r\n          }}\r\n        >\r\n          {inputMode ? (\r\n            <div style={{ width: \"100%\", display: \"inline-block\" }}>\r\n              <Button\r\n                onClick={() => toEditMode()}\r\n                style={{ float: \"left\", marginRight: \"5px\" }}\r\n                variant=\"outlined\"\r\n              >\r\n                Back to Edit Mode\r\n              </Button>\r\n              <Button\r\n                disabled={!onlineMode}\r\n                onClick={() => handleOnClickProceedButton()}\r\n                style={{ float: \"right\" }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Proceed\r\n              </Button>\r\n              <Button\r\n                style={{ float: \"right\", marginRight: \"5px\" }}\r\n                id=\"demo-positioned-button\"\r\n                aria-controls={open ? \"demo-positioned-menu\" : undefined}\r\n                aria-haspopup=\"true\"\r\n                aria-expanded={open ? \"true\" : undefined}\r\n                onClick={handleClick}\r\n              >\r\n                <DownloadIcon /> Download Schema/Data\r\n              </Button>\r\n              <Menu\r\n                id=\"demo-positioned-menu\"\r\n                aria-labelledby=\"demo-positioned-button\"\r\n                anchorEl={anchorEl}\r\n                open={open}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n                transformOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n              >\r\n                <MenuItem onClick={handleDownloadJsonSchema}>\r\n                  Download JSON Schema\r\n                </MenuItem>\r\n                <MenuItem onClick={handleDownloadFormData}>\r\n                  Download JSON Data\r\n                </MenuItem>\r\n                <MenuItem onClick={handleDownloadDescriptionList}>\r\n                  Download Description List\r\n                </MenuItem>\r\n              </Menu>\r\n            </div>\r\n          ) : (\r\n            <Button\r\n              disabled={disable}\r\n              onClick={() => compileOnClick()}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Compile\r\n            </Button>\r\n          )}\r\n        </div>\r\n        <div style={{ padding: \"5px\" }}>ADAMANT v0.0.1</div>\r\n      </FormContext.Provider>\r\n      <CreateELabFTWExperimentDialog\r\n        setTags={setTags}\r\n        tags={tags}\r\n        setRetrievedTags={setRetrievedTags}\r\n        retrievedTags={retrievedTags}\r\n        setExperimentTitle={setExperimentTitle}\r\n        createExperimentELabFTW={createExperimentELabFTW}\r\n        setToken={setToken}\r\n        token={token}\r\n        setELabURL={setELabURL}\r\n        eLabURL={eLabURL}\r\n        setOpenSubmitDialog={setOpenSubmitDialog}\r\n        openSubmitDialog={openSubmitDialog}\r\n        getTagsELabFTW={getTagsELabFTW}\r\n      />\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdamantMain;\r\n","import React from \"react\";\nimport \"./styles.css\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport AdamantMain from \"./pages/AdamantMain\";\nimport \"cors\";\n\nexport default function App() {\n\n\n  return (\n    /*\n    <div className=\"the_app\">\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/pbb/adamant\" />\n        <Route exact path=\"/pbb/adamant\" component={AdamantMain}></Route>\n      </Switch>\n    </div>\n    */\n    <div className=\"the_app\">\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/adamant\" />\n        <Route exact path=\"/adamant\" component={AdamantMain}></Route>\n      </Switch>\n    </div>\n  );\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n//import { HashRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nconst rootElement = document.getElementById(\"root\");\n\n// strict mode is disabled so that findDOMNode warning is suppressed\nReactDOM.render(\n  <Router>\n    <CssBaseline />\n    <App />\n  </Router>,\n  rootElement\n);\n\n\n/* use this for strict mode, however it always throws the findDOMNode warning\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <CssBaseline />\n      <App />\n    </Router>\n  </React.StrictMode>,\n  rootElement\n);\n*/"],"sourceRoot":""}