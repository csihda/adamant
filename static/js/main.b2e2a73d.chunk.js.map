{"version":3,"sources":["assets/json-file-svgrepo-com.svg","assets/header-image.png","components/utils/getValue.js","components/utils/checkIfFieldIDExist.js","FormContext.js","components/utils/updateRequired.js","components/EditElement.js","components/utils/deleteKey.js","components/elements/StringType.js","components/utils/getUnit.js","components/elements/NumberType.js","components/AddElement.js","components/elements/ObjectType.js","components/elements/IntegerType.js","components/elements/BooleanType.js","components/elements/array_items/ItemIntegerType.js","components/elements/array_items/ItemNumberType.js","components/elements/array_items/ItemStringType.js","components/elements/array_items/ItemObjectType.js","components/elements/ArrayItemRenderer.js","components/utils/generateUniqueID.js","components/elements/ArrayType.js","components/utils/object2array.js","components/elements/AnyOfKeyword.js","components/ElementRenderer.js","components/EditSchemaHeader.js","components/JSONSchemaViewerDialog.js","components/FormRenderer.js","components/utils/array2object.js","components/utils/deleteKeySchema.js","components/utils/validateAgainstSchema.js","components/CreateELabFTWExperimentDialog.js","components/utils/createDescriptionList.js","components/utils/convData2DescList.js","components/utils/getPaths.js","components/utils/getValueInSchema.js","components/utils/getPathURIsAndLabels.js","components/utils/preProcessB4DescList.js","components/utils/nicelySort.js","components/utils/array2objectAnyOf.js","components/utils/fillValueWithEmptyString.js","components/utils/fillForm.js","pages/AdamantMain.jsx","App.js","index.js"],"names":["_g","_g2","_g3","_g4","_g5","_g6","_g7","_g8","_g9","_g10","_g11","_g12","_g13","_g14","_g15","_g16","getValue","json","path","undefined","jsonData","JSON","parse","stringify","split","tempValue","i","length","checkIfFieldIDExist","schema","fieldId","result","forEach","element","value","newPath","pop","join","FormContext","createContext","updateRequired","selectedType","requiredChecked","field_id","convertedSchema","set","require","immediateValue","requiredArray","push","Set","includes","filter","item","EditElement","makeStyles","theme","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","field_uri","enumerated","field_enumerate","field_required","UISchema","pathFormData","openDialog","setOpenDialog","defaultValue","useState","setSelectedType","title","setTitle","setFieldId","fieldUri","setFieldUri","description","setDescription","defValue","setDefValue","useContext","updateParent","updateFormDataId","setRequiredChecked","enumChecked","setEnumChecked","enumList","setEnumList","tempUISchema","notImplemented","handleUpdateSchemaOnClick","toString","replace","existed","alert","newConvertedSchema","newList","Array","isArray","parsed","map","parseInt","parseFloat","handleChangeUISchema","event","keyword","target","handleCancelEdit","handleCheckBoxOnChange","prev","Dialog","open","DialogTitle","id","style","display","verticalAlign","color","alignSelf","IconButton","onClick","Divider","DialogContent","DialogActions","Button","disabled","autoFocus","DialogContentText","component","FormControl","FormLabel","TextField","margin","required","onChange","marginTop","variant","fullWidth","label","helperText","multiline","rows","select","SelectProps","native","content","index","FormControlLabel","control","Checkbox","checked","marginBottom","paddingTop","paddingBottom","FormGroup","deleteKey","elementValue","deleteIndex","at","splice","useStyles","StringType","dataInputItems","setDataInputItems","withinArray","field_index","edit","field_label","field_description","handleDataInput","handleDataDelete","handleConvertedDataInput","fieldValue","setFieldValue","classes","useEffect","handleOnChange","e","handleDeleteElement","handleOnBlur","type","newPathFormData","arr","items","from","onBlur","className","marginLeft","height","getUnit","addorn","match","NumberType","inputValue","setInputValue","unit","handleInputOnChange","inputValueVar","handleInputOnBlur","isNaN","InputProps","endAdornment","InputAdornment","position","tex","String","raw","AddElement","defaultSchema","schemaTitle","inputProps","maxLength","handleOnBlurFieldId","properties","ObjectType","pathSchema","field_properties","openDialogAddElement","setOpenDialogAddElement","expand","setExpand","padding","Accordion","expanded","AccordionSummary","expandIcon","IconButtonProps","Typography","AccordionDetails","onDragEnd","destination","source","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","Object","keys","isDragDisabled","draggableId","draggableProps","dragHandleProps","fieldIndex","elementRequired","field","placeholder","justifyContent","IntegerType","BooleanType","alignItems","paddingLeft","textAlign","FormHelperText","ItemIntegerType","handleDeleteArrayItem","ItemNumberType","field_type","ItemStringType","ItemObjectType","field_items","objectIndex","justifySelf","tempField","ArrayItemRenderer","enumerate","generateUID","firstPart","Math","random","secondPart","slice","ArrayType","field_prefixItems","inputItems","setInputItems","generateUniqueID","newFieldItems","arr2","items2","reorderedItem2","handleAddArrayItem","object2array","propert","someArray","tempVariable2","tempVariable","item_","AnyOfKeyword","anyOf_list","setField_items","globalIndex","setGlobalIndex","schemaList","fill","x","val","console","log","val2","val3","prop","handleChooseAnyOfSchema","ElementRenderer","$id","anyOf","_excluded","_extends","assign","arguments","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgJsonFileSvgrepoCom","_ref","svgRef","titleId","props","xmlns","xmlnsXlink","y","viewBox","enableBackground","xmlSpace","d","points","cx","cy","r","ForwardRef","EditSchemaHeader","schemaID","schemaURI","_schemaID","_setSchemaID","_title","_setTitle","_description","_setDescription","_schemaURI","_setSchemaURI","JSONSchemaViewerDialog","openSchemaViewer","setOpenSchemaViewer","jsonschema","onClose","maxWidth","FormRenderer","revertAllChanges","originalSchema","handleReceivedFormData","onDrop","useCallback","acceptedFile","validity","file","message","checkFormDataValidity","toast","error","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","reader","FileReader","onabort","onerror","onload","binaryStr","obj","readAsText","useDropzone","multiple","getRootProps","getInputProps","$schema","paddingRight","Tooltip","placement","array2object","someObject","tempKey","tempElements","enumContent","deleteKeySchema","pathArray","tobeDeleted","validateAgainstSchema","formData","ajv","Ajv","allErrors","validate","compile","CreateELabFTWExperimentDialog","getTagsELabFTW","eLabURL","setELabURL","setTags","setRetrievedTags","tags","retrievedTags","setExperimentTitle","setToken","token","setOpenSubmitDialog","openSubmitDialog","createExperimentELabFTW","Autocomplete","freeSolo","options","getOptionLabel","option","tag","values","renderInput","params","trim","createDescriptionList","data","descList","emptyString","pathArr","titleDiv","some","convData2DescList","convDataProp","getPaths","object","reduce","k","kk","p","getValueInSchema","getPathURIsAndLabels","uris","labels","thePath","pathPreProcess","processedArr","preProcessB4DescList","originalContent","path_key","path_label","URIsAndLabels","nicelySort","sortedArr","loc","checkObjectExistance","newObj","array2objectAnyOf","fillValueWithEmptyString","jsonObjProp","fillForm","schemaProp","createFormDataBlueprint","schemaProperties","newObject","removeEmpty","AdamantMain","disable","setDisable","schemaMessage","setSchemaMessage","schemaValidity","setSchemaValidity","setSchema","setSchemaIntermediate","renderReady","setRenderReady","editMode","setEditMode","setSchemaList","schemaNameList","setSchemaNameList","selectedSchemaName","setSelectedSchemaName","setOriginalSchema","inputMode","setInputMode","setConvertedSchema","createScratchMode","setCreateScratchMode","setJsonData","descriptionList","setDescriptionList","setSchemaWithValues","experimentTitle","onlineMode","setOnlineMode","anchorEl","setAnchorEl","Boolean","handleClose","ajax","url","success","SchemaOne","SchemaTwo","SchemaThree","SchemaFour","warning","status","sch","schemaFile","oriSchema","checkSchemaValidity","isDragActive","clearSchemaOnClick","Provider","newValue","updatedSchema","tempSchema","updatedSchema2","tempSchema2","jData","oldFieldId","newFieldId","convSchemaData","borderRadius","alt","src","HeaderImage","selectedSchema","handleSelectSchemaOnChange","createSchemaFromScratch","marginRight","toEditMode","float","convSch","convProp","cleaned","preProcessed","nicelySorted","descListHeading","contentSchema","valid","validation","errorMessages","errors","currentMessage","handleOnClickProceedButton","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","sha256_hash","CryptoJS","SHA256","a","document","createElement","Blob","href","URL","createObjectURL","download","click","compileOnClick","async","dataType","javascript_data","eLabToken","body","App","exact","to","rootElement","getElementById","ReactDOM","render","CssBaseline"],"mappings":"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","file":"static/js/main.b2e2a73d.chunk.js","sourcesContent":["var _g, _g2, _g3, _g4, _g5, _g6, _g7, _g8, _g9, _g10, _g11, _g12, _g13, _g14, _g15, _g16;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgJsonFileSvgrepoCom(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Capa_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 58 58\",\n    style: {\n      enableBackground: \"new 0 0 58 58\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M50.949,12.187l-1.361-1.361l-9.504-9.505c-0.001-0.001-0.001-0.001-0.002-0.001l-0.77-0.771 C38.957,0.195,38.486,0,37.985,0H8.963C7.776,0,6.5,0.916,6.5,2.926V39v16.537V56c0,0.837,0.841,1.652,1.836,1.909 c0.051,0.014,0.1,0.033,0.152,0.043C8.644,57.983,8.803,58,8.963,58h40.074c0.16,0,0.319-0.017,0.475-0.048 c0.052-0.01,0.101-0.029,0.152-0.043C50.659,57.652,51.5,56.837,51.5,56v-0.463V39V13.978C51.5,13.211,51.407,12.644,50.949,12.187 z M39.5,3.565L47.935,12H39.5V3.565z M8.963,56c-0.071,0-0.135-0.025-0.198-0.049C8.61,55.877,8.5,55.721,8.5,55.537V41h41v14.537 c0,0.184-0.11,0.34-0.265,0.414C49.172,55.975,49.108,56,49.037,56H8.963z M8.5,39V2.926C8.5,2.709,8.533,2,8.963,2h28.595 C37.525,2.126,37.5,2.256,37.5,2.391V13.78c-0.532-0.48-1.229-0.78-2-0.78c-0.553,0-1,0.448-1,1s0.447,1,1,1c0.552,0,1,0.449,1,1v4 c0,1.2,0.542,2.266,1.382,3c-0.84,0.734-1.382,1.8-1.382,3v4c0,0.551-0.448,1-1,1c-0.553,0-1,0.448-1,1s0.447,1,1,1 c1.654,0,3-1.346,3-3v-4c0-1.103,0.897-2,2-2c0.553,0,1-0.448,1-1s-0.447-1-1-1c-1.103,0-2-0.897-2-2v-4 c0-0.771-0.301-1.468-0.78-2h11.389c0.135,0,0.265-0.025,0.391-0.058c0,0.015,0.001,0.021,0.001,0.036V39H8.5z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.354,51.43c-0.019,0.446-0.171,0.764-0.458,0.95s-0.672,0.28-1.155,0.28c-0.191,0-0.396-0.022-0.615-0.068 s-0.429-0.098-0.629-0.157s-0.385-0.123-0.554-0.191s-0.299-0.135-0.39-0.198l-0.697,1.107c0.183,0.137,0.405,0.26,0.67,0.369 s0.54,0.207,0.827,0.294s0.565,0.15,0.834,0.191s0.504,0.062,0.704,0.062c0.401,0,0.791-0.039,1.169-0.116 c0.378-0.077,0.713-0.214,1.005-0.41s0.524-0.456,0.697-0.779s0.26-0.723,0.26-1.196v-7.848h-1.668V51.43z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M25.083,49.064c-0.314-0.228-0.654-0.422-1.019-0.581s-0.702-0.323-1.012-0.492s-0.569-0.364-0.779-0.588 s-0.314-0.518-0.314-0.882c0-0.146,0.036-0.299,0.109-0.458s0.173-0.303,0.301-0.431s0.273-0.234,0.438-0.321 s0.337-0.139,0.52-0.157c0.328-0.027,0.597-0.032,0.807-0.014s0.378,0.05,0.506,0.096s0.226,0.091,0.294,0.137 s0.13,0.082,0.185,0.109c0.009-0.009,0.036-0.055,0.082-0.137s0.101-0.185,0.164-0.308s0.132-0.255,0.205-0.396 s0.137-0.271,0.191-0.39c-0.265-0.173-0.61-0.299-1.039-0.376s-0.853-0.116-1.271-0.116c-0.41,0-0.8,0.063-1.169,0.191 s-0.692,0.313-0.971,0.554s-0.499,0.535-0.663,0.882S20.4,46.13,20.4,46.576c0,0.492,0.104,0.902,0.314,1.23 s0.474,0.613,0.793,0.854s0.661,0.451,1.025,0.629s0.704,0.355,1.019,0.533s0.576,0.376,0.786,0.595s0.314,0.483,0.314,0.793 c0,0.511-0.148,0.896-0.444,1.155s-0.723,0.39-1.278,0.39c-0.183,0-0.378-0.019-0.588-0.055s-0.419-0.084-0.629-0.144 s-0.412-0.123-0.608-0.191s-0.357-0.139-0.485-0.212l-0.287,1.176c0.155,0.137,0.34,0.253,0.554,0.349s0.439,0.171,0.677,0.226 c0.237,0.055,0.472,0.094,0.704,0.116s0.458,0.034,0.677,0.034c0.511,0,0.966-0.077,1.367-0.232s0.738-0.362,1.012-0.622 s0.485-0.561,0.636-0.902s0.226-0.695,0.226-1.06c0-0.538-0.104-0.978-0.314-1.319S25.397,49.292,25.083,49.064z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.872,45.072c-0.378-0.429-0.82-0.754-1.326-0.978s-1.06-0.335-1.661-0.335s-1.155,0.111-1.661,0.335 s-0.948,0.549-1.326,0.978s-0.675,0.964-0.889,1.606s-0.321,1.388-0.321,2.235s0.107,1.595,0.321,2.242s0.511,1.185,0.889,1.613 s0.82,0.752,1.326,0.971s1.06,0.328,1.661,0.328s1.155-0.109,1.661-0.328s0.948-0.542,1.326-0.971s0.675-0.966,0.889-1.613 s0.321-1.395,0.321-2.242s-0.107-1.593-0.321-2.235S35.25,45.501,34.872,45.072z M34.195,50.698 c-0.137,0.487-0.326,0.882-0.567,1.183s-0.515,0.518-0.82,0.649s-0.627,0.198-0.964,0.198c-0.328,0-0.641-0.07-0.937-0.212 s-0.561-0.364-0.793-0.67s-0.415-0.699-0.547-1.183s-0.203-1.066-0.212-1.75c0.009-0.702,0.082-1.294,0.219-1.777 c0.137-0.483,0.326-0.877,0.567-1.183s0.515-0.521,0.82-0.649s0.627-0.191,0.964-0.191c0.328,0,0.641,0.068,0.937,0.205 s0.561,0.36,0.793,0.67s0.415,0.704,0.547,1.183s0.203,1.06,0.212,1.743C34.405,49.616,34.332,50.211,34.195,50.698z\"\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"44.012,50.869 40.061,43.924 38.393,43.924 38.393,54 40.061,54 40.061,47.055 44.012,54 45.68,54 45.68,43.924  44.012,43.924  \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20.5,20v-4c0-0.551,0.448-1,1-1c0.553,0,1-0.448,1-1s-0.447-1-1-1c-1.654,0-3,1.346-3,3v4c0,1.103-0.897,2-2,2 c-0.553,0-1,0.448-1,1s0.447,1,1,1c1.103,0,2,0.897,2,2v4c0,1.654,1.346,3,3,3c0.553,0,1-0.448,1-1s-0.447-1-1-1 c-0.552,0-1-0.449-1-1v-4c0-1.2-0.542-2.266-1.382-3C19.958,22.266,20.5,21.2,20.5,20z\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 28.5,\n    cy: 19.5,\n    r: 1.5\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M28.5,25c-0.553,0-1,0.448-1,1v3c0,0.552,0.447,1,1,1s1-0.448,1-1v-3C29.5,25.448,29.053,25,28.5,25z\"\n  }))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", null)), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", null)), _g4 || (_g4 = /*#__PURE__*/React.createElement(\"g\", null)), _g5 || (_g5 = /*#__PURE__*/React.createElement(\"g\", null)), _g6 || (_g6 = /*#__PURE__*/React.createElement(\"g\", null)), _g7 || (_g7 = /*#__PURE__*/React.createElement(\"g\", null)), _g8 || (_g8 = /*#__PURE__*/React.createElement(\"g\", null)), _g9 || (_g9 = /*#__PURE__*/React.createElement(\"g\", null)), _g10 || (_g10 = /*#__PURE__*/React.createElement(\"g\", null)), _g11 || (_g11 = /*#__PURE__*/React.createElement(\"g\", null)), _g12 || (_g12 = /*#__PURE__*/React.createElement(\"g\", null)), _g13 || (_g13 = /*#__PURE__*/React.createElement(\"g\", null)), _g14 || (_g14 = /*#__PURE__*/React.createElement(\"g\", null)), _g15 || (_g15 = /*#__PURE__*/React.createElement(\"g\", null)), _g16 || (_g16 = /*#__PURE__*/React.createElement(\"g\", null)));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgJsonFileSvgrepoCom);\nexport default __webpack_public_path__ + \"static/media/json-file-svgrepo-com.805d27de.svg\";\nexport { ForwardRef as ReactComponent };","export default __webpack_public_path__ + \"static/media/header-image.37bfe931.png\";","// get json value given path\r\nconst getValue = (json, path) => {\r\n    if (path === undefined) {\r\n        return json[\"properties\"]\r\n    }\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValue;","import getValue from \"./getValue\";\r\nconst checkIfFieldIDExist = (schema, path, fieldId) => {\r\n    let result\r\n    if (path === undefined) {\r\n        let value = schema[\"properties\"]\r\n        value.forEach(element => {\r\n            if (element[\"fieldId\"] === fieldId) {\r\n                return result = true;\r\n            }\r\n        });\r\n    } else {\r\n\r\n        let value = getValue(schema, path)[\"properties\"]\r\n\r\n        if (value === undefined) {\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n            let value = getValue(schema, newPath)\r\n            value.forEach(element => {\r\n                if (element[\"fieldId\"] === fieldId) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        } else {\r\n            value.forEach(element => {\r\n                if (element[\"fieldId\"] === fieldId) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    if (result) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n\r\n}\r\n\r\nexport default checkIfFieldIDExist;","import { createContext } from 'react';\r\nexport const FormContext = createContext(null);","/*\r\nFunction to add or remove \"required\" flag for a specific field\r\n*/\r\n\r\n\r\n// get json value given path\r\nconst getValue = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n}\r\n\r\nconst updateRequired = ({ selectedType, path, requiredChecked, field_id, convertedSchema }) => {\r\n\r\n    if (selectedType === \"object\") {\r\n        requiredChecked = false\r\n    }\r\n\r\n    const set = require(\"set-value\");\r\n\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const immediateValue = getValue(convertedSchema, newPath)\r\n    if (immediateValue !== undefined) {\r\n        // check if there is required array\r\n        if (immediateValue[\"required\"] !== undefined) {\r\n            let requiredArray = immediateValue[\"required\"]\r\n            if (requiredChecked) {\r\n                requiredArray.push(field_id)\r\n                requiredArray = [...new Set(requiredArray)]\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            } else {\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_id)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_id)\r\n                    set(convertedSchema, newPath + \".required\", requiredArray)\r\n\r\n                    if (requiredArray.length === 0) {\r\n                        delete immediateValue[\"required\"]\r\n                        set(convertedSchema, newPath, immediateValue)\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_id}`]\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            }\r\n        }\r\n    } else {\r\n        // check if there is required array\r\n        if (convertedSchema[\"required\"] !== undefined) {\r\n            let requiredArray = convertedSchema[\"required\"]\r\n            if (requiredChecked) {\r\n                requiredArray.push(field_id)\r\n                requiredArray = [...new Set(requiredArray)]\r\n                convertedSchema[\"required\"] = requiredArray\r\n            } else {\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_id)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_id)\r\n                    convertedSchema[\"required\"] = requiredArray\r\n                    if (requiredArray.length === 0) {\r\n                        delete convertedSchema[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_id}`]\r\n                convertedSchema[\"required\"] = requiredArray\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return convertedSchema;\r\n}\r\n\r\nexport default updateRequired;","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport checkIfFieldIDExist from './utils/checkIfFieldIDExist';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport { FormGroup } from '@material-ui/core';\r\nimport updateRequired from './utils/updateRequired';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\nconst EditElement = ({ field_uri, enumerated, field_enumerate, field_required, field_id, UISchema, path, pathFormData, openDialog, setOpenDialog, defaultValue }) => {\r\n\r\n    const [selectedType, setSelectedType] = useState(UISchema[\"type\"])\r\n    const [title, setTitle] = useState(UISchema[\"title\"])\r\n    const [fieldId, setFieldId] = useState(UISchema[\"fieldId\"])\r\n    const [fieldUri, setFieldUri] = useState(UISchema[\"$id\"])\r\n    const [description, setDescription] = useState(UISchema[\"description\"])\r\n    const [defValue, setDefValue] = useState(defaultValue)\r\n    const { updateParent, convertedSchema, updateFormDataId } = useContext(FormContext);\r\n    const [requiredChecked, setRequiredChecked] = useState(field_required === undefined ? false : field_required)\r\n    const [enumChecked, setEnumChecked] = useState(enumerated === undefined ? false : enumerated)\r\n    const [enumList, setEnumList] = useState(field_enumerate === undefined ? [] : field_enumerate);\r\n\r\n    let tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n\r\n    let notImplemented = false;\r\n    if (![\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\"].includes(UISchema[\"type\"])) {\r\n        notImplemented = true;\r\n    }\r\n\r\n\r\n    const datatypes = [\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\"]\r\n\r\n\r\n    const handleOnChangeListField = (event) => {\r\n        setEnumList(event.target.value);\r\n    }\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        // update default value\r\n        if (defValue === undefined & defaultValue === undefined) {\r\n            // do nothing\r\n        } else if (defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n            // do nothing\r\n        } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n            // do nothing\r\n        } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') !== \"\" & defaultValue !== undefined) {\r\n            tempUISchema[\"defaultValue\"] = (defValue === \"true\")\r\n        } else if (defValue.toString().replace(/\\s+/g, '') === \"\") {\r\n            delete tempUISchema[\"defaultValue\"]\r\n        }\r\n        else {\r\n            tempUISchema[\"defaultValue\"] = defValue\r\n        };\r\n\r\n        // check if fieldId already exist\r\n        let existed = checkIfFieldIDExist(convertedSchema, path, fieldId)\r\n        if (UISchema[\"fieldId\"] !== fieldId) {\r\n            if (existed) {\r\n                alert(\"Field ID already exists!\")\r\n                return\r\n            }\r\n        }\r\n\r\n        if (fieldId === undefined | fieldId.replace(/\\s+/g, '') === \"\") {\r\n            alert(\"Field ID must be defined!\")\r\n            return\r\n        }\r\n\r\n        tempUISchema[\"fieldId\"] = fieldId;\r\n        if (fieldUri !== undefined) {\r\n            if (fieldUri.toString().replace(/\\s+/g, '') !== \"\") {\r\n                tempUISchema[\"$id\"] = fieldUri\r\n            }\r\n        }\r\n        tempUISchema[\"type\"] = selectedType;\r\n        if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n        if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n        if (tempUISchema[\"type\"] === \"object\" & tempUISchema[\"properties\"] === undefined) {\r\n            tempUISchema[\"properties\"] = []\r\n        }\r\n        if (tempUISchema[\"type\"] === \"array\" & tempUISchema[\"items\"] === undefined) {\r\n            tempUISchema[\"items\"] = {}\r\n        }\r\n        if (![\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"])) {\r\n            setEnumChecked(false);\r\n        }\r\n        const set = require(\"set-value\");\r\n        set(convertedSchema, path, tempUISchema)\r\n        // update the required value\r\n        const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_id, convertedSchema })\r\n        // update enum\r\n        if ([\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"]) & enumChecked) {\r\n            let newList = enumList\r\n\r\n            switch (tempUISchema[\"type\"]) {\r\n                case 'string':\r\n                    if (Array.isArray(newList)) {\r\n                        set(newConvertedSchema, path + \".enumerate\", newList)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                    }\r\n                case 'integer':\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    }\r\n                case 'number':\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    }\r\n            }\r\n        }\r\n        // update main component\r\n        updateParent(newConvertedSchema)\r\n        setOpenDialog(false)\r\n\r\n        //* update form data if fieldId change\r\n        // update pathFormData with new fieldId\r\n        updateFormDataId(field_id, fieldId, pathFormData, defaultValue)\r\n\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'type':\r\n                return setSelectedType(event.target.value)\r\n            case 'title':\r\n                return setTitle(event.target.value)\r\n            case 'description':\r\n                return setDescription(event.target.value)\r\n            case 'fieldId':\r\n                return setFieldId(event.target.value.replace(/ /g, \"_\"))\r\n            case 'defaultValue':\r\n                return setDefValue(event.target.value)\r\n            case '$id':\r\n                return setFieldUri(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n        setOpenDialog(false)\r\n        setEnumList(field_enumerate)\r\n        setDefValue(defaultValue)\r\n        setSelectedType(UISchema[\"type\"])\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleCheckBoxOnChange = () => {\r\n        setRequiredChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleEnumBoxOnChange = () => {\r\n        setEnumChecked(prev => !prev)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {notImplemented ?\r\n                <Dialog\r\n                    open={openDialog}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">\r\n                        <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                            <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                                Edit \"{tempUISchema[\"title\"]}\"\r\n                            </div>\r\n                            <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        We are sorry! Editing feature for the \"{UISchema[\"type\"]}\" type/keyword is not yet implemented.\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button disabled onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                :\r\n                <Dialog\r\n                    open={openDialog}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">\r\n                        <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                            <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                                Edit \"{tempUISchema[\"title\"]}\"\r\n                            </div>\r\n                            <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                            <div>\r\n                                <FormControl component=\"widget-type\">\r\n                                    <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                                    <TextField margin=\"normal\" required onChange={event => handleChangeUISchema(event, \"fieldId\")} style={{ marginTop: \"20px\" }} defaultValue={field_id} variant=\"outlined\" fullWidth={true} label={\"Field Key\"} helperText='A unique json key for this field. Usually short and no spaces (use \"_\" instead). Spaces are replaced automatically with \"_\" upon saving.' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"$id\")} style={{ marginTop: \"10px\" }} defaultValue={field_uri} variant=\"outlined\" fullWidth={true} label={\"Field ID/URI\"} helperText='ID or URI for this field if available.' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"title\"]} variant=\"outlined\" fullWidth={true} label={\"Field Title\"} helperText='Label or title of the field. For a field that requires a unit, the unit can be placed within a square bracket, e,g., \"Chamber Pressure [Pa]\".' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"description\"]} variant=\"outlined\" fullWidth={true} label={\"Field Description\"} multiline rows={3} helperText='A detailed description of the field, how the input should be formated, etc.' />\r\n                                    <TextField\r\n                                        margin=\"normal\"\r\n                                        helperText='Data type of the field input.'\r\n                                        onChange={event => handleChangeUISchema(event, \"type\")}\r\n                                        style={{ marginTop: \"10px\" }}\r\n                                        defaultValue={tempUISchema[\"type\"]}\r\n                                        select\r\n                                        fullWidth={true}\r\n                                        id={field_id}\r\n                                        label={\"Field Data Type\"}\r\n                                        variant=\"outlined\"\r\n                                        SelectProps={{\r\n                                            native: true,\r\n                                        }}\r\n                                    >\r\n                                        {datatypes.map((content, index) => (\r\n                                            <option key={index} value={content}>\r\n                                                {content}\r\n                                            </option>\r\n                                        ))}\r\n                                    </TextField>\r\n                                    {[\"string\", \"integer\", \"number\"].includes(selectedType) ?\r\n                                        <>\r\n                                            <FormControlLabel control={<Checkbox onChange={() => handleEnumBoxOnChange()} checked={enumChecked} />} label=\"Enumerated. Choose from an available list of inputs.\" />\r\n                                            <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\r\n                                                {enumChecked ? <TextField defaultValue={enumList !== undefined ? enumList : \"\"} onChange={handleOnChangeListField} variant=\"outlined\" fullWidth={true} label=\"Enumerate List\" multiline rows={4} helperText=\"A list of inputs separated by commas, e,g.: item 1, item 2, item 3. Make sure that the item data type matches the field input data type. Invalid items will be replaced with NaN upon saving.\" /> : null}\r\n                                            </div>\r\n                                        </> : null}\r\n                                </FormControl>\r\n                                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\" }}>\r\n                                    <FormControl component=\"validation-related\">\r\n                                        <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Validation Related:</FormLabel>\r\n                                    </FormControl>\r\n                                    <FormGroup>\r\n                                        {selectedType === \"array\" ?\r\n                                            <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                            : null}\r\n                                        {selectedType !== \"object\" & selectedType !== \"array\" & selectedType !== \"boolean\" ?\r\n                                            <>\r\n                                                <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                                <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"defaultValue\")} style={{ marginTop: \"10px\" }} defaultValue={defaultValue} variant=\"outlined\" fullWidth={true} label={\"Field Default Value\"} helperText=\"Initial value of the field.\" />\r\n                                            </>\r\n                                            : null}\r\n                                        {selectedType === \"boolean\" ?\r\n                                            <>\r\n                                                <TextField\r\n                                                    margin='normal'\r\n                                                    onChange={event => handleChangeUISchema(event, \"defaultValue\")}\r\n                                                    style={{ marginTop: \"20px\" }}\r\n                                                    defaultValue={defaultValue !== undefined ? defaultValue : \"\"}\r\n                                                    select\r\n                                                    fullWidth={true}\r\n                                                    id={field_id}\r\n                                                    label={\"Boolean Field Default Value\"}\r\n                                                    variant=\"outlined\"\r\n                                                    SelectProps={{\r\n                                                        native: true,\r\n                                                    }}\r\n                                                >\r\n                                                    {[\"\", \"true\", \"false\"].map((content, index) => (\r\n                                                        <option key={index} value={content}>\r\n                                                            {content}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </TextField>\r\n                                            </>\r\n                                            : null}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditElement;","import getValue from \"./getValue\";\r\n\r\n// delete key and value given path\r\nconst deleteKey = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const elementValue = getValue(jsonData, newPath);\r\n\r\n    if (Array.isArray(elementValue)) {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        elementValue.splice(parseInt(deleteIndex), 1)\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    } else {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        delete elementValue[deleteIndex]\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    }\r\n\r\n};\r\n\r\nexport default deleteKey;","import React, { useContext, useEffect, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst StringType = ({ field_uri, dataInputItems, setDataInputItems, withinArray, path, pathFormData, field_required, field_index, edit, field_id, field_label, field_description, field_enumerate, defaultValue, value }) => {\r\n\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [fieldValue, setFieldValue] = useState(defaultValue !== undefined ? defaultValue : value !== undefined ? value : \"\")\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (value === undefined) {\r\n            setFieldValue(\"\")\r\n        } else {\r\n            setFieldValue(value)\r\n        }\r\n    }, [value])\r\n\r\n    const handleOnChange = (event) => {\r\n        setFieldValue(event.target.value)\r\n    }\r\n\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"string\",\r\n        \"value\": value,\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle on blur\r\n    const handleOnBlur = (event, pathFormData, type) => {\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = event.target.value;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let value = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(value, newPathFormData, \"string\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(value, newPath + \".value\", \"string\")\r\n\r\n            // update field value\r\n            setFieldValue(event.target.value)\r\n        } else {\r\n            handleDataInput(event, pathFormData, type)\r\n            // conv. schema data\r\n            handleConvertedDataInput(event, path + \".value\", \"string\")\r\n            // update field value\r\n            setFieldValue(event.target.value)\r\n        }\r\n    }\r\n\r\n\r\n    // if enumerate and no defaultValue then already store the first enumerate value to form data\r\n    // this is for any enumerate in a subschema (e.g., in anyOf), for the rest of enumerate is taken care of in AdamantMain.jsx\r\n    useEffect(() => {\r\n        if (field_enumerate !== undefined & withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = field_enumerate[0];\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(event, newPathFormData, \"string\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(event, newPath + \".value\", \"string\")\r\n            // update field value\r\n            setFieldValue(field_enumerate[0])\r\n        } else if (field_enumerate !== undefined & withinArray === undefined) {\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        field_enumerate[0]\r\n                }\r\n            }\r\n            handleDataInput(event, pathFormData, \"string\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(event, path + \".value\", \"string\")\r\n            // update field value\r\n            setFieldValue(field_enumerate[0])\r\n        } else if (field_enumerate === undefined & withinArray === undefined & defaultValue !== undefined) {\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        defaultValue\r\n                }\r\n            }\r\n            handleDataInput(event, pathFormData, \"string\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(event, path + \".value\", \"string\")\r\n            // update field value\r\n            setFieldValue(defaultValue)\r\n        } else if (field_enumerate === undefined & withinArray !== undefined & defaultValue !== undefined) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = defaultValue;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(event, newPathFormData, \"string\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(event, newPath + \".value\", \"string\")\r\n            // update field value\r\n            setFieldValue(defaultValue)\r\n        }\r\n    }, [])\r\n\r\n    if (field_enumerate === undefined) {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onBlur={(event) => handleOnBlur(event, pathFormData, \"string\")} required={required} helperText={field_description} onChange={(event) => { handleOnChange(event) }} value={fieldValue} fullWidth={true} className={classes.heading} id={field_id} label={field_label} variant=\"outlined\" />\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} defaultValue={defaultValue} enumerated={enumerated} field_enumerate={field_enumerate} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    < TextField\r\n                        onBlur={(event) => handleOnBlur(event, pathFormData, \"string\")}\r\n                        onChange={event => handleOnChange(event)}\r\n                        required={required}\r\n                        select\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_id}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }\r\n                        }\r\n                        helperText={field_description}\r\n                        value={fieldValue === undefined ? defaultValue : fieldValue}\r\n                    >\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField >\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div >\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} enumerated={enumerated} defaultValue={defaultValue} field_enumerate={field_enumerate} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default StringType;\r\n","const getUnit = (field_label) => {\r\n\r\n    if (field_label === undefined) {\r\n        return \"\"\r\n    }\r\n\r\n    let addorn = field_label.match(/[^[\\]]+(?=])/g)\r\n    if (addorn === null) {\r\n        return \"\"\r\n    } else {\r\n        return addorn\r\n    }\r\n}\r\n\r\nexport default getUnit;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { InputAdornment } from '@material-ui/core';\r\nimport getUnit from '../utils/getUnit';\r\nimport { MathComponent } from 'mathjax-react'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst NumberType = ({ field_uri, value, dataInputItems, setDataInputItems, withinArray, path, pathFormData, defaultValue, field_required, field_index, edit, field_id, field_label, field_description, field_enumerate }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue !== undefined & value === undefined ? defaultValue : value === undefined ? \"\" : value)//useState(defaultValue !== undefined ? defaultValue : value)\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (value === undefined) {\r\n            setInputValue(\"\")\r\n        } else {\r\n            setInputValue(value)\r\n        }\r\n    }, [value])\r\n\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"number\",\r\n        \"value\": value,\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_id] = value;\r\n                setDataInputItems(items);\r\n\r\n                // store to the main form data\r\n                handleDataInput(items, newPathFormData, \"number\")\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, newPath + \".value\", \"number\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                handleDataInput(parseFloat(inputValue), pathFormData, \"number\")\r\n                // conv. schema data\r\n                handleConvertedDataInput(parseFloat(inputValue), path + \".value\", \"number\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // if enumerate and no defaultValue then already store the first enumerate value to form data\r\n    // this is for any enumerate in a subschema (e.g., in anyOf), for the rest of enumerate is taken care of in AdamantMain.jsx\r\n    useEffect(() => {\r\n        if (field_enumerate !== undefined & withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = (defaultValue === undefined ? field_enumerate[0] : defaultValue);\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(event, newPathFormData, \"number\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(field_enumerate[0], newPath + \".value\", \"number\")\r\n            // update field value\r\n            setInputValue(field_enumerate[0])\r\n        } else if (field_enumerate !== undefined & withinArray === undefined) {\r\n            handleDataInput(field_enumerate[0], pathFormData, \"number\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(field_enumerate[0], path + \".value\", \"number\")\r\n            // update field value\r\n            setInputValue(field_enumerate[0])\r\n        } else if (field_enumerate === undefined & withinArray === undefined & defaultValue !== undefined) {\r\n            handleDataInput(defaultValue, pathFormData, \"number\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(defaultValue, path + \".value\", \"number\")\r\n            // update field value\r\n            setInputValue(defaultValue)\r\n        } else if (field_enumerate === undefined & withinArray !== undefined & defaultValue !== undefined) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = defaultValue;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(event, newPathFormData, \"number\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(defaultValue, newPath + \".value\", \"number\")\r\n            // update field value\r\n            setInputValue(defaultValue)\r\n        }\r\n    }, [])\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} helperText={field_description} fullWidth={true} className={classes.heading} id={field_id} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                    }} />\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        helperText={field_description}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_id}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default NumberType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport updateRequired from './utils/updateRequired';\r\nimport getValue from './utils/getValue';\r\nimport checkIfFieldIDExist from './utils/checkIfFieldIDExist';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst AddElement = ({ enumerated, field_enumerate, field_required, defaultSchema, path, openDialog, setOpenDialog, UISchema, schemaTitle }) => {\r\n\r\n    const [selectedType, setSelectedType] = useState(\"string\")\r\n    const [fieldUri, setFieldUri] = useState(undefined)\r\n    const [fieldId, setFieldId] = useState(undefined)\r\n    const [title, setTitle] = useState(undefined)\r\n    const [description, setDescription] = useState(undefined)\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n    const [requiredChecked, setRequiredChecked] = useState(field_required === undefined ? false : field_required)\r\n    const [enumChecked, setEnumChecked] = useState(enumerated === undefined ? false : enumerated)\r\n    const [enumList, setEnumList] = useState(field_enumerate === undefined ? [] : field_enumerate.join(\",\"));\r\n\r\n    let tempUISchema = JSON.parse(JSON.stringify(defaultSchema))\r\n\r\n\r\n    const datatypes = [\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\"]\r\n\r\n\r\n    const handleOnChangeListField = (event) => {\r\n        setEnumList(event.target.value);\r\n    }\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        // check if fieldId already exist\r\n        if (checkIfFieldIDExist(convertedSchema, path, fieldId)) {\r\n            alert(\"Field ID already exists!\")\r\n            return\r\n        }\r\n\r\n        tempUISchema[\"fieldId\"] = fieldId;\r\n        if (fieldUri !== undefined) {\r\n            if (fieldUri.toString().replace(/\\s+/g, '') !== \"\") {\r\n                tempUISchema[\"$id\"] = fieldUri\r\n            }\r\n        }\r\n        tempUISchema[\"type\"] = selectedType;\r\n        if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n        if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n        if (fieldId === undefined) {\r\n            alert(\"Field ID must be defined!\")\r\n            return\r\n        }\r\n\r\n        if (typeof (fieldId) === \"string\" & fieldId.replace(/\\s+/g, '') === \"\") {\r\n            alert(\"Field ID must be defined!\")\r\n            return\r\n        }\r\n\r\n        if (tempUISchema[\"type\"] === \"object\") {\r\n            tempUISchema[\"properties\"] = []\r\n        }\r\n        if (tempUISchema[\"type\"] === \"array\") {\r\n            tempUISchema[\"items\"] = {}\r\n        }\r\n        if (tempUISchema[\"type\"] !== \"string\") {\r\n            setEnumChecked(false);\r\n        }\r\n\r\n        if (path !== undefined) {\r\n            const set = require(\"set-value\");\r\n\r\n            let properties = getValue(convertedSchema, path)[\"properties\"]\r\n            properties.push(tempUISchema)\r\n            set(convertedSchema, path + \".properties\", properties)\r\n\r\n            // create a new path to the new element\r\n            path = path + \".properties.\" + (properties.length - 1).toString()\r\n            let field_id = fieldId\r\n            // update the required value\r\n            const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_id, convertedSchema })\r\n            // update enum\r\n            if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                let newList = enumList\r\n                if (Array.isArray(newList)) {\r\n                    set(newConvertedSchema, path + \".enumerate\", newList)\r\n                } else {\r\n                    newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                    set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                }\r\n\r\n            }\r\n\r\n            updateParent(newConvertedSchema)\r\n            setOpenDialog(false)\r\n        } else {\r\n            const set = require(\"set-value\");\r\n            let properties = convertedSchema[\"properties\"]\r\n            properties.push(tempUISchema)\r\n            convertedSchema[\"properties\"] = properties\r\n\r\n            // create a new path to the new element\r\n            path = \"properties.\" + (properties.length - 1).toString()\r\n            let field_id = fieldId\r\n            // update the required value\r\n            const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_id, convertedSchema })\r\n            // update enum\r\n            if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                let newList = enumList\r\n                if (Array.isArray(newList)) {\r\n                    set(newConvertedSchema, path + \".enumerate\", newList)\r\n                } else {\r\n                    newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                    set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                }\r\n\r\n            }\r\n\r\n            updateParent(newConvertedSchema)\r\n            setOpenDialog(false)\r\n        }\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'type':\r\n                return setSelectedType(event.target.value)\r\n            case 'title':\r\n                return setTitle(event.target.value)\r\n            case 'description':\r\n                return setDescription(event.target.value)\r\n            case 'fieldId':\r\n                return setFieldId(event.target.value)\r\n            case '$id':\r\n                return setFieldUri(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        tempUISchema = JSON.parse(JSON.stringify(defaultSchema))\r\n        setOpenDialog(false)\r\n        setEnumList(field_enumerate)\r\n        setSelectedType(\"string\")\r\n    }\r\n\r\n    // handle field id on change\r\n    const handleOnBlurFieldId = (event) => {\r\n        setFieldId(event.target.value)\r\n        tempUISchema[\"fieldId\"] = event.target.value\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleCheckBoxOnChange = () => {\r\n        setRequiredChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleEnumBoxOnChange = () => {\r\n        setEnumChecked(prev => !prev)\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <AddIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Add Element in \"{UISchema !== undefined ? UISchema[\"title\"] : schemaTitle}\"\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                            <TextField inputProps={{ maxLength: 12 }} required onBlur={event => handleOnBlurFieldId(event)} onChange={event => handleChangeUISchema(event, \"fieldId\")} style={{ marginTop: \"20px\" }} defaultValue={tempUISchema[\"fieldId\"]} variant=\"outlined\" fullWidth={true} label={\"Field Key\"} helperText='A unique json key for this field. Usually short and no spaces (use \"_\" instead). Spaces are replaced automatically with \"_\" upon saving.' />\r\n                            <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"$id\")} style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Field ID/URI\"} helperText='ID or URI for this field if available.' />\r\n                            <TextField onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"title\"]} variant=\"outlined\" fullWidth={true} label={\"Field Title\"} helperText='Label or title of the field. For a field that requires a unit, the unit can be placed within a square bracket, e,g., \"Chamber Pressure [Pa]\".' />\r\n                            <TextField onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"description\"]} variant=\"outlined\" fullWidth={true} label={\"Field Description\"} multiline rows={3} helperText='A detailed description of the field, how the input should be formated, etc.' />\r\n                            <TextField\r\n                                onChange={event => handleChangeUISchema(event, \"type\")}\r\n                                style={{ marginTop: \"10px\" }}\r\n                                defaultValue={selectedType}\r\n                                helperText='Data type of the field input.'\r\n                                select\r\n                                fullWidth={true}\r\n                                label={\"Field Data Type\"}\r\n                                variant=\"outlined\"\r\n                                SelectProps={{\r\n                                    native: true,\r\n                                }}\r\n                            >\r\n                                {datatypes.map((content, index) => (\r\n                                    <option key={index} value={content}>\r\n                                        {content}\r\n                                    </option>\r\n                                ))}\r\n                            </TextField>\r\n                            {selectedType === \"string\" ?\r\n                                <>\r\n                                    <FormControlLabel control={<Checkbox onChange={() => handleEnumBoxOnChange()} checked={enumChecked} />} label=\"Enumerated\" />\r\n                                    <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\r\n                                        {enumChecked ? <TextField defaultValue={enumList !== undefined ? enumList : \"\"} onChange={handleOnChangeListField} variant=\"outlined\" fullWidth={true} label=\"Enumerate List\" multiline rows={4} /> : null}\r\n                                    </div>\r\n                                </> : null}\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                    ADD\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default AddElement;","import React, { useState, useContext } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"../ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport AddElement from \"../AddElement\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst ObjectType = ({ field_uri, path, pathSchema, pathFormData, field_required, field_id, field_index, edit, field_label, field_description, field_properties }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema, handleDataDelete } = useContext(FormContext);\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(field_properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        const set = require(\"set-value\");\r\n        let value = { ...convertedSchema }\r\n        set(convertedSchema, path + \".properties\", items)\r\n        updateParent(value);\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"properties\": field_properties,\r\n        \"$id\": field_uri,\r\n        \"type\": \"object\"\r\n    }\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    style={{ height: \"auto\" }}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography className={classes.heading}>{field_label}</Typography>\r\n                            {expand ? <div style={{ color: \"gray\" }}>\r\n                                {field_description}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <><Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button></> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(field_properties).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={!edit} key={field_properties[item][\"fieldId\"]} draggableId={field_properties[item][\"fieldId\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <DragHandleIcon fontSize=\"small\" />\r\n                                                            </div> : null}\r\n                                                            <ElementRenderer path={path + \".properties\"} pathSchema={pathSchema + \".properties\"} pathFormData={pathFormData} fieldId={field_properties[item][\"fieldId\"]} fieldIndex={item} elementRequired={field_required} edit={edit} field={field_properties[item]} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                                    </div> : null}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} /> : null}\r\n        {openDialogAddElement ? <AddElement openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} path={path} defaultSchema={defaultSchema} UISchema={UISchema} /> : null}\r\n    </>);\r\n};\r\n\r\nexport default ObjectType;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport getUnit from '../utils/getUnit';\r\nimport { InputAdornment } from '@material-ui/core';\r\nimport { MathComponent } from 'mathjax-react'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst IntegerType = ({ field_uri, value, dataInputItems, setDataInputItems, withinArray, defaultValue, path, pathFormData, field_required, field_index, edit, field_id, field_label, field_description, field_enumerate }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue !== undefined & value === undefined ? defaultValue : value === undefined ? \"\" : value)// useState(defaultValue !== undefined ? defaultValue : value);\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (value === undefined) {\r\n            setInputValue(\"\")\r\n        } else {\r\n            setInputValue(value)\r\n        }\r\n    }, [value])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"integer\",\r\n        \"value\": value\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_id] = value;\r\n                setDataInputItems(items);\r\n\r\n                // store to the main form data\r\n                handleDataInput(items, newPathFormData, \"integer\")\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, newPath + \".value\", \"integer\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                handleDataInput(parseInt(inputValue), pathFormData, \"integer\")\r\n                // conv. schema data\r\n                handleConvertedDataInput(parseInt(inputValue), path + \".value\", \"integer\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // if enumerate and no defaultValue then already store the first enumerate value to form data\r\n    // this is for any enumerate in a subschema (e.g., in anyOf), for the rest of enumerate is taken care of in AdamantMain.jsx\r\n    useEffect(() => {\r\n        if (field_enumerate !== undefined & withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = (defaultValue === undefined ? field_enumerate[0] : defaultValue);\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(event, newPathFormData, \"integer\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(field_enumerate[0], newPath + \".value\", \"integer\")\r\n            // update field value\r\n            setInputValue(field_enumerate[0])\r\n        } else if (field_enumerate !== undefined & withinArray === undefined) {\r\n            // conv. schema data\r\n            handleConvertedDataInput(field_enumerate[0], path + \".value\", \"integer\")\r\n            // update field value\r\n            setInputValue(field_enumerate[0])\r\n        } else if (field_enumerate === undefined & withinArray === undefined & defaultValue !== undefined) {\r\n            // conv. schema data\r\n            handleConvertedDataInput(defaultValue, path + \".value\", \"integer\")\r\n            // update field value\r\n            setInputValue(defaultValue)\r\n        } else if (field_enumerate === undefined & withinArray !== undefined & defaultValue !== undefined) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = defaultValue;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(event, newPathFormData, \"integer\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(defaultValue, newPath + \".value\", \"integer\")\r\n            // update field value\r\n            setInputValue(defaultValue)\r\n        }\r\n    }, [])\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} helperText={field_description} fullWidth={true} className={classes.heading} id={field_id} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                    }} />\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        helperText={field_description}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_id}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default IntegerType;\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport { Checkbox, FormLabel, FormHelperText, FormControl } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst BooleanType = ({ field_uri, withinArray, value, dataInputItems, setDataInputItems, path, pathFormData, field_required, field_index, edit, field_id, field_label, field_description, defaultValue }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(value !== undefined ? value : typeof (defaultValue) === \"boolean\" ? defaultValue : false);\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (value === undefined) {\r\n            setInputValue(false)\r\n        } else {\r\n            setInputValue(value)\r\n        }\r\n    }, [value])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"boolean\",\r\n        \"value\": value\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for checkbox (boolean type: checked is true unchecked is false)\r\n    const handleInputOnChange = () => {\r\n        let value = inputValue\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = !value;\r\n            setDataInputItems(items);\r\n\r\n            setInputValue(!value)\r\n            handleDataInput(items, newPathFormData, \"boolean\")\r\n            handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n\r\n        } else {\r\n            setInputValue(!value)\r\n            handleDataInput(!value, pathFormData, \"boolean\")\r\n            handleConvertedDataInput(!value, path + \".value\", \"boolean\")\r\n        }\r\n    }\r\n\r\n    // if boolean field is newly created then store a false input data already to the form data\r\n    useEffect(() => {\r\n        if (defaultValue === undefined) {\r\n            if (withinArray !== undefined & withinArray === true) {\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_id] = false;\r\n                setDataInputItems(items);\r\n\r\n                handleDataInput(items, newPathFormData, \"boolean\")\r\n                handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n            }\r\n            else {\r\n                handleDataInput(false, pathFormData, \"boolean\")\r\n                handleConvertedDataInput(false, path + \".value\", \"boolean\")\r\n            }\r\n        } else {\r\n            if (withinArray !== undefined & withinArray === true) {\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_id] = defaultValue;\r\n                setDataInputItems(items);\r\n\r\n                handleDataInput(items, newPathFormData, \"boolean\")\r\n                handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n            }\r\n            else {\r\n                handleDataInput(defaultValue, pathFormData, \"boolean\")\r\n                handleConvertedDataInput(defaultValue, path + \".value\", \"boolean\")\r\n            }\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', alignItems: \"center\", width: '100%' }}>\r\n                <div style={{ paddingLeft: \"15px\", width: \"100%\" }}>\r\n                    <FormControl >\r\n                        <FormLabel>{field_label === undefined ? \"\" : field_label + \":\"}</FormLabel>\r\n                        <div style={{ textAlign: \"center\", width: \"100%\" }}>\r\n                            <Checkbox onChange={() => handleInputOnChange()} checked={inputValue} />\r\n                        </div>\r\n                        <FormHelperText>{field_description}</FormHelperText>\r\n                    </FormControl>\r\n                </div>\r\n                {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                    <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n            {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default BooleanType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemIntegerType = ({ value, path, pathFormData, dataInputItems, setDataInputItems, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const [inputValue, setInputValue] = useState(value === undefined ? \"\" : value[index] === undefined ? \"\" : value[index]);\r\n    const { handleDataInput, handleConvertedDataInput } = useContext(FormContext);\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        let value = inputValue;\r\n        value = parseInt(value)\r\n        if (!isNaN(value)) {\r\n            setInputValue(value)\r\n\r\n            // store it to input data array\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[index] = value;\r\n            setDataInputItems(items);\r\n\r\n            // store to form data\r\n            handleDataInput(items, pathFormData, \"array\")\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items, path + \".value\", \"array\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_id} variant=\"outlined\" />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemIntegerType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemNumberType = ({ value, pathFormData, dataInputItems, setDataInputItems, path, field_type, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const [inputValue, setInputValue] = useState(value === undefined ? \"\" : value[index] === undefined ? \"\" : value[index]);\r\n    const { handleDataInput, handleConvertedDataInput } = useContext(FormContext);\r\n\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        let value = inputValue;\r\n        value = parseFloat(value)\r\n        if (!isNaN(value)) {\r\n            setInputValue(value)\r\n\r\n            // store it to input data array\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[index] = value;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            handleDataInput(items, pathFormData, \"array\")\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items, path + \".value\", \"array\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_id} variant=\"outlined\" />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemNumberType;\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemStringType = ({ value, pathFormData, dataInputItems, setDataInputItems, path, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const { handleDataInput, handleConvertedDataInput } = useContext(FormContext)\r\n    const [fieldValue, setFieldValue] = useState(value === undefined ? undefined : value[index])\r\n\r\n    // handle input field on blur\r\n    const handleOnBlur = (event, index) => {\r\n        let arr = dataInputItems;\r\n        const items = Array.from(arr);\r\n        items[index] = event.target.value;\r\n        setDataInputItems(items);\r\n        setFieldValue(event.target.value)\r\n\r\n        // store to form data\r\n        handleDataInput(items, pathFormData, \"array\")\r\n\r\n        // conv. schema data\r\n        handleConvertedDataInput(items, path + \".value\", \"array\")\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={(event) => handleOnBlur(event, index)} id={field_id} fullWidth={true} className={classes.heading} variant=\"outlined\" defaultValue={fieldValue} />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default ItemStringType;\r\n","import React, { useContext, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"../../ElementRenderer\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { FormContext } from \"../../../FormContext\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemObjectType = ({ path, dataInputItems, setDataInputItems, field_label, pathFormData, field_required, field_items, field_type, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    let objectIndex = index;\r\n    let field_properties = field_items[\"properties\"]\r\n    let withinArray = true;\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n\r\n    //const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    style={{ height: \"auto\" }}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\", justifySelf: \"center\" }}>\r\n                            {field_label + \" #\" + parseInt(index + 1)}\r\n                        </div>\r\n                        {edit ? <Button onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div style={{ width: \"100%\" }}>\r\n                        {Object.keys(field_properties).map((item, index) => {\r\n                            let tempField = JSON.parse(JSON.stringify(field_properties[item]));\r\n                            if (tempField[\"enum\"]) {\r\n                                tempField[\"enumerate\"] = tempField[\"enum\"]\r\n                            }\r\n                            if (tempField[\"default\"]) {\r\n                                tempField[\"defaultValue\"] = tempField[\"default\"]\r\n                            }\r\n                            return (\r\n                                <div key={item} style={{ display: \"flex\" }}>\r\n                                    <ElementRenderer path={path} pathFormData={pathFormData} withinArray={withinArray} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} fieldId={item} fieldIndex={objectIndex} elementRequired={field_required} edit={false} field={tempField} />\r\n                                </div>\r\n                            )\r\n                        })\r\n                        }\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div >\r\n    </>);\r\n\r\n};\r\n\r\nexport default ItemObjectType;\r\n","import React from 'react';\r\nimport ItemIntegerType from './array_items/ItemIntegerType';\r\nimport ItemNumberType from './array_items/ItemNumberType';\r\nimport ItemStringType from \"./array_items/ItemStringType\";\r\nimport ItemObjectType from \"./array_items/ItemObjectType\";\r\n\r\n\r\nconst ArrayItemRenderer = ({ value, pathSchema, pathFormData, dataInputItems, setDataInputItems, field_label, field_items, path, type, edit, fieldIndex, fieldId, enumerate, handleDeleteArrayItem, properties }) => {\r\n\r\n    switch (type) {\r\n        case 'string':\r\n            return (<ItemStringType\r\n                value={value}\r\n                setDataInputItems={setDataInputItems}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                dataInputItems={dataInputItems}\r\n                path={path}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'number':\r\n            return (<ItemNumberType\r\n                value={value}\r\n                path={path}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'integer':\r\n            return (<ItemIntegerType\r\n                value={value}\r\n                path={path}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'object':\r\n            return (<ItemObjectType\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                field_label={field_label}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                path={path}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n                field_items={field_items}\r\n            />)\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ArrayItemRenderer;\r\n","const generateUID = () => {\r\n    // I generate the UID from two parts here \r\n    // to ensure the random number provide enough bits.\r\n    var firstPart = (Math.random() * 46656) | 0;\r\n    var secondPart = (Math.random() * 46656) | 0;\r\n    firstPart = (\"000\" + firstPart.toString(36)).slice(-3);\r\n    secondPart = (\"000\" + secondPart.toString(36)).slice(-3);\r\n    return firstPart + secondPart;\r\n}\r\n\r\nexport default generateUID;","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ArrayItemRenderer from \"./ArrayItemRenderer\";\r\nimport generateUniqueID from \"../utils/generateUniqueID\";\r\nimport { IconButton } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst ArrayType = ({ field_uri, value, pathFormData, path, pathSchema, field_required, field_id, field_index, edit, field_label, field_description, field_items, field_prefixItems }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputItems, setInputItems] = useState([]);\r\n    const [dataInputItems, setDataInputItems] = useState([]);\r\n    const [itemSchema, setItemSchema] = useState();\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        if (value !== undefined) {\r\n            if (field_prefixItems === undefined & field_items !== undefined) {\r\n                if (Object.keys(field_items).length === 0) {\r\n                    // create field_items if items is empty\r\n                    let items = [];\r\n                    for (let i = 0; i < value.length; i++) {\r\n                        field_items = { type: \"string\", field_id: `${generateUniqueID()}` }\r\n                        items.push(field_items);\r\n                    }\r\n                    setInputItems(items);\r\n                    setDataInputItems(value);\r\n                } else {\r\n                    // use existing schema if items is not empty\r\n                    let items = [];\r\n                    for (let i = 0; i < value.length; i++) {\r\n                        let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                        newFieldItems[\"field_id\"] = generateUniqueID();\r\n                        items.push(newFieldItems);\r\n                    }\r\n                    setInputItems(items);\r\n                    setDataInputItems(value);\r\n                }\r\n            }\r\n        }\r\n    }, [])\r\n\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n        setInputItems(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems\r\n        const items2 = Array.from(arr2);\r\n        const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n        items2.splice(result.destination.index, 0, reorderedItem2);\r\n        setDataInputItems(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathFormData, \"array\");\r\n\r\n        // conv. schema data\r\n        handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"items\": field_items,\r\n        \"$id\": field_uri,\r\n        \"type\": \"array\",\r\n        \"value\": value\r\n    }\r\n\r\n    // handle add array item\r\n    const handleAddArrayItem = () => {\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (Object.keys(field_items).length === 0) {\r\n                // create field_items if items is empty\r\n                field_items = { type: \"string\", field_id: `${generateUniqueID()}` }\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(field_items);\r\n                setInputItems(items);\r\n\r\n                // push a new item for the data\r\n                let arr2 = dataInputItems;\r\n                const items2 = Array.from(arr2);\r\n                items2.push(\"\");\r\n                setDataInputItems(items2)\r\n            } else {\r\n                // use existing schema if items is not empty\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                newFieldItems[\"field_id\"] = generateUniqueID();\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(newFieldItems);\r\n                setInputItems(items);\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    setDataInputItems(items2)\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push({});\r\n                    setDataInputItems(items2)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle delete item\r\n    const handleDeleteArrayItem = (index) => {\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        items.splice(index, 1);\r\n        setInputItems(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems;\r\n        const items2 = Array.from(arr2);\r\n        items2.splice(index, 1);\r\n        setDataInputItems(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathFormData, \"array\");\r\n        // conv. schema data\r\n        handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n    }\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography className={classes.heading}>{field_label + (required ? \"*\" : \"\")}</Typography>\r\n                            {expand ? <div style={{ color: \"gray\" }}>\r\n                                {field_description}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <><Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button></> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(inputItems).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={false} key={inputItems[index][\"field_id\"]} draggableId={inputItems[index][\"field_id\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <DragHandleIcon fontSize=\"small\" />\r\n                                                            </div>\r\n                                                            <ArrayItemRenderer value={value} pathSchema={pathSchema} pathFormData={pathFormData} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} field_label={field_label} field_items={field_items} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path} fieldIndex={index} fieldId={inputItems[index][\"field_id\"]} type={inputItems[index][\"type\"]} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <IconButton onClick={() => { handleAddArrayItem() }} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><AddIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default ArrayType;","// convert json schema properties to an iterable array\r\nconst object2array = (propert) => {\r\n    let someArray = [];\r\n    Object.keys(propert).forEach((item) => {\r\n        var tempVariable = {};\r\n        var tempVariable2;\r\n        tempVariable2 = propert[item];\r\n        tempVariable[\"fieldId\"] = item;\r\n        Object.keys(tempVariable2).forEach((item_) => {\r\n            // make enum indexable by changing the key to \"enumerate\"\r\n            if (item_ === \"enum\") {\r\n                tempVariable[\"enumerate\"] = tempVariable2[item_];\r\n            }\r\n            if (item_ === \"default\") {\r\n                tempVariable[\"defaultValue\"] = tempVariable2[item_];\r\n            }\r\n            tempVariable[item_] = tempVariable2[item_];\r\n            if (item_ === \"properties\") {\r\n                // recursive on action to access nested properties\r\n                tempVariable[item_] = object2array(tempVariable2[item_]);\r\n            }\r\n        });\r\n        someArray.push(tempVariable);\r\n    });\r\n\r\n    return someArray;\r\n};\r\n\r\nexport default object2array;","import React, { useState, useContext } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ArrayItemRenderer from \"./ArrayItemRenderer\";\r\nimport generateUniqueID from \"../utils/generateUniqueID\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport ElementRenderer from \"../ElementRenderer\";\r\nimport ObjectType from \"./ObjectType\";\r\nimport object2array from \"../utils/object2array\";\r\nimport getValue from \"../utils/getValue\";\r\nimport set from \"set-value\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst AnyOfKeyword = ({ pathFormData, path, field_required, field_uri, field_id, field_index, edit, field_label, field_description, field_prefixItems, anyOf_list }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [field_items, setField_items] = useState(Array.isArray(anyOf_list) & anyOf_list[0][\"type\"] === \"array\" ? anyOf_list[0][\"items\"] : anyOf_list[0])\r\n    const [globalIndex, setGlobalIndex] = useState(0);\r\n    const [inputItems, setInputItems] = useState([]);\r\n    const [dataInputItems, setDataInputItems] = useState([]);\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n\r\n    let newPath = path.split(\".\")\r\n    newPath.pop()\r\n    newPath = newPath.join(\".\")\r\n\r\n    let newPathFormData = pathFormData.split(\".\")\r\n    newPathFormData.pop()\r\n    newPathFormData = newPathFormData.join(\".\")\r\n\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    let schemaList = Array(anyOf_list.length).fill().map((x, i) => i)\r\n\r\n    // select existing schema option from anyOf list\r\n    const handleChooseAnyOfSchema = (event) => {\r\n        // reset states\r\n        setDataInputItems([]);\r\n        setInputItems([]);\r\n\r\n        // get rid of the current value everytime the subschema changes\r\n        handleDataDelete(pathFormData)\r\n        let val = getValue(convertedSchema, path)\r\n        delete val[\"value\"]\r\n        set(convertedSchema, path, val)\r\n        console.log(convertedSchema)\r\n        // if properties exist then delete it\r\n        let val2 = getValue(convertedSchema, path)\r\n        if (val2[\"properties\"] !== undefined) {\r\n            delete val2[\"properties\"]\r\n            set(convertedSchema, path, val2)\r\n        }\r\n        // if type exist then delete it\r\n        let val3 = getValue(convertedSchema, path)\r\n        if (val3[\"type\"] !== undefined) {\r\n            delete val3[\"type\"]\r\n            set(convertedSchema, path, val3)\r\n        }\r\n\r\n        const index = parseInt(event.target.value)\r\n        setGlobalIndex(index)\r\n        if (anyOf_list[index][\"type\"] === \"array\") {\r\n            setField_items(anyOf_list[index][\"items\"])\r\n        }\r\n        else if (anyOf_list[index][\"type\"] === \"object\") {\r\n            let prop = object2array(anyOf_list[index][\"properties\"])\r\n            let val = getValue(convertedSchema, path)\r\n            val[\"properties\"] = prop\r\n            val[\"type\"] = \"object\"\r\n            set(convertedSchema, path, val)\r\n            updateParent(convertedSchema)\r\n            setField_items(prop)\r\n        }\r\n        else {\r\n            setField_items(anyOf_list[index])\r\n        }\r\n    }\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n        setInputItems(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems\r\n        const items2 = Array.from(arr2);\r\n        const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n        items2.splice(result.destination.index, 0, reorderedItem2);\r\n        setDataInputItems(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathFormData, \"array\");\r\n        // conv. schema data\r\n        handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    /*\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"items\": field_items,\r\n        \"type\": [anyOf_list[globalIndex][\"type\"]]\r\n    }*/\r\n\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"items\": field_items,\r\n        \"type\": \"anyOf\",\r\n    }\r\n\r\n    // handle add array item\r\n    const handleAddArrayItem = () => {\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (Object.keys(field_items).length === 0) {\r\n                // create field_items if items is empty\r\n                field_items = { type: \"string\", field_id: `${generateUniqueID()}` }\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(field_items);\r\n                setInputItems(items);\r\n\r\n                // push a new item for the data\r\n                let arr2 = dataInputItems;\r\n                const items2 = Array.from(arr2);\r\n                items2.push(\"\");\r\n                setDataInputItems(items2)\r\n            } else {\r\n                // use existing schema if items is not empty\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                newFieldItems[\"field_id\"] = generateUniqueID();\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(newFieldItems);\r\n                setInputItems(items);\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    setDataInputItems(items2)\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push({});\r\n                    setDataInputItems(items2)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle delete item\r\n    const handleDeleteArrayItem = (index) => {\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        items.splice(index, 1);\r\n        setInputItems(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems;\r\n        const items2 = Array.from(arr2);\r\n        items2.splice(index, 1);\r\n        setDataInputItems(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathFormData, \"array\");\r\n        // conv. schema data\r\n        handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n    }\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography className={classes.heading}>{field_label + (required ? \"*\" : \"\")}</Typography>\r\n                            {expand ? <div style={{ color: \"gray\" }}>\r\n                                {field_description}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <><Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button></> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <TextField\r\n                    onChange={(event) => handleChooseAnyOfSchema(event)}\r\n                    style={{ width: \"220px\", marginLeft: \"10px\", marginTop: \"20px\" }}\r\n                    fullWidth={false}\r\n                    select\r\n                    id={\"select-schema\"}\r\n                    label={\"Choose a subschema\"}\r\n                    SelectProps={{ native: true }}\r\n                >\r\n                    {schemaList.map((content, index) => (\r\n                        <option key={index} value={content}>\r\n                            {content}\r\n                        </option>\r\n                    ))}\r\n                </TextField>\r\n                {anyOf_list[globalIndex][\"type\"] === \"array\" ?\r\n                    <AccordionDetails>\r\n                        <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                            <Droppable droppableId=\"subforms\">\r\n                                {(provided) => (\r\n                                    <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                        {Object.keys(inputItems).map((item, index) => {\r\n                                            return (\r\n                                                <Draggable key={inputItems[index][\"field_id\"]} draggableId={inputItems[index][\"field_id\"]} index={index}>\r\n                                                    {(provided) => (\r\n                                                        <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                            <div style={{ display: \"flex\" }}>\r\n                                                                <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                    <DragHandleIcon fontSize=\"small\" />\r\n                                                                </div>\r\n                                                                {/*\r\n                                                                <ArrayItemRenderer field_label={field_label} field_items={inputItems[index]} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path + \".properties\"} fieldIndex={index} fieldId={inputItems[index][\"field_id\"]} type={inputItems[index][\"type\"]} />\r\n                                                                */}\r\n\r\n                                                                <ArrayItemRenderer pathFormData={pathFormData} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} field_label={field_label} field_items={field_items} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path} fieldIndex={index} fieldId={inputItems[index][\"field_id\"]} type={inputItems[index][\"type\"]} />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    )}\r\n                                                </Draggable>\r\n                                            );\r\n                                        })}\r\n                                        {provided.placeholder}\r\n                                        <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                            <IconButton onClick={() => { handleAddArrayItem() }} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><AddIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                        </DragDropContext>\r\n                    </AccordionDetails>\r\n                    :\r\n                    anyOf_list[globalIndex][\"type\"] === \"object\" ?\r\n                        <div style={{ padding: \"10px\" }}>\r\n                            <ObjectType\r\n                                path={path}\r\n                                pathFormData={pathFormData !== undefined ? pathFormData : field_id}\r\n                                field_id={field_id}\r\n                                field_label={undefined}\r\n                                field_description={undefined}\r\n                                field_required={field_required}\r\n                                field_properties={field_items}\r\n                                edit={false}\r\n                            />\r\n                        </div>\r\n                        :\r\n                        <div style={{ padding: \"10px\" }}>\r\n                            <ElementRenderer pathFormData={newPathFormData} path={newPath} fieldId={field_id} fieldIndex={field_index} elementRequired={field_required} edit={false} field={field_items} />\r\n                        </div>}\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement field_uri={field_uri} anyOf_list={anyOf_list} pathFormData={pathFormData} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default AnyOfKeyword;","import React from 'react';\r\nimport StringType from \"./elements/StringType\";\r\nimport NumberType from \"./elements/NumberType\";\r\nimport ObjectType from './elements/ObjectType';\r\nimport IntegerType from './elements/IntegerType';\r\nimport BooleanType from './elements/BooleanType';\r\nimport ArrayType from './elements/ArrayType';\r\nimport AnyOfKeyword from './elements/AnyOfKeyword';\r\n\r\n\r\nconst ElementRenderer = ({ dataInputItems, setDataInputItems, withinArray, path, pathSchema, pathFormData, elementRequired, fieldId, fieldIndex, edit, field: { type, $id, title, description, properties, required, enumerate, items, defaultValue, value, anyOf } }) => {\r\n\r\n    switch (type) {\r\n        case 'string':\r\n            return (<StringType\r\n                value={value}\r\n                withinArray={withinArray}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldId}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_uri={$id}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'number':\r\n            return (<NumberType\r\n                value={value}\r\n                withinArray={withinArray}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldId}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_uri={$id}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'integer':\r\n            return (<IntegerType\r\n                value={value}\r\n                withinArray={withinArray}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldId}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_uri={$id}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'boolean':\r\n            return (<BooleanType\r\n                value={value}\r\n                withinArray={withinArray}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldId}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_uri={$id}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'array':\r\n            return (<ArrayType\r\n                value={value}\r\n                withinArray={withinArray}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldId}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_uri={$id}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_items={items}\r\n                edit={edit}\r\n            />)\r\n        case 'object':\r\n            if (anyOf !== undefined) {\r\n                return (\r\n                    <AnyOfKeyword\r\n                        pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                        withinArray={withinArray}\r\n                        path={path + \".\" + fieldIndex}\r\n                        field_index={fieldIndex}\r\n                        field_id={fieldId}\r\n                        field_uri={$id}\r\n                        field_label={title}\r\n                        field_description={description}\r\n                        field_required={elementRequired}\r\n                        anyOf_list={anyOf}\r\n                        edit={edit}\r\n                    />\r\n                )\r\n            } else {\r\n                return (<ObjectType\r\n                    withinArray={withinArray}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldId}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                    field_id={fieldId}\r\n                    field_uri={$id}\r\n                    field_label={title}\r\n                    field_description={description}\r\n                    field_required={required}\r\n                    field_properties={properties}\r\n                    edit={edit}\r\n                />)\r\n            }\r\n        case undefined:\r\n            if (anyOf) {\r\n                return (\r\n                    <AnyOfKeyword\r\n                        pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldId : fieldId}\r\n                        withinArray={withinArray}\r\n                        path={path + \".\" + fieldIndex}\r\n                        field_index={fieldIndex}\r\n                        field_id={fieldId}\r\n                        field_uri={$id}\r\n                        field_label={title}\r\n                        field_description={description}\r\n                        field_required={elementRequired}\r\n                        anyOf_list={anyOf}\r\n                        edit={edit}\r\n                    />\r\n                )\r\n            } else {\r\n                return null\r\n            }\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ElementRenderer;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst EditSchemaHeader = ({ schemaID, title, description, schemaURI, openDialog, setOpenDialog }) => {\r\n\r\n    const [_schemaID, _setSchemaID] = useState(schemaID);\r\n    const [_title, _setTitle] = useState(title);\r\n    const [_description, _setDescription] = useState(description);\r\n    const [_schemaURI, _setSchemaURI] = useState(schemaURI);\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n\r\n\r\n\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n\r\n        if (_schemaURI === undefined) {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else if (_schemaURI.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else {\r\n            convertedSchema[\"$schema\"] = _schemaURI\r\n        };\r\n\r\n        if (_schemaID === undefined) {\r\n            delete convertedSchema[\"id\"]\r\n        } else if (_schemaID.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"id\"]\r\n        } else {\r\n            convertedSchema[\"id\"] = _schemaID\r\n        };\r\n\r\n        if (_title === undefined) {\r\n            delete convertedSchema[\"title\"]\r\n        } else if (_title.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"title\"]\r\n        } else {\r\n            convertedSchema[\"title\"] = _title\r\n        };\r\n\r\n        if (_description === undefined) {\r\n            delete convertedSchema[\"description\"]\r\n        } else if (_description.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"description\"]\r\n        } else {\r\n            convertedSchema[\"description\"] = _description\r\n        };\r\n\r\n        updateParent(convertedSchema)\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'title':\r\n                return _setTitle(event.target.value)\r\n            case 'description':\r\n                return _setDescription(event.target.value)\r\n            case 'id':\r\n                return _setSchemaID(event.target.value)\r\n            case 'uri':\r\n                return _setSchemaURI(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        _setDescription(description);\r\n        _setSchemaID(schemaID);\r\n        _setSchemaURI(schemaURI);\r\n        _setTitle(title);\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Edit schema \"{title}\"\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                            <TextField disabled margin='normal' onChange={event => handleChangeUISchema(event, \"id\")} style={{ marginTop: \"20px\" }} defaultValue={schemaURI} variant=\"outlined\" fullWidth={true} label={\"$schema\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"id\")} style={{ marginTop: \"10px\" }} defaultValue={schemaID} variant=\"outlined\" fullWidth={true} label={\"Schema ID\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={title} variant=\"outlined\" fullWidth={true} label={\"Schema Title\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={description} variant=\"outlined\" fullWidth={true} label={\"Schema Description\"} multiline rows={3} />\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditSchemaHeader;","import React, { useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { TextField } from '@material-ui/core';\r\nimport { IconButton, Button } from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst JSONSchemaViewerDialog = ({ openSchemaViewer, setOpenSchemaViewer, jsonschema }) => {\r\n    console.log(openSchemaViewer)\r\n\r\n    return (<>\r\n        <Dialog\r\n            onClose={() => setOpenSchemaViewer(false)}\r\n            maxWidth=\"md\"\r\n            fullWidth={true}\r\n            open={openSchemaViewer}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        JSON Schema viewer\r\n                    </div>\r\n                    <IconButton onClick={() => setOpenSchemaViewer(false)}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <TextField\r\n                    disabled\r\n                    fullWidth={true}\r\n                    variant=\"filled\"\r\n                    multiline\r\n                    defaultValue={JSON.stringify(jsonschema, null, 2)}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n            </DialogActions>\r\n        </Dialog>\r\n\r\n        {/*\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div>\r\n                            <Typography className={classes.heading}>JSON Schema Viewer</Typography>\r\n                        </div>\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div >\r\n                        <pre style={{ overflowX: \"auto\", whiteSpace: \"pre-wrap\", wordWrap: \"break-word\" }}>\r\n                            {JSON.stringify(jsonschema, null, 2)}\r\n                        </pre>\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n                */}\r\n    </>);\r\n};\r\n\r\nexport default JSONSchemaViewerDialog;","import React, { useContext, useState, useCallback } from \"react\";\r\n//import { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"./ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from '../FormContext';\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport UploadDataIcon from '@mui/icons-material/UploadFile';\r\nimport { ReactComponent as JsonIcon } from '../assets/json-file-svgrepo-com.svg'\r\nimport RevertIvon from \"@material-ui/icons/History\";\r\nimport AddElement from \"./AddElement\";\r\nimport EditSchemaHeader from \"./EditSchemaHeader\";\r\nimport JSONSchemaViewerDialog from \"./JSONSchemaViewerDialog\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\n\r\nconst checkFormDataValidity = (file) => {\r\n    let validity = false\r\n    let message = `INVALID TYPE!\\n Form data must be of a json file type.`\r\n    if (file[0].type === \"application/json\") {\r\n        validity = true;\r\n        message = \"Form data is of a valid file type.\"\r\n    }\r\n    return [validity, message]\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst FormRenderer = ({ revertAllChanges, schema, edit, originalSchema }) => {\r\n    const { updateParent, convertedSchema, handleReceivedFormData } = useContext(FormContext);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [openSchemaViewer, setOpenSchemaViewer] = useState(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    // browse or drag&drop schema file\r\n    const onDrop = useCallback(\r\n        (acceptedFile) => {\r\n            // process the schema, validation etc\r\n            let validity = checkFormDataValidity(acceptedFile);\r\n            if (validity[0] === false) {\r\n                toast.error(\r\n                    <div><strong>{validity[1]}</strong></div>,\r\n                    {\r\n                        position: \"top-right\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: false,\r\n                        progress: undefined,\r\n                    }\r\n                );\r\n            } else {\r\n                // read file and call handleReceivedForm data\r\n                const reader = new FileReader();\r\n                reader.onabort = () => console.log(\"file reading was aborted\");\r\n                reader.onerror = () => console.log(\"file reading has failed\");\r\n                reader.onload = () => {\r\n                    const binaryStr = reader.result;\r\n                    const obj = JSON.parse(binaryStr);\r\n                    handleReceivedFormData(obj)\r\n                }\r\n                reader.readAsText(acceptedFile[0]);\r\n            };\r\n        },\r\n        []\r\n    );\r\n    //\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        multiple: false,\r\n    });\r\n\r\n    // deconstruct\r\n    const { properties, title, description, required, $schema, id } = schema ?? {}\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        let value = { ...convertedSchema };\r\n        value[\"properties\"] = items;\r\n        updateParent(value);\r\n    }\r\n\r\n    /*\r\n    console.log(\"converted:\", convertedSchema)\r\n    let deconvertedSchema = JSON.parse(JSON.stringify(convertedSchema))\r\n    deconvertedSchema[\"properties\"] = array2object(convertedSchema[\"properties\"])\r\n    console.log(\"deconverted:\", deconvertedSchema)\r\n    */\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <Typography className={classes.heading} style={{ width: \"100%\" }}>{title}</Typography>\r\n                <Tooltip placement=\"top\" title=\"View JSON Schema for this form\">\r\n                    <Button onClick={() => setOpenSchemaViewer(true)} style={{ marginLeft: \"5px\" }}><JsonIcon style={{ height: \"22px\" }} /></Button>\r\n                </Tooltip>\r\n                <Tooltip placement=\"top\" title=\"Upload input data for this form\">\r\n                    <Button style={{ marginLeft: \"5px\" }}{...getRootProps()}>\r\n                        <input {...getInputProps()} />\r\n                        <UploadDataIcon />\r\n                    </Button>\r\n                </Tooltip>\r\n                {edit ? <>\r\n                    <Tooltip placement=\"top\" title=\"Edit json schema header\">\r\n                        <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}>\r\n                            <EditIcon color=\"primary\" />\r\n                        </Button>\r\n                    </Tooltip>\r\n                    <Tooltip placement=\"top\" title=\"Revert all changes made to this form\">\r\n                        <Button onClick={() => revertAllChanges()} style={{ marginLeft: \"5px\" }}>\r\n                            <RevertIvon color=\"primary\" />\r\n                        </Button>\r\n                    </Tooltip>\r\n                </> : null}\r\n            </div>\r\n            <Divider />\r\n            <Typography>{description}</Typography>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"forms\">\r\n                    {(provided) => (\r\n                        <form {...provided.droppableProps} ref={provided.innerRef}>\r\n                            {Object.keys(properties).map((item, index) => {\r\n                                return (\r\n                                    <Draggable isDragDisabled={!edit} key={properties[item][\"fieldId\"]} draggableId={properties[item][\"fieldId\"]} index={index}>\r\n                                        {(provided) => (\r\n                                            <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                <div style={{ display: \"flex\" }}>\r\n                                                    {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                        <DragHandleIcon fontSize=\"small\" />\r\n                                                    </div> : null}\r\n                                                    <ElementRenderer schema={schema} path={\"properties\"} pathSchema={\"properties\"} fieldId={properties[item][\"fieldId\"]} fieldIndex={item} elementRequired={required} edit={edit} field={properties[item]} />\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                );\r\n                            })}\r\n                            {provided.placeholder}\r\n                            {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                            </div> : null}\r\n                        </form>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n        {openDialogAddElement ? <AddElement openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} defaultSchema={defaultSchema} schemaTitle={title} /> : null}\r\n        {openDialog ? <EditSchemaHeader schemaID={id} title={title} description={description} schemaURI={$schema} openDialog={openDialog} setOpenDialog={setOpenDialog} /> : null}\r\n        {openSchemaViewer ? <JSONSchemaViewerDialog\r\n            openSchemaViewer={openSchemaViewer}\r\n            setOpenSchemaViewer={setOpenSchemaViewer}\r\n            jsonschema={originalSchema}\r\n        /> : null}\r\n        <ToastContainer />\r\n    </>);\r\n};\r\n\r\nexport default FormRenderer;","// convert iterable array to json schema properties\r\nconst array2object = (propert) => {\r\n    var someObject = {};\r\n    propert.forEach((item) => {\r\n        const tempKey = item[\"fieldId\"];\r\n        delete item[\"fieldId\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        Object.keys(tempElements).forEach((item) => {\r\n            // change \"enumerate\" to \"enum\"\r\n            if (item === \"enumerate\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"enumerate\"])\r\n                );\r\n                delete someObject[tempKey][\"enumerate\"];\r\n                someObject[tempKey][\"enum\"] = enumContent;\r\n            }\r\n            if (item === \"defaultValue\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"defaultValue\"])\r\n                );\r\n                delete someObject[tempKey][\"defaultValue\"];\r\n                someObject[tempKey][\"default\"] = enumContent;\r\n            }\r\n            if (item === \"properties\") {\r\n                // some recursion\r\n                someObject[tempKey][\"properties\"] = array2object(\r\n                    someObject[tempKey][\"properties\"]\r\n                );\r\n            }\r\n            if (item === \"value\") {\r\n                delete someObject[tempKey][\"value\"]\r\n            }\r\n        });\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default array2object;","import getValue from \"./getValue\";\r\nimport set from \"set-value\";\r\n\r\n// delete key and value given path\r\nconst deleteKeySchema = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json));\r\n    let pathArray = path.split('.');\r\n\r\n    if (pathArray.length === 1) {\r\n        delete jsonData[pathArray[0]];\r\n    } else {\r\n        let tobeDeleted = pathArray.pop();\r\n        pathArray = pathArray.join(\".\");\r\n        let value = getValue(jsonData, pathArray);\r\n        delete value[tobeDeleted]\r\n        set(jsonData, pathArray, value);\r\n    }\r\n\r\n    return jsonData;\r\n\r\n\r\n};\r\n\r\nexport default deleteKeySchema;","// validate form data against its schema using the Ajv package\r\n\r\n//\r\n// TO DO: since AJV does not really check the nested schemas easily, we must then implement a recursion to check every object type that has subschemas\r\n//      : for both formData and schema\r\n\r\nimport Ajv from \"ajv\";\r\nimport deleteKeySchema from \"./deleteKeySchema\";\r\n\r\nconst validateAgainstSchema = (formData, schema) => {\r\n    const ajv = new Ajv({ allErrors: true });\r\n\r\n    if (schema[\"$schema\"] !== undefined) {\r\n        schema = deleteKeySchema(schema, \"$schema\")\r\n    }\r\n    if (schema[\"id\"] !== undefined) {\r\n        schema = deleteKeySchema(schema, \"id\")\r\n    }\r\n\r\n    const validate = ajv.compile(schema);\r\n    const valid = validate(formData)\r\n\r\n    return [valid, validate];\r\n}\r\n\r\nexport default validateAgainstSchema;","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { Autocomplete } from '@material-ui/lab';\r\n\r\n\r\nconst CreateELabFTWExperimentDialog = ({ getTagsELabFTW, eLabURL, setELabURL, setTags, tags, setRetrievedTags, retrievedTags, setExperimentTitle, setToken, token, setOpenSubmitDialog, openSubmitDialog, createExperimentELabFTW }) => {\r\n\r\n    const onTagsChange = (event, values) => {\r\n        setTags(values);\r\n    };\r\n\r\n    // cancel submit\r\n    const handleCancelEdit = () => {\r\n        setOpenSubmitDialog(false)\r\n        setRetrievedTags([])\r\n        setELabURL(\"\")\r\n        setToken(\"\")\r\n        setTags([])\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openSubmitDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Create eLabFTW Experiment\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">eLabFTW</FormLabel>\r\n                            <TextField required margin='normal' onChange={event => setELabURL(event.target.value)} style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Your eLabFTW main URL\"} />\r\n                            <TextField required margin='normal' onChange={event => setToken(event.target.value)} style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Your eLabFTW token\"} />\r\n                            <TextField margin='normal' onBlur={event => setExperimentTitle(event.target.value)} style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Experiment title\"} />\r\n                            <div style={{ display: 'inline-flex', width: '100%' }}>\r\n                                <Autocomplete\r\n                                    style={{ width: \"100%\" }}\r\n                                    disabled={retrievedTags.length === 0 ? true : false}\r\n                                    multiple\r\n                                    freeSolo\r\n                                    options={retrievedTags}\r\n                                    getOptionLabel={option => option.tag || option}\r\n                                    onChange={onTagsChange}\r\n                                    renderInput={params => (\r\n                                        <TextField\r\n                                            {...params}\r\n                                            disabled={retrievedTags.length === 0 ? true : false}\r\n                                            variant=\"outlined\"\r\n                                            label=\"Tags\"\r\n                                            margin=\"normal\"\r\n                                            style={{ marginTop: \"10px\" }}\r\n                                            helperText='Press the \"GET TAGS\" button to retrieve available tags from your eLabFTW system.Note: you have to provide the eLabFTW main URL and token to enable the button.'\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                {/*<TextField disabled={retrievedTags.length === 0 ? true : false} margin='normal' style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Tags\"} helperText='Press the \"GET TAGS\" button to retrieve available tags from your eLabFTW system. Note: you have to provide the eLabFTW main URL and token to enable the button.' />*/}\r\n                                <Button onClick={() => getTagsELabFTW()} disabled={(token.trim() === \"\" | eLabURL.trim() === \"\") | (token === undefined | eLabURL === undefined) ? true : false} style={{ marginLeft: \"5px\", height: \"55px\", marginTop: \"11px\" }} variant=\"contained\" color=\"primary\">Get Tags</Button>\r\n                            </div>\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={(token.trim() === \"\" | eLabURL.trim() === \"\") | (token === undefined | eLabURL === undefined) ? true : false} onClick={() => createExperimentELabFTW()} color=\"primary\" autoFocus>\r\n                    Create Experiment\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default CreateELabFTWExperimentDialog;","const createDescriptionList = (data) => {\r\n    let descList = \"\";\r\n    const emptyString = (element) => element === \"\";\r\n\r\n    data.forEach(element => {\r\n        if (element[\"path\"] === \"\") {\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span style=\"color: #ffffff;\"><a style=\"color: #ffffff;\" title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                } else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n        } else {\r\n            let pathArr = element[\"path\"].split(\".\");\r\n            let titleDiv = `<dt style=\"background-color: #ffffff; border: 0px; height: 10px;\"></dt>\\n`\r\n            titleDiv += `<dt style=\"background-color: #ffffff; border: 0px;\">`\r\n            pathArr.forEach((item, index) => {\r\n                if (element[\"pathURIs\"] !== undefined & !element[\"pathURIs\"].some(emptyString)) {\r\n                    if (item !== \"\") {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}>${element[\"pathLabels\"][index]}</a><a style=\"color: #29aeb9;\">/</a>`\r\n                        }\r\n                    } else {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a style=\"color:#000000;\"><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a style=\"color:#000000;\">${element[\"pathLabels\"][index]}/</a>`\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (index === (pathArr.length - 1)) {\r\n                        titleDiv += `<a style=\"color:#000000;\"><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                    } else {\r\n                        titleDiv += `<a style=\"color:#000000;\">${element[\"pathLabels\"][index]}/</a>`\r\n                    }\r\n                }\r\n            })\r\n            titleDiv += \"</dt>\\n\"\r\n\r\n            descList += titleDiv\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span style=\"color: #ffffff;\"><a style=\"color: #ffffff;\" title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                } else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    return descList;\r\n}\r\n\r\nexport default createDescriptionList;","const convData2DescList = (convDataProp) => {\r\n    let someObject = {};\r\n    convDataProp.forEach((item) => {\r\n        const fieldId = item[\"fieldId\"];\r\n        const type = item[\"type\"];\r\n\r\n        if (type === \"object\") {\r\n            someObject[fieldId] = convData2DescList(item[\"properties\"])\r\n        } else {\r\n            if (item[\"value\"] !== undefined) {\r\n                someObject[fieldId] = { value: item[\"value\"] }\r\n                someObject[fieldId][\"label\"] = item[\"title\"]\r\n                someObject[fieldId][\"key\"] = item[\"fieldId\"]\r\n                someObject[fieldId][\"$id\"] = item[\"$id\"]\r\n            }\r\n        }\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default convData2DescList;","const getPaths = (object, value) => {\r\n    return Object\r\n        .keys(object)\r\n        .reduce((r, k) => {\r\n            var kk = Array.isArray(object) ? `[${k}]` : `${k}`;\r\n            if (object[k] === value) {\r\n                r.push(kk);\r\n            }\r\n            if (object[k] && typeof object[k] === 'object') {\r\n                r.push(...getPaths(object[k], value).map(p => kk + (p[0] === '[' ? '' : '.') + p));\r\n            }\r\n            return r;\r\n        }, []);\r\n}\r\n\r\nexport default getPaths;","// get json value in schema given path\r\nconst getValueInSchema = (json, path) => {\r\n    if (path === undefined) {\r\n        return json[\"properties\"]\r\n    }\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    if (path[0] === \"\") {\r\n        return undefined;\r\n    }\r\n    let tempValue = jsonData[\"properties\"]\r\n    for (let i = 0; i < path.length; i++) {\r\n        if (tempValue[\"type\"] === \"object\") {\r\n            tempValue = tempValue[\"properties\"][path[i]]\r\n        } else {\r\n            tempValue = tempValue[path[i]]\r\n        }\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValueInSchema;","import getValueInSchema from \"./getValueInSchema\";\r\n\r\nconst getPathURIsAndLabels = (object, path) => {\r\n\r\n    let pathArr = path.split(\".\")\r\n    let newPath = []\r\n    let uris = []\r\n    let labels = []\r\n    for (let i = 0; i < pathArr.length; i++) {\r\n        newPath.push(pathArr[i])\r\n\r\n        let thePath = JSON.parse(JSON.stringify(newPath));\r\n        thePath = thePath.join(\".\")\r\n        let value = getValueInSchema(object, thePath)\r\n        if (typeof (value) === \"object\") {\r\n            if (value[\"$id\"] !== undefined) {\r\n                uris.push(value[\"$id\"])\r\n            } else {\r\n                uris.push(\"\")\r\n            }\r\n            if (value[\"title\"] !== undefined) {\r\n                labels.push(value[\"title\"])\r\n            } else {\r\n                labels.push(\"\")\r\n            }\r\n        } else {\r\n            uris.push(\"\")\r\n            labels.push(\"\")\r\n        }\r\n    }\r\n\r\n    return [uris, labels];\r\n\r\n}\r\n\r\nexport default getPathURIsAndLabels;","import getPaths from \"./getPaths\";\r\nimport getPathURIsAndLabels from \"./getPathURIsAndLabels\";\r\n\r\n/**\r\n * Get rid of the last two items of each path in pathArr\r\n * @param {*} pathArr \r\n * @returns processedArr\r\n */\r\nconst pathPreProcess = (pathArr) => {\r\n    let processedArr = []\r\n    pathArr.forEach((item) => {\r\n        item = item.split(\".\");\r\n        item.pop();\r\n        item.pop();\r\n        item = item.join(\".\");\r\n        processedArr.push(item)\r\n    })\r\n\r\n    return processedArr\r\n}\r\n\r\nconst preProcessB4DescList = (content, originalContent, originalSchema, arr) => {\r\n\r\n    Object.keys(content).forEach((item) => {\r\n        if (content[item][\"label\"] === undefined) {\r\n            preProcessB4DescList(content[item], originalContent, originalSchema, arr)\r\n        }\r\n        else {\r\n            if (content[item][\"value\"] !== undefined) {\r\n                /*\r\n                 a function to get a path of a given a key:attribute pair\r\n                */\r\n                let path_key = getPaths(originalContent, content[item][\"key\"])\r\n                path_key = pathPreProcess(path_key)\r\n                let path_label = getPaths(originalContent, content[item][\"label\"])\r\n                path_label = pathPreProcess(path_label)\r\n                let path = path_key.filter(value => path_label.includes(value));\r\n                let URIsAndLabels = getPathURIsAndLabels(originalSchema, path[0])\r\n\r\n                arr.push({\r\n                    \"path\": path[0],\r\n                    \"pathURIs\": URIsAndLabels[0],\r\n                    \"pathLabels\": URIsAndLabels[1],\r\n                    \"key\": content[item][\"key\"],\r\n                    \"label\": content[item][\"label\"],\r\n                    \"value\": content[item][\"value\"],\r\n                    \"$id\": content[item][\"$id\"]\r\n                })\r\n            }\r\n        }\r\n    })\r\n\r\n    return arr;\r\n};\r\n\r\nexport default preProcessB4DescList;","const checkObjectExistance = (arr, path) => {\r\n    let loc = false\r\n    arr.forEach((element, index) => {\r\n        if (element[\"path\"] === path) {\r\n            loc = index\r\n        }\r\n    })\r\n    return loc;\r\n}\r\n\r\nconst nicelySort = (arr) => {\r\n    let sortedArr = []\r\n    arr.forEach(element => {\r\n        // check if an object with element[\"path\"] already exists\r\n        let loc = checkObjectExistance(sortedArr, element[\"path\"])\r\n\r\n        if (loc !== false) {\r\n            let fieldArr = sortedArr[loc][\"fields\"]\r\n            fieldArr.push({ key: element[\"key\"], label: element[\"label\"], value: element[\"value\"], $id: element[\"$id\"] })\r\n        } else {\r\n            // if not then create a new object\r\n            let newObj = {}\r\n            newObj[\"path\"] = element[\"path\"]\r\n            newObj[\"pathURIs\"] = element[\"pathURIs\"]\r\n            newObj[\"pathLabels\"] = element[\"pathLabels\"]\r\n            newObj[\"fields\"] = [{ key: element[\"key\"], label: element[\"label\"], value: element[\"value\"], $id: element[\"$id\"] }]\r\n            //console.log(newObj)\r\n            sortedArr.push(newObj)\r\n        }\r\n    });\r\n\r\n\r\n    return sortedArr;\r\n}\r\n\r\nexport default nicelySort;","// convert iterable array to json schema properties\r\nconst array2objectAnyOf = (propert) => {\r\n    var someObject = {};\r\n    propert.forEach((item) => {\r\n        const tempKey = item[\"fieldId\"];\r\n        delete item[\"fieldId\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        Object.keys(tempElements).forEach((item) => {\r\n            // change \"enumerate\" to \"enum\"\r\n            if (item === \"enumerate\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"enumerate\"])\r\n                );\r\n                delete someObject[tempKey][\"enumerate\"];\r\n                someObject[tempKey][\"enum\"] = enumContent;\r\n            }\r\n            if (item === \"defaultValue\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"defaultValue\"])\r\n                );\r\n                delete someObject[tempKey][\"defaultValue\"];\r\n                someObject[tempKey][\"default\"] = enumContent;\r\n            }\r\n            if (item === \"properties\") {\r\n                if (someObject[tempKey][\"anyOf\"] !== undefined) {\r\n                    delete someObject[tempKey][\"properties\"]\r\n                    delete someObject[tempKey][\"type\"]\r\n                } else {\r\n                    // some recursion\r\n                    someObject[tempKey][\"properties\"] = array2objectAnyOf(\r\n                        someObject[tempKey][\"properties\"]\r\n                    );\r\n                }\r\n            }\r\n            if (item === \"value\") {\r\n                delete someObject[tempKey][\"value\"]\r\n            }\r\n        });\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default array2objectAnyOf;","const fillValueWithEmptyString = (jsonObjProp) => {\r\n\r\n    jsonObjProp.forEach(element => {\r\n        if (element[\"type\"] === \"object\") {\r\n            fillValueWithEmptyString(element[\"properties\"])\r\n        } else {\r\n            if (element[\"value\"] === undefined) {\r\n                element[\"value\"] = \"\"\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n}\r\n\r\nexport default fillValueWithEmptyString;","const fillForm = (schemaProp, data) => {\r\n    schemaProp.forEach(element => {\r\n        if (element[\"type\"] === \"object\") {\r\n            // early exist\r\n            if (data === undefined) {\r\n                return\r\n            } //\r\n            fillForm(element[\"properties\"], data[element[\"fieldId\"]])\r\n        } else {\r\n            // early exist\r\n            if (data === undefined) {\r\n                return\r\n            } //\r\n            if (data[element[\"fieldId\"]] !== undefined) {\r\n                element[\"value\"] = data[element[\"fieldId\"]]\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport default fillForm;","import React, { useCallback, useState } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport HeaderImage from \"../assets/header-image.png\";\r\nimport FormRenderer from \"../components/FormRenderer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { FormContext } from \"../FormContext\";\r\nimport array2object from \"../components/utils/array2object\";\r\nimport object2array from \"../components/utils/object2array\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport DownloadIcon from \"@material-ui/icons/GetApp\";\r\nimport set from \"set-value\";\r\nimport getValue from \"../components/utils/getValue\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport deleteKeySchema from \"../components/utils/deleteKeySchema\";\r\nimport validateAgainstSchema from \"../components/utils/validateAgainstSchema\";\r\nimport CreateELabFTWExperimentDialog from \"../components/CreateELabFTWExperimentDialog\";\r\nimport { useEffect } from \"react\";\r\nimport createDescriptionList from \"../components/utils/createDescriptionList\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport convData2DescList from \"../components/utils/convData2DescList\";\r\nimport preProcessB4DescList from \"../components/utils/preProcessB4DescList\";\r\nimport nicelySort from \"../components/utils/nicelySort\";\r\nimport array2objectAnyOf from \"../components/utils/array2objectAnyOf\";\r\nimport SchemaOne from \"../schemas/plasma-mds.json\";\r\nimport SchemaTwo from \"../schemas/pak-schema.json\";\r\nimport SchemaThree from \"../schemas/appj-schema.json\";\r\nimport SchemaFour from \"../schemas/all-types.json\";\r\nimport fillValueWithEmptyString from \"../components/utils/fillValueWithEmptyString\";\r\nimport fillForm from \"../components/utils/fillForm\";\r\n\r\n// function that receive the schema and convert it to Form/json data blueprint\r\n// also to already put the default value to this blueprint\r\nconst createFormDataBlueprint = (schemaProperties) => {\r\n  let newObject = {};\r\n\r\n  Object.keys(schemaProperties).forEach((item) => {\r\n    if (schemaProperties[item][\"type\"] !== \"object\") {\r\n      if (schemaProperties[item][\"default\"] !== undefined) {\r\n        newObject[item] = schemaProperties[item][\"default\"];\r\n      } else if (\r\n        (schemaProperties[item][\"default\"] === undefined) &\r\n        (schemaProperties[item][\"enum\"] !== undefined)\r\n      ) {\r\n        newObject[item] = schemaProperties[item][\"enum\"][0];\r\n      } else if (\r\n        (schemaProperties[item][\"type\"] === \"boolean\") &\r\n        (schemaProperties[item][\"default\"] === undefined)\r\n      ) {\r\n        newObject[item] = false;\r\n      }\r\n    } else {\r\n      if (schemaProperties[item][\"properties\"] !== undefined) {\r\n        newObject[item] = createFormDataBlueprint(\r\n          schemaProperties[item][\"properties\"]\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return newObject;\r\n};\r\n\r\n/*\r\n// function to remove empty artributes\r\nconst removeEmpty = (obj) => {\r\n  return Object.fromEntries(\r\n    Object.entries(obj)\r\n      .filter(([_, v]) => (v !== null) & (v !== \"\") & (v !== {}) & (v !== []))\r\n      .map(([k, v]) => [k, v === Object(v) ? removeEmpty(v) : v])\r\n  );\r\n};\r\n*/\r\n\r\n// function to remove empty artributes\r\nconst removeEmpty = (obj) => {\r\n  Object.keys(obj).forEach((key) => {\r\n    if (obj[key] && typeof obj[key] === \"object\") {\r\n      const childObject = removeEmpty(obj[key]);\r\n      if (childObject === undefined) {\r\n        delete obj[key];\r\n      }\r\n    } else if (obj[key] === \"\" || obj[key] === null || obj[key] === undefined) {\r\n      delete obj[key];\r\n    }\r\n  });\r\n  return Object.keys(obj).length > 0 || obj instanceof Array ? obj : undefined;\r\n};\r\n\r\nconst AdamantMain = () => {\r\n  // state management\r\n  const [disable, setDisable] = useState(true);\r\n  const [schemaMessage, setSchemaMessage] = useState(null);\r\n  const [schemaValidity, setSchemaValidity] = useState(false);\r\n  const [schema, setSchema] = useState(null);\r\n  const [schemaIntermediate, setSchemaIntermediate] = useState(null);\r\n  const [renderReady, setRenderReady] = useState(false);\r\n  const [editMode, setEditMode] = useState(true);\r\n  const [schemaList, setSchemaList] = useState([]);\r\n  const [schemaNameList, setSchemaNameList] = useState([]);\r\n  const [selectedSchemaName, setSelectedSchemaName] = useState(\"\");\r\n  const [originalSchema, setOriginalSchema] = useState();\r\n  const [inputMode, setInputMode] = useState(false);\r\n  const [convertedSchema, setConvertedSchema] = useState(null);\r\n  const [createScratchMode, setCreateScratchMode] = useState(false);\r\n  const [jsonData, setJsonData] = useState({});\r\n  const [descriptionList, setDescriptionList] = useState(\"\");\r\n  const [schemaWithValues, setSchemaWithValues] = useState({});\r\n  const [token, setToken] = useState(\"\");\r\n  const [eLabURL, setELabURL] = useState(\"\");\r\n  const [experimentTitle, setExperimentTitle] = useState(\"\");\r\n  const [onlineMode, setOnlineMode] = useState(false);\r\n  const [tags, setTags] = useState([]);\r\n  const [retrievedTags, setRetrievedTags] = useState([]);\r\n  // for dropdown buttons\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [openSubmitDialog, setOpenSubmitDialog] = useState(false);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  }; //\r\n\r\n  // check if the front-end is connected to backend at all\r\n  useEffect(() => {\r\n    let $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"GET\",\r\n      url: \"/adamant/api/check_mode\",\r\n      success: function () {\r\n        console.log(\"Connection to server is established. Online mode\");\r\n        setOnlineMode(true);\r\n        toast.success(\"Connection to server is established. Online mode.\", {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        });\r\n      },\r\n      error: function () {\r\n        console.log(\"Unable to establish connection to server. Offline mode\");\r\n        setOnlineMode(false);\r\n\r\n        // use available schema as a place holder\r\n        setSchemaNameList([\r\n          \"\",\r\n          \"plasma-mds.json\",\r\n          \"pak-schema.json\",\r\n          \"appj-schema.json\",\r\n          \"all-types.json\",\r\n        ]);\r\n        setSchemaList([null, SchemaOne, SchemaTwo, SchemaThree, SchemaFour]);\r\n\r\n        toast.warning(\r\n          \"Unable to establish connection to server. Offline mode.\",\r\n          {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false,\r\n            progress: undefined,\r\n          }\r\n        );\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // get schemas from server when onlinemode is true\r\n  useEffect(() => {\r\n    // if online mode then get available schemas from server\r\n    if (onlineMode === true) {\r\n      let $ = require(\"jquery\");\r\n      $.ajax({\r\n        type: \"GET\",\r\n        url: \"/adamant/api/get_schemas\",\r\n        success: function (status) {\r\n          console.log(\"SUCCESS\");\r\n\r\n          // do this to preserver the order\r\n          let sch = [];\r\n          status[\"schema\"].forEach((element) => {\r\n            sch.push(JSON.parse(element));\r\n          });\r\n\r\n          setSchemaList(sch);\r\n          setSchemaNameList(status[\"schemaName\"]);\r\n        },\r\n        error: function () {\r\n          console.log(\"ERROR\");\r\n          toast.warning(\r\n            \"Error while fetching the schemas. Using basic list of schemas.\",\r\n            {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: false,\r\n              progress: undefined,\r\n            }\r\n          );\r\n          // if unable to fetch the schemas then use the basic list of schemas\r\n          setSchemaNameList([\r\n            \"\",\r\n            \"plasma-mds.json\",\r\n            \"pak-schema.json\",\r\n            \"appj-schema.json\",\r\n            \"all-types.json\",\r\n          ]);\r\n          setSchemaList([null, SchemaOne, SchemaTwo, SchemaThree, SchemaFour]);\r\n        },\r\n      });\r\n    }\r\n  }, [onlineMode]);\r\n\r\n  // handle select schema on change\r\n  const handleSelectSchemaOnChange = (event) => {\r\n    // first reset states\r\n    setRenderReady(false);\r\n    setDisable(true);\r\n    setCreateScratchMode(false);\r\n    setJsonData({});\r\n    //\r\n\r\n    console.log(\"selected schema:\", event.target.value);\r\n    setSelectedSchemaName(event.target.value);\r\n\r\n    let selectedSchema = schemaList[schemaNameList.indexOf(event.target.value)];\r\n\r\n    // reset everything when selectedSchema is empty\r\n    if (selectedSchema === null) {\r\n      setDisable(true);\r\n      setRenderReady(false);\r\n      setSchema(null);\r\n      setSchemaValidity(false);\r\n      setSchemaMessage();\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      return;\r\n    }\r\n\r\n    // convert selectedSchema schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n    try {\r\n      convertedSchema[\"properties\"] = object2array(\r\n        selectedSchema[\"properties\"]\r\n      );\r\n\r\n      // update states\r\n      setSchemaValidity(true);\r\n      setSchemaMessage(`${event.target.value} is a valid schema`);\r\n      setSchema(selectedSchema);\r\n      let oriSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n      setOriginalSchema(oriSchema);\r\n      setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n      setConvertedSchema(convertedSchema);\r\n      setEditMode(true);\r\n\r\n      // create form data\r\n      let formData = createFormDataBlueprint(selectedSchema[\"properties\"]);\r\n      setJsonData(formData);\r\n    } catch (error) {\r\n      console.log(error);\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${event.target.value} is invalid`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // function to check if the file accepted is of json format and json schema valid\r\n  const checkSchemaValidity = (schemaFile) => {\r\n    // place holder\r\n    if (schemaFile[0][\"type\"] === \"application/json\") {\r\n      // read the file with FileReadr API\r\n      const reader = new FileReader();\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = () => {\r\n        const binaryStr = reader.result;\r\n        const obj = JSON.parse(binaryStr);\r\n\r\n        // convert obj schema to iterable array properties\r\n        let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n        try {\r\n          convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n          // update states\r\n          setSchemaValidity(true);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is a valid schema`);\r\n          setSchema(obj);\r\n          let oriSchema = JSON.parse(JSON.stringify(obj));\r\n          setOriginalSchema(oriSchema);\r\n          setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n          setConvertedSchema(convertedSchema);\r\n          setEditMode(true);\r\n\r\n          // create form data\r\n          let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n          setJsonData(formData);\r\n        } catch (error) {\r\n          console.log(error);\r\n          // update states\r\n          setSchemaValidity(false);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is invalid`);\r\n          setSchema(null);\r\n        }\r\n      };\r\n      reader.readAsText(schemaFile[0]);\r\n    } else {\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${schemaFile[0][\"name\"]} is of incorrect file type`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // browse or drag&drop schema file\r\n  const onDrop = useCallback(\r\n    (acceptedFile) => {\r\n      // process the schema, validation etc\r\n      checkSchemaValidity(acceptedFile);\r\n\r\n      // store schema file in the state\r\n      // update states\r\n      setRenderReady(false);\r\n      setDisable(true);\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      setSelectedSchemaName(\"\");\r\n    },\r\n    [setRenderReady]\r\n  );\r\n  //\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    multiple: false,\r\n  });\r\n\r\n  // render on-click handle\r\n  const renderOnClick = () => {\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // clear schema on-click handle\r\n  const clearSchemaOnClick = () => {\r\n    setDisable(true);\r\n    setRenderReady(false);\r\n    setSchema(null);\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setCreateScratchMode(false);\r\n  };\r\n\r\n  // create new schema from scratch\r\n  const createSchemaFromScratch = () => {\r\n    // update browse schema render states\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setJsonData({});\r\n    setSelectedSchemaName(\"\");\r\n\r\n    let schemaBlueprint = {\r\n      $schema: \"http://json-schema.org/draft-04/schema#\",\r\n      properties: {},\r\n      type: \"object\",\r\n    };\r\n    const obj = JSON.parse(JSON.stringify(schemaBlueprint));\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n    setJsonData(formData);\r\n\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n    convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n    // update states\r\n    setCreateScratchMode(true);\r\n    setSchema(obj);\r\n    let oriSchema = JSON.parse(JSON.stringify(obj));\r\n    setOriginalSchema(oriSchema);\r\n    setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n    setConvertedSchema(convertedSchema);\r\n    setEditMode(true);\r\n\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // compile on-click handle\r\n  const compileOnClick = () => {\r\n    const value = schema;\r\n    setInputMode(true);\r\n    setSchema(value);\r\n    setEditMode(false);\r\n    setDisable(true);\r\n  };\r\n\r\n  // return to edit mode handle\r\n  const toEditMode = () => {\r\n    const value = schema;\r\n    setInputMode(false);\r\n    setSchema(value);\r\n    setEditMode(true);\r\n    setDisable(false);\r\n  };\r\n\r\n  // update parent (re-render everything)\r\n  const updateParent = (value) => {\r\n    const newValue = { ...value };\r\n\r\n    // update original schema\r\n    const updatedSchema = JSON.parse(JSON.stringify(newValue));\r\n    const tempSchema = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema[\"properties\"] = array2object(tempSchema[\"properties\"]);\r\n\r\n    setConvertedSchema(newValue);\r\n    setSchema(updatedSchema);\r\n\r\n    // update intermediate schema\r\n    const updatedSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    const tempSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema2[\"properties\"] = array2objectAnyOf(tempSchema2[\"properties\"]);\r\n    setSchemaIntermediate(updatedSchema2);\r\n  };\r\n\r\n  // revert all changes to the schema\r\n  const revertAllChanges = () => {\r\n    const value = { ...originalSchema };\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(value));\r\n    convertedSchema[\"properties\"] = object2array(value[\"properties\"]);\r\n    setConvertedSchema(convertedSchema);\r\n    setSchema(value);\r\n    setSchemaWithValues(value);\r\n    setDescriptionList(\"\");\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(value[\"properties\"]);\r\n    setJsonData(formData);\r\n  };\r\n\r\n  // handle data input on blur\r\n  const handleDataInput = (event, path, type) => {\r\n    let jData = { ...jsonData };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(jData, path, value);\r\n    console.log(\"Current form data    (jData):\", jData);\r\n    setJsonData(jData);\r\n  };\r\n  //\r\n\r\n  // handle data input on blur to convertedSchema\r\n  const handleConvertedDataInput = (event, path, type) => {\r\n    let convSchemaData = { ...convertedSchema };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(convSchemaData, path, value);\r\n    setConvertedSchema(convSchemaData);\r\n    //console.log(convSchemaData);\r\n\r\n    // convert to form data\r\n    /*\r\n    console.log(\r\n      \"Current form data (convData):\",\r\n      convData2FormData(\r\n        JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n      )\r\n    );\r\n    */\r\n  };\r\n\r\n  // delete data in jsonData when the field in schema is deleted\r\n  const handleDataDelete = (path) => {\r\n    let jData = { ...jsonData };\r\n    let value = deleteKeySchema(jData, path);\r\n    setJsonData(value);\r\n    console.log(\"Current form data:\", value);\r\n  };\r\n\r\n  // handle received form data (json). Fill the form fields with the received data\r\n  const handleReceivedFormData = (data) => {\r\n    console.log(data);\r\n    // must look like updateParent\r\n\r\n    const newValue = { ...convertedSchema };\r\n\r\n    //fills this converted schema with the received data\r\n    fillForm(newValue[\"properties\"], data);\r\n    console.log(\"filled form:\\n\", newValue);\r\n\r\n    // update original schema\r\n    const updatedSchema = JSON.parse(JSON.stringify(newValue));\r\n    const tempSchema = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema[\"properties\"] = array2object(tempSchema[\"properties\"]);\r\n\r\n    setConvertedSchema(newValue);\r\n    setSchema(updatedSchema);\r\n\r\n    // update intermediate schema\r\n    const updatedSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    const tempSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema2[\"properties\"] = array2objectAnyOf(tempSchema2[\"properties\"]);\r\n    setSchemaIntermediate(updatedSchema2);\r\n  };\r\n\r\n  // update form data id if a fieldId changes, simply delete key value pair of the oldfieldid from jsonData\r\n  const updateFormDataId = (\r\n    oldFieldId,\r\n    newFieldId,\r\n    pathFormData,\r\n    defaultValue\r\n  ) => {\r\n    if (oldFieldId === newFieldId) {\r\n      return;\r\n    }\r\n    if (defaultValue === undefined) {\r\n      let jData = { ...jsonData };\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    } else {\r\n      let newPathFormData = pathFormData.split(\".\");\r\n      newPathFormData.pop();\r\n      newPathFormData.push(newFieldId);\r\n\r\n      let jData = { ...jsonData };\r\n      let value = getValue(jData, pathFormData);\r\n      set(jData, newPathFormData, value);\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    }\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadJsonSchema = () => {\r\n    let content = { ...schema };\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `jsonschema-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadFormData = () => {\r\n    let content = { ...jsonData };\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, validation] = validateAgainstSchema(content, contentSchema);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      let errorMessages = \"\";\r\n      if (validation.errors !== null) {\r\n        for (let i = 0; i < validation.errors.length; i++) {\r\n          let currentMessage = validation.errors[i].message + \".\";\r\n          errorMessages += currentMessage + \"\\n\";\r\n        }\r\n      }\r\n      errorMessages = errorMessages.split(\"\\n\");\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {errorMessages.map((item, index) => {\r\n            return <div key={index}>{item}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `formdata-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadDescriptionList = () => {\r\n    let content = { ...jsonData };\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, validation] = validateAgainstSchema(content, contentSchema);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      let errorMessages = \"\";\r\n      if (validation.errors !== null) {\r\n        for (let i = 0; i < validation.errors.length; i++) {\r\n          let currentMessage = validation.errors[i].message + \".\";\r\n          errorMessages += currentMessage + \"\\n\";\r\n        }\r\n      }\r\n      errorMessages = errorMessages.split(\"\\n\");\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {errorMessages.map((item, index) => {\r\n            return <div key={index}>{item}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = convData2DescList(convProp);\r\n    //let cleaned = removeEmpty(convData2DescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to download. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    let preProcessed = preProcessB4DescList(cleaned, cleaned, schema, []);\r\n    //console.log(preProcessed);\r\n    let nicelySorted = nicelySort(preProcessed);\r\n    let descList = `<dl>\\n${createDescriptionList(nicelySorted)}</dl>\\n`;\r\n    let descListHeading = `<h1><strong>${convSch[\"title\"]}</strong></h1>\\n`;\r\n    descListHeading += descList;\r\n    descListHeading += `<div> This experiment template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>ADAMANT v0.0.1</a></span> </div>`;\r\n    console.log(\"created description list:\\n\", descListHeading);\r\n    setDescriptionList(descList);\r\n\r\n    let sha256_hash = CryptoJS.SHA256(descListHeading);\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([descListHeading], {\r\n      type: \"text/plain\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `desclist-${sha256_hash}.tpl`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // get available tags from elabftw\r\n  const getTagsELabFTW = () => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/adamant/api/get_tags\",\r\n      dataType: \"json\",\r\n      data: {\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n      },\r\n      success: function (status) {\r\n        console.log(\"Tags retrieved successfully\");\r\n        //let arr = [];\r\n        //for (let i = 0; i < status.length; i++) {\r\n        //  arr.push(status[i][\"tag\"]);\r\n        //}\r\n        setRetrievedTags(status);\r\n        toast.success(`Successfully retrieved the tags!`, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        });\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Failed to retrieve tags\");\r\n        console.log(status);\r\n        toast.error(`Failed to get the tags!\\nMaybe wrong url or token?`, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // create an experiment in elabftw based on the schema and data\r\n  const createExperimentELabFTW = () => {\r\n    // validate the data first using ajv\r\n    let content = { ...jsonData };\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, validation] = validateAgainstSchema(\r\n      content,\r\n      JSON.parse(JSON.stringify(contentSchema))\r\n    );\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      let errorMessages = \"\";\r\n      if (validation.errors !== null) {\r\n        for (let i = 0; i < validation.errors.length; i++) {\r\n          let currentMessage = validation.errors[i].message + \".\";\r\n          errorMessages += currentMessage + \"\\n\";\r\n        }\r\n      }\r\n      errorMessages = errorMessages.split(\"\\n\");\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {errorMessages.map((item, index) => {\r\n            return <div key={index}>{item}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      // clear states\r\n      setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    }\r\n\r\n    // call create experiment api\r\n    console.log(\"tags:\", tags);\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/adamant/api/create_experiment\",\r\n      async: false,\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n        title: experimentTitle,\r\n        body: descriptionList,\r\n        tags: JSON.stringify(tags),\r\n      },\r\n      success: function (status) {\r\n        console.log(\"SUCCESS\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenSubmitDialog(false);\r\n        toast.success(\r\n          `Successfully created an experiment with id: ${status[\"experimentId\"]}!`,\r\n          {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false,\r\n            progress: undefined,\r\n          }\r\n        );\r\n\r\n        // clear states\r\n        setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenSubmitDialog(false);\r\n        toast.error(\r\n          `Failed to create an experiment!\\nMaybe wrong url or token?`,\r\n          {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false,\r\n            progress: undefined,\r\n          }\r\n        );\r\n        // clear states\r\n        setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleOnClickProceedButton = () => {\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = convData2DescList(convProp);\r\n    //let cleaned = removeEmpty(convData2DescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to proceed. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    let preProcessed = preProcessB4DescList(cleaned, cleaned, schema, []);\r\n    //console.log(preProcessed);\r\n    let nicelySorted = nicelySort(preProcessed);\r\n    let descList = `<dl>\\n${createDescriptionList(nicelySorted)}</dl>\\n`;\r\n    let descListHeading = `<h1><strong>${convSch[\"title\"]}</strong></h1>\\n`;\r\n    descListHeading += descList;\r\n    descListHeading += `<div> This experiment template was generated with <span ><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>ADAMANT v0.0.1</a></span> </div>`;\r\n    console.log(\"created description list:\\n\", descListHeading);\r\n    setDescriptionList(descListHeading);\r\n\r\n    // validate the data first using ajv\r\n    let content = { ...jsonData };\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, validation] = validateAgainstSchema(content, contentSchema);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      let errorMessages = \"\";\r\n      if (validation.errors !== null) {\r\n        for (let i = 0; i < validation.errors.length; i++) {\r\n          let currentMessage = validation.errors[i].message + \".\";\r\n          errorMessages += currentMessage + \"\\n\";\r\n        }\r\n      }\r\n      errorMessages = errorMessages.split(\"\\n\");\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {errorMessages.map((item, index) => {\r\n            return <div key={index}>{item}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      // clear states\r\n      setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    } else {\r\n      setOpenSubmitDialog(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormContext.Provider\r\n        value={{\r\n          updateParent,\r\n          convertedSchema,\r\n          handleDataInput,\r\n          updateFormDataId,\r\n          handleDataDelete,\r\n          handleConvertedDataInput,\r\n          handleReceivedFormData,\r\n        }}\r\n      >\r\n        <div style={{ paddingBottom: \"5px\" }}>\r\n          <img\r\n            style={{ width: \"100%\", borderRadius: \"5px\" }}\r\n            alt=\"header\"\r\n            src={HeaderImage}\r\n          />\r\n          {!inputMode ? (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                textAlign: \"left\",\r\n                padding: \"10px 10px 0px 10px\",\r\n              }}\r\n            >\r\n              <Button variant=\"contained\" color=\"primary\" {...getRootProps()}>\r\n                <input {...getInputProps()} />\r\n                {isDragActive ? \"Drop here\" : \"Browse Schema\"}\r\n              </Button>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <TextField\r\n                onChange={(event) => handleSelectSchemaOnChange(event)}\r\n                style={{ width: \"220px\", marginLeft: \"10px\" }}\r\n                fullWidth={false}\r\n                value={selectedSchemaName}\r\n                select\r\n                id={\"select-schema\"}\r\n                label={\"Select existing schema\"}\r\n                variant=\"outlined\"\r\n                SelectProps={{ native: true }}\r\n              >\r\n                {schemaNameList.map((content, index) => (\r\n                  <option key={index} value={content}>\r\n                    {content}\r\n                  </option>\r\n                ))}\r\n              </TextField>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <Button\r\n                onClick={() => createSchemaFromScratch()}\r\n                style={{\r\n                  marginLeft: \"10px\",\r\n                  marginRight: \"10px\",\r\n                }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                CREATE FROM SCRATCH\r\n              </Button>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        {!inputMode ? (\r\n          <div\r\n            style={{\r\n              paddingLeft: \"10px\",\r\n              display: \"flex\",\r\n              width: \"100%\",\r\n              textAlign: \"left\",\r\n            }}\r\n          >\r\n            {schemaValidity === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}. You can now render the form.\r\n                </div>\r\n                <Button\r\n                  style={{ marginRight: \"5px\" }}\r\n                  onClick={() => renderOnClick()}\r\n                  variant=\"outlined\"\r\n                >\r\n                  Render\r\n                </Button>\r\n                <Button\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    paddingTop: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"red\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}\r\n                </div>\r\n              </>\r\n            )}\r\n            {createScratchMode === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  Create from scratch mode. You can now start editing.\r\n                </div>\r\n                <Button\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : null}\r\n          </div>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        {renderReady === true ? (\r\n          <FormRenderer\r\n            revertAllChanges={revertAllChanges}\r\n            schema={convertedSchema}\r\n            originalSchema={schema}\r\n            edit={editMode}\r\n          />\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        <div\r\n          style={{\r\n            padding: \"10px 10px\",\r\n            display: \"flex\",\r\n            justifyContent: \"right\",\r\n          }}\r\n        >\r\n          {inputMode ? (\r\n            <div style={{ width: \"100%\", display: \"inline-block\" }}>\r\n              <Button\r\n                onClick={() => toEditMode()}\r\n                style={{ float: \"left\", marginRight: \"5px\" }}\r\n                variant=\"outlined\"\r\n              >\r\n                Back to Edit Mode\r\n              </Button>\r\n              <Button\r\n                disabled={!onlineMode}\r\n                onClick={() => handleOnClickProceedButton()}\r\n                style={{ float: \"right\" }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Proceed\r\n              </Button>\r\n              <Button\r\n                style={{ float: \"right\", marginRight: \"5px\" }}\r\n                id=\"demo-positioned-button\"\r\n                aria-controls={open ? \"demo-positioned-menu\" : undefined}\r\n                aria-haspopup=\"true\"\r\n                aria-expanded={open ? \"true\" : undefined}\r\n                onClick={handleClick}\r\n              >\r\n                <DownloadIcon /> Download Schema/Data\r\n              </Button>\r\n              <Menu\r\n                id=\"demo-positioned-menu\"\r\n                aria-labelledby=\"demo-positioned-button\"\r\n                anchorEl={anchorEl}\r\n                open={open}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n                transformOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n              >\r\n                <MenuItem onClick={handleDownloadJsonSchema}>\r\n                  Download JSON Schema\r\n                </MenuItem>\r\n                <MenuItem onClick={handleDownloadFormData}>\r\n                  Download JSON Data\r\n                </MenuItem>\r\n                <MenuItem onClick={handleDownloadDescriptionList}>\r\n                  Download Description List\r\n                </MenuItem>\r\n              </Menu>\r\n            </div>\r\n          ) : (\r\n            <Button\r\n              disabled={disable}\r\n              onClick={() => compileOnClick()}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Compile\r\n            </Button>\r\n          )}\r\n        </div>\r\n        <div style={{ padding: \"5px\" }}>ADAMANT v0.0.1</div>\r\n      </FormContext.Provider>\r\n      <CreateELabFTWExperimentDialog\r\n        setTags={setTags}\r\n        tags={tags}\r\n        setRetrievedTags={setRetrievedTags}\r\n        retrievedTags={retrievedTags}\r\n        setExperimentTitle={setExperimentTitle}\r\n        createExperimentELabFTW={createExperimentELabFTW}\r\n        setToken={setToken}\r\n        token={token}\r\n        setELabURL={setELabURL}\r\n        eLabURL={eLabURL}\r\n        setOpenSubmitDialog={setOpenSubmitDialog}\r\n        openSubmitDialog={openSubmitDialog}\r\n        getTagsELabFTW={getTagsELabFTW}\r\n      />\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdamantMain;\r\n","import React from \"react\";\nimport \"./styles.css\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport AdamantMain from \"./pages/AdamantMain\";\nimport \"cors\";\n\nexport default function App() {\n\n\n  return (\n    /*\n    <div className=\"the_app\">\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/pbb/adamant\" />\n        <Route exact path=\"/pbb/adamant\" component={AdamantMain}></Route>\n      </Switch>\n    </div>\n    */\n    <div className=\"the_app\">\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/adamant\" />\n        <Route exact path=\"/adamant\" component={AdamantMain}></Route>\n      </Switch>\n    </div>\n  );\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n//import { HashRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nconst rootElement = document.getElementById(\"root\");\n\n// strict mode is disabled so that findDOMNode warning is suppressed\nReactDOM.render(\n  <Router>\n    <CssBaseline />\n    <App />\n  </Router>,\n  rootElement\n);\n\n\n/* use this for strict mode, however it always throws the findDOMNode warning\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <CssBaseline />\n      <App />\n    </Router>\n  </React.StrictMode>,\n  rootElement\n);\n*/"],"sourceRoot":""}