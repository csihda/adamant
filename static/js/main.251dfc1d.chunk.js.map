{"version":3,"sources":["assets/json-file-svgrepo-com.svg","components/utils/getValue.js","components/utils/checkIfFieldIDExist.js","FormContext.js","components/utils/updateRequired.js","components/utils/object2array.js","components/EditElement.js","components/utils/deleteKey.js","components/elements/StringType.js","components/utils/getUnit.js","components/elements/NumberType.js","components/elements/ObjectType.js","components/elements/IntegerType.js","components/elements/BooleanType.js","components/elements/array_items/ItemIntegerType.js","components/elements/array_items/ItemNumberType.js","components/elements/array_items/ItemStringType.js","components/elements/array_items/ItemObjectType.js","components/elements/ArrayItemRenderer.js","components/utils/generateUniqueID.js","components/elements/ArrayType.js","components/elements/AnyOfKeywordPlaceHolder.js","assets/file-icon.svg","components/elements/FileUpload.js","components/ElementRenderer.js","components/EditSchemaHeader.js","components/JSONSchemaViewerDialog.js","components/utils/fillForm.js","components/FormRenderer.js","components/utils/array2object.js","components/utils/deleteKeySchema.js","components/utils/getValueInSchemaFullPath.js","components/utils/validateAgainstSchema.js","components/CreateELabFTWExperimentDialog.js","components/utils/prepareDataForDescList.js","components/utils/array2objectAnyOf.js","components/utils/fillValueWithEmptyString.js","components/utils/convData2FormData.js","components/FormReviewBeforeSubmit.js","components/utils/changeKeywords.js","assets/adamant-header-5.svg","components/utils/nicelySort.js","components/utils/getPaths.js","components/utils/getValueInSchema.js","components/utils/getPathURIsAndLabels.js","components/utils/preProcessB4DescList.js","components/utils/getTableCandidates.js","components/utils/table2DescListTable.js","components/utils/createDescriptionList.js","components/utils/createDescriptionListWithoutStyling.js","components/utils/createDescriptionListFromJSON.js","components/utils/validateSchemaAgainstSpecification.js","pages/AdamantMain.jsx","App.js","index.js"],"names":["_g","_g2","_g3","_g4","_g5","_g6","_g7","_g8","_g9","_g10","_g11","_g12","_g13","_g14","_g15","_g16","getValue","json","path","undefined","jsonData","JSON","parse","stringify","split","tempValue","i","length","checkIfFieldIDExist","schema","fieldkey","result","forEach","element","value","newPath","pop","join","FormContext","createContext","updateRequired","selectedType","requiredChecked","field_key","convertedSchema","set","require","immediateValue","requiredArray","push","Set","includes","filter","item","object2array","propert","someArray","Object","keys","tempVariable2","tempVariable","item_","EditElement","tempUISchema","editOrAdd","field_uri","enumerated","field_enumerate","field_required","UISchema","pathFormData","openDialog","setOpenDialog","defaultValue","field_label","useState","setSelectedType","title","setTitle","setFieldKey","fieldUri","setFieldUri","description","setDescription","defValue","setDefValue","useContext","updateParent","updateFormDataId","schemaSpecification","setRequiredChecked","enumChecked","setEnumChecked","enumList","setEnumList","arrayItemType","setArrayItemType","arrayMinMaxItem","setArrayMinMaxItem","numberMinMaxValue","setNumberMinMaxValue","charMinMaxLengthValue","setCharMinMaxLengthValue","charMinMaxHelperText","setCharMinMaxHelperText","arrayMinMaxHelperText","setArrayMinMaxHelperText","numberMinMaxValueHelperText","setNumberMinMaxValueHelpertext","arrayUniqueItems","setArrayUniqueItems","subSchemaValidity","setSubSchemaValidity","convertedSubSchema","setConvertedSubSchema","subSchemaFilename","setSubSchemaFilename","activeSubSchemaButton","setActiveSubSchemaButton","arrayItemTypeList","useEffect","notImplemented","handleUpdateSchemaOnClick","toString","replace","alert","error","console","log","properties","newConvertedSchema","newList","Array","isArray","existed","parsed","map","x","parseFloat","parseInt","handleChangeUISchema","event","keyword","target","handleMinMaxArrayItem","field","Number","isNaN","handleMinMaxArrayItemOnBlur","style","color","handleMinMaxValue","minMax","handleMinMaxValueOnBlur","handleMinMaxCharLength","handleMinMaxCharLengthOnBlur","handleCancelEdit","handleCheckBoxOnChange","prev","onDrop","useCallback","acceptedFile","schemaFile","reader","FileReader","onabort","onerror","onload","binaryStr","obj","copiedObj","key","readAsText","checkSubSchemaValidity","useDropzone","multiple","getRootProps","getInputProps","Dialog","open","DialogTitle","id","display","width","verticalAlign","fontSize","alignSelf","IconButton","onClick","Divider","DialogContent","DialogActions","Button","disabled","autoFocus","DialogContentText","component","FormControl","FormLabel","TextField","margin","required","onChange","marginTop","variant","fullWidth","label","helperText","multiline","rows","paddingTop","paddingBottom","select","SelectProps","native","content","index","onFocus","onBlur","paddingLeft","paddingRight","FormControlLabel","control","Checkbox","checked","marginLeft","marginBottom","FormGroup","justifyContent","size","deleteKey","elementValue","deleteIndex","at","splice","useStyles","makeStyles","theme","root","heading","typography","pxToRem","fontWeight","fontWeightRegular","StringType","adamant_field_error","adamant_error_description","minLength","maxLength","withinObject","dataInputItems","setDataInputItems","withinArray","field_index","edit","field_description","descriptionText","setDescriptionText","inputError","setInputError","handleDataDelete","handleConvertedDataInput","SEMSelectedDevice","setSEMSelectedDevice","fieldValue","setFieldValue","fieldEnumerate","setFieldEnumerate","classes","handleOnChange","handleOnFocus","semOperatorDeviceList","e","handleDeleteElement","pathArr","indexOf","val","handleOnBlur","type","newPathFormData","arr","items","from","dataInputItemVal","className","Tooltip","placement","height","onKeyDown","shiftKey","preventDefault","getUnit","addorn","match","NumberType","minimum","maximum","inputValue","setInputValue","unit","handleInputOnChange","inputValueVar","handleInputOnBlur","InputProps","endAdornment","InputAdornment","position","tex","String","raw","onMouseEnter","Accordion","withStyles","border","borderBottom","boxShadow","expanded","MuiAccordion","AccordionSummary","backgroundColor","minHeight","MuiAccordionSummary","ObjectType","pathSchema","object_is_required","field_properties","openDialogAddElement","setOpenDialogAddElement","expand","setExpand","padding","borderRadius","expandIcon","IconButtonProps","Typography","AccordionDetails","onDragEnd","destination","source","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","isDragDisabled","draggableId","draggableProps","dragHandleProps","fieldIndex","elementRequired","placeholder","defaultSchema","IntegerType","isInteger","BooleanType","handleInputWhenInvalid","alignItems","textAlign","FormHelperText","ItemIntegerType","oDataInputItems","oSetDataInputItems","arrayFieldKey","handleDeleteArrayItem","arr2","items2","prevIndex","ItemNumberType","ItemStringType","ItemObjectType","field_items","field_type","objectIndex","newVal","justifySelf","tempField","ArrayItemRenderer","enumerate","generateUID","firstPart","Math","random","secondPart","slice","ArrayType","maxItems","minItems","uniqueItems","field_prefixItems","inputItems","setInputItems","generateUniqueID","newFieldItems","currentInputItems","reorderedItem2","toast","warning","toastId","handleAddArrayItem","AnyOfKeywordPlaceHolder","anyOf_list","FileUpload","contentEncoding","dataUrl","setDataUrl","renderingInProgress","setRenderingInProgress","mediaFileType","setMediaFileType","fileSize","setFileSize","renderableMediaFileTypes","fieldLabel","acceptedTypes","matches","submatch","replaceAll","getAcceptedTypes","valid","fileType","validateAcceptedFile","readAsDataURL","Box","sx","LinearProgress","alt","src","FileIcon","whiteSpace","textOverflow","overflow","handleOnClickedClear","ElementRenderer","$id","anyOf","_excluded","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgJsonFileSvgrepoCom","_ref","svgRef","titleId","props","xmlns","xmlnsXlink","y","viewBox","enableBackground","xmlSpace","d","points","cx","cy","r","ForwardRef","changeKeywords","oldKey","desiredNewKey","EditSchemaHeader","schemaVersion","schemaID","_schemaVersion","_setSchemaVersion","_title","_setTitle","_description","_setDescription","_schemaID","_setSchemaID","setSchemaSpecification","emptyObject","emptyArray","f","JSONSchemaViewerDialog","openSchemaViewer","setOpenSchemaViewer","jsonschema","onClose","maxWidth","fillForm","schemaProp","data","FormRenderer","revertAllChanges","originalSchema","receivedData","setReceivedData","validity","file","message","checkFormDataValidity","newValue","$schema","schemaTitle","array2object","someObject","tempKey","tempElements","enumContent","deleteKeySchema","pathArray","tobeDeleted","getValueInSchemaFullPath","createBetterValidationMessages","validate","errors","messages","schemaPath","substring","params","missingProperty","errorMessage","newMessage","s","messageLookUpTable","validateAgainstSchema","formData","Ajv04","schemaId","allErrors","compile","Ajv","ajv","CreateELabFTWExperimentDialog","getTagsELabFTW","eLabURL","setELabURL","setTags","setRetrievedTags","tags","retrievedTags","setExperimentTitle","setToken","token","setOpenCreateElabFTWExperimentDialog","openCreateElabFTWExperimentDialog","createExperimentELabFTW","Autocomplete","freeSolo","options","getOptionLabel","option","tag","values","renderInput","trim","prepareDataForDescList","convDataProp","array2objectAnyOf","fillValueWithEmptyString","jsonObjProp","convData2FormData","FormReviewBeforeSubmit","onlineMode","openFormReviewDialog","setOpenFormReviewDialog","descriptionList","setOpenFunctions","submitFunctions","submitText","anchorEl","setAnchorEl","Boolean","dangerouslySetInnerHTML","__html","float","marginRight","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","submitJobRequest","nicelySort","sortedArr","loc","checkObjectExistance","newObj","getPaths","object","reduce","k","kk","p","getValueInSchema","getPathURIsAndLabels","uris","labels","thePath","pathPreProcess","processedArr","preProcessB4DescList","originalContent","path_key","path_label","URIsAndLabels","getTableCandidates","convProp","container","table2DescListTable","table","descListTable","keyTitleMapper","startsWith","extension","listMimeTypes","find","fileName","createDescriptionList","descList","emptyString","titleDiv","some","createDescriptionListWithoutStyling","createDescriptionListFromJSON","cleanedJson","convertedProperties","footnote","styling","preProcessed","nicelySorted","tables","descListTables","descListHeading","validateSchemaAgainstSpecification","spec","createFormDataBlueprint","schemaProperties","newObject","removeEmpty","AdamantMain","disable","setDisable","schemaMessage","setSchemaMessage","schemaValidity","setSchemaValidity","setSchema","setSchemaIntermediate","renderReady","setRenderReady","editMode","setEditMode","schemaList","setSchemaList","schemaNameList","setSchemaNameList","selectedSchemaName","setSelectedSchemaName","setOriginalSchema","inputMode","setInputMode","setConvertedSchema","createScratchMode","setCreateScratchMode","setJsonData","setDescriptionList","setSchemaWithValues","experimentTitle","setOnlineMode","QPTDATLogo","HeaderImage","setHeaderImage","setOpenJobRequestDialog","jobRequestSchemas","setJobRequestSchemas","submitTextList","setSubmitTextList","setSubmitText","handleClose","ajax","url","success","status","SchemaOne","SchemaTwo","SchemaThree","SchemaFour","SchemaFive","sch","oriSchema","findIndex","checkSchemaValidity","isDragActive","clearSchemaOnClick","updatedSchema","tempSchema","updatedSchema2","tempSchema2","setErrorStuffUponValidation","errorMessages","fieldKey","Provider","oldFieldId","newFieldId","jData","convSchemaData","implementedFieldTypes","selectedSchema","handleSelectSchemaOnChange","createSchemaFromScratch","toEditMode","convSch","cleaned","contentSchema","autoClose","handleOnClickProceedButton","sha256_hash","CryptoJS","SHA256","a","document","createElement","Blob","href","URL","createObjectURL","download","click","compileOnClick","async","dataType","javascript_data","eLabToken","body","responseText","App","packageJson","exact","to","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","rootElement","getElementById","ReactDOM","render","CssBaseline"],"mappings":"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","file":"static/js/main.251dfc1d.chunk.js","sourcesContent":["var _g, _g2, _g3, _g4, _g5, _g6, _g7, _g8, _g9, _g10, _g11, _g12, _g13, _g14, _g15, _g16;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgJsonFileSvgrepoCom(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Capa_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 58 58\",\n    style: {\n      enableBackground: \"new 0 0 58 58\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M50.949,12.187l-1.361-1.361l-9.504-9.505c-0.001-0.001-0.001-0.001-0.002-0.001l-0.77-0.771 C38.957,0.195,38.486,0,37.985,0H8.963C7.776,0,6.5,0.916,6.5,2.926V39v16.537V56c0,0.837,0.841,1.652,1.836,1.909 c0.051,0.014,0.1,0.033,0.152,0.043C8.644,57.983,8.803,58,8.963,58h40.074c0.16,0,0.319-0.017,0.475-0.048 c0.052-0.01,0.101-0.029,0.152-0.043C50.659,57.652,51.5,56.837,51.5,56v-0.463V39V13.978C51.5,13.211,51.407,12.644,50.949,12.187 z M39.5,3.565L47.935,12H39.5V3.565z M8.963,56c-0.071,0-0.135-0.025-0.198-0.049C8.61,55.877,8.5,55.721,8.5,55.537V41h41v14.537 c0,0.184-0.11,0.34-0.265,0.414C49.172,55.975,49.108,56,49.037,56H8.963z M8.5,39V2.926C8.5,2.709,8.533,2,8.963,2h28.595 C37.525,2.126,37.5,2.256,37.5,2.391V13.78c-0.532-0.48-1.229-0.78-2-0.78c-0.553,0-1,0.448-1,1s0.447,1,1,1c0.552,0,1,0.449,1,1v4 c0,1.2,0.542,2.266,1.382,3c-0.84,0.734-1.382,1.8-1.382,3v4c0,0.551-0.448,1-1,1c-0.553,0-1,0.448-1,1s0.447,1,1,1 c1.654,0,3-1.346,3-3v-4c0-1.103,0.897-2,2-2c0.553,0,1-0.448,1-1s-0.447-1-1-1c-1.103,0-2-0.897-2-2v-4 c0-0.771-0.301-1.468-0.78-2h11.389c0.135,0,0.265-0.025,0.391-0.058c0,0.015,0.001,0.021,0.001,0.036V39H8.5z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.354,51.43c-0.019,0.446-0.171,0.764-0.458,0.95s-0.672,0.28-1.155,0.28c-0.191,0-0.396-0.022-0.615-0.068 s-0.429-0.098-0.629-0.157s-0.385-0.123-0.554-0.191s-0.299-0.135-0.39-0.198l-0.697,1.107c0.183,0.137,0.405,0.26,0.67,0.369 s0.54,0.207,0.827,0.294s0.565,0.15,0.834,0.191s0.504,0.062,0.704,0.062c0.401,0,0.791-0.039,1.169-0.116 c0.378-0.077,0.713-0.214,1.005-0.41s0.524-0.456,0.697-0.779s0.26-0.723,0.26-1.196v-7.848h-1.668V51.43z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M25.083,49.064c-0.314-0.228-0.654-0.422-1.019-0.581s-0.702-0.323-1.012-0.492s-0.569-0.364-0.779-0.588 s-0.314-0.518-0.314-0.882c0-0.146,0.036-0.299,0.109-0.458s0.173-0.303,0.301-0.431s0.273-0.234,0.438-0.321 s0.337-0.139,0.52-0.157c0.328-0.027,0.597-0.032,0.807-0.014s0.378,0.05,0.506,0.096s0.226,0.091,0.294,0.137 s0.13,0.082,0.185,0.109c0.009-0.009,0.036-0.055,0.082-0.137s0.101-0.185,0.164-0.308s0.132-0.255,0.205-0.396 s0.137-0.271,0.191-0.39c-0.265-0.173-0.61-0.299-1.039-0.376s-0.853-0.116-1.271-0.116c-0.41,0-0.8,0.063-1.169,0.191 s-0.692,0.313-0.971,0.554s-0.499,0.535-0.663,0.882S20.4,46.13,20.4,46.576c0,0.492,0.104,0.902,0.314,1.23 s0.474,0.613,0.793,0.854s0.661,0.451,1.025,0.629s0.704,0.355,1.019,0.533s0.576,0.376,0.786,0.595s0.314,0.483,0.314,0.793 c0,0.511-0.148,0.896-0.444,1.155s-0.723,0.39-1.278,0.39c-0.183,0-0.378-0.019-0.588-0.055s-0.419-0.084-0.629-0.144 s-0.412-0.123-0.608-0.191s-0.357-0.139-0.485-0.212l-0.287,1.176c0.155,0.137,0.34,0.253,0.554,0.349s0.439,0.171,0.677,0.226 c0.237,0.055,0.472,0.094,0.704,0.116s0.458,0.034,0.677,0.034c0.511,0,0.966-0.077,1.367-0.232s0.738-0.362,1.012-0.622 s0.485-0.561,0.636-0.902s0.226-0.695,0.226-1.06c0-0.538-0.104-0.978-0.314-1.319S25.397,49.292,25.083,49.064z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.872,45.072c-0.378-0.429-0.82-0.754-1.326-0.978s-1.06-0.335-1.661-0.335s-1.155,0.111-1.661,0.335 s-0.948,0.549-1.326,0.978s-0.675,0.964-0.889,1.606s-0.321,1.388-0.321,2.235s0.107,1.595,0.321,2.242s0.511,1.185,0.889,1.613 s0.82,0.752,1.326,0.971s1.06,0.328,1.661,0.328s1.155-0.109,1.661-0.328s0.948-0.542,1.326-0.971s0.675-0.966,0.889-1.613 s0.321-1.395,0.321-2.242s-0.107-1.593-0.321-2.235S35.25,45.501,34.872,45.072z M34.195,50.698 c-0.137,0.487-0.326,0.882-0.567,1.183s-0.515,0.518-0.82,0.649s-0.627,0.198-0.964,0.198c-0.328,0-0.641-0.07-0.937-0.212 s-0.561-0.364-0.793-0.67s-0.415-0.699-0.547-1.183s-0.203-1.066-0.212-1.75c0.009-0.702,0.082-1.294,0.219-1.777 c0.137-0.483,0.326-0.877,0.567-1.183s0.515-0.521,0.82-0.649s0.627-0.191,0.964-0.191c0.328,0,0.641,0.068,0.937,0.205 s0.561,0.36,0.793,0.67s0.415,0.704,0.547,1.183s0.203,1.06,0.212,1.743C34.405,49.616,34.332,50.211,34.195,50.698z\"\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"44.012,50.869 40.061,43.924 38.393,43.924 38.393,54 40.061,54 40.061,47.055 44.012,54 45.68,54 45.68,43.924  44.012,43.924  \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20.5,20v-4c0-0.551,0.448-1,1-1c0.553,0,1-0.448,1-1s-0.447-1-1-1c-1.654,0-3,1.346-3,3v4c0,1.103-0.897,2-2,2 c-0.553,0-1,0.448-1,1s0.447,1,1,1c1.103,0,2,0.897,2,2v4c0,1.654,1.346,3,3,3c0.553,0,1-0.448,1-1s-0.447-1-1-1 c-0.552,0-1-0.449-1-1v-4c0-1.2-0.542-2.266-1.382-3C19.958,22.266,20.5,21.2,20.5,20z\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 28.5,\n    cy: 19.5,\n    r: 1.5\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M28.5,25c-0.553,0-1,0.448-1,1v3c0,0.552,0.447,1,1,1s1-0.448,1-1v-3C29.5,25.448,29.053,25,28.5,25z\"\n  }))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", null)), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", null)), _g4 || (_g4 = /*#__PURE__*/React.createElement(\"g\", null)), _g5 || (_g5 = /*#__PURE__*/React.createElement(\"g\", null)), _g6 || (_g6 = /*#__PURE__*/React.createElement(\"g\", null)), _g7 || (_g7 = /*#__PURE__*/React.createElement(\"g\", null)), _g8 || (_g8 = /*#__PURE__*/React.createElement(\"g\", null)), _g9 || (_g9 = /*#__PURE__*/React.createElement(\"g\", null)), _g10 || (_g10 = /*#__PURE__*/React.createElement(\"g\", null)), _g11 || (_g11 = /*#__PURE__*/React.createElement(\"g\", null)), _g12 || (_g12 = /*#__PURE__*/React.createElement(\"g\", null)), _g13 || (_g13 = /*#__PURE__*/React.createElement(\"g\", null)), _g14 || (_g14 = /*#__PURE__*/React.createElement(\"g\", null)), _g15 || (_g15 = /*#__PURE__*/React.createElement(\"g\", null)), _g16 || (_g16 = /*#__PURE__*/React.createElement(\"g\", null)));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgJsonFileSvgrepoCom);\nexport default __webpack_public_path__ + \"static/media/json-file-svgrepo-com.805d27de.svg\";\nexport { ForwardRef as ReactComponent };","// get json value given path\r\nconst getValue = (json, path) => {\r\n    if (path === undefined) {\r\n        return json[\"properties\"]\r\n    }\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValue;","import getValue from \"./getValue\";\r\nconst checkIfFieldIDExist = (schema, path, fieldkey) => {\r\n    let result\r\n    if (path === undefined) {\r\n        let value = schema[\"properties\"]\r\n        value.forEach(element => {\r\n            if (element[\"fieldKey\"] === fieldkey) {\r\n                return result = true;\r\n            }\r\n        });\r\n    } else {\r\n\r\n        let value = getValue(schema, path)[\"properties\"]\r\n\r\n        if (value === undefined) {\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n            let value = getValue(schema, newPath)\r\n            value.forEach(element => {\r\n                if (element[\"fieldKey\"] === fieldkey) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        } else {\r\n            value.forEach(element => {\r\n                if (element[\"fieldKey\"] === fieldkey) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    if (result) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n\r\n}\r\n\r\nexport default checkIfFieldIDExist;","import { createContext } from 'react';\r\nexport const FormContext = createContext(null);","/*\r\nFunction to add or remove \"required\" flag for a specific field\r\n*/\r\n\r\n\r\n// get json value given path\r\nconst getValue = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n}\r\n\r\nconst updateRequired = ({ selectedType, path, requiredChecked, field_key, convertedSchema }) => {\r\n\r\n    /*if (selectedType === \"object\") {\r\n        requiredChecked = false\r\n    }*/\r\n\r\n    const set = require(\"set-value\");\r\n\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const immediateValue = getValue(convertedSchema, newPath)\r\n    if (immediateValue !== undefined) {\r\n        // check if there is required array\r\n        if (immediateValue[\"required\"] !== undefined) {\r\n            let requiredArray = immediateValue[\"required\"]\r\n            if (requiredChecked) {\r\n                requiredArray.push(field_key)\r\n                requiredArray = [...new Set(requiredArray)]\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            } else {\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_key)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_key)\r\n                    set(convertedSchema, newPath + \".required\", requiredArray)\r\n\r\n                    if (requiredArray.length === 0) {\r\n                        delete immediateValue[\"required\"]\r\n                        set(convertedSchema, newPath, immediateValue)\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_key}`]\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            }\r\n        }\r\n    } else {\r\n        // check if there is required array\r\n        if (convertedSchema[\"required\"] !== undefined) {\r\n            let requiredArray = convertedSchema[\"required\"]\r\n            if (requiredChecked) {\r\n                requiredArray.push(field_key)\r\n                requiredArray = [...new Set(requiredArray)]\r\n                convertedSchema[\"required\"] = requiredArray\r\n            } else {\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_key)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_key)\r\n                    convertedSchema[\"required\"] = requiredArray\r\n                    if (requiredArray.length === 0) {\r\n                        delete convertedSchema[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_key}`]\r\n                convertedSchema[\"required\"] = requiredArray\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return convertedSchema;\r\n}\r\n\r\nexport default updateRequired;","// convert json schema properties to an iterable array\r\nconst object2array = (propert) => {\r\n    let someArray = [];\r\n    Object.keys(propert).forEach((item) => {\r\n        var tempVariable = {};\r\n        var tempVariable2;\r\n        tempVariable2 = propert[item];\r\n        tempVariable[\"fieldKey\"] = item;\r\n        Object.keys(tempVariable2).forEach((item_) => {\r\n            // make enum indexable by changing the key to \"enumerate\"\r\n            if (item_ === \"enum\") {\r\n                tempVariable[\"enumerate\"] = tempVariable2[item_];\r\n            }\r\n            if (item_ === \"default\") {\r\n                tempVariable[\"defaultValue\"] = tempVariable2[item_];\r\n            }\r\n            tempVariable[item_] = tempVariable2[item_];\r\n            if (item_ === \"properties\") {\r\n                // recursive on action to access nested properties\r\n                tempVariable[item_] = object2array(tempVariable2[item_]);\r\n            }\r\n        });\r\n        someArray.push(tempVariable);\r\n    });\r\n\r\n    return someArray;\r\n};\r\n\r\nexport default object2array;","import React, { useContext, useEffect, useState, useCallback } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\n//import { makeStyles } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport checkIfFieldIDExist from './utils/checkIfFieldIDExist';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport { FormGroup } from '@material-ui/core';\r\nimport updateRequired from './utils/updateRequired';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport getValue from './utils/getValue';\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport object2array from './utils/object2array';\r\nimport convertedSchemaPropertiesSort from './utils/convertedSchemaPropertiesSort';\r\n\r\n/*const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n})); */\r\n\r\n\r\nconst EditElement = ({ editOrAdd, field_uri, enumerated, field_enumerate, field_required, field_key, UISchema, path, pathFormData, openDialog, setOpenDialog, defaultValue, field_label }) => {\r\n\r\n    const [selectedType, setSelectedType] = useState(UISchema !== undefined ? UISchema[\"type\"] : \"string\")\r\n    const [title, setTitle] = useState(UISchema !== undefined ? UISchema[\"title\"] : \"\")\r\n    const [fieldkey, setFieldKey] = useState(UISchema !== undefined ? UISchema[\"fieldKey\"] : \"\")\r\n    const [fieldUri, setFieldUri] = useState(UISchema !== undefined ? UISchema[\"$id\"] : \"\")\r\n    const [description, setDescription] = useState(UISchema !== undefined ? UISchema[\"description\"] : \"\")\r\n    const [defValue, setDefValue] = useState(defaultValue !== undefined ? defaultValue : \"\")\r\n    const { updateParent, convertedSchema, updateFormDataId, schemaSpecification } = useContext(FormContext);\r\n    const [requiredChecked, setRequiredChecked] = useState(field_required === undefined ? false : field_required)\r\n    const [enumChecked, setEnumChecked] = useState(enumerated === undefined ? false : enumerated)\r\n    const [enumList, setEnumList] = useState(field_enumerate === undefined ? [] : field_enumerate);\r\n    const [arrayItemType, setArrayItemType] = useState(\"string\")\r\n    const [arrayMinMaxItem, setArrayMinMaxItem] = useState([\"None\", \"None\"])\r\n    const [numberMinMaxValue, setNumberMinMaxValue] = useState([\"None\", \"None\"])\r\n    const [charMinMaxLengthValue, setCharMinMaxLengthValue] = useState([\"None\", \"None\"])\r\n    const [charMinMaxHelperText, setCharMinMaxHelperText] = useState(\"Set the minimum and maximum length allowed for this string input.\")\r\n    const [arrayMinMaxHelperText, setArrayMinMaxHelperText] = useState(\"Set the minimum and maximum values of the items allowed for this array field.\")\r\n    const [numberMinMaxValueHelperText, setNumberMinMaxValueHelpertext] = useState(\"Set the minimum and maximum values of this field.\")\r\n    const [arrayUniqueItems, setArrayUniqueItems] = useState(UISchema !== undefined ? (UISchema[\"uniqueItems\"] !== undefined ? UISchema[\"uniqueItems\"] : false) : false)\r\n    const [subSchemaValidity, setSubSchemaValidity] = useState(false);\r\n    const [convertedSubSchema, setConvertedSubSchema] = useState({})\r\n    const [subSchemaFilename, setSubSchemaFilename] = useState(\"\")\r\n    const [activeSubSchemaButton, setActiveSubSchemaButton] = useState(\"\") \r\n\r\n    let arrayItemTypeList = [\"string\", \"number\", \"integer\"]\r\n    if (UISchema !== undefined) {\r\n        if (UISchema[\"items\"] !== undefined) {\r\n            if (UISchema[\"items\"][\"type\"] === \"object\") {\r\n                arrayItemTypeList = [\"string\", \"number\", \"integer\", \"object\"]\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (field_uri !== undefined){\r\n            setFieldUri(field_uri)\r\n        }\r\n        else if (UISchema[\"$id\"] !== undefined) {\r\n            setFieldUri(UISchema[\"$id\"])\r\n        }\r\n        else {\r\n            setFieldUri(\"\")\r\n        }\r\n        // for array\r\n        if (UISchema !== undefined) {\r\n            if (UISchema[\"type\"] === \"array\") {\r\n                let value = [...arrayMinMaxItem]\r\n                if (UISchema[\"minItems\"] !== undefined) {\r\n                    value[0] = UISchema[\"minItems\"]\r\n                }\r\n                if (UISchema[\"maxItems\"] !== undefined) {\r\n                    value[1] = UISchema[\"maxItems\"]\r\n                }\r\n                if (UISchema[\"items\"] === undefined) {\r\n                    UISchema[\"items\"] = { \"type\": \"string\" }\r\n                }\r\n                if (arrayUniqueItems) {\r\n                    UISchema[\"uniqueItems\"] = arrayUniqueItems\r\n                }\r\n                else {\r\n                    delete UISchema[\"uniqueItems\"]\r\n                }\r\n                setArrayMinMaxItem(value)\r\n            }\r\n        }\r\n\r\n        // for numeric types\r\n        if (UISchema !== undefined) {\r\n            if ([\"number\", \"integer\"].includes(UISchema[\"type\"])) {\r\n                let value = [...numberMinMaxValue]\r\n                if (UISchema[\"minimum\"] !== undefined) {\r\n                    value[0] = UISchema[\"minimum\"]\r\n                }\r\n                if (UISchema[\"maximum\"] !== undefined) {\r\n                    value[1] = UISchema[\"maximum\"]\r\n                }\r\n                setNumberMinMaxValue(value)\r\n            }\r\n        }\r\n\r\n        // for string type\r\n        if (UISchema !== undefined) {\r\n            if (UISchema[\"type\"] === \"string\") {\r\n                let value = [...charMinMaxLengthValue]\r\n                if (UISchema[\"minLength\"] !== undefined) {\r\n                    value[0] = UISchema[\"minLength\"]\r\n                }\r\n                if (UISchema[\"maxLength\"] !== undefined) {\r\n                    value[1] = UISchema[\"maxLength\"]\r\n                }\r\n                setCharMinMaxLengthValue(value)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n\r\n    let tempUISchema\r\n    if (editOrAdd !== undefined && editOrAdd === \"add\") {\r\n        UISchema = {\r\n            \"type\": \"string\",\r\n            \"fieldKey\": \"\",\r\n            \"title\": \"\",\r\n            \"description\": \"\"\r\n        }\r\n        tempUISchema = {\r\n            \"type\": \"string\",\r\n            \"fieldKey\": \"\",\r\n            \"title\": \"\",\r\n            \"description\": \"\"\r\n        }\r\n    } else {\r\n        tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n    }\r\n\r\n    let notImplemented = false;\r\n    if (UISchema !== undefined) {\r\n        if (![\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\", \"fileupload (string)\"].includes(UISchema[\"type\"])) {\r\n            notImplemented = true;\r\n        }\r\n    }\r\n\r\n\r\n    let datatypes = [\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\", \"fileupload (string)\"]\r\n\r\n\r\n\r\n    const handleOnChangeListField = (event) => {\r\n        setEnumList(event.target.value);\r\n    }\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        // do this if add\r\n        if (editOrAdd === \"add\") {\r\n            // update default value\r\n            if (defValue === undefined & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') !== \"\" & defaultValue !== undefined) {\r\n                tempUISchema[\"defaultValue\"] = (defValue === \"true\")\r\n            } else if (defValue.toString().replace(/\\s+/g, '') === \"\") {\r\n                delete tempUISchema[\"defaultValue\"]\r\n            }\r\n            else {\r\n                tempUISchema[\"defaultValue\"] = defValue\r\n            };\r\n\r\n            // check if fieldkey already exist\r\n            if (checkIfFieldIDExist(convertedSchema, path, fieldkey)) {\r\n                alert(\"Field Keyword already exists!\")\r\n                return\r\n            }\r\n\r\n            tempUISchema[\"fieldKey\"] = fieldkey;\r\n            if (fieldUri !== undefined) {\r\n                if (fieldUri.toString().replace(/\\s+/g, '') !== \"\") {\r\n                    tempUISchema[\"$id\"] = fieldUri\r\n                }\r\n            }\r\n            tempUISchema[\"type\"] = selectedType;\r\n            if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n            if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n            if (fieldkey === undefined) {\r\n                alert(\"Field Keyword must be defined!\")\r\n                return\r\n            }\r\n\r\n            if (typeof (fieldkey) === \"string\" & fieldkey.replace(/\\s+/g, '') === \"\") {\r\n                alert(\"Field Keyword must be defined!\")\r\n                return\r\n            }\r\n            if (tempUISchema[\"type\"] === \"object\" & subSchemaValidity) {\r\n                tempUISchema[\"properties\"] = convertedSubSchema[\"properties\"]\r\n                // check required\r\n                try {\r\n                    if (convertedSubSchema[\"required\"] !== undefined) {\r\n                        tempUISchema[\"required\"] = convertedSubSchema[\"required\"]\r\n                    } else {\r\n                        delete tempUISchema[\"required\"]\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n            /*\r\n            if (tempUISchema[\"type\"] === \"object\") {\r\n                if (subSchemaValidity) {\r\n                    tempUISchema[\"properties\"] = convertedSubSchema[\"properties\"]\r\n                } else {\r\n                    tempUISchema[\"properties\"] = []\r\n                }\r\n\r\n                // check required\r\n                try {\r\n                    tempUISchema[\"required\"] = convertedSubSchema[\"required\"]\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }*/\r\n            // more validation keywords for array\r\n            if (tempUISchema[\"type\"] === \"array\") {\r\n                if (arrayItemType === \"string\") {\r\n                    tempUISchema[\"items\"] = { \"type\": \"string\" }\r\n                }\r\n                if (arrayItemType === \"integer\") {\r\n                    tempUISchema[\"items\"] = { \"type\": \"integer\" }\r\n                }\r\n                if (arrayItemType === \"number\") {\r\n                    tempUISchema[\"items\"] = { \"type\": \"number\" }\r\n                }\r\n                if (arrayMinMaxItem[0] !== \"None\") {\r\n                    tempUISchema[\"minItems\"] = arrayMinMaxItem[0]\r\n                } else {\r\n                    delete tempUISchema[\"minItems\"]\r\n                }\r\n                if (arrayMinMaxItem[1] !== \"None\") {\r\n                    tempUISchema[\"maxItems\"] = arrayMinMaxItem[1]\r\n                } else {\r\n                    delete delete tempUISchema[\"maxItems\"]\r\n                }\r\n\r\n                if (arrayUniqueItems) {\r\n                    tempUISchema[\"uniqueItems\"] = arrayUniqueItems\r\n                }\r\n                else {\r\n                    delete tempUISchema[\"uniqueItems\"]\r\n                }\r\n            }\r\n            // more validation keywords for numeric types\r\n            if ([\"number\", \"integer\"].includes(tempUISchema[\"type\"])) {\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n                if (numberMinMaxValue[0] !== \"None\") {\r\n                    tempUISchema[\"minimum\"] = numberMinMaxValue[0]\r\n                } else {\r\n                    delete tempUISchema[\"minimum\"]\r\n                }\r\n                if (numberMinMaxValue[1] !== \"None\") {\r\n                    tempUISchema[\"maximum\"] = numberMinMaxValue[1]\r\n                } else {\r\n                    delete tempUISchema[\"maximum\"]\r\n                }\r\n            }\r\n            // more validation keywords for string\r\n            if (tempUISchema[\"type\"] === \"string\") {\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n                if (charMinMaxLengthValue[0] !== \"None\") {\r\n                    tempUISchema[\"minLength\"] = charMinMaxLengthValue[0]\r\n                } else {\r\n                    delete tempUISchema[\"minLength\"]\r\n                }\r\n                if (charMinMaxLengthValue[1] !== \"None\") {\r\n                    tempUISchema[\"maxLength\"] = charMinMaxLengthValue[1]\r\n                } else {\r\n                    delete tempUISchema[\"maxLength\"]\r\n                }\r\n            }\r\n\r\n            if (tempUISchema[\"type\"] !== \"string\") {\r\n                setEnumChecked(false);\r\n            }\r\n\r\n            if (selectedType === \"fileupload (string)\" && schemaSpecification === \"http://json-schema.org/draft-04/schema#\") {\r\n                delete tempUISchema[\"contentEncoding\"]\r\n            }\r\n\r\n            // for fileupload\r\n            if (selectedType === \"fileupload (string)\") {\r\n                // set type to string\r\n                tempUISchema[\"type\"] = \"string\"\r\n                // set the encoding type\r\n                tempUISchema[\"contentEncoding\"] = \"base64\"\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"maxLength\"]\r\n                delete tempUISchema[\"minLength\"]\r\n                delete tempUISchema[\"enumerate\"]\r\n                delete tempUISchema[\"enum\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n            }\r\n\r\n            if (path !== undefined) {\r\n                const set = require(\"set-value\");\r\n\r\n                let properties = getValue(convertedSchema, path)[\"properties\"]\r\n                properties.push(tempUISchema)\r\n                set(convertedSchema, path + \".properties\", properties)\r\n\r\n                // create a new path to the new element\r\n                path = path + \".properties.\" + (properties.length - 1).toString()\r\n                let field_key = fieldkey\r\n                // update the required value\r\n                const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_key, convertedSchema })\r\n                // update enum\r\n                if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                    let newList = enumList\r\n                    if (Array.isArray(newList)) {\r\n                        set(newConvertedSchema, path + \".enumerate\", newList)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                    }\r\n\r\n                }\r\n\r\n                updateParent(newConvertedSchema)\r\n                setOpenDialog(false)\r\n            } else {\r\n                const set = require(\"set-value\");\r\n                let properties = convertedSchema[\"properties\"]\r\n                properties.push(tempUISchema)\r\n                convertedSchema[\"properties\"] = properties\r\n\r\n                // create a new path to the new element\r\n                path = \"properties.\" + (properties.length - 1).toString()\r\n                let field_key = fieldkey\r\n                // update the required value\r\n                let newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_key, convertedSchema })\r\n                // update enum\r\n                if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                    let newList = enumList\r\n                    if (Array.isArray(newList)) {\r\n                        set(newConvertedSchema, path + \".enumerate\", newList)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                    }\r\n\r\n                }\r\n\r\n                updateParent(newConvertedSchema)\r\n                setOpenDialog(false)\r\n            }\r\n        }\r\n        else {\r\n            // and do this if edit\r\n\r\n            // update default value\r\n            if (defValue === undefined & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') !== \"\" & defaultValue !== undefined) {\r\n                tempUISchema[\"defaultValue\"] = (defValue === \"true\")\r\n            } else if (defValue.toString().replace(/\\s+/g, '') === \"\") {\r\n                delete tempUISchema[\"defaultValue\"]\r\n            }\r\n            else {\r\n                tempUISchema[\"defaultValue\"] = defValue\r\n            };\r\n\r\n            // check if fieldkey already exist\r\n            let existed = checkIfFieldIDExist(convertedSchema, path, fieldkey)\r\n            if (UISchema[\"fieldKey\"] !== fieldkey) {\r\n                if (existed) {\r\n                    alert(\"Field Keyword already exists!\")\r\n                    return\r\n                }\r\n            }\r\n\r\n            if (fieldkey === undefined | fieldkey.replace(/\\s+/g, '') === \"\") {\r\n                alert(\"Field Keyword must be defined!\")\r\n                return\r\n            }\r\n\r\n            tempUISchema[\"fieldKey\"] = fieldkey;\r\n            if (fieldUri !== undefined) {\r\n                if (fieldUri.toString().replace(/\\s+/g, '') !== \"\") {\r\n                    tempUISchema[\"$id\"] = fieldUri\r\n                }\r\n            }\r\n            tempUISchema[\"type\"] = selectedType;\r\n            if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n            if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n            if (tempUISchema[\"type\"] === \"object\" & tempUISchema[\"properties\"] === undefined) {\r\n                tempUISchema[\"properties\"] = []\r\n            }\r\n            if (tempUISchema[\"type\"] === \"object\" & subSchemaValidity) {\r\n                tempUISchema[\"properties\"] = convertedSubSchema[\"properties\"]\r\n                // check required\r\n                try {\r\n                    if (convertedSubSchema[\"required\"] !== undefined) {\r\n                        tempUISchema[\"required\"] = convertedSubSchema[\"required\"]\r\n                    } else {\r\n                        delete tempUISchema[\"required\"]\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n\r\n            // more validation keywords for array\r\n            if (tempUISchema[\"type\"] === \"array\") {\r\n                if (arrayItemType === \"string\") {\r\n                    tempUISchema[\"items\"] = { \"type\": \"string\" }\r\n                }\r\n                if (arrayItemType === \"integer\") {\r\n                    tempUISchema[\"items\"] = { \"type\": \"integer\" }\r\n                }\r\n                if (arrayItemType === \"number\") {\r\n                    tempUISchema[\"items\"] = { \"type\": \"number\" }\r\n                }\r\n                if (arrayMinMaxItem[0] !== \"None\") {\r\n                    tempUISchema[\"minItems\"] = arrayMinMaxItem[0]\r\n                } else {\r\n                    delete tempUISchema[\"minItems\"]\r\n                }\r\n                if (arrayMinMaxItem[1] !== \"None\") {\r\n                    tempUISchema[\"maxItems\"] = arrayMinMaxItem[1]\r\n                } else {\r\n                    delete delete tempUISchema[\"maxItems\"]\r\n                }\r\n\r\n                if (arrayUniqueItems) {\r\n                    tempUISchema[\"uniqueItems\"] = arrayUniqueItems\r\n                }\r\n                else {\r\n                    delete tempUISchema[\"uniqueItems\"]\r\n                }\r\n            }\r\n            // more validation keywords for numeric types\r\n            if ([\"number\", \"integer\"].includes(tempUISchema[\"type\"])) {\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n                if (numberMinMaxValue[0] !== \"None\") {\r\n                    tempUISchema[\"minimum\"] = numberMinMaxValue[0]\r\n                } else {\r\n                    delete tempUISchema[\"minimum\"]\r\n                }\r\n                if (numberMinMaxValue[1] !== \"None\") {\r\n                    tempUISchema[\"maximum\"] = numberMinMaxValue[1]\r\n                } else {\r\n                    delete delete tempUISchema[\"maximum\"]\r\n                }\r\n            }\r\n            // more validation keywords for string\r\n            if (tempUISchema[\"type\"] === \"string\") {\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n                if (charMinMaxLengthValue[0] !== \"None\") {\r\n                    tempUISchema[\"minLength\"] = charMinMaxLengthValue[0]\r\n                } else {\r\n                    delete tempUISchema[\"minLength\"]\r\n                }\r\n                if (charMinMaxLengthValue[1] !== \"None\") {\r\n                    tempUISchema[\"maxLength\"] = charMinMaxLengthValue[1]\r\n                } else {\r\n                    delete tempUISchema[\"maxLength\"]\r\n                }\r\n            }\r\n\r\n\r\n            if (![\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"])) {\r\n                setEnumChecked(false);\r\n            }\r\n\r\n            // get rid of array-specific keywords if selectedType is not array\r\n            if (selectedType !== \"array\" & tempUISchema[\"items\"] !== undefined) {\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n            }\r\n\r\n            // for fileupload\r\n            if (selectedType === \"fileupload (string)\") {\r\n                // set type to string\r\n                tempUISchema[\"type\"] = \"string\"\r\n                // set the encoding type\r\n                tempUISchema[\"contentEncoding\"] = \"base64\"\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"maxLength\"]\r\n                delete tempUISchema[\"minLength\"]\r\n                delete tempUISchema[\"enumerate\"]\r\n                delete tempUISchema[\"enum\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n            }\r\n\r\n            const set = require(\"set-value\");\r\n            set(convertedSchema, path, tempUISchema)\r\n            // update the required value\r\n            let newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_key, convertedSchema })\r\n            //console.log(\"stuff:\", newConvertedSchema)\r\n            // update enum\r\n            if ([\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"]) & enumChecked) {\r\n                let newList = enumList\r\n\r\n                // use if else statements instead of switch case statements for this case\r\n                if (tempUISchema[\"type\"] === \"string\") {\r\n                    if (Array.isArray(newList)) {\r\n                        set(newConvertedSchema, path + \".enumerate\", newList)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return item.toString();\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                        //console.log(\"stuff:\", newConvertedSchema)\r\n                    }\r\n                } else if (tempUISchema[\"type\"] === \"number\") {\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    }\r\n                } else if (tempUISchema[\"type\"] === \"integer\") {\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    }\r\n                }\r\n            }\r\n\r\n            //let sorted = convertedSchemaPropertiesSort(JSON.parse(JSON.stringify(newConvertedSchema[\"properties\"])))\r\n            //console.log(sorted)\r\n            //newConvertedSchema[\"properties\"] = sorted\r\n\r\n            // update main component\r\n            updateParent(newConvertedSchema)\r\n            setOpenDialog(false)\r\n\r\n            //* update form data if fieldkey change\r\n            // update pathFormData with new fieldkey\r\n            updateFormDataId(field_key, fieldkey, pathFormData, defaultValue)\r\n        }\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n        switch (keyword) {\r\n            case 'type':\r\n                return setSelectedType(event.target.value)\r\n            case 'title':\r\n                return setTitle(event.target.value)\r\n            case 'description':\r\n                return setDescription(event.target.value)\r\n            case 'fieldKey':\r\n                return setFieldKey(event.target.value.replace(/ /g, \"_\"))\r\n            case 'defaultValue':\r\n                return setDefValue(event.target.value)\r\n            case '$id':\r\n                return setFieldUri(event.target.value)\r\n            case 'id':\r\n                return setFieldUri(event.target.value)\r\n            case 'itemType':\r\n                return setArrayItemType(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n\r\n    // handleChange MinMax array item\r\n    const handleMinMaxArrayItem = (event, field) => {\r\n        let value = [...arrayMinMaxItem]\r\n        switch (field) {\r\n            case 'max':\r\n                value[1] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                value[1] = (value[1] === 0 ? \"None\" : value[1])\r\n                //console.log(value)\r\n                return setArrayMinMaxItem(value);\r\n            case 'min':\r\n                value[0] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                return setArrayMinMaxItem(value);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    const handleMinMaxArrayItemOnBlur = (event, keyword) => {\r\n        let value = [...arrayMinMaxItem]\r\n\r\n        // early exit\r\n        if (value[0] === \"None\" && value[1] === \"None\") {\r\n            console.log(\"Doing nothing because the inputs have not changed.\")\r\n            return\r\n        }\r\n        switch (keyword) {\r\n            case 'min':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setArrayMinMaxHelperText(<div style={{ color: \"#f44336\" }}>minItems value cannot be greater or equal than maxItems value. minItems value was changed to 'None'.</div>)\r\n                    value[0] = \"None\"\r\n                    return setArrayMinMaxItem(value);\r\n                } else {\r\n                    setArrayMinMaxHelperText(\"Set the minimum and maximum values of the items allowed for this array field.\")\r\n                    return setArrayMinMaxItem(value);\r\n                }\r\n            case 'max':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setArrayMinMaxHelperText(<div style={{ color: \"#f44336\" }}>minItems value cannot be greater or equal than maxItems value. maxItems value was changed to 'None'.</div>)\r\n                    value[1] = \"None\"\r\n                    return setArrayMinMaxItem(value);\r\n                } else {\r\n                    setArrayMinMaxHelperText(\"Set the minimum and maximum values of the items allowed for this array field.\")\r\n                    return setArrayMinMaxItem(value);\r\n                }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // handleChange MinMax array item\r\n    const handleMinMaxValue = (event, minMax) => {\r\n        let value = [...numberMinMaxValue]\r\n        switch (minMax) {\r\n            case 'max-integer':\r\n                if (event.target.value.replace(\"None\", \"\") === \"-\") {\r\n                    console.log(event.target.value)\r\n                    value[1] = event.target.value.replace(\"None\", \"\")\r\n                    return setNumberMinMaxValue(value)\r\n                } else {\r\n                    value[1] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            case 'min-integer':\r\n                if (event.target.value.replace(\"None\", \"\") === \"-\") {\r\n                    console.log(event.target.value)\r\n                    value[0] = event.target.value.replace(\"None\", \"\")\r\n                    return setNumberMinMaxValue(value)\r\n                } else {\r\n                    value[0] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            // for now number is the same as integer\r\n            case 'max-number':\r\n                if (event.target.value.replace(\"None\", \"\") === \"-\") {\r\n                    console.log(event.target.value)\r\n                    value[1] = event.target.value.replace(\"None\", \"\")\r\n                    return setNumberMinMaxValue(value)\r\n                } else {\r\n                    value[1] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            case 'min-number':\r\n                if (event.target.value.replace(\"None\", \"\") === \"-\") {\r\n                    console.log(event.target.value)\r\n                    value[0] = event.target.value.replace(\"None\", \"\")\r\n                    return setNumberMinMaxValue(value)\r\n                } else {\r\n                    value[0] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    const handleMinMaxValueOnBlur = (event, minMax) => {\r\n        let value = [...numberMinMaxValue]\r\n\r\n        // early exit\r\n        if (value[0] === \"None\" && value[1] === \"None\") {\r\n            console.log(\"Doing nothing because the inputs have not changed.\")\r\n            return\r\n        }\r\n\r\n        switch (minMax) {\r\n            case 'min-integer':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setNumberMinMaxValueHelpertext(<div style={{ color: \"#f44336\" }}>Min. value cannot be greater or equal than max. value. Min. value was changed to 'None'.</div>)\r\n                    value[0] = \"None\"\r\n                    return setNumberMinMaxValue(value);\r\n                } else {\r\n                    setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            case 'min-number':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setNumberMinMaxValueHelpertext(<div style={{ color: \"#f44336\" }}>Min. value cannot be greater or equal than max. value. Min. value was changed to 'None'.</div>)\r\n                    value[0] = \"None\"\r\n                    return setNumberMinMaxValue(value);\r\n                } else if (value.includes(\"None\")) {\r\n                    return setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                }\r\n                else {\r\n                    setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            case 'max-integer':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setNumberMinMaxValueHelpertext(<div style={{ color: \"#f44336\" }}>Min. value cannot be greater or equal than max. value.  Max. value was changed to 'None'.</div>)\r\n                    value[1] = \"None\"\r\n                    return setNumberMinMaxValue(value);\r\n                } else {\r\n                    setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            case 'max-number':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setNumberMinMaxValueHelpertext(<div style={{ color: \"#f44336\" }}>Min. value cannot be greater or equal than max. value. Max. value was changed to 'None'.</div>)\r\n                    value[1] = \"None\"\r\n                    return setNumberMinMaxValue(value);\r\n                } else if (value.includes(\"None\")) {\r\n                    return setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                }\r\n                else {\r\n                    setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // handleChange MinMax length for string\r\n    const handleMinMaxCharLength = (event, field) => {\r\n        let value = [...charMinMaxLengthValue]\r\n        switch (field) {\r\n            case 'maxLength':\r\n                value[1] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                value[1] = (value[1] === 0 ? \"None\" : value[1])\r\n                //console.log(value)\r\n                return setCharMinMaxLengthValue(value);\r\n            case 'minLength':\r\n                value[0] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                return setCharMinMaxLengthValue(value);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    const handleMinMaxCharLengthOnBlur = (event, keyword) => {\r\n        let value = [...charMinMaxLengthValue]\r\n\r\n        // early exit\r\n        if (value[0] === \"None\" && value[1] === \"None\") {\r\n            console.log(\"Doing nothing because the inputs have not changed.\")\r\n            return\r\n        }\r\n\r\n        switch (keyword) {\r\n            case 'minLength':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setCharMinMaxHelperText(<div style={{ color: \"#f44336\" }}>minLength value cannot be greater or equal than maxLength value.</div>)\r\n                    value[0] = \"None\"\r\n                    return setCharMinMaxLengthValue(value);\r\n                } else {\r\n                    setCharMinMaxHelperText(\"Set the minimum and maximum length allowed for this string input.\")\r\n                    return setCharMinMaxLengthValue(value);\r\n                }\r\n            case 'maxLength':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setCharMinMaxHelperText(<div style={{ color: \"#f44336\" }}>minLength value cannot be greater or equal than maxLength value.</div>)\r\n                    value[1] = \"None\"\r\n                    return setCharMinMaxLengthValue(value);\r\n                } else {\r\n                    setCharMinMaxHelperText(\"Set the minimum and maximum length allowed for this string input.\")\r\n                    return setCharMinMaxLengthValue(value);\r\n                }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        if (editOrAdd !== undefined && editOrAdd === \"add\") {\r\n            setOpenDialog(false)\r\n        }\r\n        else {\r\n            tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n            setOpenDialog(false)\r\n            setEnumList(field_enumerate)\r\n            setDefValue(defaultValue)\r\n            setSelectedType(UISchema[\"type\"])\r\n        }\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleCheckBoxOnChange = () => {\r\n        setRequiredChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleEnumBoxOnChange = () => {\r\n        setEnumChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change uniqueItems check box\r\n    const handleUniqueItemsCheckBoxOnChange = () => {\r\n        setArrayUniqueItems(prev => !prev)\r\n    }\r\n\r\n    // function to check if the file accepted is of json format and json schema valid\r\n    const checkSubSchemaValidity = (schemaFile) => {\r\n        // place holder\r\n        if (schemaFile[0][\"type\"] === \"application/json\") {\r\n            // read the file with FileReadr API\r\n            const reader = new FileReader();\r\n            reader.onabort = () => console.log(\"file reading was aborted\");\r\n            reader.onerror = () => console.log(\"file reading has failed\");\r\n            reader.onload = () => {\r\n            const binaryStr = reader.result;\r\n            const obj = JSON.parse(binaryStr);\r\n\r\n            // convert obj schema to iterable array properties\r\n            let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n            try {\r\n                convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n                console.log(\"Converted Schema:\", convertedSchema)\r\n                setConvertedSubSchema(convertedSchema)\r\n                // update states\r\n                setSubSchemaValidity(true);\r\n                setSubSchemaFilename(schemaFile[0][\"name\"])\r\n                console.log(\"Subschema is valid\")\r\n\r\n                const copiedObj = JSON.parse(JSON.stringify(obj))\r\n\r\n                //alert(activeSubSchemaButton)\r\n                if (activeSubSchemaButton === \"subschema\") {\r\n                    Object.keys(copiedObj).forEach(key => {\r\n                        if (key === \"id\"){\r\n                            //return setSelectedType(event.target.value)\r\n                            //setFieldUri(obj[key])\r\n                            //alert(key)\r\n                            //let event = {target: {value: copiedObj[key]}}\r\n                            //handleChangeUISchema(event, key)\r\n                            setFieldUri(copiedObj[key])\r\n                        }\r\n                        if (key === \"$id\"){\r\n                            //let event = {target: {value: copiedObj[key]}}\r\n                            //handleChangeUISchema(event, key)\r\n                            setFieldUri(copiedObj[key])\r\n                        }\r\n                        if (key === \"title\"){\r\n                            //setTitle(obj[key])\r\n                            let event = {target: {value: copiedObj[key]}}\r\n                            handleChangeUISchema(event, key)\r\n                        }\r\n                        if (key === \"description\"){\r\n                            //setDescription(obj[key])\r\n                            let event = {target: {value: copiedObj[key]}}\r\n                            handleChangeUISchema(event, key)\r\n                        }\r\n                    })\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n                alert(`${schemaFile[0][\"name\"]} is invalid!`)\r\n                // update states\r\n                setSubSchemaValidity(false);\r\n                setSubSchemaFilename(schemaFile[0][\"name\"])\r\n                }\r\n            };\r\n            reader.readAsText(schemaFile[0]);\r\n        } else {\r\n            // update states\r\n            alert(`${schemaFile[0][\"name\"]} is invalid!`)\r\n            setSubSchemaValidity(false);\r\n            setSubSchemaFilename(schemaFile[0][\"name\"])\r\n        }\r\n    };\r\n\r\n\r\n    // browse or drag&drop schema file\r\n    const onDrop = useCallback(\r\n        (acceptedFile) => {\r\n            // process the schema, validation etc\r\n            checkSubSchemaValidity(acceptedFile);\r\n\r\n        // store schema file in the state\r\n        // update states\r\n        // setRenderReady(false);\r\n        // setDisable(true);\r\n        // setCreateScratchMode(false);\r\n        // setJsonData({});\r\n        // setSelectedSchemaName(\"\");\r\n        },\r\n        [activeSubSchemaButton]\r\n    );\r\n    // for upload subschema\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        multiple: false,\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {notImplemented ?\r\n                <Dialog\r\n                    open={openDialog}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">\r\n                        <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            {editOrAdd === \"add\" ? <AddIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} /> : <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />}\r\n                            <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                                {editOrAdd === \"add\" ? `Add element in \"${field_label}\"` : `Edit \"${tempUISchema[\"title\"]}\"`}\r\n                            </div>\r\n                            <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        We are sorry! Editing feature for the \"{UISchema[\"type\"]}\" type/keyword is not yet implemented.\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button disabled onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                            {editOrAdd === \"add\" ? \"Add\" : \"Save\"}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                :\r\n                <Dialog\r\n                    open={openDialog}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">\r\n                        <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            {editOrAdd === \"add\" ? <AddIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} /> : <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />}\r\n                            <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                                {editOrAdd === \"add\" ? `Add element in \"${field_label}\"` : `Edit \"${tempUISchema[\"title\"]}\"`}\r\n                            </div>\r\n                            <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                            <div>\r\n                                <FormControl component=\"widget-type\">\r\n                                    <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                                    <TextField margin=\"normal\" required onChange={event => handleChangeUISchema(event, \"fieldKey\")} style={{ marginTop: \"20px\" }} value={fieldkey} variant=\"outlined\" fullWidth={true} label={\"Field Keyword\"} helperText='A unique json keyword for this field. Usually short and has no spaces (use \"_\" instead). Spaces are replaced automatically with \"_\" upon saving.' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"$id\")} style={{ marginTop: \"10px\" }} value={fieldUri} variant=\"outlined\" fullWidth={true} label={\"Field ID/URI\"} helperText='ID or URI for this field if available.' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} value={title} variant=\"outlined\" fullWidth={true} label={\"Field Title\"} helperText='Label or title of the field. For a field that requires a unit, the unit can be placed within a square bracket, e,g., \"Chamber Pressure [Pa]\".' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} value={description} variant=\"outlined\" fullWidth={true} label={\"Field Description\"} multiline rows={3} helperText='A detailed description of the field, how the input should be formated, etc.' />\r\n                                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\" }}>\r\n                                        <FormControl component=\"validation-related\">\r\n                                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Validation Related:</FormLabel>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <TextField\r\n                                        margin=\"normal\"\r\n                                        helperText='Data type of the field input.'\r\n                                        onChange={event => handleChangeUISchema(event, \"type\")}\r\n                                        style={{ marginTop: \"10px\" }}\r\n                                        defaultValue={tempUISchema[\"type\"]}\r\n                                        select\r\n                                        fullWidth={true}\r\n                                        id={field_key}\r\n                                        label={\"Field Data Type\"}\r\n                                        variant=\"outlined\"\r\n                                        SelectProps={{\r\n                                            native: true,\r\n                                        }}\r\n                                    >\r\n                                        {datatypes.map((content, index) => (\r\n                                            <option key={index} value={content}>\r\n                                                {content}\r\n                                            </option>\r\n                                        ))}\r\n                                    </TextField>\r\n                                    {[\"number\", \"integer\"].includes(selectedType) ?\r\n                                        <>\r\n                                            <div style={{ display: \"flex\" }}>\r\n                                                <TextField onFocus={() => setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")} value={numberMinMaxValue[0]} onBlur={(event) => { handleMinMaxValueOnBlur(event, \"min-\" + selectedType) }} onChange={event => handleMinMaxValue(event, \"min-\" + selectedType)} margin=\"normal\" fullWidth variant='outlined' label=\"Minimum Value\" />\r\n                                                <div style={{ paddingLeft: \"10px\" }}></div>\r\n                                                <TextField onFocus={() => setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")} value={numberMinMaxValue[1]} onBlur={(event) => { handleMinMaxValueOnBlur(event, \"max-\" + selectedType) }} onChange={event => handleMinMaxValue(event, \"max-\" + selectedType)} margin=\"normal\" fullWidth variant='outlined' label=\"Maximum Value\" />\r\n                                            </div>\r\n                                            <div style={{ color: \"gray\", fontSize: \"12px\", paddingLeft: \"11px\", paddingRight: \"11px\" }}>{numberMinMaxValueHelperText}</div>\r\n                                        </>\r\n                                        : null}\r\n                                    {selectedType === \"string\" ?\r\n                                        <>\r\n                                            <div style={{ display: \"flex\" }}>\r\n                                                <TextField onFocus={() => setCharMinMaxHelperText(\"Set the minimum and maximum length allowed for this string input.\")} value={charMinMaxLengthValue[0]} onBlur={(event) => { handleMinMaxCharLengthOnBlur(event, \"minLength\") }} onChange={event => handleMinMaxCharLength(event, \"minLength\")} margin=\"normal\" fullWidth variant='outlined' label=\"Minimum Character Length\" />\r\n                                                <div style={{ paddingLeft: \"10px\" }}></div>\r\n                                                <TextField onFocus={() => setCharMinMaxHelperText(\"Set the minimum and maximum length allowed for this string input.\")} value={charMinMaxLengthValue[1]} onBlur={(event) => { handleMinMaxCharLengthOnBlur(event, \"maxLength\") }} onChange={event => handleMinMaxCharLength(event, \"maxLength\")} margin=\"normal\" fullWidth variant='outlined' label=\"Maximum Character Length\" />\r\n                                            </div>\r\n                                            <div style={{ color: \"gray\", fontSize: \"12px\", paddingLeft: \"11px\", paddingRight: \"11px\" }}>{charMinMaxHelperText}</div>\r\n                                        </>\r\n                                        : null}\r\n                                    {[\"string\", \"integer\", \"number\"].includes(selectedType) ?\r\n                                        <>\r\n                                            <FormControlLabel control={<Checkbox onChange={() => handleEnumBoxOnChange()} checked={enumChecked} />} label=\"Enumerated. Provide a list of possible inputs for this field.\" />\r\n                                            <div style={{ marginLeft: \"32px\", marginTop: \"0px\", marginBottom: \"10px\" }}>\r\n                                                {enumChecked ? <TextField defaultValue={enumList !== undefined ? enumList : \"\"} onChange={handleOnChangeListField} variant=\"outlined\" fullWidth={true} label=\"Enumerate List\" multiline rows={2} helperText=\"A list of inputs separated by commas, e,g.: item 1, item 2, item 3. Make sure that the item data type matches the field input data type. Invalid items will be not saved.\" /> : <Divider />}\r\n                                            </div>\r\n                                        </> : null}\r\n                                </FormControl>\r\n                                <div style={{ paddingBottom: \"10px\" }}>\r\n                                    <FormGroup>\r\n                                        {selectedType === \"array\" ?\r\n                                            <>\r\n                                                <TextField\r\n                                                    margin=\"normal\"\r\n                                                    helperText={'Data type of the array items.'}\r\n                                                    onChange={event => handleChangeUISchema(event, \"itemType\")}\r\n                                                    style={{ marginTop: \"10px\" }}\r\n                                                    defaultValue={tempUISchema[\"items\"] !== undefined ? tempUISchema[\"items\"][\"type\"] : \"string\"}\r\n                                                    select\r\n                                                    fullWidth={true}\r\n                                                    id={field_key}\r\n                                                    label={\"Item Data Type\"}\r\n                                                    variant=\"outlined\"\r\n                                                    SelectProps={{\r\n                                                        native: true,\r\n                                                    }}\r\n                                                >\r\n                                                    {arrayItemTypeList.map((content, index) => (\r\n                                                        <option key={index} value={content}>\r\n                                                            {content}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </TextField>\r\n                                                <div style={{ display: \"flex\" }}>\r\n                                                    <TextField value={arrayMinMaxItem[0]} onChange={event => handleMinMaxArrayItem(event, \"min\")} onBlur={event => { handleMinMaxArrayItemOnBlur(event, \"min\") }} margin=\"normal\" fullWidth variant='outlined' label=\"Min. Array Items\" />\r\n                                                    <div style={{ paddingLeft: \"10px\" }}></div>\r\n                                                    <TextField value={arrayMinMaxItem[1]} onChange={event => handleMinMaxArrayItem(event, \"max\")} onBlur={event => { handleMinMaxArrayItemOnBlur(event, \"max\") }} margin=\"normal\" fullWidth variant='outlined' label=\"Max. Array items\" />\r\n                                                </div>\r\n                                                <div style={{ color: \"gray\", fontSize: \"12px\", paddingLeft: \"11px\", paddingRight: \"11px\", paddingBottom: \"10px\" }}>{arrayMinMaxHelperText}</div>\r\n                                                <FormControlLabel control={<Checkbox onChange={() => handleUniqueItemsCheckBoxOnChange()} checked={arrayUniqueItems} />} label=\"Input items must be unique.\" />\r\n                                                <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                            </>\r\n                                            : null}\r\n                                        {selectedType === \"object\" ? <>\r\n                                        <div style={{ display: \"flex\", width:\"100%\", justifyContent:\"center\" }}>\r\n                                            <div onClick={()=> setActiveSubSchemaButton(\"subschema\")} style={{paddingRight:\"5px\", width:\"100%\"}}><Button fullWidth={true} size=\"small\" color=\"primary\" variant=\"outlined\" {...getRootProps()}> <input {...getInputProps()} />Browse a subschema</Button></div>\r\n                                            <Button fullWidth={true} size=\"small\" color=\"primary\" variant=\"outlined\" {...getRootProps()}> <input {...getInputProps()} />Browse schema properties</Button>\r\n                                        </div>\r\n                                        {subSchemaValidity ? <div style={{color:\"green\", fontSize: \"9pt\", paddingLeft:\"13px\", paddingTop:\"5px\", paddingBottom:\"5px\"}}>{subSchemaFilename} is valid.</div>:null}\r\n                                        <div style={{fontSize: \"9pt\", paddingLeft:\"13px\", paddingTop:\"5px\", paddingBottom:\"5px\"}}>Browse and add a subschema or schema properties for this object by clicking on the corresponding button above.</div>\r\n                                        </>: null}\r\n                                        {selectedType === \"object\" ? <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" /> : null}\r\n                                        {selectedType !== \"object\" & selectedType !== \"array\" & selectedType !== \"boolean\" ?\r\n                                            <>\r\n                                                <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                                <div style={{ paddingTop: \"15px\", paddingBottom: \"0px\" }}>\r\n                                                    <FormControl component=\"misc-keywords\">\r\n                                                        <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Misc.:</FormLabel>\r\n                                                    </FormControl>\r\n                                                </div>\r\n                                                {selectedType === \"fileupload (string)\" ? null : <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"defaultValue\")} style={{ marginTop: \"10px\" }} defaultValue={defaultValue} variant=\"outlined\" fullWidth={true} label={\"Field Default Value\"} helperText=\"Initial value of the field.\" />}\r\n                                            </>\r\n                                            : null}\r\n                                        {selectedType === \"boolean\" ?\r\n                                            <>\r\n                                                <div style={{ paddingTop: \"15px\", paddingBottom: \"0px\" }}>\r\n                                                    <FormControl component=\"misc-keywords\">\r\n                                                        <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Misc.:</FormLabel>\r\n                                                    </FormControl>\r\n                                                </div>\r\n                                                <TextField\r\n                                                    margin='normal'\r\n                                                    onChange={event => handleChangeUISchema(event, \"defaultValue\")}\r\n                                                    style={{ marginTop: \"10px\" }}\r\n                                                    defaultValue={defaultValue !== undefined ? defaultValue : \"\"}\r\n                                                    select\r\n                                                    fullWidth={true}\r\n                                                    id={field_key}\r\n                                                    label={\"Boolean Field Default Value\"}\r\n                                                    variant=\"outlined\"\r\n                                                    SelectProps={{\r\n                                                        native: true,\r\n                                                    }}\r\n                                                >\r\n                                                    {[\"\", \"true\", \"false\"].map((content, index) => (\r\n                                                        <option key={index} value={content}>\r\n                                                            {content}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </TextField>\r\n                                            </>\r\n                                            : null}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                            {editOrAdd === \"add\" ? \"Add\" : \"Save\"}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditElement;","import getValue from \"./getValue\";\r\n\r\n// delete key and value given path\r\nconst deleteKey = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const elementValue = getValue(jsonData, newPath);\r\n\r\n    if (Array.isArray(elementValue)) {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        elementValue.splice(parseInt(deleteIndex), 1)\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    } else {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        delete elementValue[deleteIndex]\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    }\r\n\r\n};\r\n\r\nexport default deleteKey;","import React, { useContext, useEffect, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst StringType = ({ adamant_field_error, adamant_error_description, minLength, maxLength, withinObject, field_uri, dataInputItems, setDataInputItems, withinArray, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate, defaultValue, value }) => {\r\n\r\n\r\n    //const [descriptionText, setDescriptionText] = useState(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\");\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [inputError, setInputError] = useState(adamant_field_error !== undefined ? adamant_field_error : false);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput, SEMSelectedDevice, setSEMSelectedDevice } = useContext(FormContext);\r\n    const [fieldValue, setFieldValue] = useState(defaultValue !== undefined ? defaultValue : value !== undefined ? value : \"\")\r\n    const [fieldEnumerate, setFieldEnumerate] = useState()\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    const handleOnChange = (event) => {\r\n        setFieldValue(event.target.value)\r\n\r\n        // this is for SEM form only!\r\n        if (field_key === \"semDevice\") {\r\n            setSEMSelectedDevice(event.target.value)\r\n        }\r\n    }\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n    // set stuff back to normal onFocus\r\n    const handleOnFocus = () => {\r\n        if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n            set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n            set(convertedSchema, path + \".adamant_field_error\", false)\r\n            setInputError(false)\r\n            setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n        }\r\n    }\r\n\r\n    // for SEM only - currently hardcoded\r\n    useEffect(() => {\r\n        if (field_key === \"semOperator\") {\r\n            if (SEMSelectedDevice === \"\") {\r\n                setFieldEnumerate(field_enumerate)\r\n                setFieldValue(\"\")\r\n            } else {\r\n                try {\r\n                    let semOperatorDeviceList = require(\"../../assets/sem-operator-device-list.json\")\r\n                    setFieldValue(\"\")\r\n                    setFieldEnumerate(semOperatorDeviceList[SEMSelectedDevice])\r\n                }\r\n                catch (error) {\r\n                    console.log(error)\r\n                    setFieldValue(\"\")\r\n                    setFieldEnumerate(field_enumerate)\r\n                }\r\n            }\r\n        }\r\n\r\n    }, [SEMSelectedDevice, field_enumerate, field_key])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"string\",\r\n        \"minLength\": minLength,\r\n        \"maxLength\": maxLength,\r\n        \"value\": value,\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle on blur\r\n    const handleOnBlur = (event, pathFormData, type) => {\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_key] = event.target.value;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let value = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            // conv. schema data\r\n            handleConvertedDataInput(value, newPath + \".value\", \"string\")\r\n\r\n            // update field value\r\n            setFieldValue(event.target.value)\r\n        } else {\r\n            // conv. schema data\r\n            handleConvertedDataInput(event, path + \".value\", \"string\")\r\n            // update field value\r\n            setFieldValue(event.target.value)\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            if (val === \"\") {\r\n                setFieldValue(\"\")\r\n            } else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setFieldValue(val)\r\n                }\r\n                else {\r\n                    setDataInputItems(items);\r\n\r\n                    // store to the main form data\r\n                    let event = {\r\n                        \"target\": {\r\n                            \"value\":\r\n                                items\r\n                        }\r\n                    }\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(event, newPath + \".value\", \"string\")\r\n                    // update field value\r\n                    setFieldValue(val)\r\n                }\r\n            }\r\n        } else {\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        val\r\n                }\r\n            }\r\n\r\n            if (val === \"\") {\r\n                setFieldValue(val)\r\n            } else {\r\n                // conv. schema data\r\n                handleConvertedDataInput(event, path + \".value\", \"string\")\r\n                // update field value\r\n                setFieldValue(val)\r\n            }\r\n        }\r\n\r\n    }, [value])\r\n\r\n    if (fieldEnumerate !== undefined) {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    < TextField\r\n                        onFocus={() => { handleOnFocus() }}\r\n                        error={inputError}\r\n                        onBlur={(event) => handleOnBlur(event, pathFormData, \"string\")}\r\n                        onChange={event => handleOnChange(event)}\r\n                        required={required}\r\n                        select\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_key}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }\r\n                        }\r\n                        helperText={descriptionText}\r\n                        value={fieldValue === undefined ? defaultValue : fieldValue}\r\n                    >\r\n                        {\r\n                            fieldEnumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField >\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div >\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} enumerated={true} defaultValue={defaultValue} field_enumerate={fieldEnumerate} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        if (field_enumerate === undefined) {\r\n            return (\r\n                <>\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <TextField\r\n                            onFocus={() => { handleOnFocus() }}\r\n                            error={inputError}\r\n                            multiline\r\n                            onKeyDown={(e) => {\r\n                                if (e.key === \"Enter\" && !(e.shiftKey)) {\r\n                                    e.preventDefault();\r\n                                    //setFieldValue(e.target.value);\r\n                                }\r\n                            }}\r\n                            onBlur={(event) => handleOnBlur(event, pathFormData, \"string\")} required={required} helperText={descriptionText} onChange={(event) => { handleOnChange(event) }} value={fieldValue} fullWidth={true} className={classes.heading} id={field_key} label={field_label} variant=\"outlined\" />\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                                <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                    <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                                <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                    <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div>\r\n                    {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} defaultValue={defaultValue} enumerated={enumerated} field_enumerate={field_enumerate} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <>\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        < TextField\r\n                            onFocus={() => { handleOnFocus() }}\r\n                            error={inputError}\r\n                            onBlur={(event) => handleOnBlur(event, pathFormData, \"string\")}\r\n                            onChange={event => handleOnChange(event)}\r\n                            required={required}\r\n                            select\r\n                            fullWidth={true}\r\n                            className={classes.heading}\r\n                            id={field_key}\r\n                            label={field_label}\r\n                            variant=\"outlined\"\r\n                            SelectProps={{\r\n                                native: true,\r\n                            }\r\n                            }\r\n                            helperText={descriptionText}\r\n                            value={fieldValue === undefined ? defaultValue : fieldValue}\r\n                        >\r\n                            {\r\n                                field_enumerate.map((content, index) => (\r\n                                    <option key={index} value={content}>\r\n                                        {content}\r\n                                    </option>\r\n                                ))\r\n                            }\r\n                        </TextField >\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                                <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                    <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                                <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                    <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div >\r\n                    {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} enumerated={enumerated} defaultValue={defaultValue} field_enumerate={field_enumerate} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n};\r\n\r\nexport default StringType;\r\n","const getUnit = (field_label) => {\r\n\r\n    if (field_label === undefined) {\r\n        return \"\"\r\n    }\r\n\r\n    let addorn = field_label.match(/[^[\\]]+(?=])/g)\r\n    if (addorn === null) {\r\n        return \"\"\r\n    } else {\r\n        return addorn\r\n    }\r\n}\r\n\r\nexport default getUnit;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { InputAdornment } from '@material-ui/core';\r\nimport getUnit from '../utils/getUnit';\r\nimport { MathComponent } from 'mathjax-react'\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst NumberType = ({ adamant_error_description, adamant_field_error, minimum, maximum, field_uri, value, dataInputItems, setDataInputItems, withinArray, withinObject, path, pathFormData, defaultValue, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue !== undefined & value === undefined ? defaultValue : value === undefined ? \"\" : value)//useState(defaultValue !== undefined ? defaultValue : value)\r\n    const [inputError, setInputError] = useState(false)\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"number\",\r\n        \"value\": value,\r\n        \"minimum\": minimum,\r\n        \"maximum\": maximum\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        setInputError(false)\r\n        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n\r\n        setInputError(false)\r\n        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_key] = value;\r\n                setDataInputItems(items);\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, newPath + \".value\", \"number\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // conv. schema data\r\n                handleConvertedDataInput(parseFloat(inputValue), path + \".value\", \"number\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"number\") {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setInputValue(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    // store to the main form data\r\n                    /*let event = {\r\n                        \"target\": {\r\n                            \"value\":\r\n                                items\r\n                        }\r\n                    }*/\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(val, newPath + \".value\", \"number\")\r\n                    // update field value\r\n                    setInputValue(val)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n\r\n            // check if input is of type number\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"number\") {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            } else {\r\n                // conv. schema data\r\n                handleConvertedDataInput(val, path + \".value\", \"number\")\r\n                // update field value\r\n                setInputValue(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onFocus={() => {\r\n                        if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                            set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                            set(convertedSchema, path + \".adamant_field_error\", false)\r\n                            setInputError(false)\r\n                            setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                        }\r\n\r\n                        if (inputError === true) {\r\n                            setInputValue(\"\")\r\n                            // then delete the value the convertedSchema\r\n                            let value = { ...convertedSchema }\r\n                            if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                value = deleteKey(value, path + \".value\")\r\n                                updateParent(value)\r\n                            } else {\r\n                                let newPath = path.split(\".\")\r\n                                newPath.pop()\r\n                                newPath = newPath.join(\".\")\r\n                                value = deleteKey(value, newPath + \".value\")\r\n                                updateParent(value)\r\n                            }\r\n                        }\r\n                    }} error={inputError} onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} fullWidth={true} className={classes.heading} id={field_key} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                    }} helperText={descriptionText} />\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div onMouseEnter={() => {\r\n                    if (inputValue !== undefined & inputValue !== \"\") {\r\n                        setInputError(false)\r\n                        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                    }\r\n                }} style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField\r\n                        onFocus={() => {\r\n                            if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                                set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                                set(convertedSchema, path + \".adamant_field_error\", false)\r\n                                setInputError(false)\r\n                                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                            }\r\n                            if (inputError === true) {\r\n                                setInputValue(\"\")\r\n                                // then delete the value the convertedSchema\r\n                                let value = { ...convertedSchema }\r\n                                if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                    value = deleteKey(value, path + \".value\")\r\n                                    updateParent(value)\r\n                                } else {\r\n                                    let newPath = path.split(\".\")\r\n                                    newPath.pop()\r\n                                    newPath = newPath.join(\".\")\r\n                                    value = deleteKey(value, newPath + \".value\")\r\n                                    updateParent(value)\r\n                                }\r\n                            }\r\n                        }}\r\n                        error={inputError}\r\n                        helperText={descriptionText}\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_key}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default NumberType;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"../ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\n//import Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport getValue from \"../utils/getValue\";\r\nimport set from \"set-value\";\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst Accordion = withStyles({\r\n    root: {\r\n        border: '1px solid rgba(232, 244, 253, 1)',\r\n        '&:not(:last-child)': {\r\n            borderBottom: 0,\r\n        },\r\n        boxShadow: \"none\",\r\n        '&:before': {\r\n            display: 'none',\r\n        },\r\n        '&$expanded': {\r\n            margin: 'auto',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordion);\r\n\r\nconst AccordionSummary = withStyles({\r\n    root: {\r\n        backgroundColor: 'rgba(232, 244, 253, 1)',\r\n        borderBottom: '1px solid rgba(0, 0, 0, .0)',\r\n        marginBottom: -1,\r\n        minHeight: 56,\r\n        '&$expanded': {\r\n            minHeight: 56,\r\n        },\r\n    },\r\n    content: {\r\n        '&$expanded': {\r\n            margin: '12px 0',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst ObjectType = ({ adamant_error_description, adamant_field_error, dataInputItems, setDataInputItems, withinArray, withinObject, field_uri, path, pathSchema, pathFormData, field_required, object_is_required, field_key, field_index, edit, field_label, field_description, field_properties }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [expand, setExpand] = useState(true)// set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema, handleDataDelete } = useContext(FormContext);\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\")\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [inputError, setInputError] = useState(false)\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    var required\r\n    if (object_is_required === undefined) {\r\n        required = false;\r\n    } else if (object_is_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(field_properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        const set = require(\"set-value\");\r\n        let value = { ...convertedSchema }\r\n        set(convertedSchema, path + \".properties\", items)\r\n        updateParent(value);\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"required\": field_required,\r\n        \"properties\": field_properties,\r\n        \"$id\": field_uri,\r\n        \"type\": \"object\"\r\n    }\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <div onClick={() => {\r\n            if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                set(convertedSchema, path + \".adamant_field_error\", false)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                updateParent(convertedSchema)\r\n            }\r\n        }}\r\n            style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} style={inputError ? {\r\n                border: `1px solid #ff7961`,\r\n                '&:not(:lastChild)': {\r\n                    borderBottom: 0,\r\n                }\r\n            } :\r\n                {\r\n                    border: `1px solid rgba(232, 244, 253, 1)`,\r\n                    '&:not(:lastChild)': {\r\n                        borderBottom: 0,\r\n                    }\r\n                }}>\r\n                <AccordionSummary\r\n                    style={inputError ? { backgroundColor: \"white\", borderRadius: \"4px\", borderBottom: '1px solid  #ff7961', height: \"auto\" } : { backgroundColor: \"rgba(232, 244, 253, 1)\", borderBottom: '1px solid  rgba(0, 0, 0, .0)', height: \"auto\" }}\r\n                    expandIcon={\r\n                        <Tooltip placement=\"top\" title={`Collapse/Expand this container`}>\r\n                            <ExpandMoreIcon />\r\n                        </Tooltip>}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography style={inputError ? { color: \"#ff7961\" } : {}} className={classes.heading}>{field_label + (required ? \"*\" : \"\")}</Typography>\r\n                            {expand ? <div style={inputError ? { color: \"#ff7961\" } : { color: \"gray\" }}>\r\n                                {descriptionText}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit \"${field_label}\"`}>\r\n                                <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove \"${field_label}\"`}>\r\n                                <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(field_properties).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={!edit} key={field_properties[item][\"fieldKey\"]} draggableId={field_properties[item][\"fieldKey\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <Tooltip placement=\"top\" title={`Drag & drop to adjust the order of this field`}>\r\n                                                                    <DragHandleIcon fontSize=\"small\" />\r\n                                                                </Tooltip>\r\n                                                            </div> : null}\r\n                                                            <ElementRenderer withinArray={withinArray} withinObject={withinObject} path={path + \".properties\"} pathSchema={pathSchema + \".properties\"} pathFormData={pathFormData} fieldkey={field_properties[item][\"fieldKey\"]} fieldIndex={item} elementRequired={field_required} edit={edit} field={field_properties[item]} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <Tooltip placement=\"top\" title={`Add a new field to \"${field_label}\"`}>\r\n                                            <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                                        </Tooltip>\r\n                                    </div> : null}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} field_label={field_label} /> : null}\r\n        {openDialogAddElement ? <EditElement editOrAdd={\"add\"} openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} path={path} defaultSchema={defaultSchema} field_label={field_label} /> : null}\r\n    </>);\r\n};\r\n\r\nexport default ObjectType;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport getUnit from '../utils/getUnit';\r\nimport { InputAdornment } from '@material-ui/core';\r\nimport { MathComponent } from 'mathjax-react'\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst IntegerType = ({ adamant_error_description, adamant_field_error, minimum, maximum, field_uri, value, dataInputItems, setDataInputItems, withinArray, withinObject, defaultValue, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue !== undefined & value === undefined ? defaultValue : value === undefined ? \"\" : value)// useState(defaultValue !== undefined ? defaultValue : value);\r\n    const [inputError, setInputError] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"integer\",\r\n        \"minimum\": minimum,\r\n        \"maximum\": maximum,\r\n        \"value\": value\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        setInputError(false)\r\n        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_key] = value;\r\n                setDataInputItems(items);\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, newPath + \".value\", \"integer\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // conv. schema data\r\n                handleConvertedDataInput(parseInt(inputValue), path + \".value\", \"integer\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (!Number.isInteger(val)) {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setInputValue(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    // store to the main form data\r\n                    /*let event = {\r\n                        \"target\": {\r\n                            \"value\":\r\n                                items\r\n                        }\r\n                    }*/\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(val, newPath + \".value\", \"integer\")\r\n                    // update field value\r\n                    setInputValue(val)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n\r\n            // check if input is of type number\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (!Number.isInteger(val)) {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            } else {\r\n                // conv. schema data\r\n                handleConvertedDataInput(val, path + \".value\", \"integer\")\r\n                // update field value\r\n                setInputValue(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onFocus={() => {\r\n                        if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                            set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                            set(convertedSchema, path + \".adamant_field_error\", false)\r\n                            setInputError(false)\r\n                            setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                        }\r\n                        if (inputError === true) {\r\n                            setInputValue(\"\")\r\n                            // then delete the value the convertedSchema\r\n                            let value = { ...convertedSchema }\r\n                            if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                value = deleteKey(value, path + \".value\")\r\n                                updateParent(value)\r\n                            } else {\r\n                                let newPath = path.split(\".\")\r\n                                newPath.pop()\r\n                                newPath = newPath.join(\".\")\r\n                                value = deleteKey(value, newPath + \".value\")\r\n                                updateParent(value)\r\n                            }\r\n                        }\r\n                    }} error={inputError} onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} fullWidth={true} className={classes.heading} id={field_key} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                    }} helperText={descriptionText} />\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField\r\n                        onFocus={() => {\r\n                            if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                                set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                                set(convertedSchema, path + \".adamant_field_error\", false)\r\n                                setInputError(false)\r\n                                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                            }\r\n                            if (inputError === true) {\r\n                                setInputValue(\"\")\r\n                                // then delete the value the convertedSchema\r\n                                let value = { ...convertedSchema }\r\n                                if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                    value = deleteKey(value, path + \".value\")\r\n                                    updateParent(value)\r\n                                } else {\r\n                                    let newPath = path.split(\".\")\r\n                                    newPath.pop()\r\n                                    newPath = newPath.join(\".\")\r\n                                    value = deleteKey(value, newPath + \".value\")\r\n                                    updateParent(value)\r\n                                }\r\n                            }\r\n                        }}\r\n                        error={inputError}\r\n                        helperText={descriptionText}\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_key}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default IntegerType;\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport { Checkbox, FormLabel, FormHelperText, FormControl } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\n\r\nconst BooleanType = ({ field_uri, withinArray, withinObject, value, dataInputItems, setDataInputItems, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, defaultValue }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(value !== undefined ? value : typeof (defaultValue) === \"boolean\" ? defaultValue : false);\r\n    const [inputError, setInputError] = useState(false)\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"boolean\",\r\n        \"value\": value\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for checkbox (boolean type: checked is true unchecked is false)\r\n    const handleInputOnChange = () => {\r\n        let value = inputValue\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_key] = !value;\r\n            setDataInputItems(items);\r\n\r\n            setInputValue(!value)\r\n            handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n\r\n        } else {\r\n            setInputValue(!value)\r\n            handleConvertedDataInput(!value, path + \".value\", \"boolean\")\r\n        }\r\n    }\r\n\r\n    // handle input on change for checkbox (boolean type: checked is true unchecked is false)\r\n    const handleInputWhenInvalid = (value) => {\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_key] = value;\r\n            setDataInputItems(items);\r\n\r\n            setInputValue(value)\r\n            handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n\r\n        } else {\r\n            setInputValue(value)\r\n            handleConvertedDataInput(value, path + \".value\", \"boolean\")\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            //if (Array.isArray(latestVal)) { latestVal = latestVal[field_key] }\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(false)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"boolean\") {\r\n                setInputValue(false)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a boolean type.\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setInputValue(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    setInputValue(val)\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(false)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"boolean\") {\r\n                setInputValue(false)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a boolean type.\")\r\n            }\r\n            else {\r\n                setInputValue(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                handleConvertedDataInput(val, path + \".value\", \"boolean\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div onClick={() => {\r\n                if (inputError === true) {\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    // then set inputValue to default value or false\r\n                    handleInputWhenInvalid(typeof (defaultValue) === \"boolean\" ? defaultValue : false)\r\n                }\r\n            }} style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', alignItems: \"center\", width: '100%' }}>\r\n                <div style={{ paddingLeft: \"15px\", width: \"100%\" }}>\r\n                    <FormControl >\r\n                        <FormLabel style={{ color: `${inputError ? \"red\" : \"\"}` }}>{field_label === undefined ? \"\" : field_label + \":\"}</FormLabel>\r\n                        <div style={{ textAlign: \"center\", width: \"100%\" }}>\r\n                            <Checkbox onChange={() => handleInputOnChange()} checked={inputValue} />\r\n                        </div>\r\n                        <FormHelperText style={{ color: `${inputError ? \"red\" : \"\"}` }}>{descriptionText}</FormHelperText>\r\n                    </FormControl>\r\n                </div>\r\n                {edit ? <>\r\n                    <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                        <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                            <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                            <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </> : null}\r\n            </div>\r\n            {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default BooleanType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\nimport getUnit from '../../utils/getUnit';\r\nimport { MathComponent } from 'mathjax-react'\r\nimport { InputAdornment } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst ItemIntegerType = ({ field_label, oDataInputItems, oSetDataInputItems, arrayFieldKey, withinObject, value, path, pathFormData, dataInputItems, setDataInputItems, edit, index, field_key, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const [inputValue, setInputValue] = useState(value === undefined ? \"\" : value[index] === undefined ? \"\" : value[index]);\r\n    const { handleConvertedDataInput } = useContext(FormContext);\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        if (withinObject !== undefined & withinObject === true) {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n\r\n                let arr = dataInputItems;\r\n                let arr2 = oDataInputItems\r\n                let items = Array.from(arr);\r\n                let items2 = Array.from(arr2);\r\n\r\n                let prevIndex = parseInt(path.split(\".\").pop())\r\n                items[index] = value;\r\n                items2[prevIndex][arrayFieldKey] = items\r\n                oSetDataInputItems(items2);\r\n\r\n                setInputValue(value)\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n            }\r\n\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n\r\n                // store it to input data array\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[index] = value;\r\n                setDataInputItems(items);\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, path + \".value\", \"array\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_key} variant=\"outlined\" InputProps={{\r\n                    endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                }} />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemIntegerType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\nimport getUnit from '../../utils/getUnit';\r\nimport { MathComponent } from 'mathjax-react'\r\nimport { InputAdornment } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst ItemNumberType = ({ oDataInputItems, oSetDataInputItems, arrayFieldKey, withinObject, value, pathFormData, dataInputItems, setDataInputItems, path, field_label, edit, index, field_key, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const [inputValue, setInputValue] = useState(value === undefined ? \"\" : value[index] === undefined ? \"\" : value[index]);\r\n    const { handleConvertedDataInput } = useContext(FormContext);\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        if (withinObject !== undefined & withinObject === true) {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n\r\n                let arr = dataInputItems;\r\n                let arr2 = oDataInputItems\r\n                let items = Array.from(arr);\r\n                let items2 = Array.from(arr2);\r\n\r\n                let prevIndex = parseInt(path.split(\".\").pop())\r\n                items[index] = value;\r\n                items2[prevIndex][arrayFieldKey] = items\r\n                oSetDataInputItems(items2);\r\n\r\n                setInputValue(value)\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n            }\r\n\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n\r\n                // store it to input data array\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[index] = value;\r\n                setDataInputItems(items);\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, path + \".value\", \"array\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_key} variant=\"outlined\" InputProps={{\r\n                    endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                }} />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemNumberType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst ItemStringType = ({ oDataInputItems, oSetDataInputItems, arrayFieldKey, withinObject, value, pathFormData, dataInputItems, setDataInputItems, path, edit, index, field_key, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const { handleConvertedDataInput } = useContext(FormContext)\r\n    const [fieldValue, setFieldValue] = useState(value === undefined ? undefined : value[index])\r\n\r\n\r\n    // handle input field on blur\r\n    const handleOnBlur = (event, index) => {\r\n        if (withinObject !== undefined & withinObject === true) {\r\n            let arr = dataInputItems;\r\n            let arr2 = oDataInputItems\r\n            let items = Array.from(arr);\r\n            let items2 = Array.from(arr2);\r\n\r\n            let prevIndex = parseInt(path.split(\".\").pop())\r\n            items[index] = event.target.value;\r\n            items2[prevIndex][arrayFieldKey] = items\r\n            console.log(items2)\r\n            oSetDataInputItems(items2);\r\n\r\n            setFieldValue(event.target.value)\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n\r\n        } else {\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[index] = event.target.value;\r\n            setDataInputItems(items);\r\n            setFieldValue(event.target.value)\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items, path + \".value\", \"array\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={(event) => handleOnBlur(event, index)} id={field_key} fullWidth={true} className={classes.heading} variant=\"outlined\" defaultValue={fieldValue} />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default ItemStringType;","import React, { useState } from 'react'\r\nimport ElementRenderer from \"../../ElementRenderer\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst ItemObjectType = ({ path, dataInputItems, setDataInputItems, field_label, pathFormData, field_required, field_items, field_type, edit, index, field_key, handleDeleteArrayItem }) => {\r\n    const [expand, setExpand] = useState(dataInputItems[index][\"adamant-ui-specific-expand\"] === undefined ? true : dataInputItems[index][\"adamant-ui-specific-expand\"]); // set to \"true\" for normally open accordion\r\n    let objectIndex = index;\r\n    let field_properties = field_items[\"properties\"]\r\n    let withinArray = true;\r\n    let withinObject = true;\r\n\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n\r\n        let newVal = [...dataInputItems]\r\n        newVal[index][\"adamant-ui-specific-expand\"] = !value\r\n\r\n        setDataInputItems(newVal)\r\n    };\r\n\r\n    //const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    style={{ height: \"auto\" }}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\", justifySelf: \"center\" }}>\r\n                            {field_label + \" #\" + parseInt(index + 1)}\r\n                        </div>\r\n                        {edit ? <Button onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div style={{ width: \"100%\" }}>\r\n                        {Object.keys(field_properties).map((item, index) => {\r\n                            let tempField = JSON.parse(JSON.stringify(field_properties[item]));\r\n                            if (tempField[\"enum\"]) {\r\n                                tempField[\"enumerate\"] = tempField[\"enum\"]\r\n                            }\r\n                            if (tempField[\"default\"]) {\r\n                                tempField[\"defaultValue\"] = tempField[\"default\"]\r\n                            }\r\n                            return (\r\n                                <div key={item} style={{ display: \"flex\" }}>\r\n                                    <ElementRenderer withinObject={withinObject} path={path} pathFormData={pathFormData} withinArray={withinArray} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} fieldkey={item} fieldIndex={objectIndex} elementRequired={field_items[\"required\"]} edit={false} field={tempField} />\r\n                                </div>\r\n                            )\r\n                        })\r\n                        }\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div >\r\n    </>);\r\n\r\n};\r\n\r\nexport default ItemObjectType;\r\n","import React from 'react';\r\nimport ItemIntegerType from './array_items/ItemIntegerType';\r\nimport ItemNumberType from './array_items/ItemNumberType';\r\nimport ItemStringType from \"./array_items/ItemStringType\";\r\nimport ItemObjectType from \"./array_items/ItemObjectType\";\r\n\r\n\r\nconst ArrayItemRenderer = ({ oSetDataInputItems, oDataInputItems, arrayFieldKey, withinObject, value, pathSchema, pathFormData, dataInputItems, setDataInputItems, field_label, field_items, path, type, edit, fieldIndex, fieldkey, enumerate, handleDeleteArrayItem, properties }) => {\r\n    switch (type) {\r\n        case 'string':\r\n            return (<ItemStringType\r\n                field_label={field_label}\r\n                value={value}\r\n                withinObject={withinObject}\r\n                arrayFieldKey={arrayFieldKey}\r\n                oSetDataInputItems={oSetDataInputItems}\r\n                oDataInputItems={oDataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                dataInputItems={dataInputItems}\r\n                path={path}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'number':\r\n            return (<ItemNumberType\r\n                field_label={field_label}\r\n                value={value}\r\n                path={path}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                withinObject={withinObject}\r\n                arrayFieldKey={arrayFieldKey}\r\n                oSetDataInputItems={oSetDataInputItems}\r\n                oDataInputItems={oDataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'integer':\r\n            return (<ItemIntegerType\r\n                field_label={field_label}\r\n                value={value}\r\n                path={path}\r\n                pathFormData={pathFormData}\r\n                withinObject={withinObject}\r\n                arrayFieldKey={arrayFieldKey}\r\n                oSetDataInputItems={oSetDataInputItems}\r\n                oDataInputItems={oDataInputItems}\r\n                pathSchema={pathSchema + \".value\"}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'object':\r\n            return (<ItemObjectType\r\n                field_label={field_label}\r\n                value={value}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                path={path}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n                field_items={field_items}\r\n            />)\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ArrayItemRenderer;\r\n","const generateUID = () => {\r\n    // I generate the UID from two parts here \r\n    // to ensure the random number provide enough bits.\r\n    var firstPart = (Math.random() * 46656) | 0;\r\n    var secondPart = (Math.random() * 46656) | 0;\r\n    firstPart = (\"000\" + firstPart.toString(36)).slice(-3);\r\n    secondPart = (\"000\" + secondPart.toString(36)).slice(-3);\r\n    return firstPart + secondPart;\r\n}\r\n\r\nexport default generateUID;","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { AccordionDetails } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ArrayItemRenderer from \"./ArrayItemRenderer\";\r\nimport generateUniqueID from \"../utils/generateUniqueID\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport getValue from \"../utils/getValue\";\r\nimport set from \"set-value\";\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst Accordion = withStyles({\r\n    root: {\r\n        border: `1px solid rgba(232, 244, 253, 1)`,\r\n        '&:not(:last-child)': {\r\n            borderBottom: 0,\r\n        },\r\n        boxShadow: \"none\",\r\n        '&:before': {\r\n            display: 'none',\r\n        },\r\n        '&$expanded': {\r\n            margin: 'auto',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordion);\r\n\r\nconst AccordionSummary = withStyles({\r\n    root: {\r\n        backgroundColor: \"rgba(232, 244, 253, 1)\",\r\n        borderBottom: '1px solid rgba(0, 0, 0, .0)',\r\n        marginBottom: -1,\r\n        minHeight: 56,\r\n        '&$expanded': {\r\n            minHeight: 56,\r\n        },\r\n    },\r\n    content: {\r\n        '&$expanded': {\r\n            margin: '12px 0',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst ArrayType = ({ adamant_field_error, adamant_error_description, maxItems, minItems, uniqueItems, oSetDataInputItems, oDataInputItems, withinObject, withinArray, field_uri, value, pathFormData, path, pathSchema, field_required, field_key, field_index, edit, field_label, field_description, field_items, field_prefixItems }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [expand, setExpand] = useState(true);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputItems, setInputItems] = useState([]);\r\n    const [dataInputItems, setDataInputItems] = useState([]);\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\")\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [inputError, setInputError] = useState(false)\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists\r\n    /*\r\n    useEffect(() => {\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (value === undefined) {\r\n                console.log(\"do nothing\")\r\n            } else {\r\n                // use existing schema if items is not empty\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(newFieldItems);\r\n                setInputItems(items);\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    setDataInputItems(items2)\r\n\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push({});\r\n                    setDataInputItems(items2)\r\n\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                }\r\n            }\r\n        }\r\n    }, [value])\r\n    */\r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            value = oDataInputItems[field_index][field_key]\r\n\r\n            if (value !== undefined) {\r\n                if (field_prefixItems === undefined & field_items !== undefined) {\r\n                    if (field_items[\"type\"] !== \"object\") {\r\n                        if (Object.keys(field_items).length === 0) {\r\n                            // create field_items if items is empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                field_items = { type: \"string\", field_key: `${generateUniqueID()}` }\r\n                                items.push(field_items);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        } else {\r\n                            // use existing schema if items is not empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (value !== undefined) {\r\n                if (field_prefixItems === undefined & field_items !== undefined) {\r\n                    if (field_items[\"type\"] !== \"object\") {\r\n                        if (Object.keys(field_items).length === 0) {\r\n                            // create field_items if items is empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                field_items = { type: \"string\", field_key: `${generateUniqueID()}` }\r\n                                items.push(field_items);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n\r\n                            // conv. schema data\r\n                            handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                        } else {\r\n                            // use existing schema if items is not empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n\r\n                            // conv. schema data\r\n                            handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                        }\r\n                    }\r\n                    else {\r\n                        // use existing schema if items is not empty\r\n                        let items = [];\r\n                        if (dataInputItems.length === 0) {\r\n                            let arr = value;\r\n                            arr = Array.from(arr);\r\n                            let currentInputItems = [...inputItems]\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = (currentInputItems[i] !== undefined & currentInputItems.length !== 0 ? currentInputItems[i] : {})\r\n                                if (Object.keys(newFieldItems).length === 0) {\r\n                                    newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                    newFieldItems[\"type\"] = \"object\"\r\n                                    newFieldItems[\"properties\"] = JSON.parse(JSON.stringify(field_items[\"properties\"]))\r\n                                    newFieldItems[\"required\"] = field_items[\"required\"]\r\n                                    Object.keys(newFieldItems[\"properties\"]).forEach((element) => {\r\n                                        newFieldItems[\"properties\"][element][\"value\"] = arr[i][element]\r\n                                    })\r\n                                }\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        } else {\r\n                            let arr = value;\r\n                            arr = Array.from(arr);\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = {}\r\n                                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                newFieldItems[\"type\"] = \"object\"\r\n                                newFieldItems[\"properties\"] = JSON.parse(JSON.stringify(field_items[\"properties\"]))\r\n                                newFieldItems[\"required\"] = field_items[\"required\"]\r\n                                Object.keys(newFieldItems[\"properties\"]).forEach((element) => {\r\n                                    newFieldItems[\"properties\"][element][\"value\"] = arr[i][element]\r\n                                })\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                setInputItems([]);\r\n                setDataInputItems([])\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        if (withinObject & withinArray) {\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            const [reorderedItem] = items.splice(result.source.index, 1);\r\n            items.splice(result.destination.index, 0, reorderedItem);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems\r\n            const items2 = Array.from(arr2);\r\n            const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n            items2.splice(result.destination.index, 0, reorderedItem2);\r\n            setDataInputItems(items2)\r\n\r\n            /*\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n            */\r\n        }\r\n        else {\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            const [reorderedItem] = items.splice(result.source.index, 1);\r\n            items.splice(result.destination.index, 0, reorderedItem);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems\r\n            const items2 = Array.from(arr2);\r\n            const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n            items2.splice(result.destination.index, 0, reorderedItem2);\r\n            setDataInputItems(items2)\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n\r\n        }\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"$id\": field_uri,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"items\": field_items,\r\n        \"minItems\": minItems,\r\n        \"maxItems\": maxItems,\r\n        \"uniqueItems\": uniqueItems,\r\n        \"type\": \"array\",\r\n        \"value\": value\r\n    }\r\n\r\n    // handle add array item\r\n    const handleAddArrayItem = () => {\r\n        // check if current array still has not reached maximum item\r\n        if (maxItems !== undefined) {\r\n            if (maxItems === (dataInputItems.length)) {\r\n                toast.warning(\r\n                    `Can not add more item. Maximum number (${maxItems}) of items has been reached.`,\r\n                    {\r\n                        toastId: \"maxNumberWarning\"\r\n                    }\r\n                );\r\n\r\n                return\r\n            }\r\n        }\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (Object.keys(field_items).length === 0) {\r\n                // create field_items if items is empty\r\n                field_items = { type: \"string\", field_key: `${generateUniqueID()}` }\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(field_items);\r\n                setInputItems(items);\r\n\r\n                // push a new item for the data\r\n                let arr2 = dataInputItems;\r\n                const items2 = Array.from(arr2);\r\n                items2.push(\"\");\r\n                setDataInputItems(items2)\r\n            } else {\r\n                // use existing schema if items is not empty\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(newFieldItems);\r\n                setInputItems(items);\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    console.log(items2)\r\n                    setDataInputItems(items2)\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push({});\r\n                    setDataInputItems(items2)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle delete item\r\n    const handleDeleteArrayItem = (index) => {\r\n\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            items.splice(index, 1);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems;\r\n            const items2 = Array.from(arr2);\r\n            items2.splice(index, 1);\r\n            setDataInputItems(items2)\r\n        } else {\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            items.splice(index, 1);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems;\r\n            const items2 = Array.from(arr2);\r\n            items2.splice(index, 1);\r\n            setDataInputItems(items2)\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <div onClick={() => {\r\n            if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                set(convertedSchema, path + \".adamant_field_error\", false)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                updateParent(convertedSchema)\r\n            }\r\n        }} style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} style={inputError ? {\r\n                border: `1px solid #ff7961`,\r\n                '&:not(:lastChild)': {\r\n                    borderBottom: 0,\r\n                }\r\n            } :\r\n                {\r\n                    border: `1px solid rgba(232, 244, 253, 1)`,\r\n                    '&:not(:lastChild)': {\r\n                        borderBottom: 0,\r\n                    }\r\n                }} >\r\n                <AccordionSummary\r\n                    style={inputError ? { backgroundColor: \"white\", borderRadius: \"4px\", borderBottom: '1px solid  #ff7961' } : { backgroundColor: \"rgba(232, 244, 253, 1)\", borderBottom: '1px solid  rgba(0, 0, 0, .0)' }}\r\n                    expandIcon={withinObject ? null :\r\n                        <Tooltip placement=\"top\" title={`Collapse/Expand this container`}>\r\n                            <ExpandMoreIcon />\r\n                        </Tooltip>}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography style={inputError ? { color: \"#ff7961\" } : {}} className={classes.heading}>{field_label + (required ? \"*\" : \"\")}</Typography>\r\n                            {expand ? <div style={inputError ? { color: \"#ff7961\" } : { color: \"gray\" }}>\r\n                                {descriptionText}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit \"${field_label}\"`}>\r\n                                <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove \"${field_label}\"`}>\r\n                                <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <div style={{ paddingTop: \"2px\" }}></div>\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(inputItems).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={false} key={inputItems[index][\"field_key\"]} draggableId={inputItems[index][\"field_key\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <Tooltip placement=\"top\" title={`Drag & drop to adjust the order of this item`}>\r\n                                                                    <DragHandleIcon fontSize=\"small\" />\r\n                                                                </Tooltip>\r\n                                                            </div>\r\n                                                            <ArrayItemRenderer arrayFieldKey={field_key} withinObject={withinObject} value={value} pathSchema={pathSchema} pathFormData={pathFormData} dataInputItems={dataInputItems} oDataInputItems={oDataInputItems} oSetDataInputItems={oSetDataInputItems} setDataInputItems={setDataInputItems} field_label={field_label} field_items={inputItems.length !== 0 ? inputItems[index] : field_items} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path} fieldIndex={index} fieldkey={inputItems[index][\"field_key\"]} type={inputItems[index][\"type\"]} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <Button onClick={() => { handleAddArrayItem() }} style={{ fontSize: \"12px\", marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><AddIcon style={{ paddingRight: \"5px\" }} fontSize=\"small\" color=\"primary\" /> Add Item</Button>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default ArrayType;","import React, { useState, useContext } from \"react\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport getValue from \"../utils/getValue\";\r\nimport set from \"set-value\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport { FormControl } from \"@material-ui/core\";\r\nimport { FormLabel } from \"@material-ui/core\";\r\nimport { FormHelperText } from \"@material-ui/core\";\r\nimport { IconButton } from \"@material-ui/core\";\r\n\r\nconst AnyOfKeywordPlaceHolder = ({ pathFormData, path, field_required, field_uri, field_key, field_index, edit, field_label, field_description, field_prefixItems, anyOf_list }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete } = useContext(FormContext);\r\n\r\n    let field_items = {}\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"items\": field_items,\r\n        \"type\": \"anyOf\",\r\n    }\r\n\r\n    return (<>\r\n        <div style={{ paddingTop: \"10px\", paddingLeft: \"15px\", width: \"100%\" }}>\r\n            <FormControl style={{ display: \"inline-flex\", width: \"100%\" }}>\r\n                <FormLabel style={{ display: \"inline-flex\", width: \"100%\" }}>{field_label === undefined ? \"\" : field_label + \":\"}</FormLabel>\r\n                <div style={{ display: \"inline-flex\", width: \"100%\" }}>\r\n                    <div style={{ paddingTop: \"15px\", textAlign: \"left\", width: \"100%\" }}>\r\n                        \"AnyOf\" keyword is not yet implemented.\r\n                    </div>\r\n                    <div style={{ display: \"inline-flex\", width: \"100%\", justifyContent: \"right\" }}>\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit \"${field_label}\"`}>\r\n                                <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove \"${field_label}\"`}>\r\n                                <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div>\r\n                </div>\r\n                <FormHelperText>{field_description}</FormHelperText>\r\n            </FormControl>\r\n        </div>\r\n        {openDialog ? <EditElement field_uri={field_uri} anyOf_list={anyOf_list} pathFormData={pathFormData} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default AnyOfKeywordPlaceHolder;","export default __webpack_public_path__ + \"static/media/file-icon.047a88c0.svg\";","import React, { useContext, useEffect, useState, useCallback } from 'react'\r\nimport { FormLabel, FormHelperText, FormControl } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton, Button } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport NotRenderable from \"../../assets/not-renderable.png\"\r\nimport FileIcon from \"../../assets/file-icon.svg\"\r\n\r\nconst getAcceptedTypes = (field_description) => {\r\n    let matches = field_description.match(/\\[(.*?)\\]/);\r\n\r\n    if (matches) {\r\n        let submatch = matches[1];\r\n        submatch = submatch.replaceAll(\"\\\"\", \"\")\r\n        submatch = submatch.replaceAll(\" \", \"\")\r\n        submatch = submatch.split(\",\")\r\n        return submatch\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\n\r\nconst validateAcceptedFile = (fileType, acceptedTypes) => {\r\n    fileType = fileType.split(\".\")\r\n    fileType = fileType.pop()\r\n    fileType = \".\" + fileType\r\n\r\n    if (acceptedTypes.includes(fileType)) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\n\r\nconst FileUpload = ({ adamant_field_error, adamant_error_description, contentEncoding, withinObject, field_uri, dataInputItems, setDataInputItems, withinArray, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate, defaultValue, value }) => {\r\n\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputError, setInputError] = useState(false)\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [dataUrl, setDataUrl] = useState(defaultValue !== undefined ? defaultValue : value !== undefined ? value : \"\")\r\n    const [renderingInProgress, setRenderingInProgress] = useState(false)\r\n    const [mediaFileType, setMediaFileType] = useState(value !== undefined ? value.split(\";\")[0].replace(\"data:\", \"\") : \"\")\r\n    const [fileSize, setFileSize] = useState();\r\n    //const [required, setRequired] = useState(false)\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // max. allowed fileupload size\r\n    let allowedFileSize = 500000\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n    // define a list of renderable media file types\r\n    let renderableMediaFileTypes = [\"image/jpeg\", \"image/png\", \"image/bmp\", \"image/tiff\", \"image/svg+xml\"]\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // visualize that the field is required\r\n    let fieldLabel = field_label;\r\n    if (required === true) {\r\n        fieldLabel += \"*\"\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // browse or drag&drop file\r\n    const onDrop = useCallback(\r\n        (acceptedFile) => {\r\n            let acceptedTypes = getAcceptedTypes(field_description);\r\n            let valid = true\r\n            if (acceptedTypes.length === 0) {\r\n                valid = true\r\n            } else {\r\n                valid = validateAcceptedFile(acceptedFile[0][\"name\"], acceptedTypes)\r\n                if (!valid) {\r\n                    setDescriptionText(\"Seems like you've given a file with an unaccepted file type?\")\r\n                }\r\n            }\r\n            // only accept file lower than allowedFileSize\r\n            //if (acceptedFile[0][\"size\"] > allowedFileSize) {\r\n            //    valid = false;\r\n            //    setDescriptionText(`File size is too big. The file size should not exceed ${allowedFileSize / 1000} KB.`)\r\n            //}\r\n            if (valid) {\r\n                setRenderingInProgress(true)\r\n                setFileSize(acceptedFile[0][\"size\"])\r\n                // process the schema, validation etc\r\n                // read file and update receivedData\r\n                const reader = new FileReader();\r\n                reader.onabort = () => console.log(\"file reading was aborted\");\r\n                reader.onerror = () => console.log(\"file reading has failed\");\r\n                reader.onload = () => {\r\n                    const binaryStr = reader.result;\r\n                    setDataUrl(binaryStr)\r\n                    setMediaFileType(acceptedFile[0][\"type\"])\r\n                    if (withinArray !== undefined & withinArray) {\r\n                        let newPathFormData = pathFormData.split(\".\");\r\n                        newPathFormData.pop()\r\n                        newPathFormData = newPathFormData.join(\".\")\r\n\r\n                        let newPath = path.split(\".\")\r\n                        newPath.pop()\r\n                        newPath = newPath.join(\".\")\r\n\r\n                        let arr = dataInputItems;\r\n                        const items = Array.from(arr);\r\n                        items[field_index][field_key] = binaryStr;\r\n                        setDataInputItems(items);\r\n                        handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n\r\n                        setRenderingInProgress(false)\r\n                    } else {\r\n                        handleConvertedDataInput(binaryStr, path + \".value\", \"boolean\")\r\n\r\n                        setRenderingInProgress(false)\r\n                    }\r\n                }\r\n                reader.readAsDataURL(acceptedFile[0]);\r\n            } else {\r\n                setRenderingInProgress(false)\r\n                setInputError(true)\r\n                setDataUrl(\"\")\r\n                setMediaFileType(\"\")\r\n            }\r\n        },\r\n        []\r\n    );\r\n    //\r\n\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            //if (Array.isArray(latestVal)) { latestVal = latestVal[field_key] }\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : \"\")\r\n            if (val === \"\") {\r\n                setDataUrl(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setDataUrl(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    setDataUrl(val)\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : \"\")\r\n            if (val === \"\") {\r\n                setDataUrl(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else {\r\n                setDataUrl(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                handleConvertedDataInput(val, path + \".value\", \"boolean\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"fileupload (string)\",\r\n        \"value\": value,\r\n    }\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        multiple: false,\r\n    });\r\n\r\n    const handleOnClickedClear = () => {\r\n        setMediaFileType(\"\")\r\n        setDataUrl(\"\")\r\n        setFileSize()\r\n        // then delete in the form convdata\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_key] = undefined;\r\n            setDataInputItems(items);\r\n            handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n        } else {\r\n            handleConvertedDataInput(\"\", path + \".value\", \"boolean\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div onClick={() => {\r\n                if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                    set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                    set(convertedSchema, path + \".adamant_field_error\", false)\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    updateParent(convertedSchema)\r\n                }\r\n                if (inputError === true) {\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    // then delete the value the convertedSchema\r\n                }\r\n            }} style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', alignItems: \"center\", width: '100%' }}>\r\n                <div style={{ paddingLeft: \"15px\", width: \"100%\" }}>\r\n                    <FormControl >\r\n                        <FormLabel style={{ paddingBottom: \"10px\", color: `${inputError ? \"red\" : \"\"}` }}>{fieldLabel === undefined ? + \"\" : fieldLabel + \":\"}</FormLabel>\r\n                        {renderingInProgress ? <Box sx={{ width: '225px' }}>\r\n                            <LinearProgress />\r\n                        </Box> : null}\r\n                        <div style={{ width: \"225px\", display: \"flex\", justifyContent: \"center\" }}>\r\n                            {dataUrl !== \"\" ? <img alt='fileUpload' src={renderableMediaFileTypes.includes(mediaFileType) ? dataUrl : FileIcon} width={renderableMediaFileTypes.includes(mediaFileType) ? \"225\" : \"64\"} /> : \"\"}\r\n                        </div>\r\n                        <div style={{ width: \"225px\", fontSize: \"10px\", color: \"grey\", paddingTop: \"5px\", whiteSpace: \"nowrap\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>\r\n                            {dataUrl}\r\n                        </div>\r\n                        <div style={{ width: \"225px\", fontSize: \"10px\", color: \"grey\", paddingTop: \"5px\", whiteSpace: \"nowrap\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>\r\n                            {fileSize !== undefined ? `size: ${fileSize / 1000} KB` : null}\r\n                        </div>\r\n                        <div style={{ paddingTop: \"5px\", textAlign: \"left\", width: \"100%\" }} >\r\n                            <Button color={inputError ? \"secondary\" : \"default\"} variant=\"outlined\" {...getRootProps()} ><input {...getInputProps()} />Upload a file</Button>\r\n                            {dataUrl !== \"\" ? <Button onClick={() => { handleOnClickedClear() }} style={{ marginLeft: \"5px\" }} variant=\"outlined\" color=\"secondary\">Clear</Button> : null}\r\n                        </div>\r\n                        <FormHelperText style={{ color: `${inputError ? \"red\" : \"\"}` }}>{descriptionText}</FormHelperText>\r\n                    </FormControl>\r\n                </div>\r\n                {\r\n                    edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null\r\n                }\r\n            </div >\r\n            {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default FileUpload;\r\n","import React from 'react';\r\nimport StringType from \"./elements/StringType\";\r\nimport NumberType from \"./elements/NumberType\";\r\nimport ObjectType from './elements/ObjectType';\r\nimport IntegerType from './elements/IntegerType';\r\nimport BooleanType from './elements/BooleanType';\r\nimport ArrayType from './elements/ArrayType';\r\nimport AnyOfKeywordPlaceHolder from './elements/AnyOfKeywordPlaceHolder';\r\nimport FileUpload from './elements/FileUpload';\r\n\r\n\r\nconst ElementRenderer = ({ withinObject, dataInputItems, setDataInputItems, withinArray, path, pathSchema, pathFormData, elementRequired, fieldkey, fieldIndex, edit, field: { minItems, maxItems, uniqueItems, minimum, maximum, minLength, maxLength, type, $id, id, title, contentEncoding, description, properties, required, enumerate, items, defaultValue, value, anyOf, adamant_field_error, adamant_error_description } }) => {\r\n\r\n    switch (type) {\r\n        case 'string':\r\n            if (contentEncoding !== undefined) {\r\n                return (<FileUpload\r\n                    adamant_field_error={adamant_field_error}\r\n                    adamant_error_description={adamant_error_description}\r\n                    contentEncoding={contentEncoding}\r\n                    value={value}\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    dataInputItems={dataInputItems}\r\n                    setDataInputItems={setDataInputItems}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_index={fieldIndex}\r\n                    field_label={title}\r\n                    field_uri={$id !== undefined ? $id : id}\r\n                    field_description={description}\r\n                    field_required={elementRequired}\r\n                    defaultValue={defaultValue}\r\n                    edit={edit}\r\n                />)\r\n            } else {\r\n                return (<StringType\r\n                    adamant_field_error={adamant_field_error}\r\n                    adamant_error_description={adamant_error_description}\r\n                    value={value}\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    dataInputItems={dataInputItems}\r\n                    setDataInputItems={setDataInputItems}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_index={fieldIndex}\r\n                    field_label={title}\r\n                    field_uri={$id !== undefined ? $id : id}\r\n                    field_description={description}\r\n                    field_required={elementRequired}\r\n                    field_enumerate={enumerate}\r\n                    defaultValue={defaultValue}\r\n                    edit={edit}\r\n                    minLength={minLength}\r\n                    maxLength={maxLength}\r\n                />)\r\n            }\r\n        case 'number':\r\n            return (<NumberType\r\n                adamant_field_error={adamant_field_error}\r\n                adamant_error_description={adamant_error_description}\r\n                minimum={minimum}\r\n                maximum={maximum}\r\n                value={value}\r\n                withinArray={withinArray}\r\n                withinObject={withinObject}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldkey}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                field_key={fieldkey}\r\n                field_uri={$id !== undefined ? $id : id}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'integer':\r\n            return (<IntegerType\r\n                adamant_field_error={adamant_field_error}\r\n                adamant_error_description={adamant_error_description}\r\n                minimum={minimum}\r\n                maximum={maximum}\r\n                value={value}\r\n                withinArray={withinArray}\r\n                withinObject={withinObject}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldkey}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                field_key={fieldkey}\r\n                field_uri={$id !== undefined ? $id : id}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'boolean':\r\n            return (<BooleanType\r\n                adamant_field_error={adamant_field_error}\r\n                adamant_error_description={adamant_error_description}\r\n                value={value}\r\n                withinArray={withinArray}\r\n                withinObject={withinObject}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldkey}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                field_key={fieldkey}\r\n                field_uri={$id !== undefined ? $id : id}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'array':\r\n            return (<ArrayType\r\n                adamant_field_error={adamant_field_error}\r\n                adamant_error_description={adamant_error_description}\r\n                value={value}\r\n                maxItems={maxItems}\r\n                minItems={minItems}\r\n                uniqueItems={uniqueItems}\r\n                oDataInputItems={dataInputItems}\r\n                oSetDataInputItems={setDataInputItems}\r\n                withinArray={withinArray}\r\n                withinObject={withinObject}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldkey}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                field_key={fieldkey}\r\n                field_index={fieldIndex}\r\n                field_uri={$id !== undefined ? $id : id}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_items={items}\r\n                edit={edit}\r\n            />)\r\n        case 'object':\r\n            if (anyOf !== undefined) {\r\n                return (\r\n                    <AnyOfKeywordPlaceHolder\r\n                        adamant_field_error={adamant_field_error}\r\n                        adamant_error_description={adamant_error_description}\r\n                        pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                        withinArray={withinArray}\r\n                        withinObject={withinObject}\r\n                        dataInputItems={dataInputItems}\r\n                        setDataInputItems={setDataInputItems}\r\n                        path={path + \".\" + fieldIndex}\r\n                        field_index={fieldIndex}\r\n                        field_key={fieldkey}\r\n                        field_uri={$id !== undefined ? $id : id}\r\n                        field_label={title}\r\n                        field_description={description}\r\n                        field_required={elementRequired}\r\n                        anyOf_list={anyOf}\r\n                        edit={edit}\r\n                    />\r\n                )\r\n            } else {\r\n                return (<ObjectType\r\n                    adamant_field_error={adamant_field_error}\r\n                    adamant_error_description={adamant_error_description}\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_uri={$id !== undefined ? $id : id}\r\n                    field_label={title}\r\n                    field_description={description}\r\n                    field_required={required}\r\n                    object_is_required={elementRequired}\r\n                    field_properties={properties}\r\n                    edit={edit}\r\n                />)\r\n            }\r\n        case undefined:\r\n            if (anyOf) {\r\n                return (\r\n                    <AnyOfKeywordPlaceHolder\r\n                        adamant_field_error={adamant_field_error}\r\n                        adamant_error_description={adamant_error_description}\r\n                        pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                        withinArray={withinArray}\r\n                        withinObject={withinObject}\r\n                        path={path + \".\" + fieldIndex}\r\n                        field_index={fieldIndex}\r\n                        field_key={fieldkey}\r\n                        field_uri={$id !== undefined ? $id : id}\r\n                        field_label={title}\r\n                        field_description={description}\r\n                        field_required={elementRequired}\r\n                        anyOf_list={anyOf}\r\n                        edit={edit}\r\n                    />\r\n                )\r\n            } else {\r\n                return null\r\n            }\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ElementRenderer;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst changeKeywords = (convertedSchema, oldKey, desiredNewKey) => {\r\n    if (typeof convertedSchema === 'object' && !Array.isArray(convertedSchema) && convertedSchema !== null) {\r\n        Object.keys(convertedSchema).forEach(keyword => {\r\n            if (keyword === oldKey) {\r\n                let tempValue = convertedSchema[keyword]\r\n                delete convertedSchema[keyword]\r\n                convertedSchema[desiredNewKey] = tempValue\r\n            } else {\r\n                // to maintain the order\r\n                let tempValue = convertedSchema[keyword]\r\n                delete convertedSchema[keyword]\r\n                convertedSchema[keyword] = tempValue\r\n                //\r\n            }\r\n            if (typeof convertedSchema[keyword] === 'object' && !Array.isArray(convertedSchema[keyword]) && convertedSchema[keyword] !== null) {\r\n                changeKeywords(convertedSchema[keyword], oldKey, desiredNewKey)\r\n            }\r\n            else if (Array.isArray(convertedSchema[keyword]) && convertedSchema[keyword] !== null) {\r\n                convertedSchema[keyword].forEach(item => {\r\n                    changeKeywords(item, oldKey, desiredNewKey)\r\n                })\r\n            }\r\n        })\r\n    }\r\n    else if (Array.isArray(convertedSchema) && convertedSchema !== null) {\r\n        convertedSchema.forEach(item => {\r\n            changeKeywords(item, oldKey, desiredNewKey)\r\n        })\r\n    }\r\n}\r\n\r\nconst EditSchemaHeader = ({ schemaVersion, title, description, schemaID, openDialog, setOpenDialog }) => {\r\n\r\n    const [_schemaVersion, _setSchemaVersion] = useState(schemaVersion);\r\n    const [_title, _setTitle] = useState(title);\r\n    const [_description, _setDescription] = useState(description);\r\n    const [_schemaID, _setSchemaID] = useState(schemaID);\r\n    const { updateParent, convertedSchema, setSchemaSpecification } = useContext(FormContext);\r\n\r\n\r\n    const allowedSchemaDrafts = [\"http://json-schema.org/draft-04/schema#\", \"http://json-schema.org/draft-07/schema#\"]\r\n\r\n\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        setSchemaSpecification(_schemaVersion)\r\n\r\n        if (_schemaVersion === undefined) {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else if (_schemaVersion.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else {\r\n            convertedSchema[\"$schema\"] = _schemaVersion\r\n        };\r\n\r\n        if (_schemaID === undefined) {\r\n            delete convertedSchema[\"id\"]\r\n            delete convertedSchema[\"$id\"]\r\n        } else if (_schemaID.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"id\"]\r\n            delete convertedSchema[\"$id\"]\r\n        } else {\r\n            if (_schemaVersion === \"http://json-schema.org/draft-04/schema#\") {\r\n                Object.keys(convertedSchema).forEach(keyword => {\r\n                    if (keyword === \"$id\" & convertedSchema[\"$id\"] !== undefined) {\r\n                        delete convertedSchema[\"$id\"]\r\n                        convertedSchema[\"id\"] = _schemaID\r\n                    }\r\n                    else if (keyword === \"id\" & convertedSchema[\"id\"] !== undefined) {\r\n                        delete convertedSchema[\"id\"]\r\n                        convertedSchema[\"$id\"] = _schemaID\r\n                    }\r\n                    else if (convertedSchema[\"$id\"] === undefined) {\r\n                        convertedSchema[\"id\"] = _schemaID\r\n                    }  \r\n                    else {\r\n                        // to maintain the order\r\n                        let tempValue = convertedSchema[keyword]\r\n                        delete convertedSchema[keyword]\r\n                        convertedSchema[keyword] = tempValue\r\n                        //\r\n                    }\r\n                })\r\n            } else {\r\n                Object.keys(convertedSchema).forEach(keyword => {\r\n                    if (keyword === \"id\" & convertedSchema[\"id\"] !== undefined) {\r\n                        delete convertedSchema[\"id\"]\r\n                        convertedSchema[\"$id\"] = _schemaID\r\n                    }\r\n                    else if (keyword === \"$id\" & convertedSchema[\"$id\"] !== undefined) {\r\n                        delete convertedSchema[\"$id\"]\r\n                        convertedSchema[\"id\"] = _schemaID\r\n                    }\r\n                    else if (convertedSchema[\"id\"] === undefined) {\r\n                        convertedSchema[\"$id\"] = _schemaID\r\n                    }\r\n                    else {\r\n                        // to maintain the order\r\n                        let tempValue = convertedSchema[keyword]\r\n                        delete convertedSchema[keyword]\r\n                        convertedSchema[keyword] = tempValue\r\n                        //\r\n                    }\r\n                })\r\n            }\r\n        };\r\n\r\n        // change id/$id according to the selected schema version \r\n        if (_schemaVersion !== \"http://json-schema.org/draft-04/schema#\") {\r\n            // change all id's to $id\r\n            changeKeywords(convertedSchema[\"properties\"], \"id\", \"$id\")\r\n        } else {\r\n            //change all $id's to id\r\n            changeKeywords(convertedSchema[\"properties\"], \"$id\", \"id\")\r\n        }\r\n\r\n        if (_title === undefined) {\r\n            delete convertedSchema[\"title\"]\r\n        } else if (_title.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"title\"]\r\n        } else {\r\n            convertedSchema[\"title\"] = _title\r\n        };\r\n\r\n        if (_description === undefined) {\r\n            delete convertedSchema[\"description\"]\r\n        } else if (_description.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"description\"]\r\n        } else {\r\n            convertedSchema[\"description\"] = _description\r\n        };\r\n\r\n        // better ordering\r\n        let emptyObject = {}\r\n        let emptyArray = []\r\n        Object.keys(convertedSchema).forEach(keyword=>{\r\n            emptyArray.push(keyword)\r\n        })\r\n        if (emptyArray.includes(\"$schema\")) {\r\n             emptyObject[\"$schema\"] = convertedSchema[\"$schema\"]\r\n             emptyArray = emptyArray.filter(function(f) {return f !== \"$schema\"})\r\n        }\r\n        if (emptyArray.includes(\"$id\")) {\r\n            emptyObject[\"$id\"] = convertedSchema[\"$id\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"$id\"})\r\n        }\r\n        if (emptyArray.includes(\"id\")) {\r\n            emptyObject[\"id\"] = convertedSchema[\"id\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"id\"})\r\n        }\r\n        if (emptyArray.includes(\"title\")) {\r\n            emptyObject[\"title\"] = convertedSchema[\"title\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"title\"})\r\n        }\r\n        if (emptyArray.includes(\"description\")) {\r\n            emptyObject[\"description\"] = convertedSchema[\"description\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"description\"})\r\n        }\r\n        if (emptyArray.includes(\"type\")) {\r\n            emptyObject[\"type\"] = convertedSchema[\"type\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"type\"})\r\n        }\r\n        if (emptyArray.includes(\"properties\")){\r\n            emptyObject[\"properties\"] = convertedSchema[\"properties\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"properties\"})\r\n        }\r\n        if (emptyArray.includes(\"required\")){\r\n            emptyObject[\"required\"] = convertedSchema[\"required\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"required\"})\r\n        }\r\n\r\n        if (emptyArray.length !== 0) {\r\n            for (let i = 0; i<emptyArray.length; i++){\r\n                emptyObject[emptyArray[i]] = convertedSchema[emptyArray[i]]\r\n            }\r\n        }\r\n\r\n\r\n        updateParent(emptyObject)\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'title':\r\n                return _setTitle(event.target.value)\r\n            case 'description':\r\n                return _setDescription(event.target.value)\r\n            case 'version':\r\n                return _setSchemaVersion(event.target.value)\r\n            case 'id':\r\n                return _setSchemaID(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        _setDescription(description);\r\n        _setSchemaVersion(schemaVersion);\r\n        _setSchemaID(schemaID);\r\n        _setTitle(title);\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Edit schema \"{title}\"\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                            <TextField select helperText={\"Specification version for this schema. The latest available version is recommended.\"} margin='normal' onChange={event => handleChangeUISchema(event, \"version\")} style={{ marginTop: \"20px\" }} defaultValue={schemaVersion} variant=\"outlined\" fullWidth={true} label={\"$schema\"} SelectProps={{\r\n                                native: true,\r\n                            }}> {\r\n                                    allowedSchemaDrafts.map((content, index) => (\r\n                                        <option key={index} value={content}>\r\n                                            {content}\r\n                                        </option>\r\n                                    ))\r\n                                }\r\n                            </TextField>\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"id\")} style={{ marginTop: \"10px\" }} defaultValue={schemaID} variant=\"outlined\" fullWidth={true} label={\"Schema ID\"} helperText={\"ID or URI for this schema if available.\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={title} variant=\"outlined\" fullWidth={true} label={\"Schema Title\"} helperText={\"Title of the schema.\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={description} variant=\"outlined\" fullWidth={true} label={\"Schema Description\"} multiline rows={3} helperText=\"Description of the schema. Be more descriptive won't hurt.\" />\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditSchemaHeader;","import React from \"react\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { TextField } from '@material-ui/core';\r\nimport { IconButton } from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst JSONSchemaViewerDialog = ({ openSchemaViewer, setOpenSchemaViewer, jsonschema }) => {\r\n\r\n    return (<>\r\n        <Dialog\r\n            onClose={() => setOpenSchemaViewer(false)}\r\n            maxWidth=\"md\"\r\n            fullWidth={true}\r\n            open={openSchemaViewer}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ fontSize: \"30px\", width: \"100%\", alignSelf: \"center\" }}>\r\n                        JSON Schema viewer\r\n                    </div>\r\n                    <IconButton onClick={() => setOpenSchemaViewer(false)}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <TextField\r\n                    disabled\r\n                    fullWidth={true}\r\n                    variant=\"filled\"\r\n                    multiline\r\n                    defaultValue={JSON.stringify(jsonschema, null, 2)}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n            </DialogActions>\r\n        </Dialog>\r\n\r\n        {/*\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div>\r\n                            <Typography className={classes.heading}>JSON Schema Viewer</Typography>\r\n                        </div>\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div >\r\n                        <pre style={{ overflowX: \"auto\", whiteSpace: \"pre-wrap\", wordWrap: \"break-word\" }}>\r\n                            {JSON.stringify(jsonschema, null, 2)}\r\n                        </pre>\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n                */}\r\n    </>);\r\n};\r\n\r\nexport default JSONSchemaViewerDialog;","const fillForm = (schemaProp, data) => {\r\n    schemaProp.forEach(element => {\r\n        if (element[\"type\"] === \"object\") {\r\n            // early exist\r\n            if (data === undefined) {\r\n                return\r\n            } //\r\n            fillForm(element[\"properties\"], data[element[\"fieldKey\"]])\r\n        } else {\r\n            // early exist\r\n            if (data === undefined) {\r\n                return\r\n            } //\r\n            if (data[element[\"fieldKey\"]] !== undefined) {\r\n                const type = element[\"type\"]\r\n\r\n                element[\"value\"] = data[element[\"fieldKey\"]]\r\n\r\n                // validate input data before filling\r\n                switch (type) {\r\n                    case 'number':\r\n                        if (typeof (data[element[\"fieldKey\"]]) === \"number\") {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'integer':\r\n                        if (Number.isInteger(data[element[\"fieldKey\"]])) {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'boolean':\r\n                        if (typeof (data[element[\"fieldKey\"]]) === \"boolean\") {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'array':\r\n                        if (Array.isArray(data[element[\"fieldKey\"]])) {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'string':\r\n                        return (element[\"prevValue\"] = JSON.parse(JSON.stringify(data[element[\"fieldKey\"]])).toString());\r\n                    default:\r\n                        return null;\r\n                }\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport default fillForm;","import React, { useContext, useState, useCallback, useEffect } from \"react\";\r\n//import { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"./ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from '../FormContext';\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport UploadDataIcon from '@mui/icons-material/UploadFile';\r\nimport { ReactComponent as JsonIcon } from '../assets/json-file-svgrepo-com.svg'\r\nimport RevertIvon from \"@material-ui/icons/History\";\r\nimport EditSchemaHeader from \"./EditSchemaHeader\";\r\nimport JSONSchemaViewerDialog from \"./JSONSchemaViewerDialog\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { toast } from \"react-toastify\";\r\nimport fillForm from \"./utils/fillForm\";\r\nimport EditElement from \"./EditElement\";\r\n\r\nconst checkFormDataValidity = (file) => {\r\n    let validity = false\r\n    let message = <><div><strong>INVALID TYPE!</strong></div><div> Form data must be of a json file type.</div></>\r\n    if (file[0].type === \"application/json\") {\r\n        validity = true;\r\n        message = \"Form data is of a valid file type.\"\r\n    }\r\n    return [validity, message]\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst FormRenderer = ({ setSchemaSpecification, revertAllChanges, schema, edit, originalSchema }) => {\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [openSchemaViewer, setOpenSchemaViewer] = useState(false);\r\n    const [receivedData, setReceivedData] = useState()\r\n\r\n    const classes = useStyles();\r\n\r\n    // browse or drag&drop schema file\r\n    const onDrop = useCallback(\r\n        (acceptedFile) => {\r\n            // process the schema, validation etc\r\n            let validity = checkFormDataValidity(acceptedFile);\r\n            if (validity[0] === false) {\r\n                toast.error(\r\n                    validity[1],\r\n                    {\r\n                        toastId: \"somethingInvalidError\"\r\n                    }\r\n                );\r\n            } else {\r\n                // read file and update receivedData\r\n                const reader = new FileReader();\r\n                reader.onabort = () => console.log(\"file reading was aborted\");\r\n                reader.onerror = () => console.log(\"file reading has failed\");\r\n                reader.onload = () => {\r\n                    const binaryStr = reader.result;\r\n                    const obj = JSON.parse(binaryStr);\r\n                    setReceivedData(obj)\r\n                }\r\n                reader.readAsText(acceptedFile[0]);\r\n            };\r\n        },\r\n        []\r\n    );\r\n    //\r\n\r\n    // basically fill the form with the recieved data everytime we receive the data\r\n    useEffect(() => {\r\n        if (receivedData !== undefined) {\r\n            let newValue = { ...convertedSchema };\r\n\r\n            //fills this converted schema with the received data\r\n            console.log(\"before filling:\\n\", JSON.parse(JSON.stringify(newValue)))\r\n            fillForm(newValue[\"properties\"], receivedData);\r\n            console.log(\"filled form:\\n\", newValue);\r\n\r\n            updateParent(newValue);\r\n        }\r\n    }, [receivedData])\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        multiple: false,\r\n    });\r\n\r\n    // deconstruct\r\n    const { properties, title, description, required, $schema, id, $id } = schema ?? {}\r\n    useEffect(() => {\r\n        setSchemaSpecification($schema)\r\n    }, [])\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        let value = { ...convertedSchema };\r\n        value[\"properties\"] = items;\r\n        updateParent(value);\r\n    }\r\n\r\n    /*\r\n    console.log(\"converted:\", convertedSchema)\r\n    let deconvertedSchema = JSON.parse(JSON.stringify(convertedSchema))\r\n    deconvertedSchema[\"properties\"] = array2object(convertedSchema[\"properties\"])\r\n    console.log(\"deconverted:\", deconvertedSchema)\r\n    */\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <Typography className={classes.heading} style={{ width: \"100%\" }}>{title}</Typography>\r\n                <Tooltip placement=\"top\" title=\"View JSON Schema for this form\">\r\n                    <Button onClick={() => setOpenSchemaViewer(true)} style={{ marginLeft: \"5px\" }}><JsonIcon style={{ height: \"22px\" }} /></Button>\r\n                </Tooltip>\r\n                <Tooltip placement=\"top\" title=\"Upload input data for this form\">\r\n                    <Button style={{ marginLeft: \"5px\" }}{...getRootProps()}>\r\n                        <input {...getInputProps()} />\r\n                        <UploadDataIcon />\r\n                    </Button>\r\n                </Tooltip>\r\n                {edit ? <>\r\n                    <Tooltip placement=\"top\" title=\"Edit json schema header\">\r\n                        <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}>\r\n                            <EditIcon color=\"primary\" />\r\n                        </Button>\r\n                    </Tooltip>\r\n                    <Tooltip placement=\"top\" title=\"Revert all changes made to this form\">\r\n                        <Button onClick={() => revertAllChanges()} style={{ marginLeft: \"5px\" }}>\r\n                            <RevertIvon color=\"primary\" />\r\n                        </Button>\r\n                    </Tooltip>\r\n                </> : null}\r\n            </div>\r\n            <Typography style={{ paddingBottom: \"10px\" }}>{description}</Typography>\r\n            <Divider />\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"forms\">\r\n                    {(provided) => (\r\n                        <form {...provided.droppableProps} ref={provided.innerRef}>\r\n                            {Object.keys(properties).map((item, index) => {\r\n                                return (\r\n                                    <Draggable isDragDisabled={!edit} key={properties[item][\"fieldKey\"]} draggableId={properties[item][\"fieldKey\"]} index={index}>\r\n                                        {(provided) => (\r\n                                            <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                <div style={{ display: \"flex\" }}>\r\n                                                    {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                        <Tooltip placement=\"top\" title={`Drag & drop to adjust the order of this field`}>\r\n                                                            <DragHandleIcon fontSize=\"small\" />\r\n                                                        </Tooltip>\r\n                                                    </div> : null}\r\n                                                    <ElementRenderer schema={schema} path={\"properties\"} pathSchema={\"properties\"} fieldkey={properties[item][\"fieldKey\"]} fieldIndex={item} elementRequired={required} edit={edit} field={properties[item]} />\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                );\r\n                            })}\r\n                            {provided.placeholder}\r\n                            {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                <Tooltip placement=\"top\" title={`Add a new element/field to this schema`}>\r\n                                    <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                                </Tooltip>\r\n                            </div> : null}\r\n                        </form>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n        {openDialogAddElement ? <EditElement editOrAdd={\"add\"} openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} defaultSchema={defaultSchema} schemaTitle={title} field_label={\"this schema\"} /> : null}\r\n        {openDialog ? <EditSchemaHeader schemaID={id !== undefined ? id : $id} title={title} description={description} schemaVersion={$schema} openDialog={openDialog} setOpenDialog={setOpenDialog} /> : null}\r\n        {openSchemaViewer ? <JSONSchemaViewerDialog\r\n            openSchemaViewer={openSchemaViewer}\r\n            setOpenSchemaViewer={setOpenSchemaViewer}\r\n            jsonschema={originalSchema}\r\n        /> : null}\r\n    </>);\r\n};\r\n\r\nexport default FormRenderer;","// convert iterable array to json schema properties\r\nconst array2object = (propert) => {\r\n    var someObject = {};\r\n    propert.forEach((item) => {\r\n        const tempKey = item[\"fieldKey\"];\r\n        delete item[\"fieldKey\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        Object.keys(tempElements).forEach((item) => {\r\n            // change \"enumerate\" to \"enum\"\r\n            if (item === \"enumerate\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"enumerate\"])\r\n                );\r\n                delete someObject[tempKey][\"enumerate\"];\r\n                someObject[tempKey][\"enum\"] = enumContent;\r\n            }\r\n            if (item === \"defaultValue\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"defaultValue\"])\r\n                );\r\n                delete someObject[tempKey][\"defaultValue\"];\r\n                someObject[tempKey][\"default\"] = enumContent;\r\n            }\r\n            if (item === \"properties\") {\r\n                // some recursion\r\n                someObject[tempKey][\"properties\"] = array2object(\r\n                    someObject[tempKey][\"properties\"]\r\n                );\r\n            }\r\n\r\n            // delete keywords that are not supposed to be in the schema\r\n            if (item === \"value\") {\r\n                delete someObject[tempKey][\"value\"]\r\n            }\r\n            if (item === \"prevValue\") {\r\n                delete someObject[tempKey][item]\r\n            }\r\n            if (item === \"adamant_field_error\") {\r\n                delete someObject[tempKey][item]\r\n            }\r\n            if (item === \"adamant_error_description\") {\r\n                delete someObject[tempKey][item]\r\n            }\r\n        });\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default array2object;","import getValue from \"./getValue\";\r\nimport set from \"set-value\";\r\n\r\n// delete key and value given path\r\nconst deleteKeySchema = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json));\r\n    let pathArray = path.split('.');\r\n\r\n    if (pathArray.length === 1) {\r\n        delete jsonData[pathArray[0]];\r\n    } else {\r\n        let tobeDeleted = pathArray.pop();\r\n        pathArray = pathArray.join(\".\");\r\n        let value = getValue(jsonData, pathArray);\r\n        delete value[tobeDeleted]\r\n        set(jsonData, pathArray, value);\r\n    }\r\n\r\n    return jsonData;\r\n\r\n\r\n};\r\n\r\nexport default deleteKeySchema;","// get json value in schema given the full path\r\nconst getValueInSchemaFullPath = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    if (path[0] === \"\") {\r\n        return undefined;\r\n    }\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValueInSchemaFullPath;","// validate form data against its schema using the Ajv package\r\n\r\n//\r\n// TO DO: since AJV does not really check the nested schemas easily, we must then implement a recursion to check every object type that has subschemas\r\n//      : for both formData and schema\r\n\r\nimport Ajv from \"ajv\";\r\nimport Ajv04 from \"ajv-draft-04\";\r\nimport deleteKeySchema from \"./deleteKeySchema\";\r\nimport getValueInSchemaFullPath from \"./getValueInSchemaFullPath\";\r\n\r\nconst messageLookUpTable = (field_label, field_type, keyword, message) => {\r\n    switch (keyword) {\r\n        case 'required':\r\n            return `${field_type === \"object\" ? `One or more fields in '${field_label}' container must be filled.` : `'${field_label}' field must be filled (required)`}`\r\n        default:\r\n            if (keyword === \"uniqueItems\") {\r\n                message = message.split(\"\")\r\n                let newMessage = []\r\n                message.forEach(s => {\r\n                    if (!Number.isNaN(parseInt(s))) {\r\n                        newMessage.push(parseInt(s) + 1)\r\n                    } else {\r\n                        newMessage.push(s)\r\n                    }\r\n                })\r\n                newMessage = newMessage.join(\"\")\r\n                return (`Input for '${field_label}' field ` + newMessage.replace(\"##\", \"no.\"))\r\n            } else {\r\n                return (`Input for '${field_label}' field ` + message)\r\n            }\r\n    }\r\n}\r\n\r\nconst createBetterValidationMessages = (validate, schema) => {\r\n    let errors = validate.errors\r\n    if (errors === null) {\r\n        return []\r\n    }\r\n    let messages = []\r\n\r\n    errors.forEach(error => {\r\n        // get real path\r\n        let path = error.schemaPath\r\n        path = path.substring(2)\r\n        path = path.split(\"/\")\r\n        path.pop()\r\n        if (error.keyword === \"required\") {\r\n            path.push(\"properties\")\r\n            path.push(error.params.missingProperty)\r\n        }\r\n        path = path.join(\".\")\r\n        console.log(path)\r\n\r\n        let field = getValueInSchemaFullPath(schema, path)\r\n        console.log(field)\r\n        let field_label = field[\"title\"]\r\n        let field_type = field[\"type\"]\r\n\r\n        let errorMessage = messageLookUpTable(field_label, field_type, error.keyword, error.message)\r\n        messages.push(\r\n            { \"path\": path, \"field_label\": field_label, \"message\": errorMessage }\r\n        )\r\n\r\n    })\r\n\r\n    return messages\r\n}\r\n\r\nconst validateAgainstSchema = (formData, schema) => {\r\n\r\n    if (schema[\"$schema\"] !== undefined) {\r\n        if (schema[\"$schema\"].includes(\"draft-04\")) {\r\n            console.log(\"draft-04 is detected\")\r\n            const ajv = new Ajv04({ schemaId: \"id\", allErrors: true });\r\n\r\n            const validate = ajv.compile(schema);\r\n            const valid = validate(formData)\r\n\r\n            let messages = createBetterValidationMessages(validate, schema)\r\n            return [valid, messages];\r\n        } else {\r\n            const ajv = new Ajv({ allErrors: true });\r\n\r\n            const validate = ajv.compile(schema);\r\n            const valid = validate(formData)\r\n\r\n            let messages = createBetterValidationMessages(validate, schema)\r\n            return [valid, messages];\r\n        }\r\n    } else if (schema[\"schema\"] !== undefined) {\r\n        const ajv = new Ajv({ allErrors: true });\r\n        const validate = ajv.compile(schema);\r\n        const valid = validate(formData)\r\n\r\n        let messages = createBetterValidationMessages(validate, schema)\r\n        return [valid, messages];\r\n    } else {\r\n        const ajv = new Ajv({ allErrors: true });\r\n        if (schema[\"$schema\"] !== undefined) {\r\n            schema = deleteKeySchema(schema, \"$schema\")\r\n        }\r\n        if (schema[\"id\"] !== undefined) {\r\n            schema = deleteKeySchema(schema, \"id\")\r\n        }\r\n\r\n\r\n        const validate = ajv.compile(schema);\r\n        const valid = validate(formData)\r\n\r\n        let messages = createBetterValidationMessages(validate, schema)\r\n        return [valid, messages];\r\n    }\r\n}\r\n\r\nexport default validateAgainstSchema;","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { Autocomplete } from '@material-ui/lab';\r\n\r\n\r\nconst CreateELabFTWExperimentDialog = ({ getTagsELabFTW, eLabURL, setELabURL, setTags, tags, setRetrievedTags, retrievedTags, setExperimentTitle, setToken, token, setOpenCreateElabFTWExperimentDialog, openCreateElabFTWExperimentDialog, createExperimentELabFTW }) => {\r\n\r\n    const onTagsChange = (event, values) => {\r\n        setTags(values);\r\n    };\r\n\r\n    // cancel submit\r\n    const handleCancelEdit = () => {\r\n        setOpenCreateElabFTWExperimentDialog(false)\r\n        setRetrievedTags([])\r\n        setToken(\"\")\r\n        setTags([])\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openCreateElabFTWExperimentDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ fontSize: \"30px\", width: \"100%\", alignSelf: \"center\" }}>\r\n                        Create eLabFTW Experiment\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">eLabFTW</FormLabel>\r\n                            <TextField required value={eLabURL} margin='normal' onChange={event => setELabURL(event.target.value)} style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Your eLabFTW main URL\"} />\r\n                            <TextField required margin='normal' onChange={event => setToken(event.target.value)} style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Your eLabFTW token\"} />\r\n                            <TextField margin='normal' onBlur={event => setExperimentTitle(event.target.value)} style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Experiment title\"} />\r\n                            <div style={{ display: 'inline-flex', width: '100%' }}>\r\n                                <Autocomplete\r\n                                    style={{ width: \"100%\" }}\r\n                                    disabled={retrievedTags.length === 0 ? true : false}\r\n                                    multiple\r\n                                    freeSolo\r\n                                    options={retrievedTags}\r\n                                    getOptionLabel={option => option.tag || option}\r\n                                    onChange={onTagsChange}\r\n                                    renderInput={params => (\r\n                                        <TextField\r\n                                            {...params}\r\n                                            disabled={retrievedTags.length === 0 ? true : false}\r\n                                            variant=\"outlined\"\r\n                                            label=\"Tags\"\r\n                                            margin=\"normal\"\r\n                                            style={{ marginTop: \"10px\" }}\r\n                                            helperText='Press the \"GET TAGS\" button to retrieve available tags from your eLabFTW system.Note: you have to provide the eLabFTW main URL and token to enable the button.'\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                {/*<TextField disabled={retrievedTags.length === 0 ? true : false} margin='normal' style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Tags\"} helperText='Press the \"GET TAGS\" button to retrieve available tags from your eLabFTW system. Note: you have to provide the eLabFTW main URL and token to enable the button.' />*/}\r\n                                <Button onClick={() => getTagsELabFTW()} disabled={(token.trim() === \"\" | eLabURL.trim() === \"\") | (token === undefined | eLabURL === undefined) ? true : false} style={{ marginLeft: \"5px\", height: \"55px\", marginTop: \"11px\" }} variant=\"contained\" color=\"primary\">Get Tags</Button>\r\n                            </div>\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={(token.trim() === \"\" | eLabURL.trim() === \"\") | (token === undefined | eLabURL === undefined) ? true : false} onClick={() => createExperimentELabFTW()} color=\"primary\" autoFocus>\r\n                    Create Experiment\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default CreateELabFTWExperimentDialog;","const prepareDataForDescList = (convDataProp) => {\r\n    let someObject = {};\r\n    convDataProp.forEach((item) => {\r\n        const fieldkey = item[\"fieldKey\"];\r\n        const type = item[\"type\"];\r\n\r\n        if (type === \"object\") {\r\n            someObject[fieldkey] = prepareDataForDescList(item[\"properties\"])\r\n        } else {\r\n            if (item[\"value\"] !== undefined) {\r\n                // for now skip value that has object type in it\r\n                if (Array.isArray(item[\"value\"])) {\r\n                    if (typeof (item[\"value\"][0]) === \"object\") {\r\n                        console.log(\"prepareDataForDescList is skipped for this field:\", item[\"title\"])\r\n                    }\r\n                    else {\r\n                        someObject[fieldkey] = { value: item[\"value\"] }\r\n                        someObject[fieldkey][\"label\"] = item[\"title\"]\r\n                        someObject[fieldkey][\"key\"] = item[\"fieldKey\"]\r\n                        someObject[fieldkey][\"$id\"] = (item[\"$id\"] !== undefined ? item[\"$id\"] : item[\"id\"])\r\n                    }\r\n                } else {\r\n                    someObject[fieldkey] = { value: item[\"value\"] }\r\n                    someObject[fieldkey][\"label\"] = item[\"title\"]\r\n                    someObject[fieldkey][\"key\"] = item[\"fieldKey\"]\r\n                    someObject[fieldkey][\"$id\"] = (item[\"$id\"] !== undefined ? item[\"$id\"] : item[\"id\"])\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default prepareDataForDescList;","// convert iterable array to json schema properties\r\nconst array2objectAnyOf = (propert) => {\r\n    var someObject = {};\r\n    propert.forEach((item) => {\r\n        const tempKey = item[\"fieldKey\"];\r\n        delete item[\"fieldKey\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        Object.keys(tempElements).forEach((item) => {\r\n            // change \"enumerate\" to \"enum\"\r\n            if (item === \"enumerate\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"enumerate\"])\r\n                );\r\n                delete someObject[tempKey][\"enumerate\"];\r\n                someObject[tempKey][\"enum\"] = enumContent;\r\n            }\r\n            if (item === \"defaultValue\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"defaultValue\"])\r\n                );\r\n                delete someObject[tempKey][\"defaultValue\"];\r\n                someObject[tempKey][\"default\"] = enumContent;\r\n            }\r\n            if (item === \"properties\") {\r\n                if (someObject[tempKey][\"anyOf\"] !== undefined) {\r\n                    delete someObject[tempKey][\"properties\"]\r\n                    delete someObject[tempKey][\"type\"]\r\n                } else {\r\n                    // some recursion\r\n                    someObject[tempKey][\"properties\"] = array2objectAnyOf(\r\n                        someObject[tempKey][\"properties\"]\r\n                    );\r\n                }\r\n            }\r\n            if (item === \"value\") {\r\n                delete someObject[tempKey][\"value\"]\r\n            }\r\n            if (item === \"prevValue\") {\r\n                delete someObject[tempKey][item]\r\n            }\r\n        });\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default array2objectAnyOf;","const fillValueWithEmptyString = (jsonObjProp) => {\r\n\r\n    jsonObjProp.forEach(element => {\r\n        if (element[\"type\"] === \"object\") {\r\n            fillValueWithEmptyString(element[\"properties\"])\r\n        } else {\r\n            if (element[\"value\"] === undefined) {\r\n                element[\"value\"] = \"\"\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n}\r\n\r\nexport default fillValueWithEmptyString;","const convData2FormData = (convDataProp) => {\r\n    var someObject = {};\r\n    convDataProp.forEach((item) => {\r\n        const tempKey = item[\"fieldKey\"];\r\n        delete item[\"fieldKey\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        if (someObject[tempKey][\"value\"] === undefined & someObject[tempKey][\"type\"] !== \"object\") {\r\n            delete someObject[tempKey]\r\n        } else {\r\n            someObject[tempKey] = tempElements;\r\n            Object.keys(tempElements).forEach((item) => {\r\n                if (item === \"properties\") {\r\n                    // some recursion\r\n                    someObject[tempKey] = convData2FormData(\r\n                        someObject[tempKey][\"properties\"]\r\n                    );\r\n                }\r\n                if (item === \"value\") {\r\n                    if (Array.isArray(someObject[tempKey][\"value\"])) {\r\n                        if (typeof someObject[tempKey][\"value\"][0] === 'object') {\r\n                            someObject[tempKey][\"value\"].forEach((item, index) => {\r\n                                Object.keys(item).forEach(key => {\r\n                                    if (key === \"adamant-ui-specific-expand\") {\r\n                                        delete someObject[tempKey][\"value\"][index][\"adamant-ui-specific-expand\"]\r\n                                    }\r\n                                })\r\n                            })\r\n\r\n                            let value = someObject[tempKey][\"value\"]\r\n                            delete someObject[tempKey]\r\n                            someObject[tempKey] = value\r\n\r\n                        } else {\r\n                            let value = someObject[tempKey][\"value\"]\r\n                            delete someObject[tempKey]\r\n                            someObject[tempKey] = value\r\n                        }\r\n                    } else {\r\n                        let value = someObject[tempKey][\"value\"]\r\n                        delete someObject[tempKey]\r\n                        someObject[tempKey] = value\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default convData2FormData;","import React, { useState } from \"react\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { IconButton, Button } from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\n\r\n\r\nconst FormReviewBeforeSubmit = ({ onlineMode, openFormReviewDialog, setOpenFormReviewDialog, descriptionList, setOpenFunctions, submitFunctions, submitText }) => {\r\n\r\n    // for dropdown buttons\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    }; //\r\n\r\n    return (<>\r\n        <Dialog\r\n            onClose={() => setOpenFormReviewDialog(false)}\r\n            maxWidth=\"md\"\r\n            fullWidth={true}\r\n            open={openFormReviewDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ fontSize: \"30px\", width: \"100%\", alignSelf: \"center\" }}>\r\n                        Form review and submission\r\n                    </div>\r\n                    <IconButton onClick={() => setOpenFormReviewDialog(false)}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContentText style={{ paddingLeft: \"25px\", paddingTop: \"10px\" }} id=\"alert-dialog-description\" component=\"span\">\r\n                Please review your filled form before submitting.\r\n            </DialogContentText>\r\n            <DialogContent>\r\n                <div dangerouslySetInnerHTML={{ __html: descriptionList }}></div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => setOpenFormReviewDialog(false)} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button\r\n                    style={{ float: \"right\", marginRight: \"5px\" }}\r\n                    id=\"demo-positioned-button\"\r\n                    aria-controls={open ? \"demo-positioned-menu\" : undefined}\r\n                    aria-haspopup=\"true\"\r\n                    aria-expanded={open ? \"true\" : undefined}\r\n                    onClick={handleClick}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >\r\n                    Submit\r\n                </Button>\r\n                <Menu\r\n                    id=\"demo-positioned-menu\"\r\n                    aria-labelledby=\"demo-positioned-button\"\r\n                    anchorEl={anchorEl}\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{\r\n                        vertical: \"top\",\r\n                        horizontal: \"left\",\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: \"top\",\r\n                        horizontal: \"left\",\r\n                    }}\r\n                >\r\n                    <MenuItem disabled={!onlineMode} onClick={() => {\r\n                        setOpenFunctions.setOpenCreateElabFTWExperimentDialog(true);\r\n                        setOpenFormReviewDialog(false);\r\n                    }} >\r\n                        Create eLabFTW Experiment\r\n                    </MenuItem>\r\n                    <MenuItem disabled={!onlineMode} onClick={() => {\r\n                        submitFunctions.submitJobRequest();\r\n                        setOpenFormReviewDialog(false);\r\n                    }} >\r\n                        {submitText}\r\n                    </MenuItem>\r\n                </Menu>\r\n            </DialogActions>\r\n        </Dialog>\r\n    </>);\r\n};\r\n\r\nexport default FormReviewBeforeSubmit;","const changeKeywords = (convertedSchema, oldKey, desiredNewKey) => {\r\n    if (typeof convertedSchema === 'object' && !Array.isArray(convertedSchema) && convertedSchema !== null) {\r\n        Object.keys(convertedSchema).forEach(keyword => {\r\n            if (keyword === oldKey) {\r\n                let tempValue = convertedSchema[keyword]\r\n                delete convertedSchema[keyword]\r\n                convertedSchema[desiredNewKey] = tempValue\r\n            } else {\r\n                // to maintain the order\r\n                let tempValue = convertedSchema[keyword]\r\n                delete convertedSchema[keyword]\r\n                convertedSchema[keyword] = tempValue\r\n                //\r\n            }\r\n            if (typeof convertedSchema[keyword] === 'object' && !Array.isArray(convertedSchema[keyword]) && convertedSchema[keyword] !== null) {\r\n                changeKeywords(convertedSchema[keyword], oldKey, desiredNewKey)\r\n            }\r\n            else if (Array.isArray(convertedSchema[keyword]) && convertedSchema[keyword] !== null) {\r\n                convertedSchema[keyword].forEach(item => {\r\n                    changeKeywords(item, oldKey, desiredNewKey)\r\n                })\r\n            }\r\n        })\r\n    }\r\n    else if (Array.isArray(convertedSchema) && convertedSchema !== null) {\r\n        convertedSchema.forEach(item => {\r\n            changeKeywords(item, oldKey, desiredNewKey)\r\n        })\r\n    }\r\n}\r\n\r\nexport default changeKeywords","export default __webpack_public_path__ + \"static/media/adamant-header-5.4c6c7c93.svg\";","const checkObjectExistance = (arr, path) => {\r\n    let loc = false\r\n    arr.forEach((element, index) => {\r\n        if (element[\"path\"] === path) {\r\n            loc = index\r\n        }\r\n    })\r\n    return loc;\r\n}\r\n\r\nconst nicelySort = (arr) => {\r\n    let sortedArr = []\r\n    arr.forEach(element => {\r\n        // check if an object with element[\"path\"] already exists\r\n        let loc = checkObjectExistance(sortedArr, element[\"path\"])\r\n\r\n        if (loc !== false) {\r\n            let fieldArr = sortedArr[loc][\"fields\"]\r\n            fieldArr.push({ key: element[\"key\"], label: element[\"label\"], value: element[\"value\"], $id: element[\"$id\"] })\r\n        } else {\r\n            // if not then create a new object\r\n            let newObj = {}\r\n            newObj[\"path\"] = element[\"path\"]\r\n            newObj[\"pathURIs\"] = element[\"pathURIs\"]\r\n            newObj[\"pathLabels\"] = element[\"pathLabels\"]\r\n            newObj[\"fields\"] = [{ key: element[\"key\"], label: element[\"label\"], value: element[\"value\"], $id: element[\"$id\"] }]\r\n            //console.log(newObj)\r\n            sortedArr.push(newObj)\r\n        }\r\n    });\r\n\r\n\r\n    return sortedArr;\r\n}\r\n\r\nexport default nicelySort;","const getPaths = (object, value) => {\r\n    return Object\r\n        .keys(object)\r\n        .reduce((r, k) => {\r\n            var kk = Array.isArray(object) ? `[${k}]` : `${k}`;\r\n            if (object[k] === value) {\r\n                r.push(kk);\r\n            }\r\n            if (object[k] && typeof object[k] === 'object') {\r\n                r.push(...getPaths(object[k], value).map(p => kk + (p[0] === '[' ? '' : '.') + p));\r\n            }\r\n            return r;\r\n        }, []);\r\n}\r\n\r\nexport default getPaths;","// get json value in schema given path\r\nconst getValueInSchema = (json, path) => {\r\n    if (path === undefined) {\r\n        return json[\"properties\"]\r\n    }\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    if (path[0] === \"\") {\r\n        return undefined;\r\n    }\r\n    let tempValue = jsonData[\"properties\"]\r\n    for (let i = 0; i < path.length; i++) {\r\n        if (tempValue[\"type\"] === \"object\") {\r\n            tempValue = tempValue[\"properties\"][path[i]]\r\n        } else {\r\n            tempValue = tempValue[path[i]]\r\n        }\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValueInSchema;","import getValueInSchema from \"./getValueInSchema\";\r\n\r\nconst getPathURIsAndLabels = (object, path) => {\r\n\r\n    let pathArr = path.split(\".\")\r\n    let newPath = []\r\n    let uris = []\r\n    let labels = []\r\n    for (let i = 0; i < pathArr.length; i++) {\r\n        newPath.push(pathArr[i])\r\n\r\n        let thePath = JSON.parse(JSON.stringify(newPath));\r\n        thePath = thePath.join(\".\")\r\n        let value = getValueInSchema(object, thePath)\r\n        if (typeof (value) === \"object\") {\r\n            if (value[\"$id\"] !== undefined) {\r\n                uris.push(value[\"$id\"])\r\n            }\r\n            else if (value[\"id\"] !== undefined) {\r\n                uris.push(value[\"id\"])\r\n            }\r\n            else {\r\n                uris.push(\"\")\r\n            }\r\n            if (value[\"title\"] !== undefined) {\r\n                labels.push(value[\"title\"])\r\n            } else {\r\n                labels.push(\"\")\r\n            }\r\n        } else {\r\n            uris.push(\"\")\r\n            labels.push(\"\")\r\n        }\r\n    }\r\n\r\n    return [uris, labels];\r\n\r\n}\r\n\r\nexport default getPathURIsAndLabels;","import getPaths from \"./getPaths\";\r\nimport getPathURIsAndLabels from \"./getPathURIsAndLabels\";\r\n\r\n/**\r\n * Get rid of the last two items of each path in pathArr\r\n * @param {*} pathArr \r\n * @returns processedArr\r\n */\r\nconst pathPreProcess = (pathArr) => {\r\n    let processedArr = []\r\n    pathArr.forEach((item) => {\r\n        item = item.split(\".\");\r\n        item.pop();\r\n        item.pop();\r\n        item = item.join(\".\");\r\n        processedArr.push(item)\r\n    })\r\n\r\n    return processedArr\r\n}\r\n\r\nconst preProcessB4DescList = (content, originalContent, originalSchema, arr) => {\r\n\r\n    Object.keys(content).forEach((item) => {\r\n        if (content[item][\"label\"] === undefined) {\r\n            preProcessB4DescList(content[item], originalContent, originalSchema, arr)\r\n        }\r\n        else {\r\n            if (content[item][\"value\"] !== undefined) {\r\n                /*\r\n                 a function to get a path of a given a key:attribute pair\r\n                */\r\n                let path_key = getPaths(originalContent, content[item][\"key\"])\r\n                path_key = pathPreProcess(path_key)\r\n                let path_label = getPaths(originalContent, content[item][\"label\"])\r\n                path_label = pathPreProcess(path_label)\r\n                let path = path_key.filter(value => path_label.includes(value));\r\n                let URIsAndLabels = getPathURIsAndLabels(originalSchema, path[0])\r\n\r\n                arr.push({\r\n                    \"path\": path[0],\r\n                    \"pathURIs\": URIsAndLabels[0],\r\n                    \"pathLabels\": URIsAndLabels[1],\r\n                    \"key\": content[item][\"key\"],\r\n                    \"label\": content[item][\"label\"],\r\n                    \"value\": content[item][\"value\"],\r\n                    \"$id\": content[item][\"$id\"]\r\n                })\r\n            }\r\n        }\r\n    })\r\n\r\n    return arr;\r\n};\r\n\r\nexport default preProcessB4DescList;","\r\nconst getTableCandidates = (convProp, container) => {\r\n\r\n    convProp.forEach(element => {\r\n        if (element[\"type\"] === \"object\") {\r\n            getTableCandidates(element[\"properties\"], container)\r\n        } else if (element[\"type\"] === \"array\") {\r\n            if (typeof (element[\"value\"][0]) === \"object\") {\r\n                container.push({\r\n                    \"fieldKey\": element[\"fieldKey\"],\r\n                    \"title\": element[\"title\"],\r\n                    \"schemaProperties\": element[\"items\"][\"properties\"],\r\n                    \"$id\": element[\"$id\"],\r\n                    \"id\": element[\"id\"],\r\n                    \"value\": element[\"value\"]\r\n                })\r\n            }\r\n        }\r\n    });\r\n\r\n    return container;\r\n}\r\n\r\nexport default getTableCandidates;","// curently only works with flat json structure\r\nimport listMimeTypes from \"../../assets/mime-types-extensions.json\"\r\n\r\nconst table2DescListTable = (table) => {\r\n\r\n    // create table definition (?)\r\n    //let descListTable = `<div>${table[\"title\"]}</div>\\n`\r\n    let descListTable = `<div style=\"background-color: #ffffff; border: 0px;\">`\r\n    descListTable += `<a style=\"color:#000000;\"><strong>${table[\"title\"]}</strong></a>`\r\n    descListTable += \"</div>\\n\"\r\n\r\n    descListTable += \"<div>\\n\"\r\n    descListTable += `<table style=\"border-collapse: collapse;\" border=\"1\">\\n`\r\n    descListTable += `<tbody>\\n`\r\n\r\n    // now create the table header\r\n    let keyTitleMapper = []\r\n    descListTable += `<tr>\\n`\r\n    descListTable += `<td style=\"text-align: left;\"><strong>No.</strong></td>\\n`\r\n    Object.keys(table[\"schemaProperties\"]).forEach((element, index) => {\r\n        //keyTitleMapper.push({ [element]: table[\"schemaProperties\"][element][\"title\"] })\r\n        keyTitleMapper.push(element)\r\n        descListTable += `<td style=\"text-align: center;\"><strong>${table[\"schemaProperties\"][element][\"title\"]}</strong></td>\\n`\r\n    })\r\n    descListTable += `</tr>\\n`\r\n\r\n    // now the table contents\r\n    table[\"value\"].forEach((element, index) => {\r\n        descListTable += `<tr>\\n`\r\n        descListTable += `<td style=\"text-align: center;\">${index + 1}</td>\\n`\r\n        keyTitleMapper.forEach(item => {\r\n            // check if value is of data url base64\r\n            if (table[\"value\"][index][item] === undefined) {\r\n                descListTable += `<td style=\"text-align: left;\">n/a</td>\\n`\r\n            } else {\r\n                if (typeof table[\"value\"][index][item] === \"string\"){\r\n                    if (table[\"value\"][index][item].startsWith(\"data:\") & table[\"value\"][index][item].includes(\"base64\")) {\r\n                        //console.log(table[\"fieldKey\"] + \"-\" + (index + 1))\r\n                        let extension = table[\"value\"][index][item].split(\";\")[0].replace(\"data:\", \"\")\r\n                        extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                        let fileName = table[\"fieldKey\"] + \"-\" + (index + 1) + extension\r\n                        console.log(fileName)\r\n                        descListTable += `<td style=\"text-align: left;\">See attachment (${fileName})</td>\\n`\r\n                    }\r\n                    else if (table[\"value\"][index][item].trim() === \"\") {\r\n                        descListTable += `<td style=\"text-align: left;\">n/a</td>\\n`\r\n                    }\r\n                    else {\r\n                        descListTable += `<td style=\"text-align: left;\">${table[\"value\"][index][item].trim()}</td>\\n`\r\n                    }\r\n                }\r\n                else {\r\n                    descListTable += `<td style=\"text-align: left;\">${table[\"value\"][index][item]}</td>\\n`\r\n                }\r\n            }\r\n        })\r\n        descListTable += `</tr>\\n`\r\n    });\r\n\r\n    descListTable += \"</tbody>\\n\"\r\n    descListTable += `</table>\\n`\r\n    descListTable += `</div>\\n`\r\n    descListTable += `<div>&nbsp;</div>\\n`\r\n\r\n\r\n    return descListTable\r\n}\r\n\r\n\r\nexport default table2DescListTable;","import listMimeTypes from \"../../assets/mime-types-extensions.json\"\r\n\r\nconst createDescriptionList = (data) => {\r\n    let descList = \"\";\r\n    const emptyString = (element) => element === \"\";\r\n\r\n    data.forEach(element => {\r\n        if (element[\"path\"] === \"\") {\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span style=\"color: #ffffff;\"><a style=\"color: #ffffff;\" title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                } else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n        } else {\r\n            let pathArr = element[\"path\"].split(\".\");\r\n            let titleDiv = `<dt style=\"background-color: #ffffff; border: 0px; height: 10px;\"></dt>\\n`\r\n            titleDiv += `<dt style=\"background-color: #ffffff; border: 0px;\">`\r\n            pathArr.forEach((item, index) => {\r\n                if (element[\"pathURIs\"] !== undefined & !element[\"pathURIs\"].some(emptyString)) {\r\n                    if (item !== \"\") {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a style=\"color:#29AEB9;\" title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a style=\"color:#29AEB9;\" title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}>${element[\"pathLabels\"][index]}</a><a style=\"color: #29aeb9;\">/</a>`\r\n                        }\r\n                    } else {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a style=\"color:#000000;\"><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a style=\"color:#000000;\">${element[\"pathLabels\"][index]}/</a>`\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (index === (pathArr.length - 1)) {\r\n                        titleDiv += `<a style=\"color:#000000;\"><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                    } else {\r\n                        titleDiv += `<a style=\"color:#000000;\">${element[\"pathLabels\"][index]}/</a>`\r\n                    }\r\n                }\r\n            })\r\n            titleDiv += \"</dt>\\n\"\r\n\r\n            descList += titleDiv\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span style=\"color: #ffffff;\"><a style=\"color: #ffffff;\" title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n                else if (item[\"$id\"] === undefined & item[\"id\"] !== undefined) {\r\n                    descList += `<dt><span style=\"color: #ffffff;\"><a style=\"color: #ffffff;\" title=${item[\"id\"]} href=${item[\"id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n\r\n                else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    return descList;\r\n}\r\n\r\nexport default createDescriptionList;","import listMimeTypes from \"../../assets/mime-types-extensions.json\"\r\n\r\nconst createDescriptionListWithoutStyling = (data) => {\r\n    let descList = \"\";\r\n    const emptyString = (element) => element === \"\";\r\n\r\n    data.forEach(element => {\r\n        if (element[\"path\"] === \"\") {\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                } else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n        } else {\r\n            let pathArr = element[\"path\"].split(\".\");\r\n            let titleDiv = `<dt></dt>\\n`\r\n            titleDiv += `<dt>`\r\n            pathArr.forEach((item, index) => {\r\n                if (element[\"pathURIs\"] !== undefined & !element[\"pathURIs\"].some(emptyString)) {\r\n                    if (item !== \"\") {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}>${element[\"pathLabels\"][index]}</a><a>/</a>`\r\n                        }\r\n                    } else {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a>${element[\"pathLabels\"][index]}/</a>`\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (index === (pathArr.length - 1)) {\r\n                        titleDiv += `<a><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                    } else {\r\n                        titleDiv += `<a>${element[\"pathLabels\"][index]}/</a>`\r\n                    }\r\n                }\r\n            })\r\n            titleDiv += \"</dt>\\n\"\r\n\r\n            descList += titleDiv\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span><a title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n                else if (item[\"$id\"] === undefined & item[\"id\"] !== undefined) {\r\n                    descList += `<dt><span><a title=${item[\"id\"]} href=${item[\"id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n\r\n                else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    return descList;\r\n}\r\n\r\nexport default createDescriptionListWithoutStyling;","import nicelySort from \"./nicelySort\";\r\nimport preProcessB4DescList from \"./preProcessB4DescList\";\r\nimport getTableCandidates from \"./getTableCandidates\";\r\nimport table2DescListTable from \"./table2DescListTable\";\r\nimport createDescriptionList from \"./createDescriptionList\";\r\nimport createDescriptionListWithoutStyling from \"./createDescriptionListWithoutStyling\";\r\n\r\n\r\nconst createDescriptionListFromJSON = (cleanedJson, convertedSchema, convertedProperties, schema, footnote, styling) => {\r\n\r\n    let preProcessed = preProcessB4DescList(cleanedJson, cleanedJson, schema, []);\r\n    //console.log(preProcessed);\r\n    let nicelySorted = nicelySort(preProcessed);\r\n    // now check if there is array that contains object if there is then create a html table for this array\r\n    let tables = getTableCandidates(convertedProperties, []);\r\n    let descListTables = [];\r\n    if (tables.length !== 0) {\r\n        tables.forEach((table) =>\r\n            descListTables.push(table2DescListTable(table))\r\n        );\r\n    }\r\n    let descList;\r\n    if (styling) {\r\n        descList = `<dl>\\n${createDescriptionList(\r\n            nicelySorted\r\n        )}</dl>\\n`;\r\n    }\r\n    else {\r\n        descList = `<dl>\\n${createDescriptionListWithoutStyling(\r\n            nicelySorted\r\n        )}</dl>\\n`;\r\n    }\r\n    let descListHeading = `<h1><strong>${convertedSchema[\"title\"]}</strong></h1>\\n`;\r\n    descListHeading += descList;\r\n    // now insert desc list tables if applicable/available\r\n    if (descListTables.length !== 0) {\r\n        descListTables.forEach((item) => {\r\n            descListHeading += item;\r\n        });\r\n    }\r\n    descListHeading += footnote\r\n\r\n    return descListHeading;\r\n}\r\n\r\n\r\nexport default createDescriptionListFromJSON;","import Ajv from \"ajv\";\r\nimport Ajv04 from \"ajv-draft-04\";\r\nimport deleteKeySchema from \"./deleteKeySchema\";\r\n\r\nconst validateSchemaAgainstSpecification = (schema, spec) => {\r\n    if (schema[\"$schema\"] !== undefined) {\r\n        if ([\"http://json-schema.org/draft-04/schema#\", \"http://json-schema.org/draft-05/schema#\", \"http://json-schema.org/draft-06/schema#\"].includes(schema[\"$schema\"])) {\r\n            console.log(`${spec.replace(\"http://json-schema.org/\", \"\").replace(\"/schema#\", \"\")} is detected`)\r\n            console.log(\"Using Ajv for draft 04\")\r\n            schema[\"$schema\"] = \"http://json-schema.org/draft-04/schema#\"\r\n            if (schema[\"$id\"] !== undefined) {\r\n                schema[\"id\"] = schema[\"$id\"]\r\n                delete schema[\"$id\"]\r\n            }\r\n            const ajv = new Ajv04({ schemaId: \"id\", allErrors: true });\r\n            try {\r\n                ajv.compile(schema);\r\n                return [true, \"schema is valid\"]\r\n            }\r\n            catch (error) {\r\n                let errorMessage = error.toString()\r\n                errorMessage = errorMessage.replace(\"Error: strict mode: unknown keyword\", `This specification (${spec}) does not support keyword`)\r\n                //console.log(error)\r\n                return [false, errorMessage]\r\n            }\r\n        }\r\n        else {\r\n            console.log(\"draft-07 or above is detected\")\r\n            console.log(\"Using latest Ajv\")\r\n            const ajv = new Ajv({ allErrors: true });\r\n            /*schema = deleteKeySchema(schema, \"$schema\")\r\n            if (schema[\"id\"] !== undefined) {\r\n                schema = deleteKeySchema(schema, \"id\")\r\n            }*/\r\n            try {\r\n                ajv.compile(schema);\r\n                return [true, \"schema is valid\"]\r\n            }\r\n            catch (error) {\r\n                let errorMessage = error.toString()\r\n                errorMessage = errorMessage.replace(\"Error: strict mode: unknown keyword\", `This specification (${spec}) does not support keyword`)\r\n                //console.log(error)\r\n                return [false, errorMessage]\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        console.log(\"'$schema' is not found. Latest spec is used.\")\r\n        const ajv = new Ajv({ allErrors: true });\r\n        if (schema[\"$schema\"] !== undefined) {\r\n            schema = deleteKeySchema(schema, \"$schema\")\r\n        }\r\n        if (schema[\"id\"] !== undefined) {\r\n            schema = deleteKeySchema(schema, \"id\")\r\n        }\r\n        ajv.compile(schema);\r\n        return [true, \"schema does not have schema specification\"]\r\n    }\r\n}\r\n\r\nexport default validateSchemaAgainstSpecification;","import React, { useCallback, useState } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n//import QPTDATLogo from \"../assets/header-image.png\";\r\nimport FormRenderer from \"../components/FormRenderer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { IconButton, TextField } from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { FormContext } from \"../FormContext\";\r\nimport array2object from \"../components/utils/array2object\";\r\nimport object2array from \"../components/utils/object2array\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport DownloadIcon from \"@material-ui/icons/GetApp\";\r\nimport set from \"set-value\";\r\nimport getValue from \"../components/utils/getValue\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport deleteKeySchema from \"../components/utils/deleteKeySchema\";\r\nimport validateAgainstSchema from \"../components/utils/validateAgainstSchema\";\r\nimport CreateELabFTWExperimentDialog from \"../components/CreateELabFTWExperimentDialog\";\r\nimport { useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport prepareDataForDescList from \"../components/utils/prepareDataForDescList\";\r\nimport array2objectAnyOf from \"../components/utils/array2objectAnyOf\";\r\nimport SchemaOne from \"../schemas/all-types.json\";\r\nimport SchemaTwo from \"../schemas/demo-schema.json\";\r\nimport SchemaThree from \"../schemas/example-experiment-schema.json\";\r\nimport SchemaFour from \"../schemas/example-request-schema.json\";\r\nimport SchemaFive from \"../schemas/plasma-mds.json\";\r\nimport fillValueWithEmptyString from \"../components/utils/fillValueWithEmptyString\";\r\nimport convData2FormData from \"../components/utils/convData2FormData\";\r\nimport FormReviewBeforeSubmit from \"../components/FormReviewBeforeSubmit\";\r\nimport changeKeywords from \"../components/utils/changeKeywords\";\r\nimport QPTDATLogo from \"../assets/adamant-header-5.svg\";\r\nimport createDescriptionListFromJSON from \"../components/utils/createDescriptionListFromJSON\";\r\nimport HelpIcon from \"@material-ui/icons/HelpOutlineRounded\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport validateSchemaAgainstSpecification from \"../components/utils/validateSchemaAgainstSpecification\";\r\n\r\n// function that receive the schema and convert it to Form/json data blueprint\r\n// also to already put the default value to this blueprint\r\nconst createFormDataBlueprint = (schemaProperties) => {\r\n  let newObject = {};\r\n\r\n  Object.keys(schemaProperties).forEach((item) => {\r\n    if (schemaProperties[item][\"type\"] !== \"object\") {\r\n      if (schemaProperties[item][\"default\"] !== undefined) {\r\n        newObject[item] = schemaProperties[item][\"default\"];\r\n      } else if (\r\n        (schemaProperties[item][\"default\"] === undefined) &\r\n        (schemaProperties[item][\"enum\"] !== undefined)\r\n      ) {\r\n        newObject[item] = schemaProperties[item][\"enum\"][0];\r\n      } else if (\r\n        (schemaProperties[item][\"type\"] === \"boolean\") &\r\n        (schemaProperties[item][\"default\"] === undefined)\r\n      ) {\r\n        newObject[item] = false;\r\n      }\r\n    } else {\r\n      if (schemaProperties[item][\"properties\"] !== undefined) {\r\n        newObject[item] = createFormDataBlueprint(\r\n          schemaProperties[item][\"properties\"]\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return newObject;\r\n};\r\n\r\n// function to remove empty artributes\r\nconst removeEmpty = (obj) => {\r\n  Object.keys(obj).forEach((key) => {\r\n    if (obj[key] && typeof obj[key] === \"object\") {\r\n      const childObject = removeEmpty(obj[key]);\r\n      if (childObject === undefined) {\r\n        delete obj[key];\r\n      }\r\n    } else if (obj[key] === \"\" || obj[key] === null || obj[key] === undefined) {\r\n      delete obj[key];\r\n    }\r\n  });\r\n  return Object.keys(obj).length > 0 || obj instanceof Array ? obj : undefined;\r\n};\r\n\r\nconst AdamantMain = () => {\r\n  // state management\r\n  const [disable, setDisable] = useState(true);\r\n  const [schemaMessage, setSchemaMessage] = useState(null);\r\n  const [schemaValidity, setSchemaValidity] = useState(false);\r\n  const [schema, setSchema] = useState(null);\r\n  const [schemaIntermediate, setSchemaIntermediate] = useState(null);\r\n  const [renderReady, setRenderReady] = useState(false);\r\n  const [editMode, setEditMode] = useState(true);\r\n  const [schemaList, setSchemaList] = useState([]);\r\n  const [schemaNameList, setSchemaNameList] = useState([]);\r\n  const [selectedSchemaName, setSelectedSchemaName] = useState(\"\");\r\n  const [originalSchema, setOriginalSchema] = useState();\r\n  const [inputMode, setInputMode] = useState(false);\r\n  const [convertedSchema, setConvertedSchema] = useState(null);\r\n  const [createScratchMode, setCreateScratchMode] = useState(false);\r\n  const [jsonData, setJsonData] = useState({});\r\n  const [descriptionList, setDescriptionList] = useState(\"\");\r\n  const [schemaWithValues, setSchemaWithValues] = useState({});\r\n  const [schemaSpecification, setSchemaSpecification] = useState(\"\");\r\n  const [token, setToken] = useState(\"\");\r\n  const [eLabURL, setELabURL] = useState(\"\");\r\n  const [experimentTitle, setExperimentTitle] = useState(\"\");\r\n  const [onlineMode, setOnlineMode] = useState(false);\r\n  const [tags, setTags] = useState([]);\r\n  const [retrievedTags, setRetrievedTags] = useState([]);\r\n  const [SEMSelectedDevice, setSEMSelectedDevice] = useState(\"\");\r\n  const [HeaderImage, setHeaderImage] = useState(QPTDATLogo);\r\n  const [openFormReviewDialog, setOpenFormReviewDialog] = useState(false);\r\n  const [openJobRequestDialog, setOpenJobRequestDialog] = useState(false);\r\n  const [jobRequestSchemas, setJobRequestSchemas] = useState([]);\r\n  const [submitTextList, setSubmitTextList] = useState([]);\r\n  const [submitText, setSubmitText] = useState(\"Submit Job Request\");\r\n  // for dropdown buttons\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [\r\n    openCreateElabFTWExperimentDialog,\r\n    setOpenCreateElabFTWExperimentDialog,\r\n  ] = useState(false);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  }; //\r\n\r\n  let implementedFieldTypes = [\r\n    \"string\",\r\n    \"number\",\r\n    \"integer\",\r\n    \"array\",\r\n    \"boolean\",\r\n    \"object\",\r\n  ];\r\n\r\n  // check if the front-end is connected to backend at all\r\n  useEffect(() => {\r\n    let $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"GET\",\r\n      url: \"/api/check_mode\",\r\n      success: function (status) {\r\n        console.log(\"Connection to server is established. Online mode\");\r\n        setJobRequestSchemas(status[\"jobRequestSchemaList\"]);\r\n        console.log(status[\"jobRequestSchemaList\"]);\r\n        setSubmitTextList(status[\"submitButtonText\"]);\r\n        setOnlineMode(true);\r\n        toast.success(\r\n          <>\r\n            <div>\r\n              <strong>Connection to server is established.</strong>\r\n            </div>\r\n          </>,\r\n          {\r\n            toastId: \"connectionSuccess\",\r\n          }\r\n        );\r\n      },\r\n      error: function () {\r\n        console.log(\r\n          \"Unable to establish connection to server. Offline mode. Submit feature is disabled.\"\r\n        );\r\n        setOnlineMode(false);\r\n\r\n        // use available schema as a place holder\r\n        setSchemaNameList([\r\n          \"\",\r\n          \"all-types.json\",\r\n          \"demo-schema.json\",\r\n          \"example-experiment-schema.json\",\r\n          \"example-request-schema.json\",\r\n          \"plasma-mds.json\",\r\n        ]);\r\n        setSchemaList([\r\n          null,\r\n          SchemaOne,\r\n          SchemaTwo,\r\n          SchemaThree,\r\n          SchemaFour,\r\n          SchemaFive,\r\n        ]);\r\n\r\n        toast.warning(\r\n          <>\r\n            <div>\r\n              <strong>Unable to establish connection to server.</strong>\r\n            </div>\r\n            <div>Submit feature is disabled.</div>\r\n          </>,\r\n          {\r\n            toastId: \"connectionWarning\",\r\n          }\r\n        );\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // get schemas from server when onlinemode is true\r\n  useEffect(() => {\r\n    // if online mode then get available schemas from server\r\n    if (onlineMode === true) {\r\n      let $ = require(\"jquery\");\r\n      $.ajax({\r\n        type: \"GET\",\r\n        url: \"/api/get_schemas\",\r\n        success: function (status) {\r\n          console.log(\"SUCCESS\");\r\n\r\n          // do this to preserver the order\r\n          let sch = [];\r\n          status[\"schema\"].forEach((element) => {\r\n            sch.push(JSON.parse(element));\r\n          });\r\n\r\n          setSchemaList(sch);\r\n          setSchemaNameList(status[\"schemaName\"]);\r\n        },\r\n        error: function () {\r\n          console.log(\"ERROR\");\r\n          toast.warning(\r\n            \"Error while fetching the schemas. Using basic list of schemas.\",\r\n            {\r\n              toastId: \"fetchingSchemasError\",\r\n            }\r\n          );\r\n          // if unable to fetch the schemas then use the basic list of schemas\r\n          setSchemaNameList([\r\n            \"\",\r\n            \"all-types.json\",\r\n            \"demo-schema.json\",\r\n            \"example-experiment-schema.json\",\r\n            \"example-request-schema.json\",\r\n            \"plasma-mds.json\",\r\n          ]);\r\n          setSchemaList([\r\n            null,\r\n            SchemaOne,\r\n            SchemaTwo,\r\n            SchemaThree,\r\n            SchemaFour,\r\n            SchemaFive,\r\n          ]);\r\n        },\r\n      });\r\n    }\r\n  }, [onlineMode]);\r\n\r\n  // handle select schema on change\r\n  const handleSelectSchemaOnChange = (event) => {\r\n    // first reset states\r\n    setRenderReady(false);\r\n    setDisable(true);\r\n    setCreateScratchMode(false);\r\n    setJsonData({});\r\n    //\r\n\r\n    console.log(\"selected schema:\", event.target.value);\r\n    setSelectedSchemaName(event.target.value);\r\n\r\n    let selectedSchema = schemaList[schemaNameList.indexOf(event.target.value)];\r\n\r\n    // reset everything when selectedSchema is empty\r\n    if (selectedSchema === null) {\r\n      setDisable(true);\r\n      setRenderReady(false);\r\n      setSchema(null);\r\n      setSchemaValidity(false);\r\n      setSchemaMessage();\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      return;\r\n    }\r\n\r\n    // convert selectedSchema schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n    try {\r\n      convertedSchema[\"properties\"] = object2array(\r\n        selectedSchema[\"properties\"]\r\n      );\r\n\r\n      // update states\r\n      setSchemaValidity(true);\r\n      setSchemaMessage(`${event.target.value} is a valid schema`);\r\n      setSchema(selectedSchema);\r\n      let oriSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n      setOriginalSchema(oriSchema);\r\n      setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n      setConvertedSchema(convertedSchema);\r\n\r\n      if (jobRequestSchemas.includes(convertedSchema[\"title\"])) {\r\n        try {\r\n          //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n          //setHeaderImage(SEMlogo[\"default\"]);\r\n          setHeaderImage(QPTDATLogo);\r\n          setEditMode(false);\r\n          setSubmitText(\r\n            submitTextList[jobRequestSchemas.indexOf(convertedSchema[\"title\"])]\r\n          );\r\n        } catch (error) {\r\n          console.log(error);\r\n          setHeaderImage(QPTDATLogo);\r\n          setEditMode(true);\r\n        }\r\n      } else {\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(true);\r\n      }\r\n\r\n      // create form data\r\n      let formData = createFormDataBlueprint(selectedSchema[\"properties\"]);\r\n      setJsonData(formData);\r\n    } catch (error) {\r\n      console.log(error);\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${event.target.value} is invalid`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // function to check if the file accepted is of json format and json schema valid\r\n  const checkSchemaValidity = (schemaFile) => {\r\n    // place holder\r\n    if (schemaFile[0][\"type\"] === \"application/json\") {\r\n      // read the file with FileReadr API\r\n      const reader = new FileReader();\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = () => {\r\n        const binaryStr = reader.result;\r\n        const obj = JSON.parse(binaryStr);\r\n\r\n        // convert obj schema to iterable array properties\r\n        let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n        try {\r\n          convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n          // update states\r\n          setSchemaValidity(true);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is a valid schema`);\r\n          setSchema(obj);\r\n          let oriSchema = JSON.parse(JSON.stringify(obj));\r\n          setOriginalSchema(oriSchema);\r\n          setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n          setConvertedSchema(convertedSchema);\r\n\r\n          if (jobRequestSchemas.includes(obj[\"title\"])) {\r\n            try {\r\n              //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n              //setHeaderImage(SEMlogo[\"default\"]);\r\n              setHeaderImage(QPTDATLogo);\r\n              setEditMode(false);\r\n              setSubmitText(\r\n                submitTextList[\r\n                  jobRequestSchemas.findIndex(convertedSchema[\"title\"])\r\n                ]\r\n              );\r\n            } catch (error) {\r\n              console.log(error);\r\n              setHeaderImage(QPTDATLogo);\r\n              setEditMode(true);\r\n            }\r\n          } else {\r\n            setHeaderImage(QPTDATLogo);\r\n            setEditMode(true);\r\n          }\r\n\r\n          // create form data\r\n          let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n          setJsonData(formData);\r\n        } catch (error) {\r\n          console.log(error);\r\n          // update states\r\n          setSchemaValidity(false);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is invalid`);\r\n          setSchema(null);\r\n        }\r\n      };\r\n      reader.readAsText(schemaFile[0]);\r\n    } else {\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${schemaFile[0][\"name\"]} is of incorrect file type`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // browse or drag&drop schema file\r\n  const onDrop = useCallback(\r\n    (acceptedFile) => {\r\n      // process the schema, validation etc\r\n      checkSchemaValidity(acceptedFile);\r\n\r\n      // store schema file in the state\r\n      // update states\r\n      setRenderReady(false);\r\n      setDisable(true);\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      setSelectedSchemaName(\"\");\r\n    },\r\n    [setRenderReady, jobRequestSchemas, submitTextList]\r\n  );\r\n  //\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    multiple: false,\r\n  });\r\n\r\n  // render on-click handle\r\n  const renderOnClick = () => {\r\n    //setFormRenderInProgress(true);\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // clear schema on-click handle\r\n  const clearSchemaOnClick = () => {\r\n    setHeaderImage(QPTDATLogo);\r\n    setDisable(true);\r\n    setRenderReady(false);\r\n    setSchema(null);\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setCreateScratchMode(false);\r\n    setSelectedSchemaName(\"\");\r\n  };\r\n\r\n  // create new schema from scratch\r\n  const createSchemaFromScratch = () => {\r\n    // update browse schema render states\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setJsonData({});\r\n    setSelectedSchemaName(\"\");\r\n\r\n    // always use newer schema specification\r\n    let schemaBlueprint = {\r\n      $schema: \"http://json-schema.org/draft-07/schema#\",\r\n      type: \"object\",\r\n      properties: {},\r\n    };\r\n    const obj = JSON.parse(JSON.stringify(schemaBlueprint));\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n    setJsonData(formData);\r\n\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n    convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n    // update states\r\n    setCreateScratchMode(true);\r\n    setSchema(obj);\r\n    let oriSchema = JSON.parse(JSON.stringify(obj));\r\n    setOriginalSchema(oriSchema);\r\n    setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n    setConvertedSchema(convertedSchema);\r\n\r\n    if (jobRequestSchemas.includes(obj[\"title\"])) {\r\n      try {\r\n        //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n        //setHeaderImage(SEMlogo[\"default\"]);\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(false);\r\n        setSubmitText(\r\n          submitTextList[jobRequestSchemas.findIndex(convertedSchema[\"title\"])]\r\n        );\r\n      } catch (error) {\r\n        console.log(error);\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(true);\r\n      }\r\n    } else {\r\n      setHeaderImage(QPTDATLogo);\r\n      setEditMode(true);\r\n    }\r\n\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // compile on-click handle\r\n  const compileOnClick = () => {\r\n    let value = schema;\r\n\r\n    const [valid, message] = validateSchemaAgainstSpecification(\r\n      JSON.parse(JSON.stringify(schema)),\r\n      schemaSpecification\r\n    );\r\n    if (valid) {\r\n      setInputMode(true);\r\n      setSchema(value);\r\n      setEditMode(false);\r\n      setDisable(true);\r\n    } else {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Your schema is not valid.</strong>\r\n          </div>\r\n          {message}\r\n        </>,\r\n        {\r\n          toastId: \"schemaError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n  };\r\n\r\n  // return to edit mode handle\r\n  const toEditMode = () => {\r\n    let value = schema;\r\n    if (jobRequestSchemas.includes(schema[\"title\"])) {\r\n      setInputMode(false);\r\n      setSchema(value);\r\n      setEditMode(false);\r\n      setDisable(false);\r\n    } else {\r\n      setInputMode(false);\r\n      setSchema(value);\r\n      setEditMode(true);\r\n      setDisable(false);\r\n    }\r\n  };\r\n\r\n  // update parent (re-render everything)\r\n  const updateParent = (value) => {\r\n    let newValue = { ...value };\r\n\r\n    if (newValue[\"$schema\"] === \"http://json-schema.org/draft-04/schema#\") {\r\n      changeKeywords(newValue, \"$id\", \"id\");\r\n    } else {\r\n      changeKeywords(newValue, \"id\", \"$id\");\r\n    }\r\n\r\n    // update original schema\r\n    let updatedSchema = JSON.parse(JSON.stringify(newValue));\r\n    let tempSchema = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema[\"properties\"] = array2object(tempSchema[\"properties\"]);\r\n\r\n    setConvertedSchema(newValue);\r\n    setSchema(updatedSchema);\r\n\r\n    // update intermediate schema\r\n    let updatedSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    let tempSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema2[\"properties\"] = array2objectAnyOf(tempSchema2[\"properties\"]);\r\n    setSchemaIntermediate(updatedSchema2);\r\n  };\r\n\r\n  // update error stuff visually after validation (if some field(s) is are invalid)\r\n  const setErrorStuffUponValidation = (errorMessages) => {\r\n    let value = { ...convertedSchema };\r\n    errorMessages.forEach((message) => {\r\n      let path = message.path;\r\n      path = path.split(\".\");\r\n      let newPath = [];\r\n      let tempValue = JSON.parse(JSON.stringify(value));\r\n      for (let i = 0; i < path.length; ) {\r\n        if (path[i] === \"items\" && tempValue[path[i]][\"type\"] === \"object\") {\r\n          set(value, newPath.join(\".\") + \".adamant_field_error\", true);\r\n          set(\r\n            value,\r\n            newPath.join(\".\") + \".adamant_error_description\",\r\n            \"One or more fields in this array have invalid inputs. Please fix them.\"\r\n          );\r\n          return;\r\n        }\r\n        if (\r\n          path[i] === \"properties\" &&\r\n          Array.isArray(tempValue[\"properties\"])\r\n        ) {\r\n          newPath.push(path[i]);\r\n          i += 1;\r\n          let index = tempValue[\"properties\"].findIndex(\r\n            (val) => val.fieldKey === path[i]\r\n          );\r\n          newPath.push(index);\r\n          i += 1;\r\n          tempValue = tempValue[\"properties\"][index];\r\n        } else {\r\n          newPath.push(path[i]);\r\n          tempValue = tempValue[path[i]];\r\n          i += 1;\r\n        }\r\n      }\r\n      //console.log(newPath.join(\".\"));\r\n      set(value, newPath.join(\".\") + \".adamant_field_error\", true);\r\n      set(\r\n        value,\r\n        newPath.join(\".\") + \".adamant_error_description\",\r\n        message.message\r\n      );\r\n    });\r\n\r\n    updateParent(value);\r\n  };\r\n\r\n  // revert all changes to the schema\r\n  const revertAllChanges = () => {\r\n    let value = { ...originalSchema };\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(value));\r\n    convertedSchema[\"properties\"] = object2array(value[\"properties\"]);\r\n    console.log(convertedSchema);\r\n    setConvertedSchema(convertedSchema);\r\n    setSchema(value);\r\n    setSchemaWithValues(value);\r\n    setDescriptionList(\"\");\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(value[\"properties\"]);\r\n    setJsonData(formData);\r\n  };\r\n\r\n  /*/ handle data input on blur\r\n  const handleDataInput = (event, path, type) => {\r\n    let jData = { ...jsonData };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(jData, path, value);\r\n    //console.log(\"Current form data    (jData):\", jData);\r\n    setJsonData(jData);\r\n  };\r\n  /*/\r\n\r\n  // handle data input on blur to convertedSchema\r\n  const handleConvertedDataInput = (event, path, type) => {\r\n    let convSchemaData = { ...convertedSchema };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(convSchemaData, path, value);\r\n    setConvertedSchema(convSchemaData);\r\n    //console.log(convSchemaData);\r\n\r\n    let data = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    setJsonData(data);\r\n\r\n    // convert to form data\r\n    console.log(\"Current form data (convData):\", data);\r\n\r\n    // unconverted\r\n    //console.log(\"Current form data (unconverted convData):\", convSchemaData);\r\n  };\r\n\r\n  // delete data in jsonData when the field in schema is deleted\r\n  const handleDataDelete = (path) => {\r\n    let jData = { ...jsonData };\r\n    let value = deleteKeySchema(jData, path);\r\n    setJsonData(value);\r\n    console.log(\"Current form data:\", value);\r\n  };\r\n\r\n  // update form data id if a fieldkey changes, simply delete key value pair of the oldfieldid from jsonData\r\n  const updateFormDataId = (\r\n    oldFieldId,\r\n    newFieldId,\r\n    pathFormData,\r\n    defaultValue\r\n  ) => {\r\n    if (oldFieldId === newFieldId) {\r\n      return;\r\n    }\r\n    if (defaultValue === undefined) {\r\n      let jData = { ...jsonData };\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    } else {\r\n      let newPathFormData = pathFormData.split(\".\");\r\n      newPathFormData.pop();\r\n      newPathFormData.push(newFieldId);\r\n\r\n      let jData = { ...jsonData };\r\n      let value = getValue(jData, pathFormData);\r\n      set(jData, newPathFormData, value);\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    }\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadJsonSchema = () => {\r\n    let content = { ...schema };\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `jsonschema-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadFormData = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `formdata-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadDescriptionList = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = prepareDataForDescList(convProp); // skip keyword that has value of array with objects as its elements\r\n    //let cleaned = removeEmpty(prepareDataForDescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to download. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // create description list\r\n    let footnote = `<div> This template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>ADAMANT v1.0.0</a></span> </div>`;\r\n    let descList = createDescriptionListFromJSON(\r\n      cleaned,\r\n      convSch,\r\n      convProp,\r\n      schema,\r\n      footnote,\r\n      false\r\n    ); // false means without styling\r\n\r\n    setDescriptionList(descList);\r\n\r\n    let sha256_hash = CryptoJS.SHA256(descList);\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([descList], {\r\n      type: \"text/html\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `desclist-${sha256_hash}.tpl`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // get available tags from elabftw\r\n  const getTagsELabFTW = () => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/get_tags\",\r\n      dataType: \"json\",\r\n      data: {\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n      },\r\n      success: function (status) {\r\n        console.log(\"Tags retrieved successfully\");\r\n        //let arr = [];\r\n        //for (let i = 0; i < status.length; i++) {\r\n        //  arr.push(status[i][\"tag\"]);\r\n        //}\r\n        setRetrievedTags(status);\r\n        toast.success(`Successfully retrieved the tags!`, {\r\n          toastId: \"fetchingTagsSuccess\",\r\n        });\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Failed to retrieve tags\");\r\n        console.log(status);\r\n        toast.error(`Failed to get the tags!\\nMaybe wrong url or token?`, {\r\n          toastId: \"fetchingTagsError\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // create an experiment in elabftw based on the schema and data\r\n  const createExperimentELabFTW = () => {\r\n    // validate the data first using ajv\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(\r\n      content,\r\n      JSON.parse(JSON.stringify(contentSchema))\r\n    );\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      // clear states\r\n      setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    }\r\n\r\n    // call create experiment api\r\n    console.log(\"tags:\", tags);\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/create_experiment\",\r\n      async: false,\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n        title: experimentTitle,\r\n        body: descriptionList,\r\n        tags: JSON.stringify(tags),\r\n      },\r\n      success: function (status) {\r\n        console.log(\"SUCCESS\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenCreateElabFTWExperimentDialog(false);\r\n        toast.success(\r\n          `Successfully created an experiment with id: ${status[\"experimentId\"]}!`,\r\n          {\r\n            toastId: \"createExperimentSuccess\",\r\n          }\r\n        );\r\n\r\n        // clear states\r\n        setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenCreateElabFTWExperimentDialog(false);\r\n        toast.error(\r\n          `Failed to create an experiment!\\nMaybe wrong url or token?`,\r\n          {\r\n            toastId: \"createExperimentError\",\r\n          }\r\n        );\r\n        // clear states\r\n        setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n    });\r\n  };\r\n\r\n  // submit sem job request\r\n  const submitJobRequest = () => {\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/submit_job_request\",\r\n      async: false,\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        body: descriptionList,\r\n      },\r\n      success: function (status) {\r\n        if (status[\"response\"] === 200) {\r\n          console.log(\"SUCCESS\");\r\n          console.log(status);\r\n\r\n          // close submit dialog\r\n          setOpenJobRequestDialog(false);\r\n          toast.success(`${status.responseText}`, {\r\n            toastId: \"jobRequestSubmitSuccess\",\r\n          });\r\n        } else {\r\n          console.log(\"ERROR\");\r\n          console.log(status);\r\n\r\n          // close submit dialog\r\n          setOpenJobRequestDialog(false);\r\n          toast.error(`${status.responseText}`, {\r\n            toastId: \"jobRequestSubmitError\",\r\n          });\r\n        }\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenJobRequestDialog(false);\r\n        toast.error(`${status.responseText}`, {\r\n          toastId: \"jobRequestSubmitError\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleOnClickProceedButton = () => {\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = prepareDataForDescList(convProp);\r\n    //let cleaned = removeEmpty(prepareDataForDescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to proceed. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // create description list\r\n    let footnote = `<div> This template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>ADAMANT v1.0.0</a></span> </div>`;\r\n    let descList = createDescriptionListFromJSON(\r\n      cleaned,\r\n      convSch,\r\n      convProp,\r\n      schema,\r\n      footnote,\r\n      true\r\n    );\r\n\r\n    setDescriptionList(descList);\r\n\r\n    // validate the data first using ajv\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n    let contentSchema = { ...schema };\r\n\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    //console.log(content);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      // clear states\r\n      setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    } else {\r\n      //setOpenSubmitDialog(true);\r\n      setOpenFormReviewDialog(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormContext.Provider\r\n        value={{\r\n          updateParent,\r\n          convertedSchema,\r\n          updateFormDataId,\r\n          handleDataDelete,\r\n          handleConvertedDataInput,\r\n          SEMSelectedDevice,\r\n          schemaSpecification,\r\n          setSchemaSpecification,\r\n          setSEMSelectedDevice,\r\n          implementedFieldTypes,\r\n        }}\r\n      >\r\n        <div style={{ paddingBottom: \"5px\" }}>\r\n          <img\r\n            style={{ height: \"100px\", borderRadius: \"5px\" }}\r\n            alt=\"header\"\r\n            src={HeaderImage !== undefined ? HeaderImage : QPTDATLogo}\r\n          />\r\n          {!inputMode ? (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                textAlign: \"left\",\r\n                padding: \"10px 10px 0px 10px\",\r\n              }}\r\n            >\r\n              <Button\r\n                style={{ width: \"100%\" }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                {...getRootProps()}\r\n              >\r\n                <input {...getInputProps()} />\r\n                {isDragActive ? \"Drop here\" : \"Browse Schema\"}\r\n              </Button>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <TextField\r\n                onChange={(event) => handleSelectSchemaOnChange(event)}\r\n                style={{ width: \"100%\", marginLeft: \"10px\" }}\r\n                fullWidth={false}\r\n                value={selectedSchemaName}\r\n                select\r\n                id={\"select-schema\"}\r\n                label={\"Select existing schema\"}\r\n                variant=\"outlined\"\r\n                SelectProps={{ native: true }}\r\n              >\r\n                {schemaNameList.map((content, index) => (\r\n                  <option key={index} value={content}>\r\n                    {content}\r\n                  </option>\r\n                ))}\r\n              </TextField>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <Button\r\n                onClick={() => createSchemaFromScratch()}\r\n                style={{\r\n                  width: \"100%\",\r\n                  marginLeft: \"10px\",\r\n                  marginRight: \"10px\",\r\n                }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                CREATE FROM SCRATCH\r\n              </Button>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  width: \"100%\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"right\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                {/* <Tooltip\r\n                  placement=\"top\"\r\n                  title=\"Wondering how to use this tool?\"\r\n                >\r\n                  <Button\r\n                    onClick={() => {\r\n                      window.open(\r\n                        \"https://github.com/csihda/adamant\",\r\n                        \"_blank\" // <- This is what makes it open in a new window.\r\n                      );\r\n                    }}\r\n                  >\r\n                    <HelpIcon />\r\n                  </Button>\r\n                  </Tooltip>*/}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        {!inputMode ? (\r\n          <div\r\n            style={{\r\n              paddingLeft: \"10px\",\r\n              display: \"flex\",\r\n              width: \"100%\",\r\n              textAlign: \"left\",\r\n            }}\r\n          >\r\n            {schemaValidity === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"left\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}. You can now render the form.\r\n                </div>\r\n                <Button\r\n                  style={{ marginRight: \"5px\" }}\r\n                  onClick={() => renderOnClick()}\r\n                  variant=\"outlined\"\r\n                >\r\n                  Render\r\n                </Button>\r\n                <Button\r\n                  style={{ marginRight: \"10px\" }}\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    paddingTop: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"red\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}\r\n                </div>\r\n              </>\r\n            )}\r\n            {createScratchMode === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  Create from scratch mode. You can now start editing.\r\n                </div>\r\n                <Button\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : null}\r\n          </div>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        {renderReady === true ? (\r\n          <FormRenderer\r\n            revertAllChanges={revertAllChanges}\r\n            schema={convertedSchema}\r\n            setSchemaSpecification={setSchemaSpecification}\r\n            originalSchema={schema}\r\n            edit={editMode}\r\n          />\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        <div\r\n          style={{\r\n            padding: \"10px 10px\",\r\n            display: \"flex\",\r\n            justifyContent: \"right\",\r\n          }}\r\n        >\r\n          {inputMode ? (\r\n            <div style={{ width: \"100%\", display: \"inline-block\" }}>\r\n              <Button\r\n                onClick={() => toEditMode()}\r\n                style={{ float: \"left\", marginRight: \"5px\" }}\r\n                variant=\"outlined\"\r\n              >\r\n                Back to Edit Mode\r\n              </Button>\r\n              <Button\r\n                onClick={() => handleOnClickProceedButton()}\r\n                style={{ float: \"right\" }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Proceed\r\n              </Button>\r\n              <Button\r\n                style={{ float: \"right\", marginRight: \"5px\" }}\r\n                id=\"demo-positioned-button\"\r\n                aria-controls={open ? \"demo-positioned-menu\" : undefined}\r\n                aria-haspopup=\"true\"\r\n                aria-expanded={open ? \"true\" : undefined}\r\n                onClick={handleClick}\r\n              >\r\n                <DownloadIcon /> Download Schema/Data\r\n              </Button>\r\n              <Menu\r\n                id=\"demo-positioned-menu\"\r\n                aria-labelledby=\"demo-positioned-button\"\r\n                anchorEl={anchorEl}\r\n                open={open}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n                transformOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n              >\r\n                <MenuItem onClick={handleDownloadJsonSchema}>\r\n                  Download JSON Schema\r\n                </MenuItem>\r\n                <MenuItem onClick={handleDownloadFormData}>\r\n                  Download JSON Data\r\n                </MenuItem>\r\n                <MenuItem onClick={handleDownloadDescriptionList}>\r\n                  Download Description List\r\n                </MenuItem>\r\n              </Menu>\r\n            </div>\r\n          ) : (\r\n            <Button\r\n              disabled={disable}\r\n              onClick={() => compileOnClick()}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Compile\r\n            </Button>\r\n          )}\r\n        </div>\r\n        <div style={{ padding: \"10px\", color: \"grey\" }}>ADAMANT v1.0.0</div>\r\n      </FormContext.Provider>\r\n      <CreateELabFTWExperimentDialog\r\n        setTags={setTags}\r\n        tags={tags}\r\n        setRetrievedTags={setRetrievedTags}\r\n        retrievedTags={retrievedTags}\r\n        setExperimentTitle={setExperimentTitle}\r\n        createExperimentELabFTW={createExperimentELabFTW}\r\n        setToken={setToken}\r\n        token={token}\r\n        setELabURL={setELabURL}\r\n        eLabURL={eLabURL}\r\n        setOpenCreateElabFTWExperimentDialog={\r\n          setOpenCreateElabFTWExperimentDialog\r\n        }\r\n        openCreateElabFTWExperimentDialog={openCreateElabFTWExperimentDialog}\r\n        getTagsELabFTW={getTagsELabFTW}\r\n      />\r\n      {openFormReviewDialog ? (\r\n        <FormReviewBeforeSubmit\r\n          onlineMode={onlineMode}\r\n          openFormReviewDialog={openFormReviewDialog}\r\n          setOpenFormReviewDialog={setOpenFormReviewDialog}\r\n          descriptionList={descriptionList}\r\n          setOpenFunctions={{\r\n            setOpenCreateElabFTWExperimentDialog,\r\n            setOpenJobRequestDialog,\r\n          }}\r\n          submitFunctions={{ submitJobRequest }}\r\n          submitText={submitText}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdamantMain;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport AdamantMain from \"./pages/AdamantMain\";\r\nimport \"cors\";\r\nimport packageJson from \"../package.json\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nexport default function App() {\r\n\r\n  // check if adamant endpoint exists in the homepage\r\n  const homepage = packageJson[\"homepage\"];\r\n  const adamantEndpoint = homepage.includes(\"/adamant\")\r\n\r\n  if (adamantEndpoint) {\r\n    console.log(\"/adamant endpoint is detected\")\r\n    return (\r\n      /** Use this for if homepage has /adamant endpoint, this is only for deploying on github-page */\r\n      <>\r\n        <div className=\"the_app\">\r\n          <Switch>\r\n            <Redirect exact from=\"/\" to=\"/adamant\" />\r\n            <Route exact path=\"/adamant\" component={AdamantMain}></Route>\r\n          </Switch>\r\n        </div>\r\n        <ToastContainer\r\n          position=\"top-right\"\r\n          autoClose={5000}\r\n          hideProgressBar={false}\r\n          closeOnClick={true}\r\n          pauseOnHover={true}\r\n          draggable={false}\r\n          progress={undefined} />\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <div className=\"the_app\">\r\n          <Switch>\r\n            <Route exact path=\"/\" component={AdamantMain}></Route>\r\n          </Switch>\r\n        </div>\r\n        <ToastContainer\r\n          position=\"top-right\"\r\n          autoClose={5000}\r\n          hideProgressBar={false}\r\n          closeOnClick={true}\r\n          pauseOnHover={true}\r\n          draggable={false}\r\n          progress={undefined} />\r\n      </>\r\n    );\r\n  };\r\n};","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n//import { HashRouter as Router } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\n// strict mode is disabled so that findDOMNode warning is suppressed\r\nReactDOM.render(\r\n  <Router>\r\n    <CssBaseline />\r\n    <App />\r\n  </Router>,\r\n  rootElement\r\n);\r\n\r\n\r\n//use this for strict mode, however it always throws the findDOMNode warning\r\n/*ReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <CssBaseline />\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n*/"],"sourceRoot":""}