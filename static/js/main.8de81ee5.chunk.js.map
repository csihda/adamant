{"version":3,"sources":["assets/json-file-svgrepo-com.svg","components/utils/getValue.js","components/utils/checkIfFieldIDExist.js","FormContext.js","components/utils/updateRequired.js","components/utils/object2array.js","components/utils/getFileIndex.js","components/utils/getValueInSchemaFullPath.js","components/EditElement.js","components/utils/deleteKey.js","components/elements/StringType.js","components/utils/getUnit.js","components/elements/NumberType.js","components/elements/ObjectType.js","components/elements/IntegerType.js","components/elements/BooleanType.js","components/elements/array_items/ItemIntegerType.js","components/elements/array_items/ItemNumberType.js","components/elements/array_items/ItemStringType.js","assets/file-icon.svg","components/elements/array_items/ItemObjectType.js","components/elements/ArrayItemRenderer.js","components/utils/generateUniqueID.js","components/elements/ArrayType.js","components/elements/AnyOfKeywordPlaceHolder.js","components/elements/FileUpload.js","components/ElementRenderer.js","components/EditSchemaHeader.js","components/JSONSchemaViewerDialog.js","components/utils/fillForm.js","components/FormRenderer.js","components/utils/array2object.js","components/utils/deleteKeySchema.js","components/utils/validateAgainstSchema.js","components/CreateELabFTWExperimentDialog.js","components/utils/prepareDataForDescList.js","components/utils/array2objectAnyOf.js","components/utils/fillValueWithEmptyString.js","components/utils/convData2FormData.js","components/FormReviewBeforeSubmit.js","components/utils/changeKeywords.js","assets/adamant-header-christmas2022.svg","components/utils/nicelySort.js","components/utils/getPaths.js","components/utils/getValueInSchema.js","components/utils/getPathURIsAndLabels.js","components/utils/preProcessB4DescList.js","components/utils/getTableCandidates.js","components/utils/table2DescListTable.js","components/utils/createDescriptionList.js","components/utils/createDescriptionListWithoutStyling.js","components/utils/createDescriptionListFromJSON.js","components/utils/validateSchemaAgainstSpecification.js","components/utils/checkIDexistence.js","pages/AdamantMain.jsx","App.js","index.js"],"names":["_g","_g2","_g3","_g4","_g5","_g6","_g7","_g8","_g9","_g10","_g11","_g12","_g13","_g14","_g15","_g16","getValue","json","path","undefined","jsonData","JSON","parse","stringify","split","tempValue","i","length","checkIfFieldIDExist","schema","fieldkey","result","forEach","element","value","newPath","pop","join","FormContext","createContext","updateRequired","selectedType","requiredChecked","field_key","convertedSchema","set","require","immediateValue","requiredArray","push","Set","includes","filter","item","object2array","propert","someArray","Object","keys","tempVariable2","tempVariable","item_","getFileIndex","files","fileMetadata","filetype","replace","filename","filesize","toString","getValueInSchemaFullPath","getAllFileMetadata","object","arr","arrai","key","useStyles","makeStyles","theme","root","width","input","fontSize","fontFamily","EditElement","editOrAdd","field_uri","enumerated","field_enumerate","field_required","UISchema","pathFormData","openDialog","setOpenDialog","defaultValue","field_label","useState","setSelectedType","title","setTitle","setFieldKey","fieldUri","setFieldUri","description","setDescription","defValue","setDefValue","useContext","loadedFiles","handleRemoveFile","updateParent","updateFormDataId","schemaSpecification","handleCheckIDexistence","handleDataDelete","setRequiredChecked","enumChecked","setEnumChecked","enumList","setEnumList","arrayItemType","setArrayItemType","arrayMinMaxItem","setArrayMinMaxItem","numberMinMaxValue","setNumberMinMaxValue","charMinMaxLengthValue","setCharMinMaxLengthValue","charMinMaxHelperText","setCharMinMaxHelperText","arrayMinMaxHelperText","setArrayMinMaxHelperText","numberMinMaxValueHelperText","setNumberMinMaxValueHelpertext","arrayUniqueItems","setArrayUniqueItems","subSchemaValidity","setSubSchemaValidity","convertedSubSchema","setConvertedSubSchema","subSchemaFilename","setSubSchemaFilename","activeSubSchemaButton","setActiveSubSchemaButton","setArrayItemDataType","itemSchemaTFrow","setItemSchemaTFrow","itemSchemaEdit","setItemSchemaEdit","itemSchemaData","setItemSchemaData","arrayItemTypeList","tempUISchema","classes","useEffect","notImplemented","handleUpdateSchemaOnClick","alert","error","console","log","properties","newConvertedSchema","newList","Array","isArray","fileIndex","cSchema","metmet","keywords","temporary","existed","parsed","map","x","parseFloat","parseInt","handleChangeUISchema","event","keyword","target","handleMinMaxArrayItem","field","Number","isNaN","handleMinMaxArrayItemOnBlur","style","color","handleMinMaxValue","minMax","handleMinMaxValueOnBlur","handleMinMaxCharLength","handleMinMaxCharLengthOnBlur","handleCancelEdit","handleValidateItemSchema","tooDeep","err","handleCheckBoxOnChange","prev","onDrop","useCallback","acceptedFile","schemaFile","reader","FileReader","onabort","onerror","onload","binaryStr","obj","copiedObj","readAsText","checkSubSchemaValidity","itemSchema","useDropzone","multiple","getRootProps","getInputProps","Dialog","open","DialogTitle","id","display","verticalAlign","alignSelf","IconButton","onClick","Divider","DialogContent","DialogActions","Button","disabled","autoFocus","DialogContentText","component","FormControl","FormLabel","TextField","margin","required","onChange","marginTop","variant","fullWidth","label","helperText","multiline","rows","paddingTop","paddingBottom","select","SelectProps","native","content","index","onFocus","onBlur","paddingLeft","paddingRight","FormControlLabel","control","Checkbox","checked","marginLeft","marginBottom","FormGroup","backgroundColor","height","size","itemType","handleChangeDefaultItemSchema","handleChangeItemSchemaTextField","InputProps","className","justifyContent","marginRight","tempID","tempID2","ID","handleEditItemSchema","deleteKey","elementValue","deleteIndex","at","splice","heading","typography","pxToRem","fontWeight","fontWeightRegular","StringType","adamant_field_error","adamant_error_description","minLength","maxLength","withinObject","dataInputItems","setDataInputItems","withinArray","field_index","edit","field_description","descriptionText","setDescriptionText","inputError","setInputError","handleConvertedDataInput","SEMSelectedDevice","setSEMSelectedDevice","fieldValue","setFieldValue","fieldEnumerate","setFieldEnumerate","handleOnChange","handleOnFocus","semOperatorDeviceList","e","handleDeleteElement","pathArr","indexOf","val","handleOnBlur","type","newPathFormData","items","from","dataInputItemVal","Tooltip","placement","onKeyDown","shiftKey","preventDefault","getUnit","addorn","match","NumberType","minimum","maximum","inputValue","setInputValue","unit","handleInputOnChange","inputValueVar","handleInputOnBlur","endAdornment","InputAdornment","position","tex","String","raw","onMouseEnter","Accordion","withStyles","border","borderBottom","boxShadow","expanded","MuiAccordion","AccordionSummary","minHeight","MuiAccordionSummary","ObjectType","pathSchema","object_is_required","field_properties","openDialogAddElement","setOpenDialogAddElement","expand","setExpand","padding","borderRadius","expandIcon","IconButtonProps","Typography","AccordionDetails","onDragEnd","destination","source","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","isDragDisabled","draggableId","draggableProps","dragHandleProps","fieldIndex","elementRequired","placeholder","defaultSchema","IntegerType","isInteger","BooleanType","handleInputWhenInvalid","alignItems","textAlign","FormHelperText","ItemIntegerType","oDataInputItems","oSetDataInputItems","arrayFieldKey","handleDeleteArrayItem","arr2","items2","prevIndex","ItemNumberType","ItemStringType","ItemObjectType","field_items","field_type","useIcon","setUseIcon","mimeType","setMimeType","fileName","setFileName","extension","setExtension","objectIndex","something","ext","slice","newVal","lineHeight","defaultStyles","whiteSpace","textOverflow","overflow","tempField","ArrayItemRenderer","enumerate","generateUID","firstPart","Math","random","secondPart","ArrayType","maxItems","minItems","uniqueItems","field_prefixItems","handleLoadedFiles","inputItems","setInputItems","currentFiles","setCurrentFiles","toast","warning","toastId","desiredValues","inputItemIndex","handleAddArrayItem","generateUniqueID","newFieldItems","currentInputItems","modPath","lastKey","reorderedItem2","AnyOfKeywordPlaceHolder","anyOf_list","FileUpload","contentEncoding","dataUrl","setDataUrl","renderingInProgress","setRenderingInProgress","mediaFileType","setMediaFileType","fileSize","setFileSize","renderableMediaFileTypes","fieldLabel","acceptedTypes","matches","submatch","replaceAll","getAcceptedTypes","valid","fileType","validateAcceptedFile","readAsDataURL","Box","sx","LinearProgress","alt","src","FileIcon","handleOnClickedClear","ElementRenderer","$id","anyOf","_excluded","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgJsonFileSvgrepoCom","_ref","svgRef","titleId","props","xmlns","xmlnsXlink","y","viewBox","enableBackground","xmlSpace","d","points","cx","cy","r","ForwardRef","changeKeywords","oldKey","desiredNewKey","EditSchemaHeader","schemaVersion","schemaID","_schemaVersion","_setSchemaVersion","_title","_setTitle","_description","_setDescription","_schemaID","_setSchemaID","setSchemaSpecification","emptyObject","emptyArray","f","JSONSchemaViewerDialog","openSchemaViewer","setOpenSchemaViewer","jsonschema","onClose","maxWidth","fillForm","schemaProp","data","FormRenderer","revertAllChanges","originalSchema","receivedData","setReceivedData","validity","file","message","checkFormDataValidity","newValue","$schema","schemaTitle","array2object","someObject","tempKey","tempElements","enumContent","deleteKeySchema","pathArray","tobeDeleted","createBetterValidationMessages","validate","errors","messages","schemaPath","substring","params","missingProperty","errorMessage","newMessage","s","messageLookUpTable","validateAgainstSchema","formData","Ajv04","schemaId","allErrors","compile","Ajv","ajv","CreateELabFTWExperimentDialog","getTagsELabFTW","eLabURL","setELabURL","setTags","setRetrievedTags","tags","retrievedTags","setExperimentTitle","setToken","token","setOpenCreateElabFTWExperimentDialog","openCreateElabFTWExperimentDialog","createExperimentELabFTW","Autocomplete","freeSolo","options","getOptionLabel","option","tag","values","renderInput","trim","prepareDataForDescList","convDataProp","array2objectAnyOf","fillValueWithEmptyString","jsonObjProp","convData2FormData","FormReviewBeforeSubmit","onlineMode","openFormReviewDialog","setOpenFormReviewDialog","descriptionList","setOpenFunctions","submitFunctions","submitText","anchorEl","setAnchorEl","Boolean","dangerouslySetInnerHTML","__html","float","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","submitJobRequest","nicelySort","sortedArr","loc","checkObjectExistance","newObj","getPaths","reduce","k","kk","p","getValueInSchema","getPathURIsAndLabels","uris","labels","thePath","pathPreProcess","processedArr","preProcessB4DescList","originalContent","path_key","path_label","URIsAndLabels","getTableCandidates","convProp","container","table2DescListTable","table","descListTable","keyTitleMapper","startsWith","listMimeTypes","find","createDescriptionList","descList","emptyString","titleDiv","some","createDescriptionListWithoutStyling","createDescriptionListFromJSON","cleanedJson","convertedProperties","footnote","styling","preProcessed","nicelySorted","tables","descListTables","descListHeading","validateSchemaAgainstSpecification","spec","checkIDexistence","createFormDataBlueprint","schemaProperties","newObject","removeEmpty","AdamantMain","disable","setDisable","schemaMessage","setSchemaMessage","schemaValidity","setSchemaValidity","setSchema","setSchemaIntermediate","renderReady","setRenderReady","editMode","setEditMode","schemaList","setSchemaList","schemaNameList","setSchemaNameList","selectedSchemaName","setSelectedSchemaName","setOriginalSchema","inputMode","setInputMode","setConvertedSchema","createScratchMode","setCreateScratchMode","setJsonData","setDescriptionList","setSchemaWithValues","experimentTitle","setOnlineMode","QPTDATLogo","HeaderImage","setHeaderImage","setOpenJobRequestDialog","jobRequestSchemas","setJobRequestSchemas","submitTextList","setSubmitTextList","setSubmitText","handleClose","setLoadedFiles","ajax","url","success","status","SchemaOne","SchemaTwo","SchemaThree","SchemaFour","SchemaFive","sch","oriSchema","findIndex","checkSchemaValidity","isDragActive","clearSchemaOnClick","updatedSchema","tempSchema","updatedSchema2","tempSchema2","setErrorStuffUponValidation","errorMessages","fieldKey","Provider","isFileAlreadyExist","oldFieldId","newFieldId","jData","convSchemaData","implementedFieldTypes","disablePortal","schemaName","selectedSchema","handleSelectSchemaOnChange","createSchemaFromScratch","toEditMode","convSch","cleaned","contentSchema","autoClose","handleOnClickProceedButton","sha256_hash","CryptoJS","SHA256","a","document","createElement","Blob","href","URL","createObjectURL","download","click","compileOnClick","async","dataType","javascript_data","eLabToken","body","responseText","App","packageJson","exact","to","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","rootElement","getElementById","ReactDOM","render","CssBaseline"],"mappings":"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","file":"static/js/main.8de81ee5.chunk.js","sourcesContent":["var _g, _g2, _g3, _g4, _g5, _g6, _g7, _g8, _g9, _g10, _g11, _g12, _g13, _g14, _g15, _g16;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgJsonFileSvgrepoCom(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Capa_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 58 58\",\n    style: {\n      enableBackground: \"new 0 0 58 58\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M50.949,12.187l-1.361-1.361l-9.504-9.505c-0.001-0.001-0.001-0.001-0.002-0.001l-0.77-0.771 C38.957,0.195,38.486,0,37.985,0H8.963C7.776,0,6.5,0.916,6.5,2.926V39v16.537V56c0,0.837,0.841,1.652,1.836,1.909 c0.051,0.014,0.1,0.033,0.152,0.043C8.644,57.983,8.803,58,8.963,58h40.074c0.16,0,0.319-0.017,0.475-0.048 c0.052-0.01,0.101-0.029,0.152-0.043C50.659,57.652,51.5,56.837,51.5,56v-0.463V39V13.978C51.5,13.211,51.407,12.644,50.949,12.187 z M39.5,3.565L47.935,12H39.5V3.565z M8.963,56c-0.071,0-0.135-0.025-0.198-0.049C8.61,55.877,8.5,55.721,8.5,55.537V41h41v14.537 c0,0.184-0.11,0.34-0.265,0.414C49.172,55.975,49.108,56,49.037,56H8.963z M8.5,39V2.926C8.5,2.709,8.533,2,8.963,2h28.595 C37.525,2.126,37.5,2.256,37.5,2.391V13.78c-0.532-0.48-1.229-0.78-2-0.78c-0.553,0-1,0.448-1,1s0.447,1,1,1c0.552,0,1,0.449,1,1v4 c0,1.2,0.542,2.266,1.382,3c-0.84,0.734-1.382,1.8-1.382,3v4c0,0.551-0.448,1-1,1c-0.553,0-1,0.448-1,1s0.447,1,1,1 c1.654,0,3-1.346,3-3v-4c0-1.103,0.897-2,2-2c0.553,0,1-0.448,1-1s-0.447-1-1-1c-1.103,0-2-0.897-2-2v-4 c0-0.771-0.301-1.468-0.78-2h11.389c0.135,0,0.265-0.025,0.391-0.058c0,0.015,0.001,0.021,0.001,0.036V39H8.5z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.354,51.43c-0.019,0.446-0.171,0.764-0.458,0.95s-0.672,0.28-1.155,0.28c-0.191,0-0.396-0.022-0.615-0.068 s-0.429-0.098-0.629-0.157s-0.385-0.123-0.554-0.191s-0.299-0.135-0.39-0.198l-0.697,1.107c0.183,0.137,0.405,0.26,0.67,0.369 s0.54,0.207,0.827,0.294s0.565,0.15,0.834,0.191s0.504,0.062,0.704,0.062c0.401,0,0.791-0.039,1.169-0.116 c0.378-0.077,0.713-0.214,1.005-0.41s0.524-0.456,0.697-0.779s0.26-0.723,0.26-1.196v-7.848h-1.668V51.43z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M25.083,49.064c-0.314-0.228-0.654-0.422-1.019-0.581s-0.702-0.323-1.012-0.492s-0.569-0.364-0.779-0.588 s-0.314-0.518-0.314-0.882c0-0.146,0.036-0.299,0.109-0.458s0.173-0.303,0.301-0.431s0.273-0.234,0.438-0.321 s0.337-0.139,0.52-0.157c0.328-0.027,0.597-0.032,0.807-0.014s0.378,0.05,0.506,0.096s0.226,0.091,0.294,0.137 s0.13,0.082,0.185,0.109c0.009-0.009,0.036-0.055,0.082-0.137s0.101-0.185,0.164-0.308s0.132-0.255,0.205-0.396 s0.137-0.271,0.191-0.39c-0.265-0.173-0.61-0.299-1.039-0.376s-0.853-0.116-1.271-0.116c-0.41,0-0.8,0.063-1.169,0.191 s-0.692,0.313-0.971,0.554s-0.499,0.535-0.663,0.882S20.4,46.13,20.4,46.576c0,0.492,0.104,0.902,0.314,1.23 s0.474,0.613,0.793,0.854s0.661,0.451,1.025,0.629s0.704,0.355,1.019,0.533s0.576,0.376,0.786,0.595s0.314,0.483,0.314,0.793 c0,0.511-0.148,0.896-0.444,1.155s-0.723,0.39-1.278,0.39c-0.183,0-0.378-0.019-0.588-0.055s-0.419-0.084-0.629-0.144 s-0.412-0.123-0.608-0.191s-0.357-0.139-0.485-0.212l-0.287,1.176c0.155,0.137,0.34,0.253,0.554,0.349s0.439,0.171,0.677,0.226 c0.237,0.055,0.472,0.094,0.704,0.116s0.458,0.034,0.677,0.034c0.511,0,0.966-0.077,1.367-0.232s0.738-0.362,1.012-0.622 s0.485-0.561,0.636-0.902s0.226-0.695,0.226-1.06c0-0.538-0.104-0.978-0.314-1.319S25.397,49.292,25.083,49.064z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.872,45.072c-0.378-0.429-0.82-0.754-1.326-0.978s-1.06-0.335-1.661-0.335s-1.155,0.111-1.661,0.335 s-0.948,0.549-1.326,0.978s-0.675,0.964-0.889,1.606s-0.321,1.388-0.321,2.235s0.107,1.595,0.321,2.242s0.511,1.185,0.889,1.613 s0.82,0.752,1.326,0.971s1.06,0.328,1.661,0.328s1.155-0.109,1.661-0.328s0.948-0.542,1.326-0.971s0.675-0.966,0.889-1.613 s0.321-1.395,0.321-2.242s-0.107-1.593-0.321-2.235S35.25,45.501,34.872,45.072z M34.195,50.698 c-0.137,0.487-0.326,0.882-0.567,1.183s-0.515,0.518-0.82,0.649s-0.627,0.198-0.964,0.198c-0.328,0-0.641-0.07-0.937-0.212 s-0.561-0.364-0.793-0.67s-0.415-0.699-0.547-1.183s-0.203-1.066-0.212-1.75c0.009-0.702,0.082-1.294,0.219-1.777 c0.137-0.483,0.326-0.877,0.567-1.183s0.515-0.521,0.82-0.649s0.627-0.191,0.964-0.191c0.328,0,0.641,0.068,0.937,0.205 s0.561,0.36,0.793,0.67s0.415,0.704,0.547,1.183s0.203,1.06,0.212,1.743C34.405,49.616,34.332,50.211,34.195,50.698z\"\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"44.012,50.869 40.061,43.924 38.393,43.924 38.393,54 40.061,54 40.061,47.055 44.012,54 45.68,54 45.68,43.924  44.012,43.924  \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20.5,20v-4c0-0.551,0.448-1,1-1c0.553,0,1-0.448,1-1s-0.447-1-1-1c-1.654,0-3,1.346-3,3v4c0,1.103-0.897,2-2,2 c-0.553,0-1,0.448-1,1s0.447,1,1,1c1.103,0,2,0.897,2,2v4c0,1.654,1.346,3,3,3c0.553,0,1-0.448,1-1s-0.447-1-1-1 c-0.552,0-1-0.449-1-1v-4c0-1.2-0.542-2.266-1.382-3C19.958,22.266,20.5,21.2,20.5,20z\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 28.5,\n    cy: 19.5,\n    r: 1.5\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M28.5,25c-0.553,0-1,0.448-1,1v3c0,0.552,0.447,1,1,1s1-0.448,1-1v-3C29.5,25.448,29.053,25,28.5,25z\"\n  }))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", null)), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", null)), _g4 || (_g4 = /*#__PURE__*/React.createElement(\"g\", null)), _g5 || (_g5 = /*#__PURE__*/React.createElement(\"g\", null)), _g6 || (_g6 = /*#__PURE__*/React.createElement(\"g\", null)), _g7 || (_g7 = /*#__PURE__*/React.createElement(\"g\", null)), _g8 || (_g8 = /*#__PURE__*/React.createElement(\"g\", null)), _g9 || (_g9 = /*#__PURE__*/React.createElement(\"g\", null)), _g10 || (_g10 = /*#__PURE__*/React.createElement(\"g\", null)), _g11 || (_g11 = /*#__PURE__*/React.createElement(\"g\", null)), _g12 || (_g12 = /*#__PURE__*/React.createElement(\"g\", null)), _g13 || (_g13 = /*#__PURE__*/React.createElement(\"g\", null)), _g14 || (_g14 = /*#__PURE__*/React.createElement(\"g\", null)), _g15 || (_g15 = /*#__PURE__*/React.createElement(\"g\", null)), _g16 || (_g16 = /*#__PURE__*/React.createElement(\"g\", null)));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgJsonFileSvgrepoCom);\nexport default __webpack_public_path__ + \"static/media/json-file-svgrepo-com.805d27de.svg\";\nexport { ForwardRef as ReactComponent };","// get json value given path\r\nconst getValue = (json, path) => {\r\n    if (path === undefined) {\r\n        return json[\"properties\"]\r\n    }\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n        if (tempValue === undefined){\r\n            return tempValue\r\n        }\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValue;","import getValue from \"./getValue\";\r\nconst checkIfFieldIDExist = (schema, path, fieldkey) => {\r\n    let result\r\n    if (path === undefined) {\r\n        let value = schema[\"properties\"]\r\n        value.forEach(element => {\r\n            if (element[\"fieldKey\"] === fieldkey) {\r\n                return result = true;\r\n            }\r\n        });\r\n    } else {\r\n\r\n        let value = getValue(schema, path)[\"properties\"]\r\n\r\n        if (value === undefined) {\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n            let value = getValue(schema, newPath)\r\n            value.forEach(element => {\r\n                if (element[\"fieldKey\"] === fieldkey) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        } else {\r\n            value.forEach(element => {\r\n                if (element[\"fieldKey\"] === fieldkey) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    if (result) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n\r\n}\r\n\r\nexport default checkIfFieldIDExist;","import { createContext } from 'react';\r\nexport const FormContext = createContext(null);","/*\r\nFunction to add or remove \"required\" flag for a specific field\r\n*/\r\n\r\n\r\n// get json value given path\r\nconst getValue = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n}\r\n\r\nconst updateRequired = ({ selectedType, path, requiredChecked, field_key, convertedSchema }) => {\r\n\r\n    /*if (selectedType === \"object\") {\r\n        requiredChecked = false\r\n    }*/\r\n\r\n    const set = require(\"set-value\");\r\n\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const immediateValue = getValue(convertedSchema, newPath)\r\n    if (immediateValue !== undefined) {\r\n        // check if there is required array\r\n        if (immediateValue[\"required\"] !== undefined) {\r\n            let requiredArray = immediateValue[\"required\"]\r\n            if (requiredChecked) {\r\n                requiredArray.push(field_key)\r\n                requiredArray = [...new Set(requiredArray)]\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            } else {\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_key)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_key)\r\n                    set(convertedSchema, newPath + \".required\", requiredArray)\r\n\r\n                    if (requiredArray.length === 0) {\r\n                        delete immediateValue[\"required\"]\r\n                        set(convertedSchema, newPath, immediateValue)\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_key}`]\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            }\r\n        }\r\n    } else {\r\n        // check if there is required array\r\n        if (convertedSchema[\"required\"] !== undefined) {\r\n            let requiredArray = convertedSchema[\"required\"]\r\n            if (requiredChecked) {\r\n                requiredArray.push(field_key)\r\n                requiredArray = [...new Set(requiredArray)]\r\n                convertedSchema[\"required\"] = requiredArray\r\n            } else {\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_key)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_key)\r\n                    convertedSchema[\"required\"] = requiredArray\r\n                    if (requiredArray.length === 0) {\r\n                        delete convertedSchema[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_key}`]\r\n                convertedSchema[\"required\"] = requiredArray\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return convertedSchema;\r\n}\r\n\r\nexport default updateRequired;","// convert json schema properties to an iterable array\r\nconst object2array = (propert) => {\r\n    let someArray = [];\r\n    Object.keys(propert).forEach((item) => {\r\n        var tempVariable = {};\r\n        var tempVariable2;\r\n        tempVariable2 = propert[item];\r\n        tempVariable[\"fieldKey\"] = item;\r\n        Object.keys(tempVariable2).forEach((item_) => {\r\n            // make enum indexable by changing the key to \"enumerate\"\r\n            if (item_ === \"enum\") {\r\n                tempVariable[\"enumerate\"] = tempVariable2[item_];\r\n            }\r\n            if (item_ === \"default\") {\r\n                tempVariable[\"defaultValue\"] = tempVariable2[item_];\r\n            }\r\n            tempVariable[item_] = tempVariable2[item_];\r\n            if (item_ === \"properties\") {\r\n                // recursive on action to access nested properties\r\n                tempVariable[item_] = object2array(tempVariable2[item_]);\r\n            }\r\n        });\r\n        someArray.push(tempVariable);\r\n    });\r\n\r\n    return someArray;\r\n};\r\n\r\nexport default object2array;","const getFileIndex = (files, fileMetadata) => {\r\n    fileMetadata = fileMetadata.split(\";\")\r\n    // alert(fileMetadata)\r\n    const filetype = fileMetadata[0].replace(\"fileupload:\", \"\")\r\n    const filename = fileMetadata[1]\r\n    const filesize = fileMetadata[2]\r\n    // console.log(filetype, filename, filesize)\r\n    for (let i = 0; i < files.length; i++) {\r\n        if (files[i][\"name\"] === filename && files[i][\"type\"] === filetype && files[i][\"size\"].toString() === filesize) {\r\n            return i\r\n        }\r\n    }\r\n    return -1\r\n}\r\n\r\nexport default getFileIndex","// get json value in schema given the full path\r\nconst getValueInSchemaFullPath = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    if (path[0] === \"\") {\r\n        return undefined;\r\n    }\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValueInSchemaFullPath;","import React, { useContext, useEffect, useState, useCallback} from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport checkIfFieldIDExist from './utils/checkIfFieldIDExist';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport { FormGroup } from '@material-ui/core';\r\nimport updateRequired from './utils/updateRequired';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport getValue from './utils/getValue';\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport object2array from './utils/object2array';\r\nimport convertedSchemaPropertiesSort from './utils/convertedSchemaPropertiesSort';\r\nimport getFileIndex from './utils/getFileIndex';\r\nimport getValueInSchemaFullPath from './utils/getValueInSchemaFullPath';\r\n\r\nconst getAllFileMetadata = (object, arr) => {\r\n    let arrai = arr\r\n    Object.keys(object).forEach((key) => {\r\n        if (typeof object[key] === \"object\") {\r\n            getAllFileMetadata(object[key], arrai)\r\n        }\r\n        if (typeof object[key] === \"string\") {\r\n            if (object[key].includes(\"fileupload:\") && object[key].split(\";\").length === 3) {\r\n                arr.push(object[key])\r\n            }\r\n        }\r\n    })\r\n    return arrai\r\n}\r\n\r\n/*const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n})); */\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    input: {\r\n        fontSize: \"12px\",\r\n        fontFamily: \"monospace\"\r\n    }\r\n}));\r\n\r\n\r\nconst EditElement = ({ editOrAdd, field_uri, enumerated, field_enumerate, field_required, field_key, UISchema, path, pathFormData, openDialog, setOpenDialog, defaultValue, field_label }) => {\r\n\r\n    const [selectedType, setSelectedType] = useState(UISchema !== undefined ? UISchema[\"type\"] : \"string\")\r\n    const [title, setTitle] = useState(UISchema !== undefined ? UISchema[\"title\"] : \"\")\r\n    const [fieldkey, setFieldKey] = useState(UISchema !== undefined ? UISchema[\"fieldKey\"] : \"\")\r\n    const [fieldUri, setFieldUri] = useState(UISchema !== undefined ? UISchema[\"$id\"] : \"\")\r\n    const [description, setDescription] = useState(UISchema !== undefined ? UISchema[\"description\"] : \"\")\r\n    const [defValue, setDefValue] = useState(defaultValue !== undefined ? defaultValue : \"\")\r\n    const { loadedFiles, handleRemoveFile, updateParent, convertedSchema, updateFormDataId, schemaSpecification, handleDataDelete, handleCheckIDexistence } = useContext(FormContext);\r\n    const [requiredChecked, setRequiredChecked] = useState(field_required === undefined ? false : field_required)\r\n    const [enumChecked, setEnumChecked] = useState(enumerated === undefined ? false : enumerated)\r\n    const [enumList, setEnumList] = useState(field_enumerate === undefined ? [] : field_enumerate);\r\n    const [arrayItemType, setArrayItemType] = useState(\"string\")\r\n    const [arrayMinMaxItem, setArrayMinMaxItem] = useState([\"None\", \"None\"])\r\n    const [numberMinMaxValue, setNumberMinMaxValue] = useState([\"None\", \"None\"])\r\n    const [charMinMaxLengthValue, setCharMinMaxLengthValue] = useState([\"None\", \"None\"])\r\n    const [charMinMaxHelperText, setCharMinMaxHelperText] = useState(\"Set the minimum and maximum length allowed for this string input.\")\r\n    const [arrayMinMaxHelperText, setArrayMinMaxHelperText] = useState(\"Set the minimum and maximum values of the items allowed for this array field.\")\r\n    const [numberMinMaxValueHelperText, setNumberMinMaxValueHelpertext] = useState(\"Set the minimum and maximum values of this field.\")\r\n    const [arrayUniqueItems, setArrayUniqueItems] = useState(UISchema !== undefined ? (UISchema[\"uniqueItems\"] !== undefined ? UISchema[\"uniqueItems\"] : false) : false)\r\n    const [subSchemaValidity, setSubSchemaValidity] = useState(false);\r\n    const [convertedSubSchema, setConvertedSubSchema] = useState({})\r\n    const [subSchemaFilename, setSubSchemaFilename] = useState(\"\")\r\n    const [activeSubSchemaButton, setActiveSubSchemaButton] = useState(\"\")\r\n    const [arrayItemDataType, setArrayItemDataType] = useState(\"\")\r\n    const [itemSchemaTFrow,setItemSchemaTFrow] = useState(false)\r\n    const [itemSchemaEdit, setItemSchemaEdit] = useState(false)\r\n    const [itemSchemaData, setItemSchemaData] = useState(\"\")\r\n\r\n    let arrayItemTypeList = [\"string\", \"number\", \"integer\", \"object\"]\r\n    if (UISchema !== undefined) {\r\n        if (UISchema[\"items\"] !== undefined) {\r\n            if (UISchema[\"items\"][\"type\"] === \"object\") {\r\n                arrayItemTypeList = [\"string\", \"number\", \"integer\", \"object\"]\r\n            }\r\n        }\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    useEffect(() => {\r\n        if (field_uri !== undefined) {\r\n            setFieldUri(field_uri)\r\n        }\r\n        else if (UISchema[\"$id\"] !== undefined) {\r\n            setFieldUri(UISchema[\"$id\"])\r\n        }\r\n        else {\r\n            setFieldUri(\"\")\r\n        }\r\n        // for array\r\n        if (UISchema !== undefined) {\r\n            if (UISchema[\"type\"] === \"array\") {\r\n                setArrayItemDataType(UISchema[\"items\"][\"type\"])\r\n                setArrayItemType(UISchema[\"items\"][\"type\"])\r\n                setItemSchemaData(JSON.stringify(UISchema[\"items\"], null, 2))\r\n                let value = [...arrayMinMaxItem]\r\n                if (UISchema[\"minItems\"] !== undefined) {\r\n                    value[0] = UISchema[\"minItems\"]\r\n                }\r\n                if (UISchema[\"maxItems\"] !== undefined) {\r\n                    value[1] = UISchema[\"maxItems\"]\r\n                }\r\n                if (UISchema[\"items\"] === undefined) {\r\n                    UISchema[\"items\"] = { \"type\": \"string\" }\r\n                    setArrayItemDataType(UISchema[\"items\"][\"type\"])\r\n                    setItemSchemaData(JSON.stringify({ \"type\": \"string\" }, null, 2))\r\n                }\r\n                if (arrayUniqueItems) {\r\n                    UISchema[\"uniqueItems\"] = arrayUniqueItems\r\n                }\r\n                else {\r\n                    delete UISchema[\"uniqueItems\"]\r\n                }\r\n                setArrayMinMaxItem(value)\r\n            }\r\n            else {\r\n                UISchema[\"items\"] = \"None\"\r\n            }\r\n        }\r\n\r\n        // for numeric types\r\n        if (UISchema !== undefined) {\r\n            if ([\"number\", \"integer\"].includes(UISchema[\"type\"])) {\r\n                let value = [...numberMinMaxValue]\r\n                if (UISchema[\"minimum\"] !== undefined) {\r\n                    value[0] = UISchema[\"minimum\"]\r\n                }\r\n                if (UISchema[\"maximum\"] !== undefined) {\r\n                    value[1] = UISchema[\"maximum\"]\r\n                }\r\n                setNumberMinMaxValue(value)\r\n            }\r\n        }\r\n\r\n        // for string type\r\n        if (UISchema !== undefined) {\r\n            if (UISchema[\"type\"] === \"string\") {\r\n                let value = [...charMinMaxLengthValue]\r\n                if (UISchema[\"minLength\"] !== undefined) {\r\n                    value[0] = UISchema[\"minLength\"]\r\n                }\r\n                if (UISchema[\"maxLength\"] !== undefined) {\r\n                    value[1] = UISchema[\"maxLength\"]\r\n                }\r\n                setCharMinMaxLengthValue(value)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n\r\n    let tempUISchema\r\n    if (editOrAdd !== undefined && editOrAdd === \"add\") {\r\n        UISchema = {\r\n            \"type\": \"string\",\r\n            \"fieldKey\": \"\",\r\n            \"title\": \"\",\r\n            \"description\": \"\",\r\n            \"items\": \"None\"\r\n        }\r\n        tempUISchema = {\r\n            \"type\": \"string\",\r\n            \"fieldKey\": \"\",\r\n            \"title\": \"\",\r\n            \"description\": \"\",\r\n            \"items\": \"None\"\r\n        }\r\n    } else {\r\n        tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n    }\r\n\r\n    let notImplemented = false;\r\n    if (UISchema !== undefined) {\r\n        if (![\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\", \"fileupload (string)\"].includes(UISchema[\"type\"])) {\r\n            notImplemented = true;\r\n        }\r\n    }\r\n\r\n\r\n    let datatypes = [\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\", \"fileupload (string)\"]\r\n\r\n\r\n    const handleOnChangeListField = (event) => {\r\n        setEnumList(event.target.value);\r\n    }\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        // check if field id/uri already exists or not\r\n        if (fieldUri !== tempUISchema[\"$id\"] && fieldUri !== tempUISchema[\"id\"]){\r\n            //alert(fieldUri+\",\"+tempUISchema[\"$id\"])\r\n            if (handleCheckIDexistence(fieldUri)) {\r\n                alert(\"A field element with the same Field ID/URI already exists. Either change the ID or remove it.\")\r\n                return\r\n            }\r\n        }\r\n\r\n        if (itemSchemaEdit) {\r\n            alert(\"You must save the array item schema first.\")\r\n            return\r\n        }\r\n        // do this if add\r\n        if (editOrAdd === \"add\") {\r\n            // update default value\r\n            if (defValue === undefined & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') !== \"\" & defaultValue !== undefined) {\r\n                tempUISchema[\"defaultValue\"] = (defValue === \"true\")\r\n            } else if (defValue.toString().replace(/\\s+/g, '') === \"\") {\r\n                delete tempUISchema[\"defaultValue\"]\r\n            }\r\n            else {\r\n                tempUISchema[\"defaultValue\"] = defValue\r\n            };\r\n\r\n            // check if fieldkey already exist\r\n            if (checkIfFieldIDExist(convertedSchema, path, fieldkey)) {\r\n                alert(\"Field Keyword already exists!\")\r\n                return\r\n            }\r\n\r\n            tempUISchema[\"fieldKey\"] = fieldkey;\r\n            if (fieldUri !== undefined) {\r\n                if (fieldUri.toString().replace(/\\s+/g, '') !== \"\") {\r\n                    tempUISchema[\"$id\"] = fieldUri\r\n                }\r\n            }\r\n            tempUISchema[\"type\"] = selectedType;\r\n            if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n            if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n            if (fieldkey === undefined) {\r\n                alert(\"Field Keyword must be defined!\")\r\n                return\r\n            }\r\n\r\n            if (typeof (fieldkey) === \"string\" & fieldkey.replace(/\\s+/g, '') === \"\") {\r\n                alert(\"Field Keyword must be defined!\")\r\n                return\r\n            }\r\n            if (tempUISchema[\"type\"] === \"object\" & subSchemaValidity) {\r\n                // delete json data for this path first\r\n                //handleDataDelete(pathFormData)\r\n\r\n                tempUISchema[\"properties\"] = convertedSubSchema[\"properties\"]\r\n                // check required\r\n                try {\r\n                    if (convertedSubSchema[\"required\"] !== undefined) {\r\n                        tempUISchema[\"required\"] = convertedSubSchema[\"required\"]\r\n                    } else {\r\n                        delete tempUISchema[\"required\"]\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n            if (tempUISchema[\"type\"] === \"object\" & !subSchemaValidity) {\r\n                // delete json data for this path first\r\n                //handleDataDelete(pathFormData)\r\n\r\n                tempUISchema[\"properties\"] = []\r\n                // check required\r\n                try {\r\n                    if (convertedSubSchema[\"required\"] !== undefined) {\r\n                        tempUISchema[\"required\"] = convertedSubSchema[\"required\"]\r\n                    } else {\r\n                        delete tempUISchema[\"required\"]\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n            /*\r\n            if (tempUISchema[\"type\"] === \"object\") {\r\n                if (subSchemaValidity) {\r\n                    tempUISchema[\"properties\"] = convertedSubSchema[\"properties\"]\r\n                } else {\r\n                    tempUISchema[\"properties\"] = []\r\n                }\r\n\r\n                // check required\r\n                try {\r\n                    tempUISchema[\"required\"] = convertedSubSchema[\"required\"]\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }*/\r\n            // more validation keywords for array\r\n            if (tempUISchema[\"type\"] === \"array\") {\r\n                // remove value\r\n                delete tempUISchema[\"value\"]\r\n\r\n                if (arrayItemType === \"string\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData) //{ \"type\": \"string\" }\r\n                }\r\n                if (arrayItemType === \"integer\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData) //{ \"type\": \"integer\" }\r\n                }\r\n                if (arrayItemType === \"number\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData) //{ \"type\": \"number\" }\r\n                }\r\n                if (arrayItemType === \"object\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData)\r\n                }\r\n                if (arrayMinMaxItem[0] !== \"None\") {\r\n                    tempUISchema[\"minItems\"] = arrayMinMaxItem[0]\r\n                } else {\r\n                    delete tempUISchema[\"minItems\"]\r\n                }\r\n                if (arrayMinMaxItem[1] !== \"None\") {\r\n                    tempUISchema[\"maxItems\"] = arrayMinMaxItem[1]\r\n                } else {\r\n                    delete delete tempUISchema[\"maxItems\"]\r\n                }\r\n\r\n                if (arrayUniqueItems) {\r\n                    tempUISchema[\"uniqueItems\"] = arrayUniqueItems\r\n                }\r\n                else {\r\n                    delete tempUISchema[\"uniqueItems\"]\r\n                }\r\n\r\n                delete tempUISchema[\"required\"]\r\n                if (UISchema[\"type\"] === \"object\") {\r\n                    delete tempUISchema[\"properties\"]\r\n                }\r\n            }\r\n            // more validation keywords for numeric types\r\n            if ([\"number\", \"integer\"].includes(tempUISchema[\"type\"])) {\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n                if (numberMinMaxValue[0] !== \"None\") {\r\n                    tempUISchema[\"minimum\"] = numberMinMaxValue[0]\r\n                } else {\r\n                    delete tempUISchema[\"minimum\"]\r\n                }\r\n                if (numberMinMaxValue[1] !== \"None\") {\r\n                    tempUISchema[\"maximum\"] = numberMinMaxValue[1]\r\n                } else {\r\n                    delete tempUISchema[\"maximum\"]\r\n                }\r\n            }\r\n            // more validation keywords for string\r\n            if (tempUISchema[\"type\"] === \"string\") {\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n                if (charMinMaxLengthValue[0] !== \"None\") {\r\n                    tempUISchema[\"minLength\"] = charMinMaxLengthValue[0]\r\n                } else {\r\n                    delete tempUISchema[\"minLength\"]\r\n                }\r\n                if (charMinMaxLengthValue[1] !== \"None\") {\r\n                    tempUISchema[\"maxLength\"] = charMinMaxLengthValue[1]\r\n                } else {\r\n                    delete tempUISchema[\"maxLength\"]\r\n                }\r\n            }\r\n\r\n            if (tempUISchema[\"type\"] !== \"string\") {\r\n                setEnumChecked(false);\r\n            }\r\n\r\n            // get rid of array-specific keywords if selectedType is not array\r\n            if (selectedType !== \"array\" & tempUISchema[\"items\"] !== undefined) {\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n            }\r\n\r\n            if (selectedType === \"fileupload (string)\" && schemaSpecification === \"http://json-schema.org/draft-04/schema#\") {\r\n                delete tempUISchema[\"contentEncoding\"]\r\n            }\r\n\r\n            // for fileupload\r\n            if (selectedType === \"fileupload (string)\") {\r\n                // set type to string\r\n                tempUISchema[\"type\"] = \"string\"\r\n                // set the encoding type\r\n                tempUISchema[\"contentEncoding\"] = \"base64\"\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"maxLength\"]\r\n                delete tempUISchema[\"minLength\"]\r\n                delete tempUISchema[\"enumerate\"]\r\n                delete tempUISchema[\"enum\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n\r\n                // set tempUISchema.value to emptystring\r\n                tempUISchema[\"value\"] = \"\"\r\n            }\r\n\r\n            if (path !== undefined) {\r\n                const set = require(\"set-value\");\r\n\r\n                let properties = getValue(convertedSchema, path)[\"properties\"]\r\n                properties.push(tempUISchema)\r\n                set(convertedSchema, path + \".properties\", properties)\r\n\r\n                // create a new path to the new element\r\n                path = path + \".properties.\" + (properties.length - 1).toString()\r\n                let field_key = fieldkey\r\n                // update the required value\r\n                const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_key, convertedSchema })\r\n                // update enum\r\n                if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                    let newList = enumList\r\n                    if (Array.isArray(newList)) {\r\n                        set(newConvertedSchema, path + \".enumerate\", newList)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                    }\r\n\r\n                }\r\n\r\n                // delete the file if it's not fileupload and if the file exists\r\n                if (UISchema[\"type\"] === \"fileupload (string)\") {\r\n                    if (UISchema[\"value\"] !== undefined) {\r\n                        if (typeof UISchema[\"value\"] === \"string\") {\r\n                            if (UISchema[\"value\"].includes(\"fileupload:\") && UISchema[\"value\"].split(\";\").length === 3) {\r\n                                let fileIndex = getFileIndex(loadedFiles, UISchema[\"value\"])\r\n                                handleRemoveFile(fileIndex)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // delete all files if the new type is not object\r\n                // remove the file in loadedFiles\r\n                if (UISchema[\"type\"] === \"object\" && tempUISchema[\"type\"] !== \"object\") {\r\n                    let cSchema = JSON.parse(JSON.stringify(convertedSchema))\r\n                    const set = require(\"set-value\");\r\n                    set(cSchema, path + \".properties\", UISchema[\"properties\"])\r\n                    let metmet = getValueInSchemaFullPath(cSchema, path + \".properties\")\r\n                    const fileMetadata = getAllFileMetadata(metmet, [])\r\n                    if (fileMetadata.length > 0) {\r\n                        for (let i = 0; i < fileMetadata.length; i++) {\r\n                            const fileIndex = getFileIndex(loadedFiles, fileMetadata[i])\r\n                            handleRemoveFile(fileIndex)\r\n                        }\r\n                    }\r\n                }\r\n                // delete all files if the new type is not array\r\n                if (UISchema[\"type\"] === \"array\" && tempUISchema[\"type\"] !== \"array\") {\r\n                    // remove the file in loadedFiles\r\n                    const fileMetadata = getValue(convertedSchema, path + `.value`)\r\n                    console.log(\"fileMetadata:\", fileMetadata)\r\n                    if (fileMetadata !== undefined) {\r\n                        let keywords = []\r\n                        if (Array.isArray(fileMetadata)) {\r\n                            if (fileMetadata.length > 0) {\r\n                                for (let i = 0; i < fileMetadata.length; i++) {\r\n                                    if (typeof fileMetadata[i] === \"object\") {\r\n                                        Object.keys(fileMetadata[i]).forEach((key) => {\r\n                                            if (typeof fileMetadata[i][key] === \"string\") {\r\n                                                if (fileMetadata[i][key].includes(\"fileupload:\") && fileMetadata[i][key].split(\";\").length === 3) {\r\n                                                    keywords.push(fileMetadata[i][key])\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (keywords.length > 0) {\r\n                            for (let i = 0; i < keywords.length; i++) {\r\n                                const fileIndex = getFileIndex(loadedFiles, keywords[i])\r\n                                handleRemoveFile(fileIndex)\r\n                            }\r\n                        }\r\n                    }\r\n                    // remove the value in general\r\n                    let temporary = getValue(convertedSchema, path)\r\n                    delete temporary[\"value\"]\r\n                    set(newConvertedSchema, path, temporary)\r\n                }\r\n                // update main component\r\n                updateParent(newConvertedSchema)\r\n                setOpenDialog(false)\r\n            } else {\r\n                const set = require(\"set-value\");\r\n                let properties = convertedSchema[\"properties\"]\r\n                properties.push(tempUISchema)\r\n                convertedSchema[\"properties\"] = properties\r\n\r\n                // create a new path to the new element\r\n                path = \"properties.\" + (properties.length - 1).toString()\r\n                let field_key = fieldkey\r\n                // update the required value\r\n                let newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_key, convertedSchema })\r\n                // update enum\r\n                if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                    let newList = enumList\r\n                    if (Array.isArray(newList)) {\r\n                        set(newConvertedSchema, path + \".enumerate\", newList)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                // delete the file if it's not fileupload and if the file exists\r\n                if (UISchema[\"type\"] === \"fileupload (string)\") {\r\n                    if (UISchema[\"value\"] !== undefined) {\r\n                        if (typeof UISchema[\"value\"] === \"string\") {\r\n                            if (UISchema[\"value\"].includes(\"fileupload:\") && UISchema[\"value\"].split(\";\").length === 3) {\r\n                                let fileIndex = getFileIndex(loadedFiles, UISchema[\"value\"])\r\n                                handleRemoveFile(fileIndex)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // delete all files if the new type is not object\r\n                // remove the file in loadedFiles\r\n                if (UISchema[\"type\"] === \"object\" && tempUISchema[\"type\"] !== \"object\") {\r\n                    let cSchema = JSON.parse(JSON.stringify(convertedSchema))\r\n                    const set = require(\"set-value\");\r\n                    set(cSchema, path + \".properties\", UISchema[\"properties\"])\r\n                    let metmet = getValueInSchemaFullPath(cSchema, path + \".properties\")\r\n                    const fileMetadata = getAllFileMetadata(metmet, [])\r\n                    if (fileMetadata.length > 0) {\r\n                        for (let i = 0; i < fileMetadata.length; i++) {\r\n                            const fileIndex = getFileIndex(loadedFiles, fileMetadata[i])\r\n                            handleRemoveFile(fileIndex)\r\n                        }\r\n                    }\r\n                }\r\n                // delete all files if the new type is not array\r\n                if (UISchema[\"type\"] === \"array\" && tempUISchema[\"type\"] !== \"array\") {\r\n                    // remove the file in loadedFiles\r\n                    const fileMetadata = getValue(convertedSchema, path + `.value`)\r\n                    console.log(\"fileMetadata:\", fileMetadata)\r\n                    if (fileMetadata !== undefined) {\r\n                        let keywords = []\r\n                        if (Array.isArray(fileMetadata)) {\r\n                            if (fileMetadata.length > 0) {\r\n                                for (let i = 0; i < fileMetadata.length; i++) {\r\n                                    if (typeof fileMetadata[i] === \"object\") {\r\n                                        Object.keys(fileMetadata[i]).forEach((key) => {\r\n                                            if (typeof fileMetadata[i][key] === \"string\") {\r\n                                                if (fileMetadata[i][key].includes(\"fileupload:\") && fileMetadata[i][key].split(\";\").length === 3) {\r\n                                                    keywords.push(fileMetadata[i][key])\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (keywords.length > 0) {\r\n                            for (let i = 0; i < keywords.length; i++) {\r\n                                const fileIndex = getFileIndex(loadedFiles, keywords[i])\r\n                                handleRemoveFile(fileIndex)\r\n                            }\r\n                        }\r\n                    }\r\n                    // remove the value in general\r\n                    let temporary = getValue(convertedSchema, path)\r\n                    delete temporary[\"value\"]\r\n                    set(newConvertedSchema, path, temporary)\r\n                }\r\n                // update main component\r\n                updateParent(newConvertedSchema)\r\n                setOpenDialog(false)\r\n            }\r\n        }\r\n        else {\r\n            // and do this if edit\r\n\r\n            // update default value\r\n            if (defValue === undefined & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') !== \"\" & defaultValue !== undefined) {\r\n                tempUISchema[\"defaultValue\"] = (defValue === \"true\")\r\n            } else if (defValue.toString().replace(/\\s+/g, '') === \"\") {\r\n                delete tempUISchema[\"defaultValue\"]\r\n            }\r\n            else {\r\n                tempUISchema[\"defaultValue\"] = defValue\r\n            };\r\n\r\n            // check if fieldkey already exist\r\n            let existed = checkIfFieldIDExist(convertedSchema, path, fieldkey)\r\n            if (UISchema[\"fieldKey\"] !== fieldkey) {\r\n                if (existed) {\r\n                    alert(\"Field Keyword already exists!\")\r\n                    return\r\n                }\r\n            }\r\n\r\n            if (fieldkey === undefined | fieldkey.replace(/\\s+/g, '') === \"\") {\r\n                alert(\"Field Keyword must be defined!\")\r\n                return\r\n            }\r\n\r\n            tempUISchema[\"fieldKey\"] = fieldkey;\r\n            if (fieldUri !== undefined) {\r\n                if (fieldUri.toString().replace(/\\s+/g, '') !== \"\") {\r\n                    tempUISchema[\"$id\"] = fieldUri\r\n                }\r\n            }\r\n            tempUISchema[\"type\"] = selectedType;\r\n            if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n            if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n            if (tempUISchema[\"type\"] === \"object\" & tempUISchema[\"properties\"] === undefined) {\r\n                // delete json data for this path first\r\n                //handleDataDelete(pathFormData)\r\n                tempUISchema[\"properties\"] = []\r\n            }\r\n            if (tempUISchema[\"type\"] === \"object\" & subSchemaValidity) {\r\n                // delete json data for this path first\r\n                //handleDataDelete(pathFormData)\r\n                tempUISchema[\"properties\"] = convertedSubSchema[\"properties\"]\r\n                // check required\r\n                try {\r\n                    if (convertedSubSchema[\"required\"] !== undefined) {\r\n                        tempUISchema[\"required\"] = convertedSubSchema[\"required\"]\r\n                    } else {\r\n                        delete tempUISchema[\"required\"]\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n\r\n            // more validation keywords for array\r\n            if (tempUISchema[\"type\"] === \"array\") {\r\n                // remove value\r\n                delete tempUISchema[\"value\"]\r\n\r\n                if (arrayItemType === \"string\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData) //{ \"type\": \"string\" }\r\n                }\r\n                if (arrayItemType === \"integer\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData) //{ \"type\": \"integer\" }\r\n                }\r\n                if (arrayItemType === \"number\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData) //{ \"type\": \"number\" }\r\n                }\r\n                if (arrayItemType === \"object\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData)\r\n                }\r\n                if (arrayMinMaxItem[0] !== \"None\") {\r\n                    tempUISchema[\"minItems\"] = arrayMinMaxItem[0]\r\n                } else {\r\n                    delete tempUISchema[\"minItems\"]\r\n                }\r\n                if (arrayMinMaxItem[1] !== \"None\") {\r\n                    tempUISchema[\"maxItems\"] = arrayMinMaxItem[1]\r\n                } else {\r\n                    delete delete tempUISchema[\"maxItems\"]\r\n                }\r\n\r\n                if (arrayUniqueItems) {\r\n                    tempUISchema[\"uniqueItems\"] = arrayUniqueItems\r\n                }\r\n                else {\r\n                    delete tempUISchema[\"uniqueItems\"]\r\n                }\r\n\r\n                delete tempUISchema[\"required\"]\r\n                if (UISchema[\"type\"] === \"object\") {\r\n                    delete tempUISchema[\"properties\"]\r\n                }\r\n            }\r\n            // more validation keywords for numeric types\r\n            if ([\"number\", \"integer\"].includes(tempUISchema[\"type\"])) {\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n                if (numberMinMaxValue[0] !== \"None\") {\r\n                    tempUISchema[\"minimum\"] = numberMinMaxValue[0]\r\n                } else {\r\n                    delete tempUISchema[\"minimum\"]\r\n                }\r\n                if (numberMinMaxValue[1] !== \"None\") {\r\n                    tempUISchema[\"maximum\"] = numberMinMaxValue[1]\r\n                } else {\r\n                    delete delete tempUISchema[\"maximum\"]\r\n                }\r\n            }\r\n            // more validation keywords for string\r\n            if (tempUISchema[\"type\"] === \"string\") {\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n                if (charMinMaxLengthValue[0] !== \"None\") {\r\n                    tempUISchema[\"minLength\"] = charMinMaxLengthValue[0]\r\n                } else {\r\n                    delete tempUISchema[\"minLength\"]\r\n                }\r\n                if (charMinMaxLengthValue[1] !== \"None\") {\r\n                    tempUISchema[\"maxLength\"] = charMinMaxLengthValue[1]\r\n                } else {\r\n                    delete tempUISchema[\"maxLength\"]\r\n                }\r\n            }\r\n\r\n\r\n            if (![\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"])) {\r\n                setEnumChecked(false);\r\n            }\r\n\r\n            // get rid of array-specific keywords if selectedType is not array\r\n            if (selectedType !== \"array\" & tempUISchema[\"items\"] !== undefined) {\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n            }\r\n\r\n            // for fileupload\r\n            if (selectedType === \"fileupload (string)\") {\r\n                // set type to string\r\n                tempUISchema[\"type\"] = \"string\"\r\n                // set the encoding type\r\n                tempUISchema[\"contentEncoding\"] = \"base64\"\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"maxLength\"]\r\n                delete tempUISchema[\"minLength\"]\r\n                delete tempUISchema[\"enumerate\"]\r\n                delete tempUISchema[\"enum\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n\r\n                // set tempUISchema.value to emptystring\r\n                tempUISchema[\"value\"] = \"\"\r\n            }\r\n\r\n            const set = require(\"set-value\");\r\n            set(convertedSchema, path, tempUISchema)\r\n            // update the required value\r\n            let newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_key, convertedSchema })\r\n            //console.log(\"stuff:\", newConvertedSchema)\r\n            // update enum\r\n            if ([\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"]) & enumChecked) {\r\n                let newList = enumList\r\n\r\n                // use if else statements instead of switch case statements for this case\r\n                if (tempUISchema[\"type\"] === \"string\") {\r\n                    if (Array.isArray(newList)) {\r\n                        set(newConvertedSchema, path + \".enumerate\", newList)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return item.toString();\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                        //console.log(\"stuff:\", newConvertedSchema)\r\n                    }\r\n                } else if (tempUISchema[\"type\"] === \"number\") {\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    }\r\n                } else if (tempUISchema[\"type\"] === \"integer\") {\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    }\r\n                }\r\n            }\r\n\r\n            //let sorted = convertedSchemaPropertiesSort(JSON.parse(JSON.stringify(newConvertedSchema[\"properties\"])))\r\n            //console.log(sorted)\r\n            //newConvertedSchema[\"properties\"] = sorted\r\n\r\n            // delete the file if it's not fileupload and if the file exists\r\n            if (UISchema[\"type\"] === \"fileupload (string)\") {\r\n                if (UISchema[\"value\"] !== undefined) {\r\n                    if (typeof UISchema[\"value\"] === \"string\") {\r\n                        if (UISchema[\"value\"].includes(\"fileupload:\") && UISchema[\"value\"].split(\";\").length === 3) {\r\n                            let fileIndex = getFileIndex(loadedFiles, UISchema[\"value\"])\r\n                            handleRemoveFile(fileIndex)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // delete all files if the new type is not object\r\n            // remove the file in loadedFiles\r\n            if (UISchema[\"type\"] === \"object\" && tempUISchema[\"type\"] !== \"object\") {\r\n                let cSchema = JSON.parse(JSON.stringify(convertedSchema))\r\n                const set = require(\"set-value\");\r\n                set(cSchema, path + \".properties\", UISchema[\"properties\"])\r\n                let metmet = getValueInSchemaFullPath(cSchema, path + \".properties\")\r\n                const fileMetadata = getAllFileMetadata(metmet, [])\r\n                if (fileMetadata.length > 0) {\r\n                    for (let i = 0; i < fileMetadata.length; i++) {\r\n                        const fileIndex = getFileIndex(loadedFiles, fileMetadata[i])\r\n                        handleRemoveFile(fileIndex)\r\n                    }\r\n                }\r\n            }\r\n            // delete all files if the new type is not array\r\n            if (UISchema[\"type\"] === \"array\" && tempUISchema[\"type\"] !== \"array\") {\r\n                // remove the file in loadedFiles\r\n                const fileMetadata = getValue(convertedSchema, path + `.value`)\r\n                console.log(\"fileMetadata:\", fileMetadata)\r\n                if (fileMetadata !== undefined) {\r\n                    let keywords = []\r\n                    if (Array.isArray(fileMetadata)) {\r\n                        if (fileMetadata.length > 0) {\r\n                            for (let i = 0; i < fileMetadata.length; i++) {\r\n                                if (typeof fileMetadata[i] === \"object\") {\r\n                                    Object.keys(fileMetadata[i]).forEach((key) => {\r\n                                        if (typeof fileMetadata[i][key] === \"string\") {\r\n                                            if (fileMetadata[i][key].includes(\"fileupload:\") && fileMetadata[i][key].split(\";\").length === 3) {\r\n                                                keywords.push(fileMetadata[i][key])\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (keywords.length > 0) {\r\n                        for (let i = 0; i < keywords.length; i++) {\r\n                            const fileIndex = getFileIndex(loadedFiles, keywords[i])\r\n                            handleRemoveFile(fileIndex)\r\n                        }\r\n                    }\r\n                }\r\n                // remove the value in general\r\n                let temporary =  getValue(convertedSchema, path)\r\n                delete temporary[\"value\"]\r\n                set(newConvertedSchema, path, temporary)\r\n            }\r\n            // update main component\r\n            updateParent(newConvertedSchema)\r\n            setOpenDialog(false)\r\n\r\n            //* update form data if fieldkey change\r\n            // update pathFormData with new fieldkey\r\n            updateFormDataId(field_key, fieldkey, pathFormData, defaultValue)\r\n        }\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n        if (itemSchemaEdit && keyword === \"type\") {\r\n            alert(\"You must save the array item schema edit first.\")\r\n            return\r\n        } else {\r\n        switch (keyword) {\r\n            case 'type':\r\n                if (event.target.value === \"array\") {\r\n                    if (UISchema[\"type\"] !== \"array\") {\r\n                        setItemSchemaData(JSON.stringify({ \"type\": \"string\" }, null, 2))\r\n                    }\r\n                }\r\n                return setSelectedType(event.target.value)\r\n            case 'title':\r\n                return setTitle(event.target.value)\r\n            case 'description':\r\n                return setDescription(event.target.value)\r\n            case 'fieldKey':\r\n                return setFieldKey(event.target.value.replace(/ /g, \"_\"))\r\n            case 'defaultValue':\r\n                return setDefValue(event.target.value)\r\n            case '$id':\r\n                //handleCheckIDexistence(event.target.value)\r\n                return setFieldUri(event.target.value)\r\n            case 'id':\r\n                //handleCheckIDexistence(event.target.value)\r\n                return setFieldUri(event.target.value)\r\n            case 'itemType':\r\n                return setArrayItemType(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n        }\r\n    }\r\n\r\n\r\n    // handleChange MinMax array item\r\n    const handleMinMaxArrayItem = (event, field) => {\r\n        let value = [...arrayMinMaxItem]\r\n        switch (field) {\r\n            case 'max':\r\n                value[1] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                value[1] = (value[1] === 0 ? \"None\" : value[1])\r\n                //console.log(value)\r\n                return setArrayMinMaxItem(value);\r\n            case 'min':\r\n                value[0] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                return setArrayMinMaxItem(value);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    const handleMinMaxArrayItemOnBlur = (event, keyword) => {\r\n        let value = [...arrayMinMaxItem]\r\n\r\n        // early exit\r\n        if (value[0] === \"None\" && value[1] === \"None\") {\r\n            console.log(\"Doing nothing because the inputs have not changed.\")\r\n            return\r\n        }\r\n        switch (keyword) {\r\n            case 'min':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setArrayMinMaxHelperText(<div style={{ color: \"#f44336\" }}>minItems value cannot be greater or equal than maxItems value. minItems value was changed to 'None'.</div>)\r\n                    value[0] = \"None\"\r\n                    return setArrayMinMaxItem(value);\r\n                } else {\r\n                    setArrayMinMaxHelperText(\"Set the minimum and maximum values of the items allowed for this array field.\")\r\n                    return setArrayMinMaxItem(value);\r\n                }\r\n            case 'max':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setArrayMinMaxHelperText(<div style={{ color: \"#f44336\" }}>minItems value cannot be greater or equal than maxItems value. maxItems value was changed to 'None'.</div>)\r\n                    value[1] = \"None\"\r\n                    return setArrayMinMaxItem(value);\r\n                } else {\r\n                    setArrayMinMaxHelperText(\"Set the minimum and maximum values of the items allowed for this array field.\")\r\n                    return setArrayMinMaxItem(value);\r\n                }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // handleChange MinMax array item\r\n    const handleMinMaxValue = (event, minMax) => {\r\n        let value = [...numberMinMaxValue]\r\n        switch (minMax) {\r\n            case 'max-integer':\r\n                if (event.target.value.replace(\"None\", \"\") === \"-\") {\r\n                    console.log(event.target.value)\r\n                    value[1] = event.target.value.replace(\"None\", \"\")\r\n                    return setNumberMinMaxValue(value)\r\n                } else {\r\n                    value[1] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            case 'min-integer':\r\n                if (event.target.value.replace(\"None\", \"\") === \"-\") {\r\n                    console.log(event.target.value)\r\n                    value[0] = event.target.value.replace(\"None\", \"\")\r\n                    return setNumberMinMaxValue(value)\r\n                } else {\r\n                    value[0] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            // for now number is the same as integer\r\n            case 'max-number':\r\n                if (event.target.value.replace(\"None\", \"\") === \"-\") {\r\n                    console.log(event.target.value)\r\n                    value[1] = event.target.value.replace(\"None\", \"\")\r\n                    return setNumberMinMaxValue(value)\r\n                } else {\r\n                    value[1] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            case 'min-number':\r\n                if (event.target.value.replace(\"None\", \"\") === \"-\") {\r\n                    console.log(event.target.value)\r\n                    value[0] = event.target.value.replace(\"None\", \"\")\r\n                    return setNumberMinMaxValue(value)\r\n                } else {\r\n                    value[0] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    const handleMinMaxValueOnBlur = (event, minMax) => {\r\n        let value = [...numberMinMaxValue]\r\n\r\n        // early exit\r\n        if (value[0] === \"None\" && value[1] === \"None\") {\r\n            console.log(\"Doing nothing because the inputs have not changed.\")\r\n            return\r\n        }\r\n\r\n        switch (minMax) {\r\n            case 'min-integer':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setNumberMinMaxValueHelpertext(<div style={{ color: \"#f44336\" }}>Min. value cannot be greater or equal than max. value. Min. value was changed to 'None'.</div>)\r\n                    value[0] = \"None\"\r\n                    return setNumberMinMaxValue(value);\r\n                } else {\r\n                    setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            case 'min-number':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setNumberMinMaxValueHelpertext(<div style={{ color: \"#f44336\" }}>Min. value cannot be greater or equal than max. value. Min. value was changed to 'None'.</div>)\r\n                    value[0] = \"None\"\r\n                    return setNumberMinMaxValue(value);\r\n                } else if (value.includes(\"None\")) {\r\n                    return setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                }\r\n                else {\r\n                    setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            case 'max-integer':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setNumberMinMaxValueHelpertext(<div style={{ color: \"#f44336\" }}>Min. value cannot be greater or equal than max. value.  Max. value was changed to 'None'.</div>)\r\n                    value[1] = \"None\"\r\n                    return setNumberMinMaxValue(value);\r\n                } else {\r\n                    setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            case 'max-number':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setNumberMinMaxValueHelpertext(<div style={{ color: \"#f44336\" }}>Min. value cannot be greater or equal than max. value. Max. value was changed to 'None'.</div>)\r\n                    value[1] = \"None\"\r\n                    return setNumberMinMaxValue(value);\r\n                } else if (value.includes(\"None\")) {\r\n                    return setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                }\r\n                else {\r\n                    setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // handleChange MinMax length for string\r\n    const handleMinMaxCharLength = (event, field) => {\r\n        let value = [...charMinMaxLengthValue]\r\n        switch (field) {\r\n            case 'maxLength':\r\n                value[1] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                value[1] = (value[1] === 0 ? \"None\" : value[1])\r\n                //console.log(value)\r\n                return setCharMinMaxLengthValue(value);\r\n            case 'minLength':\r\n                value[0] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                return setCharMinMaxLengthValue(value);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    const handleMinMaxCharLengthOnBlur = (event, keyword) => {\r\n        let value = [...charMinMaxLengthValue]\r\n\r\n        // early exit\r\n        if (value[0] === \"None\" && value[1] === \"None\") {\r\n            console.log(\"Doing nothing because the inputs have not changed.\")\r\n            return\r\n        }\r\n\r\n        switch (keyword) {\r\n            case 'minLength':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setCharMinMaxHelperText(<div style={{ color: \"#f44336\" }}>minLength value cannot be greater or equal than maxLength value.</div>)\r\n                    value[0] = \"None\"\r\n                    return setCharMinMaxLengthValue(value);\r\n                } else {\r\n                    setCharMinMaxHelperText(\"Set the minimum and maximum length allowed for this string input.\")\r\n                    return setCharMinMaxLengthValue(value);\r\n                }\r\n            case 'maxLength':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setCharMinMaxHelperText(<div style={{ color: \"#f44336\" }}>minLength value cannot be greater or equal than maxLength value.</div>)\r\n                    value[1] = \"None\"\r\n                    return setCharMinMaxLengthValue(value);\r\n                } else {\r\n                    setCharMinMaxHelperText(\"Set the minimum and maximum length allowed for this string input.\")\r\n                    return setCharMinMaxLengthValue(value);\r\n                }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        if (editOrAdd !== undefined && editOrAdd === \"add\") {\r\n            setOpenDialog(false)\r\n        }\r\n        else {\r\n            tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n            setOpenDialog(false)\r\n            setEnumList(field_enumerate)\r\n            setDefValue(defaultValue)\r\n            setSelectedType(UISchema[\"type\"])\r\n        }\r\n    }\r\n\r\n    // show / hide item schema textfield\r\n    const handleShowItemSchemaText = () => {\r\n        setItemSchemaTFrow(!itemSchemaTFrow)\r\n    }\r\n\r\n    // Edit item schema manually\r\n    const handleEditItemSchema = () => {\r\n        if (itemSchemaEdit) {\r\n            // validate and save the inputed schema\r\n            let schemaIsValid = handleValidateItemSchema()\r\n            if (schemaIsValid) {\r\n                setArrayItemType(JSON.parse(itemSchemaData)[\"type\"])\r\n                let tempID = JSON.parse(itemSchemaData)[\"id\"]\r\n                let tempID2 = JSON.parse(itemSchemaData)[\"$id\"]\r\n                let ID = undefined\r\n                if (tempID !== undefined){\r\n                    ID = tempID\r\n                }\r\n                if (tempID2 !== undefined){\r\n                    ID = tempID2\r\n                }\r\n\r\n                //alert(ID + \" | \" + UISchema[\"items\"][\"$id\"] + \" | \" + ID + \" | \" + UISchema[\"items\"][\"id\"])\r\n                if (ID == undefined) {\r\n                    setItemSchemaEdit(false)\r\n                } else if (ID === UISchema[\"items\"][\"$id\"] || ID === UISchema[\"items\"][\"id\"]) {\r\n                    //alert(ID + \" | \" + UISchema[\"items\"][\"$id\"] + \" | \" + ID + \" | \" + UISchema[\"items\"][\"id\"])\r\n                    setItemSchemaEdit(false)\r\n                } else if (ID !== undefined) {\r\n                    if (handleCheckIDexistence(ID)){\r\n                        alert(\"A field element with the same ID already exists. Either change the ID or remove it.\")\r\n                        setItemSchemaEdit(true)\r\n                        setItemSchemaTFrow(true)\r\n                    } else {\r\n                        setItemSchemaEdit(false)\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            setItemSchemaEdit(true)\r\n            setItemSchemaTFrow(true)\r\n        }\r\n    }\r\n\r\n    // handle change itemSchemaData\r\n    const handleChangeItemSchemaTextField = (event) =>{\r\n        //console.log(event.target.value)\r\n        setItemSchemaData(event.target.value)\r\n    }\r\n\r\n    const handleChangeDefaultItemSchema = (itemType) =>{\r\n        if (UISchema[\"items\"] !== \"None\") {\r\n            if (UISchema[\"items\"][\"type\"] !== itemType){\r\n                switch (itemType) {\r\n                    case 'integer':\r\n                        setItemSchemaData(JSON.stringify({ \"type\": \"integer\" }, null, 2))\r\n                        return\r\n                    case 'number':\r\n                        setItemSchemaData(JSON.stringify({ \"type\": \"number\" }, null, 2))\r\n                        return\r\n                    case 'string':\r\n                        setItemSchemaData(JSON.stringify({ \"type\": \"string\" }, null, 2))\r\n                        return\r\n                    case 'object':\r\n                        setItemSchemaEdit(true)\r\n                        setItemSchemaTFrow(true)\r\n                        setItemSchemaData(\"Browse or copy your item schema here then save.\")\r\n                        return\r\n                }\r\n            } else {\r\n                setItemSchemaData(JSON.stringify(UISchema[\"items\"], null, 2))\r\n            }\r\n        } else {\r\n            if (itemType !== \"object\") {\r\n                setItemSchemaData(JSON.stringify({ \"type\": itemType }, null,2))\r\n            } else {\r\n                setItemSchemaEdit(true)\r\n                setItemSchemaTFrow(true)\r\n                setItemSchemaData(\"Browse or copy your item schema here then save.\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle validate on click for Edit item schema \r\n    const handleValidateItemSchema = () => {\r\n        try {\r\n            // first check if the format is correct\r\n            let parsed = JSON.parse(itemSchemaData)\r\n            // then check if the schema is managable\r\n            /*\r\n            if (parsed[\"type\"] !== arrayItemDataType) {\r\n                alert(\"The inputted schema data type and selected item data type don't match.\")\r\n                return false\r\n            }*/\r\n            if (parsed[\"type\"] === \"object\") {\r\n                if (parsed[\"properties\"] === undefined){\r\n                    alert(\"Object type schema does not have properties.\")\r\n                    return false\r\n                }\r\n                if (typeof parsed[\"properties\"] !== 'object'){\r\n                    alert(\"Object type properties is not of object type\")\r\n                    return false\r\n                }\r\n\r\n                let tooDeep = false\r\n                Object.keys(parsed[\"properties\"]).forEach(key =>{\r\n                    if (parsed[\"properties\"][key][\"type\"] === \"object\"){\r\n                        alert(\"Schema is too deep. At the moment, this feature only supports a flat schema.\")\r\n                        tooDeep = true\r\n                    }\r\n                })\r\n\r\n                if (tooDeep){\r\n                    return false\r\n                } else {\r\n                    return true\r\n                }\r\n                                \r\n            } else {\r\n                return true\r\n            }\r\n        } catch(err) {\r\n            alert(\"Invalid item schema.\")\r\n            return false\r\n        }\r\n        \r\n    }\r\n\r\n    // handle change required check box\r\n    const handleCheckBoxOnChange = () => {\r\n        setRequiredChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleEnumBoxOnChange = () => {\r\n        setEnumChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change uniqueItems check box\r\n    const handleUniqueItemsCheckBoxOnChange = () => {\r\n        setArrayUniqueItems(prev => !prev)\r\n    }\r\n\r\n    // function to check if the file accepted is of json format and json schema valid\r\n    const checkSubSchemaValidity = (schemaFile) => {\r\n        // place holder\r\n        if (schemaFile[0][\"type\"] === \"application/json\") {\r\n            // read the file with FileReadr API\r\n            const reader = new FileReader();\r\n            reader.onabort = () => console.log(\"file reading was aborted\");\r\n            reader.onerror = () => console.log(\"file reading has failed\");\r\n            reader.onload = () => {\r\n                const binaryStr = reader.result;\r\n                const obj = JSON.parse(binaryStr);\r\n\r\n                // convert obj schema to iterable array properties\r\n                let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n                try {\r\n                    convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n                    console.log(\"Converted Schema:\", convertedSchema)\r\n                    setConvertedSubSchema(convertedSchema)\r\n                    // update states\r\n                    setSubSchemaValidity(true);\r\n                    setSubSchemaFilename(schemaFile[0][\"name\"])\r\n                    console.log(\"Subschema is valid\")\r\n\r\n                    const copiedObj = JSON.parse(JSON.stringify(obj))\r\n\r\n                    //alert(activeSubSchemaButton)\r\n                    if (activeSubSchemaButton === \"subschema\") {\r\n                        Object.keys(copiedObj).forEach(key => {\r\n                            if (key === \"id\") {\r\n                                //return setSelectedType(event.target.value)\r\n                                //setFieldUri(obj[key])\r\n                                //alert(key)\r\n                                //let event = {target: {value: copiedObj[key]}}\r\n                                //handleChangeUISchema(event, key)\r\n                                setFieldUri(copiedObj[key])\r\n                            }\r\n                            if (key === \"$id\") {\r\n                                //let event = {target: {value: copiedObj[key]}}\r\n                                //handleChangeUISchema(event, key)\r\n                                setFieldUri(copiedObj[key])\r\n                            }\r\n                            if (key === \"title\") {\r\n                                //setTitle(obj[key])\r\n                                let event = { target: { value: copiedObj[key] } }\r\n                                handleChangeUISchema(event, key)\r\n                            }\r\n                            if (key === \"description\") {\r\n                                //setDescription(obj[key])\r\n                                let event = { target: { value: copiedObj[key] } }\r\n                                handleChangeUISchema(event, key)\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                } catch (error) {\r\n                    console.log(error);\r\n                    alert(`${schemaFile[0][\"name\"]} is invalid!`)\r\n                    // update states\r\n                    setSubSchemaValidity(false);\r\n                    setSubSchemaFilename(schemaFile[0][\"name\"])\r\n                }\r\n            };\r\n            reader.readAsText(schemaFile[0]);\r\n        } else {\r\n            // update states\r\n            alert(`${schemaFile[0][\"name\"]} is invalid!`)\r\n            setSubSchemaValidity(false);\r\n            setSubSchemaFilename(schemaFile[0][\"name\"])\r\n        }\r\n    };\r\n\r\n\r\n    // browse or drag&drop schema file\r\n    const onDrop = useCallback(\r\n        (acceptedFile) => {\r\n            // process the schema, validation etc\r\n            if (selectedType !== \"array\") {\r\n                checkSubSchemaValidity(acceptedFile);\r\n            }\r\n            else {\r\n                if (acceptedFile[0][\"type\"] !== \"application/json\") {\r\n                    alert(\"Only json files please.\")\r\n                    return\r\n                }\r\n                // read the schema and send it to itemSchemaData\r\n                console.log(\"browse item schema for array type\")\r\n                const reader = new FileReader();\r\n                reader.onabort = () => console.log(\"file reading was aborted\");\r\n                reader.onerror = () => console.log(\"file reading has failed\");\r\n                reader.onload = () => {\r\n                    const binaryStr = reader.result;\r\n                    const obj = JSON.parse(binaryStr);\r\n                    let itemSchema = JSON.stringify(obj, null, 2);\r\n                    setItemSchemaData(itemSchema)\r\n                    setItemSchemaEdit(true)\r\n                    setItemSchemaTFrow(true)\r\n                }\r\n                reader.readAsText(acceptedFile[0]);\r\n            }\r\n            // store schema file in the state\r\n            // update states\r\n            // setRenderReady(false);\r\n            // setDisable(true);\r\n            // setCreateScratchMode(false);\r\n            // setJsonData({});\r\n            // setSelectedSchemaName(\"\");\r\n        },\r\n        [activeSubSchemaButton, selectedType]\r\n    );\r\n    // for upload subschema\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        multiple: false,\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {notImplemented ?\r\n                <Dialog\r\n                    open={openDialog}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">\r\n                        <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            {editOrAdd === \"add\" ? <AddIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} /> : <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />}\r\n                            <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                                {editOrAdd === \"add\" ? `Add element in \"${field_label}\"` : `Edit \"${tempUISchema[\"title\"]}\"`}\r\n                            </div>\r\n                            <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        We are sorry! Editing feature for the \"{UISchema[\"type\"]}\" type/keyword is not yet implemented.\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button disabled onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                            {editOrAdd === \"add\" ? \"Add\" : \"Save\"}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                :\r\n                <Dialog\r\n                    open={openDialog}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">\r\n                        <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            {editOrAdd === \"add\" ? <AddIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} /> : <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />}\r\n                            <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                                {editOrAdd === \"add\" ? `Add element in \"${field_label}\"` : `Edit \"${tempUISchema[\"title\"]}\"`}\r\n                            </div>\r\n                            <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                            <div>\r\n                                <FormControl component=\"widget-type\">\r\n                                    <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                                    <TextField margin=\"normal\" required onChange={event => handleChangeUISchema(event, \"fieldKey\")} style={{ marginTop: \"20px\" }} value={fieldkey} variant=\"outlined\" fullWidth={true} label={\"Field Keyword\"} helperText='A unique json keyword for this field. Usually short and has no spaces (use \"_\" instead). Spaces are replaced automatically with \"_\" upon saving.' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"$id\")} style={{ marginTop: \"10px\" }} value={fieldUri} variant=\"outlined\" fullWidth={true} label={\"Field ID/URI\"} helperText='ID or URI for this field if available.' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} value={title} variant=\"outlined\" fullWidth={true} label={\"Field Title\"} helperText='Label or title of the field. For a field that requires a unit, the unit can be placed within a square bracket, e,g., \"Chamber Pressure [Pa]\".' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} value={description} variant=\"outlined\" fullWidth={true} label={\"Field Description\"} multiline rows={3} helperText='A detailed description of the field, how the input should be formated, etc.' />\r\n                                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\" }}>\r\n                                        <FormControl component=\"validation-related\">\r\n                                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Validation Related:</FormLabel>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <TextField\r\n                                        margin=\"normal\"\r\n                                        helperText='Data type of the field input.'\r\n                                        onChange={event => handleChangeUISchema(event, \"type\")}\r\n                                        style={{ marginTop: \"10px\" }}\r\n                                        //defaultValue={tempUISchema[\"type\"]}\r\n                                        select\r\n                                        fullWidth={true}\r\n                                        id={field_key}\r\n                                        label={\"Field Data Type\"}\r\n                                        variant=\"outlined\"\r\n                                        value={selectedType}\r\n                                        SelectProps={{\r\n                                            native: true,\r\n                                        }}\r\n                                    >\r\n                                        {datatypes.map((content, index) => (\r\n                                            <option key={index} value={content}>\r\n                                                {content}\r\n                                            </option>\r\n                                        ))}\r\n                                    </TextField>\r\n                                    {[\"number\", \"integer\"].includes(selectedType) ?\r\n                                        <>\r\n                                            <div style={{ display: \"flex\" }}>\r\n                                                <TextField onFocus={() => setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")} value={numberMinMaxValue[0]} onBlur={(event) => { handleMinMaxValueOnBlur(event, \"min-\" + selectedType) }} onChange={event => handleMinMaxValue(event, \"min-\" + selectedType)} margin=\"normal\" fullWidth variant='outlined' label=\"Minimum Value\" />\r\n                                                <div style={{ paddingLeft: \"10px\" }}></div>\r\n                                                <TextField onFocus={() => setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")} value={numberMinMaxValue[1]} onBlur={(event) => { handleMinMaxValueOnBlur(event, \"max-\" + selectedType) }} onChange={event => handleMinMaxValue(event, \"max-\" + selectedType)} margin=\"normal\" fullWidth variant='outlined' label=\"Maximum Value\" />\r\n                                            </div>\r\n                                            <div style={{ color: \"gray\", fontSize: \"12px\", paddingLeft: \"11px\", paddingRight: \"11px\" }}>{numberMinMaxValueHelperText}</div>\r\n                                        </>\r\n                                        : null}\r\n                                    {selectedType === \"string\" ?\r\n                                        <>\r\n                                            <div style={{ display: \"flex\" }}>\r\n                                                <TextField onFocus={() => setCharMinMaxHelperText(\"Set the minimum and maximum length allowed for this string input.\")} value={charMinMaxLengthValue[0]} onBlur={(event) => { handleMinMaxCharLengthOnBlur(event, \"minLength\") }} onChange={event => handleMinMaxCharLength(event, \"minLength\")} margin=\"normal\" fullWidth variant='outlined' label=\"Minimum Character Length\" />\r\n                                                <div style={{ paddingLeft: \"10px\" }}></div>\r\n                                                <TextField onFocus={() => setCharMinMaxHelperText(\"Set the minimum and maximum length allowed for this string input.\")} value={charMinMaxLengthValue[1]} onBlur={(event) => { handleMinMaxCharLengthOnBlur(event, \"maxLength\") }} onChange={event => handleMinMaxCharLength(event, \"maxLength\")} margin=\"normal\" fullWidth variant='outlined' label=\"Maximum Character Length\" />\r\n                                            </div>\r\n                                            <div style={{ color: \"gray\", fontSize: \"12px\", paddingLeft: \"11px\", paddingRight: \"11px\" }}>{charMinMaxHelperText}</div>\r\n                                        </>\r\n                                        : null}\r\n                                    {[\"string\", \"integer\", \"number\"].includes(selectedType) ?\r\n                                        <>\r\n                                            <FormControlLabel control={<Checkbox onChange={() => handleEnumBoxOnChange()} checked={enumChecked} />} label=\"Enumerated. Provide a list of possible inputs for this field.\" />\r\n                                            <div style={{ marginLeft: \"32px\", marginTop: \"0px\", marginBottom: \"10px\" }}>\r\n                                                {enumChecked ? <TextField defaultValue={enumList !== undefined ? enumList : \"\"} onChange={handleOnChangeListField} variant=\"outlined\" fullWidth={true} label=\"Enumerate List\" multiline rows={2} helperText=\"A list of inputs separated by commas, e,g.: item 1, item 2, item 3. Make sure that the item data type matches the field input data type. Invalid items will be not saved.\" /> : <Divider />}\r\n                                            </div>\r\n                                        </> : null}\r\n                                </FormControl>\r\n                                <div style={{ paddingBottom: \"10px\" }}>\r\n                                    <FormGroup>\r\n                                        {selectedType === \"array\" ?\r\n                                            <>\r\n                                                <div style={{ display: \"flex\" }}>\r\n                                                    <div style={{ backgroundColor: \"#3f51b5\", paddingRight: \"2px\" }}></div>\r\n                                                    <div style={{ height: \"auto\", width: \"100%\", paddingLeft: \"5px\" }}>\r\n                                                <TextField\r\n                                                    size='small'\r\n                                                    margin=\"normal\"\r\n                                                    helperText={'Data type of the array items.'}\r\n                                                    onChange={event => { handleChangeUISchema(event, \"itemType\"); setArrayItemDataType(event.target.value); handleChangeDefaultItemSchema(event.target.value)}}\r\n                                                    style={{ marginTop: \"10px\" }}\r\n                                                    defaultValue={tempUISchema[\"items\"] !== undefined ? tempUISchema[\"items\"][\"type\"] : \"string\"}\r\n                                                    select\r\n                                                    fullWidth={true}\r\n                                                    id={field_key}\r\n                                                    label={\"Item Data Type\"}\r\n                                                    variant=\"outlined\"\r\n                                                    SelectProps={{\r\n                                                        native: true,\r\n                                                    }}\r\n                                                >\r\n                                                    {arrayItemTypeList.map((content, index) => (\r\n                                                        <option key={index} value={content}>\r\n                                                            {content}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </TextField>\r\n                                                        {itemSchemaTFrow ? <TextField fullWidth={true} disabled={!itemSchemaEdit} margin=\"normal\" label={\"Item Schema\"} onChange={(event) => handleChangeItemSchemaTextField(event)} variant=\"filled\" multiline rows={itemSchemaData.split(/\\r?\\n|\\r|\\n/g).length > 10 ? 20 : 2} InputProps={{ className: classes.input }}\r\n                                                            value={arrayItemDataType === UISchema[\"items\"][\"type\"] ? itemSchemaData : itemSchemaData}> </TextField> : null}\r\n                                                    <div style={{ display: \"flex\", width: \"100%\", justifyContent: \"center\" }}>\r\n                                                            <Button fullWidth={true} size=\"small\" color='primary' margin=\"normal\" variant=\"outlined\" style={{ marginRight: \"5px\", fontSize: \"9pt\" }} {...getRootProps()}> <input {...getInputProps()} />Browse Item Schema</Button>\r\n                                                            <Button fullWidth={true} size=\"small\" color={!itemSchemaEdit ? 'primary':'secondary'} margin=\"normal\" variant=\"outlined\" style={{ fontSize: \"9pt\" }} onClick={()=> handleEditItemSchema()}> {itemSchemaEdit ? \"Save\" : \"Edit\"} Item Schema</Button>\r\n                                                            <Button fullWidth={true} size=\"small\" color='primary' margin=\"normal\" variant=\"outlined\" style={{ marginLeft: \"5px\", fontSize: \"9pt\" }} onClick={() => handleShowItemSchemaText()}> {!itemSchemaTFrow ? \"Show\" : \"Hide\" } Item Schema </Button>\r\n                                                    </div>\r\n                                                    <div style={{ height:\"10px\", fontSize: \"9pt\", paddingLeft: \"13px\", paddingTop: \"5px\"}}>This is where you edit the item schema for this array type.</div>\r\n                                                </div>\r\n                                                </div>\r\n                                                <div style={{ display: \"flex\" }}>\r\n                                                    <TextField value={arrayMinMaxItem[0]} onChange={event => handleMinMaxArrayItem(event, \"min\")} onBlur={event => { handleMinMaxArrayItemOnBlur(event, \"min\") }} margin=\"normal\" fullWidth variant='outlined' label=\"Min. Array Items\" />\r\n                                                    <div style={{ paddingLeft: \"10px\" }}></div>\r\n                                                    <TextField value={arrayMinMaxItem[1]} onChange={event => handleMinMaxArrayItem(event, \"max\")} onBlur={event => { handleMinMaxArrayItemOnBlur(event, \"max\") }} margin=\"normal\" fullWidth variant='outlined' label=\"Max. Array items\" />\r\n                                                </div>\r\n                                                <div style={{ color: \"gray\", fontSize: \"12px\", paddingLeft: \"11px\", paddingRight: \"11px\", paddingBottom: \"10px\" }}>{arrayMinMaxHelperText}</div>\r\n                                                <FormControlLabel control={<Checkbox onChange={() => handleUniqueItemsCheckBoxOnChange()} checked={arrayUniqueItems} />} label=\"Input items must be unique.\" />\r\n                                                <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                            </>\r\n                                            : null}\r\n                                        <div style={{ display: \"flex\" }}>\r\n                                            <div style={{ backgroundColor: \"#3f51b5\", paddingRight: \"2px\" }}></div>\r\n                                            <div style={{ height: \"auto\", width: \"100%\", paddingLeft: \"5px\" }}>\r\n                                        {selectedType === \"object\" ? <>\r\n                                            <div style={{ display: \"flex\", width: \"100%\", justifyContent: \"center\" }}>\r\n                                                <div onClick={() => setActiveSubSchemaButton(\"subschema\")} style={{ paddingRight: \"5px\", width: \"100%\" }}><Button fullWidth={true} size=\"small\" color=\"primary\" variant=\"outlined\" {...getRootProps()}> <input {...getInputProps()} />Browse a subschema</Button></div>\r\n                                                <Button fullWidth={true} size=\"small\" color=\"primary\" variant=\"outlined\" {...getRootProps()}> <input {...getInputProps()} />Browse schema properties</Button>\r\n                                            </div>\r\n                                            {subSchemaValidity ? <div style={{ color: \"green\", fontSize: \"9pt\", paddingLeft: \"13px\", paddingTop: \"5px\", paddingBottom: \"5px\" }}>{subSchemaFilename} is valid.</div> : null}\r\n                                            <div style={{ fontSize: \"9pt\", paddingLeft: \"13px\", paddingTop: \"5px\", paddingBottom: \"5px\" }}>Browse and add a subschema or schema properties for this object by clicking on the corresponding button above.</div>\r\n                                        </> : null}\r\n                                        </div>\r\n                                        </div>\r\n                                        {selectedType === \"object\" ? <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" /> : null}\r\n                                        {selectedType !== \"object\" & selectedType !== \"array\" & selectedType !== \"boolean\" ?\r\n                                            <>\r\n                                                <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                                <div style={{ paddingTop: \"15px\", paddingBottom: \"0px\" }}>\r\n                                                    <FormControl component=\"misc-keywords\">\r\n                                                        <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Misc.:</FormLabel>\r\n                                                    </FormControl>\r\n                                                </div>\r\n                                                {selectedType === \"fileupload (string)\" ? null : <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"defaultValue\")} style={{ marginTop: \"10px\" }} defaultValue={defaultValue} variant=\"outlined\" fullWidth={true} label={\"Field Default Value\"} helperText=\"Initial value of the field.\" />}\r\n                                            </>\r\n                                            : null}\r\n                                        {selectedType === \"boolean\" ?\r\n                                            <>\r\n                                                <div style={{ paddingTop: \"15px\", paddingBottom: \"0px\" }}>\r\n                                                    <FormControl component=\"misc-keywords\">\r\n                                                        <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Misc.:</FormLabel>\r\n                                                    </FormControl>\r\n                                                </div>\r\n                                                <TextField\r\n                                                    margin='normal'\r\n                                                    onChange={event => handleChangeUISchema(event, \"defaultValue\")}\r\n                                                    style={{ marginTop: \"10px\" }}\r\n                                                    defaultValue={defaultValue !== undefined ? defaultValue : \"\"}\r\n                                                    select\r\n                                                    fullWidth={true}\r\n                                                    id={field_key}\r\n                                                    label={\"Boolean Field Default Value\"}\r\n                                                    variant=\"outlined\"\r\n                                                    SelectProps={{\r\n                                                        native: true,\r\n                                                    }}\r\n                                                >\r\n                                                    {[\"\", \"true\", \"false\"].map((content, index) => (\r\n                                                        <option key={index} value={content}>\r\n                                                            {content}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </TextField>\r\n                                            </>\r\n                                            : null}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                            {editOrAdd === \"add\" ? \"Add\" : \"Save\"}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditElement;","import getValue from \"./getValue\";\r\n\r\n// delete key and value given path\r\nconst deleteKey = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const elementValue = getValue(jsonData, newPath);\r\n\r\n    if (Array.isArray(elementValue)) {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        elementValue.splice(parseInt(deleteIndex), 1)\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    } else {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        delete elementValue[deleteIndex]\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    }\r\n\r\n};\r\n\r\nexport default deleteKey;","import React, { useContext, useEffect, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst StringType = ({ adamant_field_error, adamant_error_description, minLength, maxLength, withinObject, field_uri, dataInputItems, setDataInputItems, withinArray, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate, defaultValue, value }) => {\r\n\r\n\r\n    //const [descriptionText, setDescriptionText] = useState(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\");\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [inputError, setInputError] = useState(adamant_field_error !== undefined ? adamant_field_error : false);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput, SEMSelectedDevice, setSEMSelectedDevice } = useContext(FormContext);\r\n    const [fieldValue, setFieldValue] = useState(defaultValue !== undefined ? defaultValue : value !== undefined ? value : \"\")\r\n    const [fieldEnumerate, setFieldEnumerate] = useState()\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    const handleOnChange = (event) => {\r\n        setFieldValue(event.target.value)\r\n\r\n        // this is for SEM form only!\r\n        if (field_key === \"semDevice\") {\r\n            setSEMSelectedDevice(event.target.value)\r\n        }\r\n    }\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n    // set stuff back to normal onFocus\r\n    const handleOnFocus = () => {\r\n        if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n            set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n            set(convertedSchema, path + \".adamant_field_error\", false)\r\n            setInputError(false)\r\n            setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n        }\r\n    }\r\n\r\n    // for SEM only - currently hardcoded\r\n    useEffect(() => {\r\n        if (field_key === \"semOperator\") {\r\n            if (SEMSelectedDevice === \"\") {\r\n                setFieldEnumerate(field_enumerate)\r\n                setFieldValue(\"\")\r\n            } else {\r\n                try {\r\n                    let semOperatorDeviceList = require(\"../../assets/sem-operator-device-list.json\")\r\n                    setFieldValue(\"\")\r\n                    setFieldEnumerate(semOperatorDeviceList[SEMSelectedDevice])\r\n                }\r\n                catch (error) {\r\n                    console.log(error)\r\n                    setFieldValue(\"\")\r\n                    setFieldEnumerate(field_enumerate)\r\n                }\r\n            }\r\n        }\r\n\r\n    }, [SEMSelectedDevice, field_enumerate, field_key])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"string\",\r\n        \"minLength\": minLength,\r\n        \"maxLength\": maxLength,\r\n        \"value\": value,\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle on blur\r\n    const handleOnBlur = (event, pathFormData, type) => {\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_key] = event.target.value;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let value = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            // conv. schema data\r\n            handleConvertedDataInput(value, newPath + \".value\", \"string\")\r\n\r\n            // update field value\r\n            setFieldValue(event.target.value)\r\n        } else {\r\n            // conv. schema data\r\n            handleConvertedDataInput(event, path + \".value\", \"string\")\r\n            // update field value\r\n            setFieldValue(event.target.value)\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            if (val === \"\") {\r\n                setFieldValue(\"\")\r\n            } else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setFieldValue(val)\r\n                }\r\n                else {\r\n                    setDataInputItems(items);\r\n\r\n                    // store to the main form data\r\n                    let event = {\r\n                        \"target\": {\r\n                            \"value\":\r\n                                items\r\n                        }\r\n                    }\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(event, newPath + \".value\", \"string\")\r\n                    // update field value\r\n                    setFieldValue(val)\r\n                }\r\n            }\r\n        } else {\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        val\r\n                }\r\n            }\r\n\r\n            if (val === \"\") {\r\n                setFieldValue(val)\r\n            } else {\r\n                // conv. schema data\r\n                handleConvertedDataInput(event, path + \".value\", \"string\")\r\n                // update field value\r\n                setFieldValue(val)\r\n            }\r\n        }\r\n\r\n    }, [value])\r\n\r\n    if (fieldEnumerate !== undefined) {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    < TextField\r\n                        onFocus={() => { handleOnFocus() }}\r\n                        error={inputError}\r\n                        onBlur={(event) => handleOnBlur(event, pathFormData, \"string\")}\r\n                        onChange={event => handleOnChange(event)}\r\n                        required={required}\r\n                        select\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_key}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }\r\n                        }\r\n                        helperText={descriptionText}\r\n                        value={fieldValue === undefined ? defaultValue : fieldValue}\r\n                    >\r\n                        {\r\n                            fieldEnumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField >\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div >\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} enumerated={true} defaultValue={defaultValue} field_enumerate={fieldEnumerate} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        if (field_enumerate === undefined) {\r\n            return (\r\n                <>\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <TextField\r\n                            size='small'\r\n                            onFocus={() => { handleOnFocus() }}\r\n                            error={inputError}\r\n                            multiline\r\n                            onKeyDown={(e) => {\r\n                                if (e.key === \"Enter\" && !(e.shiftKey)) {\r\n                                    e.preventDefault();\r\n                                    //setFieldValue(e.target.value);\r\n                                }\r\n                            }}\r\n                            onBlur={(event) => handleOnBlur(event, pathFormData, \"string\")} required={required} helperText={descriptionText} onChange={(event) => { handleOnChange(event) }} value={fieldValue} fullWidth={true} className={classes.heading} id={field_key} label={field_label} variant=\"outlined\" />\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                                <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                    <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                                <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                    <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div>\r\n                    {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} defaultValue={defaultValue} enumerated={enumerated} field_enumerate={field_enumerate} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <>\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <TextField\r\n                            size='small'\r\n                            onFocus={() => { handleOnFocus() }}\r\n                            error={inputError}\r\n                            onBlur={(event) => handleOnBlur(event, pathFormData, \"string\")}\r\n                            onChange={event => handleOnChange(event)}\r\n                            required={required}\r\n                            select\r\n                            fullWidth={true}\r\n                            className={classes.heading}\r\n                            id={field_key}\r\n                            label={field_label}\r\n                            variant=\"outlined\"\r\n                            SelectProps={{\r\n                                native: true,\r\n                            }\r\n                            }\r\n                            helperText={descriptionText}\r\n                            value={fieldValue === undefined ? defaultValue : fieldValue}\r\n                        >\r\n                            {\r\n                                field_enumerate.map((content, index) => (\r\n                                    <option key={index} value={content}>\r\n                                        {content}\r\n                                    </option>\r\n                                ))\r\n                            }\r\n                        </TextField >\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                                <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                    <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                                <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                    <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div >\r\n                    {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} enumerated={enumerated} defaultValue={defaultValue} field_enumerate={field_enumerate} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n};\r\n\r\nexport default StringType;\r\n","const getUnit = (field_label) => {\r\n\r\n    if (field_label === undefined) {\r\n        return \"\"\r\n    }\r\n\r\n    let addorn = field_label.match(/[^[\\]]+(?=])/g)\r\n    if (addorn === null) {\r\n        return \"\"\r\n    } else {\r\n        return addorn\r\n    }\r\n}\r\n\r\nexport default getUnit;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { InputAdornment } from '@material-ui/core';\r\nimport getUnit from '../utils/getUnit';\r\nimport { MathComponent } from 'mathjax-react'\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst NumberType = ({ adamant_error_description, adamant_field_error, minimum, maximum, field_uri, value, dataInputItems, setDataInputItems, withinArray, withinObject, path, pathFormData, defaultValue, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue !== undefined & value === undefined ? defaultValue : value === undefined ? \"\" : value)//useState(defaultValue !== undefined ? defaultValue : value)\r\n    const [inputError, setInputError] = useState(false)\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"number\",\r\n        \"value\": value,\r\n        \"minimum\": minimum,\r\n        \"maximum\": maximum\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        setInputError(false)\r\n        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n\r\n        setInputError(false)\r\n        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_key] = value;\r\n                setDataInputItems(items);\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, newPath + \".value\", \"number\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // conv. schema data\r\n                handleConvertedDataInput(parseFloat(inputValue), path + \".value\", \"number\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"number\") {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setInputValue(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    // store to the main form data\r\n                    /*let event = {\r\n                        \"target\": {\r\n                            \"value\":\r\n                                items\r\n                        }\r\n                    }*/\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(val, newPath + \".value\", \"number\")\r\n                    // update field value\r\n                    setInputValue(val)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n\r\n            // check if input is of type number\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"number\") {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            } else {\r\n                // conv. schema data\r\n                handleConvertedDataInput(val, path + \".value\", \"number\")\r\n                // update field value\r\n                setInputValue(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField size='small' onFocus={() => {\r\n                        if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                            set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                            set(convertedSchema, path + \".adamant_field_error\", false)\r\n                            setInputError(false)\r\n                            setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                        }\r\n\r\n                        if (inputError === true) {\r\n                            setInputValue(\"\")\r\n                            // then delete the value the convertedSchema\r\n                            let value = { ...convertedSchema }\r\n                            if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                value = deleteKey(value, path + \".value\")\r\n                                updateParent(value)\r\n                            } else {\r\n                                let newPath = path.split(\".\")\r\n                                newPath.pop()\r\n                                newPath = newPath.join(\".\")\r\n                                value = deleteKey(value, newPath + \".value\")\r\n                                updateParent(value)\r\n                            }\r\n                        }\r\n                    }} error={inputError} onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} fullWidth={true} className={classes.heading} id={field_key} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                    }} helperText={descriptionText} />\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div onMouseEnter={() => {\r\n                    if (inputValue !== undefined & inputValue !== \"\") {\r\n                        setInputError(false)\r\n                        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                    }\r\n                }} style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField size='small'\r\n                        onFocus={() => {\r\n                            if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                                set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                                set(convertedSchema, path + \".adamant_field_error\", false)\r\n                                setInputError(false)\r\n                                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                            }\r\n                            if (inputError === true) {\r\n                                setInputValue(\"\")\r\n                                // then delete the value the convertedSchema\r\n                                let value = { ...convertedSchema }\r\n                                if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                    value = deleteKey(value, path + \".value\")\r\n                                    updateParent(value)\r\n                                } else {\r\n                                    let newPath = path.split(\".\")\r\n                                    newPath.pop()\r\n                                    newPath = newPath.join(\".\")\r\n                                    value = deleteKey(value, newPath + \".value\")\r\n                                    updateParent(value)\r\n                                }\r\n                            }\r\n                        }}\r\n                        error={inputError}\r\n                        helperText={descriptionText}\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_key}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default NumberType;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"../ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\n//import Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport getValue from \"../utils/getValue\";\r\nimport set from \"set-value\";\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport getValueInSchemaFullPath from \"../utils/getValueInSchemaFullPath\";\r\nimport getFileIndex from \"../utils/getFileIndex\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst Accordion = withStyles({\r\n    root: {\r\n        border: '1px solid rgba(232, 244, 253, 1)',\r\n        '&:not(:last-child)': {\r\n            borderBottom: 0,\r\n        },\r\n        boxShadow: \"none\",\r\n        '&:before': {\r\n            display: 'none',\r\n        },\r\n        '&$expanded': {\r\n            margin: 'auto',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordion);\r\n\r\nconst AccordionSummary = withStyles({\r\n    root: {\r\n        backgroundColor: 'rgba(232, 244, 253, 1)',\r\n        borderBottom: '1px solid rgba(0, 0, 0, .0)',\r\n        marginBottom: -1,\r\n        minHeight: 56,\r\n        '&$expanded': {\r\n            minHeight: 56,\r\n        },\r\n    },\r\n    content: {\r\n        '&$expanded': {\r\n            margin: '12px 0',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst ObjectType = ({ adamant_error_description, adamant_field_error, dataInputItems, setDataInputItems, withinArray, withinObject, field_uri, path, pathSchema, pathFormData, field_required, object_is_required, field_key, field_index, edit, field_label, field_description, field_properties }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [expand, setExpand] = useState(true)// set to \"true\" for normally open accordion\r\n    const { handleRemoveFile, loadedFiles, updateParent, convertedSchema, handleDataDelete } = useContext(FormContext);\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\")\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [inputError, setInputError] = useState(false)\r\n\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    var required\r\n    if (object_is_required === undefined) {\r\n        required = false;\r\n    } else if (object_is_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(field_properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        const set = require(\"set-value\");\r\n        let value = { ...convertedSchema }\r\n        set(convertedSchema, path + \".properties\", items)\r\n        updateParent(value);\r\n    }\r\n\r\n    const getAllFileMetadata = (object, arr) => {\r\n        let arrai = arr\r\n        Object.keys(object).forEach((key) => {\r\n            if (typeof object[key] === \"object\") {\r\n                getAllFileMetadata(object[key], arrai)\r\n            }\r\n            if (typeof object[key] === \"string\") {\r\n                if (object[key].includes(\"fileupload:\") && object[key].split(\";\").length === 3) {\r\n                    arr.push(object[key])\r\n                }\r\n            }\r\n        })\r\n        return arrai\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        // remove the file in loadedFiles\r\n        let metmet = getValueInSchemaFullPath(convertedSchema, path + \".properties\")\r\n        const fileMetadata = getAllFileMetadata(metmet, [])\r\n        if (fileMetadata.length > 0) {\r\n            for (let i = 0; i < fileMetadata.length; i++) {\r\n                const fileIndex = getFileIndex(loadedFiles, fileMetadata[i])\r\n                handleRemoveFile(fileIndex)\r\n            }\r\n        }\r\n\r\n\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"required\": field_required,\r\n        \"properties\": field_properties,\r\n        \"$id\": field_uri,\r\n        \"type\": \"object\"\r\n    }\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <div onClick={() => {\r\n            if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                set(convertedSchema, path + \".adamant_field_error\", false)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                updateParent(convertedSchema)\r\n            }\r\n        }}\r\n            style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} style={inputError ? {\r\n                border: `1px solid #ff7961`,\r\n                '&:not(:lastChild)': {\r\n                    borderBottom: 0,\r\n                }\r\n            } :\r\n                {\r\n                    border: `1px solid rgba(232, 244, 253, 1)`,\r\n                    '&:not(:lastChild)': {\r\n                        borderBottom: 0,\r\n                    }\r\n                }}>\r\n                <AccordionSummary\r\n                    style={inputError ? { backgroundColor: \"white\", borderRadius: \"4px\", borderBottom: '1px solid  #ff7961', height: \"auto\" } : { backgroundColor: \"rgba(232, 244, 253, 1)\", borderBottom: '1px solid  rgba(0, 0, 0, .0)', height: \"auto\" }}\r\n                    expandIcon={\r\n                        <Tooltip placement=\"top\" title={`Collapse/Expand this container`}>\r\n                            <ExpandMoreIcon />\r\n                        </Tooltip>}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography style={inputError ? { color: \"#ff7961\" } : {}} className={classes.heading}>{field_label + (required ? \"*\" : \"\")}</Typography>\r\n                            {expand ? <div style={inputError ? { color: \"#ff7961\" } : { color: \"gray\" }}>\r\n                                {descriptionText}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit \"${field_label}\"`}>\r\n                                <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove \"${field_label}\"`}>\r\n                                <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(field_properties).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={!edit} key={field_properties[item][\"fieldKey\"]} draggableId={field_properties[item][\"fieldKey\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <Tooltip placement=\"top\" title={`Drag & drop to adjust the order of this field`}>\r\n                                                                    <DragHandleIcon fontSize=\"small\" />\r\n                                                                </Tooltip>\r\n                                                            </div> : null}\r\n                                                            <ElementRenderer withinArray={withinArray} withinObject={withinObject} path={path + \".properties\"} pathSchema={pathSchema + \".properties\"} pathFormData={pathFormData} fieldkey={field_properties[item][\"fieldKey\"]} fieldIndex={item} elementRequired={field_required} edit={edit} field={field_properties[item]} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <Tooltip placement=\"top\" title={`Add a new field to \"${field_label}\"`}>\r\n                                            <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                                        </Tooltip>\r\n                                    </div> : null}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} field_label={field_label} /> : null}\r\n        {openDialogAddElement ? <EditElement editOrAdd={\"add\"} openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} path={path} defaultSchema={defaultSchema} field_label={field_label} /> : null}\r\n    </>);\r\n};\r\n\r\nexport default ObjectType;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport getUnit from '../utils/getUnit';\r\nimport { InputAdornment } from '@material-ui/core';\r\nimport { MathComponent } from 'mathjax-react'\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst IntegerType = ({ adamant_error_description, adamant_field_error, minimum, maximum, field_uri, value, dataInputItems, setDataInputItems, withinArray, withinObject, defaultValue, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue !== undefined & value === undefined ? defaultValue : value === undefined ? \"\" : value)// useState(defaultValue !== undefined ? defaultValue : value);\r\n    const [inputError, setInputError] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"integer\",\r\n        \"minimum\": minimum,\r\n        \"maximum\": maximum,\r\n        \"value\": value\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        setInputError(false)\r\n        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_key] = value;\r\n                setDataInputItems(items);\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, newPath + \".value\", \"integer\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // conv. schema data\r\n                handleConvertedDataInput(parseInt(inputValue), path + \".value\", \"integer\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (!Number.isInteger(val)) {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setInputValue(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    // store to the main form data\r\n                    /*let event = {\r\n                        \"target\": {\r\n                            \"value\":\r\n                                items\r\n                        }\r\n                    }*/\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(val, newPath + \".value\", \"integer\")\r\n                    // update field value\r\n                    setInputValue(val)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n\r\n            // check if input is of type number\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (!Number.isInteger(val)) {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            } else {\r\n                // conv. schema data\r\n                handleConvertedDataInput(val, path + \".value\", \"integer\")\r\n                // update field value\r\n                setInputValue(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField size='small' onFocus={() => {\r\n                        if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                            set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                            set(convertedSchema, path + \".adamant_field_error\", false)\r\n                            setInputError(false)\r\n                            setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                        }\r\n                        if (inputError === true) {\r\n                            setInputValue(\"\")\r\n                            // then delete the value the convertedSchema\r\n                            let value = { ...convertedSchema }\r\n                            if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                value = deleteKey(value, path + \".value\")\r\n                                updateParent(value)\r\n                            } else {\r\n                                let newPath = path.split(\".\")\r\n                                newPath.pop()\r\n                                newPath = newPath.join(\".\")\r\n                                value = deleteKey(value, newPath + \".value\")\r\n                                updateParent(value)\r\n                            }\r\n                        }\r\n                    }} error={inputError} onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} fullWidth={true} className={classes.heading} id={field_key} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                    }} helperText={descriptionText} />\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField\r\n                        size='small'\r\n                        onFocus={() => {\r\n                            if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                                set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                                set(convertedSchema, path + \".adamant_field_error\", false)\r\n                                setInputError(false)\r\n                                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                            }\r\n                            if (inputError === true) {\r\n                                setInputValue(\"\")\r\n                                // then delete the value the convertedSchema\r\n                                let value = { ...convertedSchema }\r\n                                if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                    value = deleteKey(value, path + \".value\")\r\n                                    updateParent(value)\r\n                                } else {\r\n                                    let newPath = path.split(\".\")\r\n                                    newPath.pop()\r\n                                    newPath = newPath.join(\".\")\r\n                                    value = deleteKey(value, newPath + \".value\")\r\n                                    updateParent(value)\r\n                                }\r\n                            }\r\n                        }}\r\n                        error={inputError}\r\n                        helperText={descriptionText}\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_key}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default IntegerType;\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport { Checkbox, FormLabel, FormHelperText, FormControl } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\n\r\nconst BooleanType = ({ field_uri, withinArray, withinObject, value, dataInputItems, setDataInputItems, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, defaultValue }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(value !== undefined ? value : typeof (defaultValue) === \"boolean\" ? defaultValue : false);\r\n    const [inputError, setInputError] = useState(false)\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"boolean\",\r\n        \"value\": value\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for checkbox (boolean type: checked is true unchecked is false)\r\n    const handleInputOnChange = () => {\r\n        let value = inputValue\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_key] = !value;\r\n            setDataInputItems(items);\r\n\r\n            setInputValue(!value)\r\n            handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n\r\n        } else {\r\n            setInputValue(!value)\r\n            handleConvertedDataInput(!value, path + \".value\", \"boolean\")\r\n        }\r\n    }\r\n\r\n    // handle input on change for checkbox (boolean type: checked is true unchecked is false)\r\n    const handleInputWhenInvalid = (value) => {\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_key] = value;\r\n            setDataInputItems(items);\r\n\r\n            setInputValue(value)\r\n            handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n\r\n        } else {\r\n            setInputValue(value)\r\n            handleConvertedDataInput(value, path + \".value\", \"boolean\")\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            //if (Array.isArray(latestVal)) { latestVal = latestVal[field_key] }\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(false)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"boolean\") {\r\n                setInputValue(false)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a boolean type.\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setInputValue(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    setInputValue(val)\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(false)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"boolean\") {\r\n                setInputValue(false)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a boolean type.\")\r\n            }\r\n            else {\r\n                setInputValue(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                handleConvertedDataInput(val, path + \".value\", \"boolean\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div onClick={() => {\r\n                if (inputError === true) {\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    // then set inputValue to default value or false\r\n                    handleInputWhenInvalid(typeof (defaultValue) === \"boolean\" ? defaultValue : false)\r\n                }\r\n            }} style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', alignItems: \"center\", width: '100%' }}>\r\n                <div style={{ paddingLeft: \"15px\", width: \"100%\" }}>\r\n                    <FormControl >\r\n                        <FormLabel style={{ color: `${inputError ? \"red\" : \"\"}` }}>{field_label === undefined ? \"\" : field_label + \":\"}</FormLabel>\r\n                        <div style={{ textAlign: \"center\", width: \"100%\" }}>\r\n                            <Checkbox onChange={() => handleInputOnChange()} checked={inputValue} />\r\n                        </div>\r\n                        <FormHelperText style={{ color: `${inputError ? \"red\" : \"\"}` }}>{descriptionText}</FormHelperText>\r\n                    </FormControl>\r\n                </div>\r\n                {edit ? <>\r\n                    <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                        <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                            <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                            <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </> : null}\r\n            </div>\r\n            {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default BooleanType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\nimport getUnit from '../../utils/getUnit';\r\nimport { MathComponent } from 'mathjax-react'\r\nimport { InputAdornment } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst ItemIntegerType = ({ field_label, oDataInputItems, oSetDataInputItems, arrayFieldKey, withinObject, value, path, pathFormData, dataInputItems, setDataInputItems, edit, index, field_key, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    //const [inputValue, setInputValue] = useState(value === undefined ? \"\" : value[index] === undefined ? \"\" : value[index]);\r\n    const { handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(dataInputItems[index])\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        if (withinObject !== undefined & withinObject === true) {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n\r\n                let arr = dataInputItems;\r\n                let arr2 = oDataInputItems\r\n                let items = Array.from(arr);\r\n                let items2 = Array.from(arr2);\r\n\r\n                let prevIndex = parseInt(path.split(\".\").pop())\r\n                items[index] = value;\r\n                items2[prevIndex][arrayFieldKey] = items\r\n                oSetDataInputItems(items2);\r\n\r\n                setInputValue(value)\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n            }\r\n\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n\r\n                // store it to input data array\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[index] = value;\r\n                setDataInputItems(items);\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, path + \".value\", \"array\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField size='small' onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_key} variant=\"outlined\" InputProps={{\r\n                    endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                }} />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemIntegerType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\nimport getUnit from '../../utils/getUnit';\r\nimport { MathComponent } from 'mathjax-react'\r\nimport { InputAdornment } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst ItemNumberType = ({ oDataInputItems, oSetDataInputItems, arrayFieldKey, withinObject, value, pathFormData, dataInputItems, setDataInputItems, path, field_label, edit, index, field_key, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    //const [inputValue, setInputValue] = useState(value === undefined ? \"\" : value[index] === undefined ? \"\" : value[index]);\r\n    const { handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(dataInputItems[index])\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        if (withinObject !== undefined & withinObject === true) {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n\r\n                let arr = dataInputItems;\r\n                let arr2 = oDataInputItems\r\n                let items = Array.from(arr);\r\n                let items2 = Array.from(arr2);\r\n\r\n                let prevIndex = parseInt(path.split(\".\").pop())\r\n                items[index] = value;\r\n                items2[prevIndex][arrayFieldKey] = items\r\n                oSetDataInputItems(items2);\r\n\r\n                setInputValue(value)\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n            }\r\n\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n\r\n                // store it to input data array\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[index] = value;\r\n                setDataInputItems(items);\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, path + \".value\", \"array\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField size='small' onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_key} variant=\"outlined\" InputProps={{\r\n                    endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                }} />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemNumberType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst ItemStringType = ({ oDataInputItems, oSetDataInputItems, arrayFieldKey, withinObject, value, pathFormData, dataInputItems, setDataInputItems, path, edit, index, field_key, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const { handleConvertedDataInput } = useContext(FormContext)\r\n    //const [fieldValue, setFieldValue] = useState(value === undefined ? undefined : value[index])\r\n    const [fieldValue, setFieldValue] = useState(dataInputItems[index])\r\n\r\n\r\n    // handle input field on blur\r\n    const handleOnBlur = (event, index) => {\r\n        if (withinObject !== undefined & withinObject === true) {\r\n            let arr = dataInputItems;\r\n            let arr2 = oDataInputItems\r\n            let items = Array.from(arr);\r\n            let items2 = Array.from(arr2);\r\n\r\n            let prevIndex = parseInt(path.split(\".\").pop())\r\n            items[index] = event.target.value;\r\n            items2[prevIndex][arrayFieldKey] = items\r\n            console.log(items2)\r\n            oSetDataInputItems(items2);\r\n\r\n            setFieldValue(event.target.value)\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n\r\n        } else {\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[index] = event.target.value;\r\n            setDataInputItems(items);\r\n            setFieldValue(event.target.value)\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items, path + \".value\", \"array\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField size='small' onBlur={(event) => handleOnBlur(event, index)} id={field_key} fullWidth={true} className={classes.heading} variant=\"outlined\" defaultValue={fieldValue} />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default ItemStringType;","export default __webpack_public_path__ + \"static/media/file-icon.047a88c0.svg\";","import React, { useEffect, useState } from 'react'\r\nimport ElementRenderer from \"../../ElementRenderer\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport FileIconx from \"../../../assets/file-icon.svg\"\r\nimport { FileIcon, defaultStyles } from 'react-file-icon'\r\nimport FileExtensionList from \"../../../assets/mime-types-extensions-swapped.json\"\r\n\r\nconst ItemObjectType = ({ path, dataInputItems, setDataInputItems, field_label, pathFormData, field_required, field_items, field_type, edit, index, field_key, handleDeleteArrayItem }) => {\r\n    const [expand, setExpand] = useState(dataInputItems[index][\"adamant-ui-specific-expand\"] === undefined ? true : dataInputItems[index][\"adamant-ui-specific-expand\"]); // set to \"true\" for normally open accordion\r\n    const [useIcon, setUseIcon] = useState(false);\r\n    const [mimeType, setMimeType] = useState(\"\");\r\n    const [fileName, setFileName] = useState(\"\")\r\n    const [extension, setExtension] = useState(\"\")\r\n    let objectIndex = index;\r\n    let field_properties = field_items[\"properties\"]\r\n    let withinArray = true;\r\n    let withinObject = true;\r\n\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n\r\n        let newVal = [...dataInputItems]\r\n        newVal[index][\"adamant-ui-specific-expand\"] = !value\r\n\r\n        setDataInputItems(newVal)\r\n    };\r\n\r\n    // Check if file keyword has some file there\r\n    useEffect(() => {\r\n        if (field_properties[\"file\"] !== undefined) {\r\n            if (field_properties[\"file\"][\"value\"] !== undefined) {\r\n                if (field_properties[\"file\"][\"value\"] !== \"\") {\r\n                    setUseIcon(true);\r\n                    let something = field_properties[\"file\"][\"value\"].split(\";\");\r\n                    setFileName(something[1])\r\n                    setMimeType(something[0].replace(\"fileupload:\", \"\"))//.replace(\"data:\", \"\"));\r\n                    let ext = something[1].split(\".\")\r\n                    setExtension(ext.slice(-1)[0])\r\n                }\r\n            }\r\n        }\r\n    }, [field_items])\r\n\r\n\r\n    //const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    style={{ verticalAlign: \"middle\", height: \"auto\" }}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ lineHeight: \"40px\", height: \"40px\", width: \"100%\", verticalAlign: \"middle\" }} >\r\n                            <strong>{field_label + \" #\" + parseInt(index + 1)}</strong>\r\n                        </div>\r\n                        {useIcon && !expand ? <div style={{ display: \"flex\", lineHeight: \"40px\", height: \"40px\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            {/*<img style={{ paddingRight: \"10px\" }} alt='fileIcon' src={FileIconx} height=\"40px\" />*/}\r\n                            <div style={{ display: \"inline-flex\", lineHeight: \"40px\", height: \"40px\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                                <div style={{ display: \"flex\", lineHeight: \"40px\", height: \"40px\", width: \"10%\" }}>\r\n                                    <FileIcon size={48} extension={extension} {...defaultStyles[extension]} />\r\n                                </div>\r\n                                <div style={{ width: \"50%\", whiteSpace: \"nowrap\", textOverflow: \"ellipsis\", overflow: \"hidden\", }}>\r\n                                    {fileName.slice(0, 20) + \" | \" + mimeType}\r\n                                </div>\r\n                            </div>\r\n                        </div> : <div style={{ width: \"100%\" }}> </div>}\r\n                        {edit ? <Button onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div style={{ width: \"100%\" }}>\r\n                        {Object.keys(field_properties).map((item, index) => {\r\n                            let tempField = JSON.parse(JSON.stringify(field_properties[item]));\r\n                            if (tempField[\"enum\"]) {\r\n                                tempField[\"enumerate\"] = tempField[\"enum\"]\r\n                            }\r\n                            if (tempField[\"default\"]) {\r\n                                tempField[\"defaultValue\"] = tempField[\"default\"]\r\n                            }\r\n                            return (\r\n                                <div key={item} style={{ display: \"flex\" }}>\r\n                                    <ElementRenderer withinObject={withinObject} path={path} pathFormData={pathFormData} withinArray={withinArray} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} fieldkey={item} fieldIndex={objectIndex} elementRequired={field_items[\"required\"]} edit={false} field={tempField} />\r\n                                </div>\r\n                            )\r\n                        })\r\n                        }\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div >\r\n    </>);\r\n\r\n};\r\n\r\nexport default ItemObjectType;\r\n","import React from 'react';\r\nimport ItemIntegerType from './array_items/ItemIntegerType';\r\nimport ItemNumberType from './array_items/ItemNumberType';\r\nimport ItemStringType from \"./array_items/ItemStringType\";\r\nimport ItemObjectType from \"./array_items/ItemObjectType\";\r\n\r\n\r\nconst ArrayItemRenderer = ({ oSetDataInputItems, oDataInputItems, arrayFieldKey, withinObject, value, pathSchema, pathFormData, dataInputItems, setDataInputItems, field_label, field_items, path, type, edit, fieldIndex, fieldkey, enumerate, handleDeleteArrayItem, properties }) => {\r\n    switch (type) {\r\n        case 'string':\r\n            return (<ItemStringType\r\n                field_label={field_label}\r\n                value={value}\r\n                withinObject={withinObject}\r\n                arrayFieldKey={arrayFieldKey}\r\n                oSetDataInputItems={oSetDataInputItems}\r\n                oDataInputItems={oDataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                dataInputItems={dataInputItems}\r\n                path={path}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'number':\r\n            return (<ItemNumberType\r\n                field_label={field_label}\r\n                value={value}\r\n                path={path}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                withinObject={withinObject}\r\n                arrayFieldKey={arrayFieldKey}\r\n                oSetDataInputItems={oSetDataInputItems}\r\n                oDataInputItems={oDataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'integer':\r\n            return (<ItemIntegerType\r\n                field_label={field_label}\r\n                value={value}\r\n                path={path}\r\n                pathFormData={pathFormData}\r\n                withinObject={withinObject}\r\n                arrayFieldKey={arrayFieldKey}\r\n                oSetDataInputItems={oSetDataInputItems}\r\n                oDataInputItems={oDataInputItems}\r\n                pathSchema={pathSchema + \".value\"}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'object':\r\n            return (<ItemObjectType\r\n                field_label={field_label}\r\n                value={value}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                path={path}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n                field_items={field_items}\r\n            />)\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ArrayItemRenderer;\r\n","const generateUID = () => {\r\n    // I generate the UID from two parts here \r\n    // to ensure the random number provide enough bits.\r\n    var firstPart = (Math.random() * 46656) | 0;\r\n    var secondPart = (Math.random() * 46656) | 0;\r\n    firstPart = (\"000\" + firstPart.toString(36)).slice(-3);\r\n    secondPart = (\"000\" + secondPart.toString(36)).slice(-3);\r\n    return firstPart + secondPart;\r\n}\r\n\r\nexport default generateUID;","import React, { useState, useContext, useEffect, useCallback } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { AccordionDetails } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ArrayItemRenderer from \"./ArrayItemRenderer\";\r\nimport generateUniqueID from \"../utils/generateUniqueID\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport getValue from \"../utils/getValue\";\r\nimport set from \"set-value\";\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport { toast } from \"react-toastify\";\r\nimport getValueInSchemaFullPath from \"../utils/getValueInSchemaFullPath\";\r\nimport getFileIndex from \"../utils/getFileIndex\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst Accordion = withStyles({\r\n    root: {\r\n        border: `1px solid rgba(232, 244, 253, 1)`,\r\n        '&:not(:last-child)': {\r\n            borderBottom: 0,\r\n        },\r\n        boxShadow: \"none\",\r\n        '&:before': {\r\n            display: 'none',\r\n        },\r\n        '&$expanded': {\r\n            margin: 'auto',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordion);\r\n\r\nconst AccordionSummary = withStyles({\r\n    root: {\r\n        backgroundColor: \"rgba(232, 244, 253, 1)\",\r\n        borderBottom: '1px solid rgba(0, 0, 0, .0)',\r\n        marginBottom: -1,\r\n        minHeight: 56,\r\n        '&$expanded': {\r\n            minHeight: 56,\r\n        },\r\n    },\r\n    content: {\r\n        '&$expanded': {\r\n            margin: '12px 0',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst ArrayType = ({ adamant_field_error, adamant_error_description, maxItems, minItems, uniqueItems, oSetDataInputItems, oDataInputItems, withinObject, withinArray, field_uri, value, pathFormData, path, pathSchema, field_required, field_key, field_index, edit, field_label, field_description, field_items, field_prefixItems }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [expand, setExpand] = useState(true);\r\n    const { handleLoadedFiles, handleRemoveFile, loadedFiles, updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputItems, setInputItems] = useState([]);\r\n    const [dataInputItems, setDataInputItems] = useState([]);\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\")\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [inputError, setInputError] = useState(false)\r\n    const [currentFiles, setCurrentFiles] = useState([])\r\n\r\n    useEffect(()=>{\r\n        if (field_items[\"type\"] === \"object\") {\r\n            setDataInputItems([{}])\r\n        }\r\n\r\n    },[field_items])\r\n\r\n    useEffect(() => {\r\n        //console.log(\"currentFiles length:\", currentFiles.length)\r\n        if (currentFiles.length > 0) {\r\n            // check if current array still has not reached maximum item\r\n            if (maxItems !== undefined) {\r\n                if (maxItems === (dataInputItems.length)) {\r\n                    toast.warning(\r\n                        `Can not add more item. Maximum number (${maxItems}) of items has been reached.`,\r\n                        {\r\n                            toastId: \"maxNumberWarning\"\r\n                        }\r\n                    );\r\n\r\n                    return\r\n                }\r\n            }\r\n            let stuff = currentFiles\r\n            let acceptedFile = stuff.slice(-1)[0]\r\n            // only works for resource schema first!!! THIS IS ONLY FOR TESTING\r\n            let desiredValues = {}\r\n            let inputItemIndex = undefined\r\n\r\n            // check if the existing dataInputs already have metadata but not the files yet\r\n            //console.log(\"dataInputItems:\", dataInputItems)\r\n            for (let i = 0; i < dataInputItems.length; i++) {\r\n                if (acceptedFile[\"name\"] === dataInputItems[i][\"fileName\"]) {\r\n                    inputItemIndex = i\r\n                }\r\n            }\r\n            // after that insert the files\r\n            if (inputItemIndex !== undefined) {\r\n                desiredValues = {\r\n                    \"file\": `fileupload:${acceptedFile[\"type\"]};${acceptedFile[\"name\"]};${acceptedFile[\"size\"]}`,\r\n                    \"fileName\": acceptedFile[\"name\"],\r\n                    \"filetype\": acceptedFile[\"type\"]\r\n                }\r\n                let fileAlreadyExist = handleLoadedFiles(acceptedFile)\r\n                //console.log(\"does the file already exist?\", fileAlreadyExist)\r\n                if (!fileAlreadyExist) {\r\n                    handleAddArrayItem(desiredValues, inputItemIndex)\r\n                    let val = currentFiles\r\n                    val.pop()\r\n                    setCurrentFiles(val)\r\n                } else {\r\n                    console.log(\"Not adding this array item.\")\r\n                    let arr = dataInputItems;\r\n                    const items = Array.from(arr);\r\n                    setDataInputItems(items)\r\n                    let val = currentFiles\r\n                    val.pop()\r\n                    setCurrentFiles(val)\r\n                    // insert the newly inserted data to convertedSchema\r\n                    let newConvertedSchema = convertedSchema\r\n                    set(newConvertedSchema, path + \".value\", items)\r\n                    updateParent(newConvertedSchema)\r\n                }\r\n\r\n            } else {\r\n                //console.log(\"field items:\", field_items)\r\n                if (field_items[\"properties\"][\"file\"] === undefined) {\r\n                    desiredValues = {\r\n                        \"fileName\": acceptedFile[\"name\"],\r\n                        \"filetype\": acceptedFile[\"type\"]\r\n                    }\r\n                } else {\r\n                    desiredValues = {\r\n                        \"file\": `fileupload:${acceptedFile[\"type\"]};${acceptedFile[\"name\"]};${acceptedFile[\"size\"]}`,\r\n                        \"fileName\": acceptedFile[\"name\"],\r\n                        \"filetype\": acceptedFile[\"type\"]\r\n                    }\r\n                }\r\n                let fileAlreadyExist = handleLoadedFiles(acceptedFile)\r\n                if (!fileAlreadyExist) {\r\n                    handleAddArrayItem(desiredValues)\r\n                    let val = currentFiles\r\n                    val.pop()\r\n                    setCurrentFiles(val)\r\n                } else {\r\n                    console.log(\"Not adding this array item.\")\r\n                    let arr = dataInputItems;\r\n                    const items = Array.from(arr);\r\n                    setDataInputItems(items)\r\n                    let val = currentFiles\r\n                    val.pop()\r\n                    setCurrentFiles(val)\r\n                    // insert the newly inserted data to convertedSchema\r\n                    let newConvertedSchema = convertedSchema\r\n                    set(newConvertedSchema, path + \".value\", items)\r\n                    updateParent(newConvertedSchema)\r\n                }\r\n            }\r\n        } else {\r\n            //setOpenReadingFilesDialogForArrayType(false)\r\n        }\r\n    }, [currentFiles, dataInputItems])\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    // also create new items based on the uploaded files if applicable (only for resource array!)\r\n    useEffect(() => {\r\n\r\n\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists\r\n    /*\r\n    useEffect(() => {\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (value === undefined) {\r\n                console.log(\"do nothing\")\r\n            } else {\r\n                // use existing schema if items is not empty\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(newFieldItems);\r\n                setInputItems(items);\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    setDataInputItems(items2)\r\n\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push({});\r\n                    setDataInputItems(items2)\r\n\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                }\r\n            }\r\n        }\r\n    }, [value])\r\n    */\r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            value = oDataInputItems[field_index][field_key]\r\n\r\n            if (value !== undefined) {\r\n                if (field_prefixItems === undefined & field_items !== undefined) {\r\n                    if (field_items[\"type\"] !== \"object\") {\r\n                        if (Object.keys(field_items).length === 0) {\r\n                            // create field_items if items is empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                field_items = { type: \"string\", field_key: `${generateUniqueID()}` }\r\n                                items.push(field_items);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        } else {\r\n                            // use existing schema if items is not empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (value !== undefined) {\r\n                if (field_prefixItems === undefined & field_items !== undefined) {\r\n                    if (field_items[\"type\"] !== \"object\") {\r\n                        if (Object.keys(field_items).length === 0) {\r\n                            // create field_items if items is empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                field_items = { type: \"string\", field_key: `${generateUniqueID()}` }\r\n                                items.push(field_items);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n\r\n                            // conv. schema data\r\n                            handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                        } else {\r\n                            // use existing schema if items is not empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n\r\n                            // conv. schema data\r\n                            handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                        }\r\n                    }\r\n                    else {\r\n                        // use existing schema if items is not empty\r\n                        let items = [];\r\n                        if (dataInputItems.length === 0) {\r\n                            let arr = value;\r\n                            arr = Array.from(arr);\r\n                            let currentInputItems = [...inputItems]\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = (currentInputItems[i] !== undefined & currentInputItems.length !== 0 ? currentInputItems[i] : {})\r\n                                if (Object.keys(newFieldItems).length === 0) {\r\n                                    newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                    newFieldItems[\"type\"] = \"object\"\r\n                                    newFieldItems[\"properties\"] = JSON.parse(JSON.stringify(field_items[\"properties\"]))\r\n                                    newFieldItems[\"required\"] = field_items[\"required\"]\r\n                                    Object.keys(newFieldItems[\"properties\"]).forEach((element) => {\r\n                                        newFieldItems[\"properties\"][element][\"value\"] = arr[i][element]\r\n                                    })\r\n                                }\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        } else {\r\n                            let arr = value;\r\n                            arr = Array.from(arr);\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = {}\r\n                                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                newFieldItems[\"type\"] = \"object\"\r\n                                newFieldItems[\"properties\"] = JSON.parse(JSON.stringify(field_items[\"properties\"]))\r\n                                newFieldItems[\"required\"] = field_items[\"required\"]\r\n                                Object.keys(newFieldItems[\"properties\"]).forEach((element) => {\r\n                                    newFieldItems[\"properties\"][element][\"value\"] = arr[i][element]\r\n                                })\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                setInputItems([]);\r\n                setDataInputItems([])\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        if (withinObject & withinArray) {\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            const [reorderedItem] = items.splice(result.source.index, 1);\r\n            items.splice(result.destination.index, 0, reorderedItem);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems\r\n            const items2 = Array.from(arr2);\r\n            const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n            items2.splice(result.destination.index, 0, reorderedItem2);\r\n            setDataInputItems(items2)\r\n\r\n            /*\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n            */\r\n        }\r\n        else {\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            const [reorderedItem] = items.splice(result.source.index, 1);\r\n            items.splice(result.destination.index, 0, reorderedItem);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems\r\n            const items2 = Array.from(arr2);\r\n            const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n            items2.splice(result.destination.index, 0, reorderedItem2);\r\n            setDataInputItems(items2)\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n\r\n        }\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        /*\r\n        // remove the file in loadedFiles\r\n        let metmet = getValueInSchemaFullPath(convertedSchema, path + \".properties\")\r\n        const fileMetadata = getAllFileMetadata(metmet, [])\r\n        if (fileMetadata.length > 0) {\r\n            for (let i = 0; i < fileMetadata.length; i++) {\r\n                const fileIndex = getFileIndex(loadedFiles, fileMetadata[i])\r\n                handleRemoveFile(fileIndex)\r\n            }\r\n        }*/\r\n        // remove the file in loadedFiles\r\n        const fileMetadata = getValue(convertedSchema, path + `.value`)\r\n        //console.log(\"fileMetadata:\", fileMetadata)\r\n        if (fileMetadata !== undefined) {\r\n            let keywords = []\r\n            if (Array.isArray(fileMetadata)) {\r\n                if (fileMetadata.length > 0) {\r\n                    for (let i = 0; i < fileMetadata.length; i++) {\r\n                        if (typeof fileMetadata[i] === \"object\") {\r\n                            Object.keys(fileMetadata[i]).forEach((key) => {\r\n                                if (typeof fileMetadata[i][key] === \"string\") {\r\n                                    if (fileMetadata[i][key].includes(\"fileupload:\") && fileMetadata[i][key].split(\";\").length === 3) {\r\n                                        keywords.push(fileMetadata[i][key])\r\n                                    }\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //console.log(\"keywords found:\", keywords)\r\n            if (keywords.length > 0) {\r\n                for (let i = 0; i < keywords.length; i++) {\r\n                    const fileIndex = getFileIndex(loadedFiles, keywords[i])\r\n                    handleRemoveFile(fileIndex)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"$id\": field_uri,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"items\": field_items,\r\n        \"minItems\": minItems,\r\n        \"maxItems\": maxItems,\r\n        \"uniqueItems\": uniqueItems,\r\n        \"type\": \"array\",\r\n        \"value\": value\r\n    }\r\n\r\n    // handle add array item\r\n    const handleAddArrayItem = (desiredValues, inputItemIndex) => {\r\n        // check if current array still has not reached maximum item\r\n        if (maxItems !== undefined) {\r\n            if (maxItems === (dataInputItems.length)) {\r\n                toast.warning(\r\n                    `Can not add more item. Maximum number (${maxItems}) of items has been reached.`,\r\n                    {\r\n                        toastId: \"maxNumberWarning\"\r\n                    }\r\n                );\r\n\r\n                return\r\n            }\r\n        }\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (Object.keys(field_items).length === 0) {\r\n                // create field_items if items is empty\r\n                field_items = { type: \"string\", field_key: `${generateUniqueID()}` }\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(field_items);\r\n                setInputItems(items);\r\n\r\n                // push a new item for the data\r\n                let arr2 = dataInputItems;\r\n                const items2 = Array.from(arr2);\r\n                items2.push(\"\");\r\n                setDataInputItems(items2)\r\n                console.log(\"Item added.\")\r\n            } else {\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                if (inputItemIndex === undefined) {\r\n                    // use existing schema if items is not empty\r\n                    newFieldItems[\"field_key\"] = generateUniqueID();\r\n                    let arr = inputItems;\r\n                    const items = Array.from(arr);\r\n                    items.push(newFieldItems);\r\n                    setInputItems(items);\r\n                }\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    //console.log(items2)\r\n                    console.log(items2)\r\n                    setDataInputItems(items2)\r\n                    console.log(\"Item added.\")\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    if (desiredValues !== undefined) {\r\n                        if (inputItemIndex !== undefined) {\r\n                            // for now only works with resource schema!!!!!!!\r\n                            let arr2 = dataInputItems;\r\n                            const items2 = Array.from(arr2);\r\n                            items2[inputItemIndex][\"file\"] = desiredValues[\"file\"]\r\n                            items2[inputItemIndex][\"fileName\"] = desiredValues[\"fileName\"]\r\n                            items2[inputItemIndex][\"fileType\"] = desiredValues[\"fileType\"]\r\n                            setDataInputItems(items2)\r\n                            console.log(\"Item added.\")\r\n                            console.log(\"Finished adding array item.\")\r\n                            // insert the newly inserted data to convertedSchema\r\n                            let newConvertedSchema = convertedSchema\r\n                            set(newConvertedSchema, path + \".value\", items2)\r\n                            updateParent(newConvertedSchema)\r\n\r\n                        } else {\r\n                            // for now only works with resource schema!!!!!!!\r\n                            let arr2 = dataInputItems;\r\n                            const items2 = Array.from(arr2);\r\n                            items2.push(desiredValues)\r\n                            setDataInputItems(items2)\r\n                            console.log(\"Item added.\")\r\n                            console.log(\"Finished adding array item.\")\r\n                            // insert the newly inserted data to convertedSchema\r\n                            let newConvertedSchema = convertedSchema\r\n                            set(newConvertedSchema, path + \".value\", items2)\r\n                            updateParent(newConvertedSchema)\r\n                        }\r\n                    }\r\n                    else {\r\n                        let arr2 = dataInputItems;\r\n                        const items2 = Array.from(arr2);\r\n                        items2.push({});\r\n                        setDataInputItems(items2)\r\n                        console.log(\"Item added.\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle delete item\r\n    const handleDeleteArrayItem = (index) => {\r\n        console.log(edit)\r\n\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            console.log(path)\r\n            let modPath = path.split('.')\r\n            let lastKey = path.slice(-1)[0]\r\n            console.log(modPath)\r\n            modPath.pop()\r\n            modPath = modPath.join('.')\r\n\r\n            let newPath = modPath + '.value' + `.${lastKey}`+`.${field_key}`\r\n            console.log(\"new path:\",newPath)\r\n            // remove the file in loadedFiles\r\n            if (getValue(convertedSchema, newPath) !== undefined) { // which means there is no value yet\r\n                const fileMetadata = getValue(convertedSchema, newPath + `.${index}`)\r\n                if (fileMetadata !== undefined) {\r\n                    let keyword = undefined\r\n                    if (typeof fileMetadata === \"object\") {\r\n                        Object.keys(fileMetadata).forEach((key) => {\r\n                            if (typeof fileMetadata[key] === \"string\") {\r\n                                if (fileMetadata[key].includes(\"fileupload:\") && fileMetadata[key].split(\";\").length === 3) {\r\n                                    keyword = fileMetadata[key]\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    if (keyword !== undefined) {\r\n                        const fileIndex = getFileIndex(loadedFiles, keyword)\r\n                        handleRemoveFile(fileIndex)\r\n                    }\r\n                }\r\n            }\r\n\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            items.splice(index, 1);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems;\r\n            const items2 = Array.from(arr2);\r\n            items2.splice(index, 1);\r\n            setDataInputItems(items2)\r\n\r\n            // conv. schema data\r\n            console.log(items2)\r\n            handleConvertedDataInput(items2, newPath, \"array\")\r\n        } else {\r\n            // remove the file in loadedFiles\r\n            if (getValue(convertedSchema, path + `.value`) !== undefined) { // which means there is no value yet\r\n                const fileMetadata = getValue(convertedSchema, path + `.value.${index}`)\r\n                if (fileMetadata !== undefined) {\r\n                    let keyword = undefined\r\n                    if (typeof fileMetadata === \"object\") {\r\n                        Object.keys(fileMetadata).forEach((key) => {\r\n                            if (typeof fileMetadata[key] === \"string\") {\r\n                                if (fileMetadata[key].includes(\"fileupload:\") && fileMetadata[key].split(\";\").length === 3) {\r\n                                    keyword = fileMetadata[key]\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    if (keyword !== undefined) {\r\n                        const fileIndex = getFileIndex(loadedFiles, keyword)\r\n                        handleRemoveFile(fileIndex)\r\n                    }\r\n                }\r\n            }\r\n\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            items.splice(index, 1);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems;\r\n            const items2 = Array.from(arr2);\r\n            items2.splice(index, 1);\r\n            setDataInputItems(items2)\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n        }\r\n    }\r\n\r\n\r\n    // handle read data files, to load a selection of files and to integrate their metadata\r\n    const onDrop = useCallback(\r\n        (acceptedFile) => {\r\n\r\n            setCurrentFiles(acceptedFile)\r\n        },\r\n        [setCurrentFiles])\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        multiple: true,\r\n    });\r\n\r\n    return (<>\r\n        <div onClick={() => {\r\n            if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                set(convertedSchema, path + \".adamant_field_error\", false)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                updateParent(convertedSchema)\r\n            }\r\n        }} style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} style={inputError ? {\r\n                border: `1px solid #ff7961`,\r\n                '&:not(:lastChild)': {\r\n                    borderBottom: 0,\r\n                }\r\n            } :\r\n                {\r\n                    border: `1px solid rgba(232, 244, 253, 1)`,\r\n                    '&:not(:lastChild)': {\r\n                        borderBottom: 0,\r\n                    }\r\n                }} >\r\n                <AccordionSummary\r\n                    style={inputError ? { backgroundColor: \"white\", borderRadius: \"4px\", borderBottom: '1px solid  #ff7961' } : { backgroundColor: \"rgba(232, 244, 253, 1)\", borderBottom: '1px solid  rgba(0, 0, 0, .0)' }}\r\n                    expandIcon={/*withinObject ? null : */\r\n                        <Tooltip placement=\"top\" title={`Collapse/Expand this container`}>\r\n                            <ExpandMoreIcon />\r\n                        </Tooltip>}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography style={inputError ? { color: \"#ff7961\", width: \"100%\" } : { width: \"100%\" }} className={classes.heading}>{field_label + (required ? \"*\" : \"\")} {dataInputItems.length > 0 ? `| ${dataInputItems.length} item(s)` : null} </Typography>\r\n                            {expand ? <div style={inputError ? { color: \"#ff7961\" } : { color: \"gray\" }}>\r\n                                {descriptionText}\r\n                            </div> : null}\r\n                        </div>\r\n                        {field_key === \"resource\" ? <Button style={{ width: \"200px\" }} {...getRootProps()} ><input {...getInputProps()} />Read Resources</Button> : null}\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit \"${field_label}\"`}>\r\n                                <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove \"${field_label}\"`}>\r\n                                <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <div style={{ paddingTop: \"2px\" }}></div>\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(inputItems).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={false} key={inputItems[index][\"field_key\"]} draggableId={inputItems[index][\"field_key\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <Tooltip placement=\"top\" title={`Drag & drop to adjust the order of this item`}>\r\n                                                                    <DragHandleIcon fontSize=\"small\" />\r\n                                                                </Tooltip>\r\n                                                            </div>\r\n                                                            <ArrayItemRenderer arrayFieldKey={field_key} withinObject={withinObject} value={value} pathSchema={pathSchema} pathFormData={pathFormData} dataInputItems={dataInputItems} oDataInputItems={oDataInputItems} oSetDataInputItems={oSetDataInputItems} setDataInputItems={setDataInputItems} field_label={field_label} field_items={inputItems.length !== 0 ? inputItems[index] : field_items} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path} fieldIndex={index} fieldkey={inputItems[index][\"field_key\"]} type={inputItems[index][\"type\"]} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <Button onClick={() => { handleAddArrayItem() }} style={{ fontSize: \"12px\", marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><AddIcon style={{ paddingRight: \"5px\" }} fontSize=\"small\" color=\"primary\" /> Add Item</Button>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default ArrayType;","import React, { useState, useContext } from \"react\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport getValue from \"../utils/getValue\";\r\nimport set from \"set-value\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport { FormControl } from \"@material-ui/core\";\r\nimport { FormLabel } from \"@material-ui/core\";\r\nimport { FormHelperText } from \"@material-ui/core\";\r\nimport { IconButton } from \"@material-ui/core\";\r\n\r\nconst AnyOfKeywordPlaceHolder = ({ pathFormData, path, field_required, field_uri, field_key, field_index, edit, field_label, field_description, field_prefixItems, anyOf_list }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete } = useContext(FormContext);\r\n\r\n    let field_items = {}\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"items\": field_items,\r\n        \"type\": \"anyOf\",\r\n    }\r\n\r\n    return (<>\r\n        <div style={{ paddingTop: \"10px\", paddingLeft: \"15px\", width: \"100%\" }}>\r\n            <FormControl style={{ display: \"inline-flex\", width: \"100%\" }}>\r\n                <FormLabel style={{ display: \"inline-flex\", width: \"100%\" }}>{field_label === undefined ? \"\" : field_label + \":\"}</FormLabel>\r\n                <div style={{ display: \"inline-flex\", width: \"100%\" }}>\r\n                    <div style={{ paddingTop: \"15px\", textAlign: \"left\", width: \"100%\" }}>\r\n                        \"AnyOf\" keyword is not yet implemented.\r\n                    </div>\r\n                    <div style={{ display: \"inline-flex\", width: \"100%\", justifyContent: \"right\" }}>\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit \"${field_label}\"`}>\r\n                                <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove \"${field_label}\"`}>\r\n                                <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div>\r\n                </div>\r\n                <FormHelperText>{field_description}</FormHelperText>\r\n            </FormControl>\r\n        </div>\r\n        {openDialog ? <EditElement field_uri={field_uri} anyOf_list={anyOf_list} pathFormData={pathFormData} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default AnyOfKeywordPlaceHolder;","import React, { useContext, useEffect, useState, useCallback } from 'react'\r\nimport { FormLabel, FormHelperText, FormControl } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton, Button } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport NotRenderable from \"../../assets/not-renderable.png\"\r\nimport FileIcon from \"../../assets/file-icon.svg\"\r\n\r\nconst getAcceptedTypes = (field_description) => {\r\n    let matches = field_description.match(/\\[(.*?)\\]/);\r\n\r\n    if (matches) {\r\n        let submatch = matches[1];\r\n        submatch = submatch.replaceAll(\"\\\"\", \"\")\r\n        submatch = submatch.replaceAll(\" \", \"\")\r\n        submatch = submatch.split(\",\")\r\n        return submatch\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\n\r\nconst validateAcceptedFile = (fileType, acceptedTypes) => {\r\n    fileType = fileType.split(\".\")\r\n    fileType = fileType.pop()\r\n    fileType = \".\" + fileType\r\n\r\n    if (acceptedTypes.includes(fileType)) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\n\r\nconst FileUpload = ({ adamant_field_error, adamant_error_description, contentEncoding, withinObject, field_uri, dataInputItems, setDataInputItems, withinArray, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate, defaultValue, value }) => {\r\n\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputError, setInputError] = useState(false)\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [dataUrl, setDataUrl] = useState(defaultValue !== undefined ? defaultValue : value !== undefined ? value : \"\")\r\n    const [renderingInProgress, setRenderingInProgress] = useState(false)\r\n    const [mediaFileType, setMediaFileType] = useState(value !== undefined ? value.split(\";\")[0].replace(\"data:\", \"\") : \"\")\r\n    const [fileSize, setFileSize] = useState();\r\n    //const [required, setRequired] = useState(false)\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // max. allowed fileupload size\r\n    let allowedFileSize = 500000\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n    // define a list of renderable media file types\r\n    let renderableMediaFileTypes = [\"image/jpeg\", \"image/png\", \"image/bmp\", \"image/tiff\", \"image/svg+xml\"]\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // visualize that the field is required\r\n    let fieldLabel = field_label;\r\n    if (required === true) {\r\n        fieldLabel += \"*\"\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // browse or drag&drop file\r\n    const onDrop = useCallback(\r\n        (acceptedFile) => {\r\n            let acceptedTypes = getAcceptedTypes(field_description);\r\n            let valid = true\r\n            if (acceptedTypes.length === 0) {\r\n                valid = true\r\n            } else {\r\n                valid = validateAcceptedFile(acceptedFile[0][\"name\"], acceptedTypes)\r\n                if (!valid) {\r\n                    setDescriptionText(\"Seems like you've given a file with an unaccepted file type?\")\r\n                }\r\n            }\r\n            // only accept file lower than allowedFileSize\r\n            //if (acceptedFile[0][\"size\"] > allowedFileSize) {\r\n            //    valid = false;\r\n            //    setDescriptionText(`File size is too big. The file size should not exceed ${allowedFileSize / 1000} KB.`)\r\n            //}\r\n            if (valid) {\r\n                setRenderingInProgress(true)\r\n                setFileSize(acceptedFile[0][\"size\"])\r\n                // process the schema, validation etc\r\n                // read file and update receivedData\r\n                const reader = new FileReader();\r\n                reader.onabort = () => console.log(\"file reading was aborted\");\r\n                reader.onerror = () => console.log(\"file reading has failed\");\r\n                reader.onload = () => {\r\n                    const binaryStr = reader.result;\r\n                    setDataUrl(binaryStr)\r\n                    setMediaFileType(acceptedFile[0][\"type\"])\r\n                    if (withinArray !== undefined & withinArray) {\r\n                        let newPathFormData = pathFormData.split(\".\");\r\n                        newPathFormData.pop()\r\n                        newPathFormData = newPathFormData.join(\".\")\r\n\r\n                        let newPath = path.split(\".\")\r\n                        newPath.pop()\r\n                        newPath = newPath.join(\".\")\r\n\r\n                        let arr = dataInputItems;\r\n                        const items = Array.from(arr);\r\n                        items[field_index][field_key] = binaryStr;\r\n                        setDataInputItems(items);\r\n                        handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n\r\n                        setRenderingInProgress(false)\r\n                    } else {\r\n                        handleConvertedDataInput(binaryStr, path + \".value\", \"boolean\")\r\n\r\n                        setRenderingInProgress(false)\r\n                    }\r\n                }\r\n                reader.readAsDataURL(acceptedFile[0]);\r\n            } else {\r\n                setRenderingInProgress(false)\r\n                setInputError(true)\r\n                setDataUrl(\"\")\r\n                setMediaFileType(\"\")\r\n            }\r\n        },\r\n        []\r\n    );\r\n    //\r\n\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            //if (Array.isArray(latestVal)) { latestVal = latestVal[field_key] }\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : \"\")\r\n            if (val === \"\") {\r\n                setDataUrl(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setDataUrl(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    setDataUrl(val)\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : \"\")\r\n            if (val === \"\") {\r\n                setDataUrl(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else {\r\n                setDataUrl(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                handleConvertedDataInput(val, path + \".value\", \"boolean\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"fileupload (string)\",\r\n        \"value\": value,\r\n    }\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        multiple: false,\r\n    });\r\n\r\n    const handleOnClickedClear = () => {\r\n        setMediaFileType(\"\")\r\n        setDataUrl(\"\")\r\n        setFileSize()\r\n        // then delete in the form convdata\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_key] = undefined;\r\n            setDataInputItems(items);\r\n            handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n        } else {\r\n            handleConvertedDataInput(\"\", path + \".value\", \"boolean\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div onClick={() => {\r\n                if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                    set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                    set(convertedSchema, path + \".adamant_field_error\", false)\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    updateParent(convertedSchema)\r\n                }\r\n                if (inputError === true) {\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    // then delete the value the convertedSchema\r\n                }\r\n            }} style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', alignItems: \"center\", width: '100%' }}>\r\n                <div style={{ paddingLeft: \"15px\", width: \"100%\" }}>\r\n                    <FormControl >\r\n                        <FormLabel style={{ paddingBottom: \"10px\", color: `${inputError ? \"red\" : \"\"}` }}>{fieldLabel === undefined ? + \"\" : fieldLabel + \":\"}</FormLabel>\r\n                        {renderingInProgress ? <Box sx={{ width: '225px' }}>\r\n                            <LinearProgress />\r\n                        </Box> : null}\r\n                        <div style={{ width: \"225px\", display: \"flex\", justifyContent: \"center\" }}>\r\n                            {dataUrl !== \"\" ? <img alt='fileUpload' src={renderableMediaFileTypes.includes(mediaFileType) ? dataUrl : FileIcon} width={renderableMediaFileTypes.includes(mediaFileType) ? \"225\" : \"64\"} /> : \"\"}\r\n                        </div>\r\n                        <div style={{ width: \"225px\", fontSize: \"10px\", color: \"grey\", paddingTop: \"5px\", whiteSpace: \"nowrap\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>\r\n                            {dataUrl}\r\n                        </div>\r\n                        <div style={{ width: \"225px\", fontSize: \"10px\", color: \"grey\", paddingTop: \"5px\", whiteSpace: \"nowrap\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>\r\n                            {fileSize !== undefined ? `size: ${fileSize / 1000} KB` : null}\r\n                        </div>\r\n                        <div style={{ paddingTop: \"5px\", textAlign: \"left\", width: \"100%\" }} >\r\n                            <Button color={inputError ? \"secondary\" : \"default\"} variant=\"outlined\" {...getRootProps()} ><input {...getInputProps()} />Upload a file</Button>\r\n                            {dataUrl !== \"\" ? <Button onClick={() => { handleOnClickedClear() }} style={{ marginLeft: \"5px\" }} variant=\"outlined\" color=\"secondary\">Clear</Button> : null}\r\n                        </div>\r\n                        <FormHelperText style={{ color: `${inputError ? \"red\" : \"\"}` }}>{descriptionText}</FormHelperText>\r\n                    </FormControl>\r\n                </div>\r\n                {\r\n                    edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null\r\n                }\r\n            </div >\r\n            {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default FileUpload;\r\n","import React from 'react';\r\nimport StringType from \"./elements/StringType\";\r\nimport NumberType from \"./elements/NumberType\";\r\nimport ObjectType from './elements/ObjectType';\r\nimport IntegerType from './elements/IntegerType';\r\nimport BooleanType from './elements/BooleanType';\r\nimport ArrayType from './elements/ArrayType';\r\nimport AnyOfKeywordPlaceHolder from './elements/AnyOfKeywordPlaceHolder';\r\nimport FileUpload from './elements/FileUpload';\r\n\r\n\r\nconst ElementRenderer = ({withinObject, dataInputItems, setDataInputItems, withinArray, path, pathSchema, pathFormData, elementRequired, fieldkey, fieldIndex, edit, field: { minItems, maxItems, uniqueItems, minimum, maximum, minLength, maxLength, type, $id, id, title, contentEncoding, description, properties, required, enumerate, items, defaultValue, value, anyOf, adamant_field_error, adamant_error_description } }) => {\r\n\r\n    switch (type) {\r\n        case 'string':\r\n            if (contentEncoding !== undefined) {\r\n                return (<FileUpload\r\n                    adamant_field_error={adamant_field_error}\r\n                    adamant_error_description={adamant_error_description}\r\n                    contentEncoding={contentEncoding}\r\n                    value={value}\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    dataInputItems={dataInputItems}\r\n                    setDataInputItems={setDataInputItems}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_index={fieldIndex}\r\n                    field_label={title}\r\n                    field_uri={$id !== undefined ? $id : id}\r\n                    field_description={description}\r\n                    field_required={elementRequired}\r\n                    defaultValue={defaultValue}\r\n                    edit={edit}\r\n                />)\r\n            } else {\r\n                return (<StringType\r\n                    adamant_field_error={adamant_field_error}\r\n                    adamant_error_description={adamant_error_description}\r\n                    value={value}\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    dataInputItems={dataInputItems}\r\n                    setDataInputItems={setDataInputItems}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_index={fieldIndex}\r\n                    field_label={title}\r\n                    field_uri={$id !== undefined ? $id : id}\r\n                    field_description={description}\r\n                    field_required={elementRequired}\r\n                    field_enumerate={enumerate}\r\n                    defaultValue={defaultValue}\r\n                    edit={edit}\r\n                    minLength={minLength}\r\n                    maxLength={maxLength}\r\n                />)\r\n            }\r\n        case 'number':\r\n            return (<NumberType\r\n                adamant_field_error={adamant_field_error}\r\n                adamant_error_description={adamant_error_description}\r\n                minimum={minimum}\r\n                maximum={maximum}\r\n                value={value}\r\n                withinArray={withinArray}\r\n                withinObject={withinObject}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldkey}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                field_key={fieldkey}\r\n                field_uri={$id !== undefined ? $id : id}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'integer':\r\n            return (<IntegerType\r\n                adamant_field_error={adamant_field_error}\r\n                adamant_error_description={adamant_error_description}\r\n                minimum={minimum}\r\n                maximum={maximum}\r\n                value={value}\r\n                withinArray={withinArray}\r\n                withinObject={withinObject}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldkey}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                field_key={fieldkey}\r\n                field_uri={$id !== undefined ? $id : id}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'boolean':\r\n            return (<BooleanType\r\n                adamant_field_error={adamant_field_error}\r\n                adamant_error_description={adamant_error_description}\r\n                value={value}\r\n                withinArray={withinArray}\r\n                withinObject={withinObject}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldkey}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                field_key={fieldkey}\r\n                field_uri={$id !== undefined ? $id : id}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'array':\r\n            if (fieldkey === \"resource\") {\r\n                return (<ArrayType\r\n                    adamant_field_error={adamant_field_error}\r\n                    adamant_error_description={adamant_error_description}\r\n                    value={value}\r\n                    maxItems={maxItems}\r\n                    minItems={minItems}\r\n                    uniqueItems={uniqueItems}\r\n                    oDataInputItems={dataInputItems}\r\n                    oSetDataInputItems={setDataInputItems}\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_index={fieldIndex}\r\n                    field_uri={$id !== undefined ? $id : id}\r\n                    field_label={title}\r\n                    field_description={description}\r\n                    field_required={elementRequired}\r\n                    field_items={items}\r\n                    edit={edit}\r\n                />)\r\n            }\r\n            else {\r\n                return (<ArrayType\r\n                    adamant_field_error={adamant_field_error}\r\n                    adamant_error_description={adamant_error_description}\r\n                    value={value}\r\n                    maxItems={maxItems}\r\n                    minItems={minItems}\r\n                    uniqueItems={uniqueItems}\r\n                    oDataInputItems={dataInputItems}\r\n                    oSetDataInputItems={setDataInputItems}\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_index={fieldIndex}\r\n                    field_uri={$id !== undefined ? $id : id}\r\n                    field_label={title}\r\n                    field_description={description}\r\n                    field_required={elementRequired}\r\n                    field_items={items}\r\n                    edit={edit}\r\n                />)\r\n            }\r\n        case 'object':\r\n            if (anyOf !== undefined) {\r\n                return (\r\n                    <AnyOfKeywordPlaceHolder\r\n                        adamant_field_error={adamant_field_error}\r\n                        adamant_error_description={adamant_error_description}\r\n                        pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                        withinArray={withinArray}\r\n                        withinObject={withinObject}\r\n                        dataInputItems={dataInputItems}\r\n                        setDataInputItems={setDataInputItems}\r\n                        path={path + \".\" + fieldIndex}\r\n                        field_index={fieldIndex}\r\n                        field_key={fieldkey}\r\n                        field_uri={$id !== undefined ? $id : id}\r\n                        field_label={title}\r\n                        field_description={description}\r\n                        field_required={elementRequired}\r\n                        anyOf_list={anyOf}\r\n                        edit={edit}\r\n                    />\r\n                )\r\n            } else {\r\n                return (<ObjectType\r\n                    adamant_field_error={adamant_field_error}\r\n                    adamant_error_description={adamant_error_description}\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_uri={$id !== undefined ? $id : id}\r\n                    field_label={title}\r\n                    field_description={description}\r\n                    field_required={required}\r\n                    object_is_required={elementRequired}\r\n                    field_properties={properties}\r\n                    edit={edit}\r\n                />)\r\n            }\r\n        case undefined:\r\n            if (anyOf) {\r\n                return (\r\n                    <AnyOfKeywordPlaceHolder\r\n                        adamant_field_error={adamant_field_error}\r\n                        adamant_error_description={adamant_error_description}\r\n                        pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                        withinArray={withinArray}\r\n                        withinObject={withinObject}\r\n                        path={path + \".\" + fieldIndex}\r\n                        field_index={fieldIndex}\r\n                        field_key={fieldkey}\r\n                        field_uri={$id !== undefined ? $id : id}\r\n                        field_label={title}\r\n                        field_description={description}\r\n                        field_required={elementRequired}\r\n                        anyOf_list={anyOf}\r\n                        edit={edit}\r\n                    />\r\n                )\r\n            } else {\r\n                return null\r\n            }\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ElementRenderer;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst changeKeywords = (convertedSchema, oldKey, desiredNewKey) => {\r\n    if (typeof convertedSchema === 'object' && !Array.isArray(convertedSchema) && convertedSchema !== null) {\r\n        Object.keys(convertedSchema).forEach(keyword => {\r\n            if (keyword === oldKey) {\r\n                let tempValue = convertedSchema[keyword]\r\n                delete convertedSchema[keyword]\r\n                convertedSchema[desiredNewKey] = tempValue\r\n            } else {\r\n                // to maintain the order\r\n                let tempValue = convertedSchema[keyword]\r\n                delete convertedSchema[keyword]\r\n                convertedSchema[keyword] = tempValue\r\n                //\r\n            }\r\n            if (typeof convertedSchema[keyword] === 'object' && !Array.isArray(convertedSchema[keyword]) && convertedSchema[keyword] !== null) {\r\n                changeKeywords(convertedSchema[keyword], oldKey, desiredNewKey)\r\n            }\r\n            else if (Array.isArray(convertedSchema[keyword]) && convertedSchema[keyword] !== null) {\r\n                convertedSchema[keyword].forEach(item => {\r\n                    changeKeywords(item, oldKey, desiredNewKey)\r\n                })\r\n            }\r\n        })\r\n    }\r\n    else if (Array.isArray(convertedSchema) && convertedSchema !== null) {\r\n        convertedSchema.forEach(item => {\r\n            changeKeywords(item, oldKey, desiredNewKey)\r\n        })\r\n    }\r\n}\r\n\r\nconst EditSchemaHeader = ({ schemaVersion, title, description, schemaID, openDialog, setOpenDialog }) => {\r\n\r\n    const [_schemaVersion, _setSchemaVersion] = useState(schemaVersion);\r\n    const [_title, _setTitle] = useState(title);\r\n    const [_description, _setDescription] = useState(description);\r\n    const [_schemaID, _setSchemaID] = useState(schemaID);\r\n    const { updateParent, convertedSchema, setSchemaSpecification } = useContext(FormContext);\r\n\r\n\r\n    const allowedSchemaDrafts = [\"http://json-schema.org/draft-04/schema#\", \"http://json-schema.org/draft-07/schema#\"]\r\n\r\n\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        setSchemaSpecification(_schemaVersion)\r\n\r\n        if (_schemaVersion === undefined) {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else if (_schemaVersion.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else {\r\n            convertedSchema[\"$schema\"] = _schemaVersion\r\n        };\r\n\r\n        if (_schemaID === undefined) {\r\n            delete convertedSchema[\"id\"]\r\n            delete convertedSchema[\"$id\"]\r\n        } else if (_schemaID.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"id\"]\r\n            delete convertedSchema[\"$id\"]\r\n        } else {\r\n            if (_schemaVersion === \"http://json-schema.org/draft-04/schema#\") {\r\n                Object.keys(convertedSchema).forEach(keyword => {\r\n                    if (keyword === \"$id\" & convertedSchema[\"$id\"] !== undefined) {\r\n                        delete convertedSchema[\"$id\"]\r\n                        convertedSchema[\"id\"] = _schemaID\r\n                    }\r\n                    else if (keyword === \"id\" & convertedSchema[\"id\"] !== undefined) {\r\n                        delete convertedSchema[\"id\"]\r\n                        convertedSchema[\"$id\"] = _schemaID\r\n                    }\r\n                    else if (convertedSchema[\"$id\"] === undefined) {\r\n                        convertedSchema[\"id\"] = _schemaID\r\n                    }  \r\n                    else {\r\n                        // to maintain the order\r\n                        let tempValue = convertedSchema[keyword]\r\n                        delete convertedSchema[keyword]\r\n                        convertedSchema[keyword] = tempValue\r\n                        //\r\n                    }\r\n                })\r\n            } else {\r\n                Object.keys(convertedSchema).forEach(keyword => {\r\n                    if (keyword === \"id\" & convertedSchema[\"id\"] !== undefined) {\r\n                        delete convertedSchema[\"id\"]\r\n                        convertedSchema[\"$id\"] = _schemaID\r\n                    }\r\n                    else if (keyword === \"$id\" & convertedSchema[\"$id\"] !== undefined) {\r\n                        delete convertedSchema[\"$id\"]\r\n                        convertedSchema[\"id\"] = _schemaID\r\n                    }\r\n                    else if (convertedSchema[\"id\"] === undefined) {\r\n                        convertedSchema[\"$id\"] = _schemaID\r\n                    }\r\n                    else {\r\n                        // to maintain the order\r\n                        let tempValue = convertedSchema[keyword]\r\n                        delete convertedSchema[keyword]\r\n                        convertedSchema[keyword] = tempValue\r\n                        //\r\n                    }\r\n                })\r\n            }\r\n        };\r\n\r\n        // change id/$id according to the selected schema version \r\n        if (_schemaVersion !== \"http://json-schema.org/draft-04/schema#\") {\r\n            // change all id's to $id\r\n            changeKeywords(convertedSchema[\"properties\"], \"id\", \"$id\")\r\n        } else {\r\n            //change all $id's to id\r\n            changeKeywords(convertedSchema[\"properties\"], \"$id\", \"id\")\r\n        }\r\n\r\n        if (_title === undefined) {\r\n            delete convertedSchema[\"title\"]\r\n        } else if (_title.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"title\"]\r\n        } else {\r\n            convertedSchema[\"title\"] = _title\r\n        };\r\n\r\n        if (_description === undefined) {\r\n            delete convertedSchema[\"description\"]\r\n        } else if (_description.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"description\"]\r\n        } else {\r\n            convertedSchema[\"description\"] = _description\r\n        };\r\n\r\n        // better ordering\r\n        let emptyObject = {}\r\n        let emptyArray = []\r\n        Object.keys(convertedSchema).forEach(keyword=>{\r\n            emptyArray.push(keyword)\r\n        })\r\n        if (emptyArray.includes(\"$schema\")) {\r\n             emptyObject[\"$schema\"] = convertedSchema[\"$schema\"]\r\n             emptyArray = emptyArray.filter(function(f) {return f !== \"$schema\"})\r\n        }\r\n        if (emptyArray.includes(\"$id\")) {\r\n            emptyObject[\"$id\"] = convertedSchema[\"$id\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"$id\"})\r\n        }\r\n        if (emptyArray.includes(\"id\")) {\r\n            emptyObject[\"id\"] = convertedSchema[\"id\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"id\"})\r\n        }\r\n        if (emptyArray.includes(\"title\")) {\r\n            emptyObject[\"title\"] = convertedSchema[\"title\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"title\"})\r\n        }\r\n        if (emptyArray.includes(\"description\")) {\r\n            emptyObject[\"description\"] = convertedSchema[\"description\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"description\"})\r\n        }\r\n        if (emptyArray.includes(\"type\")) {\r\n            emptyObject[\"type\"] = convertedSchema[\"type\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"type\"})\r\n        }\r\n        if (emptyArray.includes(\"properties\")){\r\n            emptyObject[\"properties\"] = convertedSchema[\"properties\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"properties\"})\r\n        }\r\n        if (emptyArray.includes(\"required\")){\r\n            emptyObject[\"required\"] = convertedSchema[\"required\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"required\"})\r\n        }\r\n\r\n        if (emptyArray.length !== 0) {\r\n            for (let i = 0; i<emptyArray.length; i++){\r\n                emptyObject[emptyArray[i]] = convertedSchema[emptyArray[i]]\r\n            }\r\n        }\r\n\r\n\r\n        updateParent(emptyObject)\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'title':\r\n                return _setTitle(event.target.value)\r\n            case 'description':\r\n                return _setDescription(event.target.value)\r\n            case 'version':\r\n                return _setSchemaVersion(event.target.value)\r\n            case 'id':\r\n                return _setSchemaID(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        _setDescription(description);\r\n        _setSchemaVersion(schemaVersion);\r\n        _setSchemaID(schemaID);\r\n        _setTitle(title);\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Edit schema \"{title}\"\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                            <TextField select helperText={\"Specification version for this schema. The latest available version is recommended.\"} margin='normal' onChange={event => handleChangeUISchema(event, \"version\")} style={{ marginTop: \"20px\" }} defaultValue={schemaVersion} variant=\"outlined\" fullWidth={true} label={\"$schema\"} SelectProps={{\r\n                                native: true,\r\n                            }}> {\r\n                                    allowedSchemaDrafts.map((content, index) => (\r\n                                        <option key={index} value={content}>\r\n                                            {content}\r\n                                        </option>\r\n                                    ))\r\n                                }\r\n                            </TextField>\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"id\")} style={{ marginTop: \"10px\" }} defaultValue={schemaID} variant=\"outlined\" fullWidth={true} label={\"Schema ID\"} helperText={\"ID or URI for this schema if available.\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={title} variant=\"outlined\" fullWidth={true} label={\"Schema Title\"} helperText={\"Title of the schema.\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={description} variant=\"outlined\" fullWidth={true} label={\"Schema Description\"} multiline rows={3} helperText=\"Description of the schema. Be more descriptive won't hurt.\" />\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditSchemaHeader;","import React from \"react\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { TextField } from '@material-ui/core';\r\nimport { IconButton } from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst JSONSchemaViewerDialog = ({ openSchemaViewer, setOpenSchemaViewer, jsonschema }) => {\r\n\r\n    return (<>\r\n        <Dialog\r\n            onClose={() => setOpenSchemaViewer(false)}\r\n            maxWidth=\"md\"\r\n            fullWidth={true}\r\n            open={openSchemaViewer}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ fontSize: \"30px\", width: \"100%\", alignSelf: \"center\" }}>\r\n                        JSON Schema viewer\r\n                    </div>\r\n                    <IconButton onClick={() => setOpenSchemaViewer(false)}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <TextField\r\n                    disabled\r\n                    fullWidth={true}\r\n                    variant=\"filled\"\r\n                    multiline\r\n                    defaultValue={JSON.stringify(jsonschema, null, 2)}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n            </DialogActions>\r\n        </Dialog>\r\n\r\n        {/*\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div>\r\n                            <Typography className={classes.heading}>JSON Schema Viewer</Typography>\r\n                        </div>\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div >\r\n                        <pre style={{ overflowX: \"auto\", whiteSpace: \"pre-wrap\", wordWrap: \"break-word\" }}>\r\n                            {JSON.stringify(jsonschema, null, 2)}\r\n                        </pre>\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n                */}\r\n    </>);\r\n};\r\n\r\nexport default JSONSchemaViewerDialog;","const fillForm = (schemaProp, data) => {\r\n    schemaProp.forEach(element => {\r\n        if (element[\"type\"] === \"object\") {\r\n            // early exist\r\n            if (data === undefined) {\r\n                return\r\n            } //\r\n            fillForm(element[\"properties\"], data[element[\"fieldKey\"]])\r\n        } else {\r\n            // early exist\r\n            if (data === undefined) {\r\n                return\r\n            } //\r\n            if (data[element[\"fieldKey\"]] !== undefined) {\r\n                const type = element[\"type\"]\r\n\r\n                element[\"value\"] = data[element[\"fieldKey\"]]\r\n\r\n                // validate input data before filling\r\n                switch (type) {\r\n                    case 'number':\r\n                        if (typeof (data[element[\"fieldKey\"]]) === \"number\") {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'integer':\r\n                        if (Number.isInteger(data[element[\"fieldKey\"]])) {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'boolean':\r\n                        if (typeof (data[element[\"fieldKey\"]]) === \"boolean\") {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'array':\r\n                        if (Array.isArray(data[element[\"fieldKey\"]])) {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'string':\r\n                        return (element[\"prevValue\"] = JSON.parse(JSON.stringify(data[element[\"fieldKey\"]])).toString());\r\n                    default:\r\n                        return null;\r\n                }\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport default fillForm;","import React, { useContext, useState, useCallback, useEffect } from \"react\";\r\n//import { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"./ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from '../FormContext';\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport UploadDataIcon from '@mui/icons-material/UploadFile';\r\nimport { ReactComponent as JsonIcon } from '../assets/json-file-svgrepo-com.svg'\r\nimport RevertIvon from \"@material-ui/icons/History\";\r\nimport EditSchemaHeader from \"./EditSchemaHeader\";\r\nimport JSONSchemaViewerDialog from \"./JSONSchemaViewerDialog\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { toast } from \"react-toastify\";\r\nimport fillForm from \"./utils/fillForm\";\r\nimport EditElement from \"./EditElement\";\r\n\r\nconst checkFormDataValidity = (file) => {\r\n    let validity = false\r\n    let message = <><div><strong>INVALID TYPE!</strong></div><div> Form data must be of a json file type.</div></>\r\n    if (file[0].type === \"application/json\") {\r\n        validity = true;\r\n        message = \"Form data is of a valid file type.\"\r\n    }\r\n    return [validity, message]\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst FormRenderer = ({ setSchemaSpecification, revertAllChanges, schema, edit, originalSchema }) => {\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [openSchemaViewer, setOpenSchemaViewer] = useState(false);\r\n    const [receivedData, setReceivedData] = useState()\r\n\r\n    const classes = useStyles();\r\n\r\n    // browse or drag&drop schema file\r\n    const onDrop = useCallback(\r\n        (acceptedFile) => {\r\n            // process the schema, validation etc\r\n            let validity = checkFormDataValidity(acceptedFile);\r\n            if (validity[0] === false) {\r\n                toast.error(\r\n                    validity[1],\r\n                    {\r\n                        toastId: \"somethingInvalidError\"\r\n                    }\r\n                );\r\n            } else {\r\n                // read file and update receivedData\r\n                const reader = new FileReader();\r\n                reader.onabort = () => console.log(\"file reading was aborted\");\r\n                reader.onerror = () => console.log(\"file reading has failed\");\r\n                reader.onload = () => {\r\n                    const binaryStr = reader.result;\r\n                    const obj = JSON.parse(binaryStr);\r\n                    setReceivedData(obj)\r\n                }\r\n                reader.readAsText(acceptedFile[0]);\r\n            };\r\n        },\r\n        []\r\n    );\r\n    //\r\n\r\n    // basically fill the form with the recieved data everytime we receive the data\r\n    useEffect(() => {\r\n        if (receivedData !== undefined) {\r\n            let newValue = { ...convertedSchema };\r\n\r\n            //fills this converted schema with the received data\r\n            console.log(\"before filling:\\n\", JSON.parse(JSON.stringify(newValue)))\r\n            fillForm(newValue[\"properties\"], receivedData);\r\n            console.log(\"filled form:\\n\", newValue);\r\n\r\n            updateParent(newValue);\r\n        }\r\n    }, [receivedData])\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        multiple: false,\r\n    });\r\n\r\n    // deconstruct\r\n    const { properties, title, description, required, $schema, id, $id } = schema ?? {}\r\n    useEffect(() => {\r\n        setSchemaSpecification($schema)\r\n    }, [])\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        let value = { ...convertedSchema };\r\n        value[\"properties\"] = items;\r\n        updateParent(value);\r\n    }\r\n\r\n    /*\r\n    console.log(\"converted:\", convertedSchema)\r\n    let deconvertedSchema = JSON.parse(JSON.stringify(convertedSchema))\r\n    deconvertedSchema[\"properties\"] = array2object(convertedSchema[\"properties\"])\r\n    console.log(\"deconverted:\", deconvertedSchema)\r\n    */\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <Typography className={classes.heading} style={{ width: \"100%\" }}>{title}</Typography>\r\n                <Tooltip placement=\"top\" title=\"View JSON Schema for this form\">\r\n                    <Button onClick={() => setOpenSchemaViewer(true)} style={{ marginLeft: \"5px\" }}><JsonIcon style={{ height: \"22px\" }} /></Button>\r\n                </Tooltip>\r\n                <Tooltip placement=\"top\" title=\"Upload input data for this form\">\r\n                    <Button style={{ marginLeft: \"5px\" }}{...getRootProps()}>\r\n                        <input {...getInputProps()} />\r\n                        <UploadDataIcon />\r\n                    </Button>\r\n                </Tooltip>\r\n                {edit ? <>\r\n                    <Tooltip placement=\"top\" title=\"Edit json schema header\">\r\n                        <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}>\r\n                            <EditIcon color=\"primary\" />\r\n                        </Button>\r\n                    </Tooltip>\r\n                    <Tooltip placement=\"top\" title=\"Revert all changes made to this form\">\r\n                        <Button onClick={() => revertAllChanges()} style={{ marginLeft: \"5px\" }}>\r\n                            <RevertIvon color=\"primary\" />\r\n                        </Button>\r\n                    </Tooltip>\r\n                </> : null}\r\n            </div>\r\n            <Typography style={{ paddingBottom: \"10px\" }}>{description}</Typography>\r\n            <Divider />\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"forms\">\r\n                    {(provided) => (\r\n                        <form {...provided.droppableProps} ref={provided.innerRef}>\r\n                            {Object.keys(properties).map((item, index) => {\r\n                                return (\r\n                                    <Draggable isDragDisabled={!edit} key={properties[item][\"fieldKey\"]} draggableId={properties[item][\"fieldKey\"]} index={index}>\r\n                                        {(provided) => (\r\n                                            <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                <div style={{ display: \"flex\" }}>\r\n                                                    {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                        <Tooltip placement=\"top\" title={`Drag & drop to adjust the order of this field`}>\r\n                                                            <DragHandleIcon fontSize=\"small\" />\r\n                                                        </Tooltip>\r\n                                                    </div> : null}\r\n                                                    <ElementRenderer schema={schema} path={\"properties\"} pathSchema={\"properties\"} fieldkey={properties[item][\"fieldKey\"]} fieldIndex={item} elementRequired={required} edit={edit} field={properties[item]} />\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                );\r\n                            })}\r\n                            {provided.placeholder}\r\n                            {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                <Tooltip placement=\"top\" title={`Add a new element/field to this schema`}>\r\n                                    <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                                </Tooltip>\r\n                            </div> : null}\r\n                        </form>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n        {openDialogAddElement ? <EditElement editOrAdd={\"add\"} openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} defaultSchema={defaultSchema} schemaTitle={title} field_label={\"this schema\"} /> : null}\r\n        {openDialog ? <EditSchemaHeader schemaID={id !== undefined ? id : $id} title={title} description={description} schemaVersion={$schema} openDialog={openDialog} setOpenDialog={setOpenDialog} /> : null}\r\n        {openSchemaViewer ? <JSONSchemaViewerDialog\r\n            openSchemaViewer={openSchemaViewer}\r\n            setOpenSchemaViewer={setOpenSchemaViewer}\r\n            jsonschema={originalSchema}\r\n        /> : null}\r\n    </>);\r\n};\r\n\r\nexport default FormRenderer;","// convert iterable array to json schema properties\r\nconst array2object = (propert) => {\r\n    var someObject = {};\r\n    propert.forEach((item) => {\r\n        const tempKey = item[\"fieldKey\"];\r\n        delete item[\"fieldKey\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        Object.keys(tempElements).forEach((item) => {\r\n            // change \"enumerate\" to \"enum\"\r\n            if (item === \"enumerate\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"enumerate\"])\r\n                );\r\n                delete someObject[tempKey][\"enumerate\"];\r\n                someObject[tempKey][\"enum\"] = enumContent;\r\n            }\r\n            if (item === \"defaultValue\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"defaultValue\"])\r\n                );\r\n                delete someObject[tempKey][\"defaultValue\"];\r\n                someObject[tempKey][\"default\"] = enumContent;\r\n            }\r\n            if (item === \"properties\") {\r\n                // some recursion\r\n                someObject[tempKey][\"properties\"] = array2object(\r\n                    someObject[tempKey][\"properties\"]\r\n                );\r\n            }\r\n\r\n            // delete keywords that are not supposed to be in the schema\r\n            if (item === \"value\") {\r\n                delete someObject[tempKey][\"value\"]\r\n            }\r\n            if (item === \"prevValue\") {\r\n                delete someObject[tempKey][item]\r\n            }\r\n            if (item === \"adamant_field_error\") {\r\n                delete someObject[tempKey][item]\r\n            }\r\n            if (item === \"adamant_error_description\") {\r\n                delete someObject[tempKey][item]\r\n            }\r\n        });\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default array2object;","import getValue from \"./getValue\";\r\nimport set from \"set-value\";\r\n\r\n// delete key and value given path\r\nconst deleteKeySchema = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json));\r\n    let pathArray = path.split('.');\r\n\r\n    if (pathArray.length === 1) {\r\n        delete jsonData[pathArray[0]];\r\n    } else {\r\n        let tobeDeleted = pathArray.pop();\r\n        pathArray = pathArray.join(\".\");\r\n        let value = getValue(jsonData, pathArray);\r\n        delete value[tobeDeleted]\r\n        set(jsonData, pathArray, value);\r\n    }\r\n\r\n    return jsonData;\r\n\r\n\r\n};\r\n\r\nexport default deleteKeySchema;","// validate form data against its schema using the Ajv package\r\n\r\n//\r\n// TO DO: since AJV does not really check the nested schemas easily, we must then implement a recursion to check every object type that has subschemas\r\n//      : for both formData and schema\r\n\r\nimport Ajv from \"ajv\";\r\nimport Ajv04 from \"ajv-draft-04\";\r\nimport deleteKeySchema from \"./deleteKeySchema\";\r\nimport getValueInSchemaFullPath from \"./getValueInSchemaFullPath\";\r\n\r\nconst messageLookUpTable = (field_label, field_type, keyword, message) => {\r\n    switch (keyword) {\r\n        case 'required':\r\n            return `${field_type === \"object\" ? `One or more fields in '${field_label}' container must be filled.` : `'${field_label}' field must be filled (required)`}`\r\n        default:\r\n            if (keyword === \"uniqueItems\") {\r\n                message = message.split(\"\")\r\n                let newMessage = []\r\n                message.forEach(s => {\r\n                    if (!Number.isNaN(parseInt(s))) {\r\n                        newMessage.push(parseInt(s) + 1)\r\n                    } else {\r\n                        newMessage.push(s)\r\n                    }\r\n                })\r\n                newMessage = newMessage.join(\"\")\r\n                return (`Input for '${field_label}' field ` + newMessage.replace(\"##\", \"no.\"))\r\n            } else {\r\n                return (`Input for '${field_label}' field ` + message)\r\n            }\r\n    }\r\n}\r\n\r\nconst createBetterValidationMessages = (validate, schema) => {\r\n    let errors = validate.errors\r\n    if (errors === null) {\r\n        return []\r\n    }\r\n    let messages = []\r\n\r\n    errors.forEach(error => {\r\n        // get real path\r\n        let path = error.schemaPath\r\n        path = path.substring(2)\r\n        path = path.split(\"/\")\r\n        path.pop()\r\n        if (error.keyword === \"required\") {\r\n            path.push(\"properties\")\r\n            path.push(error.params.missingProperty)\r\n        }\r\n        path = path.join(\".\")\r\n        console.log(path)\r\n\r\n        let field = getValueInSchemaFullPath(schema, path)\r\n        console.log(field)\r\n        let field_label = field[\"title\"]\r\n        let field_type = field[\"type\"]\r\n\r\n        let errorMessage = messageLookUpTable(field_label, field_type, error.keyword, error.message)\r\n        messages.push(\r\n            { \"path\": path, \"field_label\": field_label, \"message\": errorMessage }\r\n        )\r\n\r\n    })\r\n\r\n    return messages\r\n}\r\n\r\nconst validateAgainstSchema = (formData, schema) => {\r\n\r\n    if (schema[\"$schema\"] !== undefined) {\r\n        if (schema[\"$schema\"].includes(\"draft-04\")) {\r\n            console.log(\"draft-04 is detected\")\r\n            const ajv = new Ajv04({ schemaId: \"id\", allErrors: true });\r\n\r\n            const validate = ajv.compile(schema);\r\n            const valid = validate(formData)\r\n\r\n            let messages = createBetterValidationMessages(validate, schema)\r\n            return [valid, messages];\r\n        } else {\r\n            const ajv = new Ajv({ allErrors: true });\r\n\r\n            const validate = ajv.compile(schema);\r\n            const valid = validate(formData)\r\n\r\n            let messages = createBetterValidationMessages(validate, schema)\r\n            return [valid, messages];\r\n        }\r\n    } else if (schema[\"schema\"] !== undefined) {\r\n        const ajv = new Ajv({ allErrors: true });\r\n        const validate = ajv.compile(schema);\r\n        const valid = validate(formData)\r\n\r\n        let messages = createBetterValidationMessages(validate, schema)\r\n        return [valid, messages];\r\n    } else {\r\n        const ajv = new Ajv({ allErrors: true });\r\n        if (schema[\"$schema\"] !== undefined) {\r\n            schema = deleteKeySchema(schema, \"$schema\")\r\n        }\r\n        if (schema[\"id\"] !== undefined) {\r\n            schema = deleteKeySchema(schema, \"id\")\r\n        }\r\n\r\n\r\n        const validate = ajv.compile(schema);\r\n        const valid = validate(formData)\r\n\r\n        let messages = createBetterValidationMessages(validate, schema)\r\n        return [valid, messages];\r\n    }\r\n}\r\n\r\nexport default validateAgainstSchema;","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { Autocomplete } from '@material-ui/lab';\r\n\r\n\r\nconst CreateELabFTWExperimentDialog = ({ getTagsELabFTW, eLabURL, setELabURL, setTags, tags, setRetrievedTags, retrievedTags, setExperimentTitle, setToken, token, setOpenCreateElabFTWExperimentDialog, openCreateElabFTWExperimentDialog, createExperimentELabFTW }) => {\r\n\r\n    const onTagsChange = (event, values) => {\r\n        setTags(values);\r\n    };\r\n\r\n    // cancel submit\r\n    const handleCancelEdit = () => {\r\n        setOpenCreateElabFTWExperimentDialog(false)\r\n        setRetrievedTags([])\r\n        setToken(\"\")\r\n        setTags([])\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openCreateElabFTWExperimentDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ fontSize: \"30px\", width: \"100%\", alignSelf: \"center\" }}>\r\n                        Create eLabFTW Experiment\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">eLabFTW</FormLabel>\r\n                            <TextField required value={eLabURL} margin='normal' onChange={event => setELabURL(event.target.value)} style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Your eLabFTW main URL\"} />\r\n                            <TextField required margin='normal' onChange={event => setToken(event.target.value)} style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Your eLabFTW token\"} defaultValue={\"\"} />\r\n                            <TextField margin='normal' onBlur={event => setExperimentTitle(event.target.value)} style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Experiment title\"} />\r\n                            <div style={{ display: 'inline-flex', width: '100%' }}>\r\n                                <Autocomplete\r\n                                    style={{ width: \"100%\" }}\r\n                                    disabled={retrievedTags.length === 0 ? true : false}\r\n                                    multiple\r\n                                    freeSolo\r\n                                    options={retrievedTags}\r\n                                    getOptionLabel={option => option.tag || option}\r\n                                    onChange={onTagsChange}\r\n                                    renderInput={params => (\r\n                                        <TextField\r\n                                            {...params}\r\n                                            disabled={retrievedTags.length === 0 ? true : false}\r\n                                            variant=\"outlined\"\r\n                                            label=\"Tags\"\r\n                                            margin=\"normal\"\r\n                                            style={{ marginTop: \"10px\" }}\r\n                                            helperText='Press the \"GET TAGS\" button to retrieve available tags from your eLabFTW system.Note: you have to provide the eLabFTW main URL and token to enable the button.'\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                {/*<TextField disabled={retrievedTags.length === 0 ? true : false} margin='normal' style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Tags\"} helperText='Press the \"GET TAGS\" button to retrieve available tags from your eLabFTW system. Note: you have to provide the eLabFTW main URL and token to enable the button.' />*/}\r\n                                <Button onClick={() => getTagsELabFTW()} disabled={(token.trim() === \"\" | eLabURL.trim() === \"\") | (token === undefined | eLabURL === undefined) ? true : false} style={{ marginLeft: \"5px\", height: \"55px\", marginTop: \"11px\" }} variant=\"contained\" color=\"primary\">Get Tags</Button>\r\n                            </div>\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={(token.trim() === \"\" | eLabURL.trim() === \"\") | (token === undefined | eLabURL === undefined) ? true : false} onClick={() => createExperimentELabFTW()} color=\"primary\" autoFocus>\r\n                    Create Experiment\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default CreateELabFTWExperimentDialog;","const prepareDataForDescList = (convDataProp) => {\r\n    let someObject = {};\r\n    convDataProp.forEach((item) => {\r\n        const fieldkey = item[\"fieldKey\"];\r\n        const type = item[\"type\"];\r\n\r\n        if (type === \"object\") {\r\n            someObject[fieldkey] = prepareDataForDescList(item[\"properties\"])\r\n        } else {\r\n            if (item[\"value\"] !== undefined) {\r\n                // for now skip value that has object type in it\r\n                if (Array.isArray(item[\"value\"])) {\r\n                    if (typeof (item[\"value\"][0]) === \"object\") {\r\n                        console.log(\"prepareDataForDescList is skipped for this field:\", item[\"title\"])\r\n                    }\r\n                    else {\r\n                        someObject[fieldkey] = { value: item[\"value\"] }\r\n                        someObject[fieldkey][\"label\"] = item[\"title\"]\r\n                        someObject[fieldkey][\"key\"] = item[\"fieldKey\"]\r\n                        someObject[fieldkey][\"$id\"] = (item[\"$id\"] !== undefined ? item[\"$id\"] : item[\"id\"])\r\n                    }\r\n                } else {\r\n                    someObject[fieldkey] = { value: item[\"value\"] }\r\n                    someObject[fieldkey][\"label\"] = item[\"title\"]\r\n                    someObject[fieldkey][\"key\"] = item[\"fieldKey\"]\r\n                    someObject[fieldkey][\"$id\"] = (item[\"$id\"] !== undefined ? item[\"$id\"] : item[\"id\"])\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default prepareDataForDescList;","// convert iterable array to json schema properties\r\nconst array2objectAnyOf = (propert) => {\r\n    var someObject = {};\r\n    propert.forEach((item) => {\r\n        const tempKey = item[\"fieldKey\"];\r\n        delete item[\"fieldKey\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        Object.keys(tempElements).forEach((item) => {\r\n            // change \"enumerate\" to \"enum\"\r\n            if (item === \"enumerate\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"enumerate\"])\r\n                );\r\n                delete someObject[tempKey][\"enumerate\"];\r\n                someObject[tempKey][\"enum\"] = enumContent;\r\n            }\r\n            if (item === \"defaultValue\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"defaultValue\"])\r\n                );\r\n                delete someObject[tempKey][\"defaultValue\"];\r\n                someObject[tempKey][\"default\"] = enumContent;\r\n            }\r\n            if (item === \"properties\") {\r\n                if (someObject[tempKey][\"anyOf\"] !== undefined) {\r\n                    delete someObject[tempKey][\"properties\"]\r\n                    delete someObject[tempKey][\"type\"]\r\n                } else {\r\n                    // some recursion\r\n                    someObject[tempKey][\"properties\"] = array2objectAnyOf(\r\n                        someObject[tempKey][\"properties\"]\r\n                    );\r\n                }\r\n            }\r\n            if (item === \"value\") {\r\n                delete someObject[tempKey][\"value\"]\r\n            }\r\n            if (item === \"prevValue\") {\r\n                delete someObject[tempKey][item]\r\n            }\r\n        });\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default array2objectAnyOf;","const fillValueWithEmptyString = (jsonObjProp) => {\r\n\r\n    jsonObjProp.forEach(element => {\r\n        if (element[\"type\"] === \"object\") {\r\n            fillValueWithEmptyString(element[\"properties\"])\r\n        } else {\r\n            if (element[\"value\"] === undefined) {\r\n                element[\"value\"] = \"\"\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n}\r\n\r\nexport default fillValueWithEmptyString;","const convData2FormData = (convDataProp) => {\r\n    var someObject = {};\r\n    convDataProp.forEach((item) => {\r\n        const tempKey = item[\"fieldKey\"];\r\n        delete item[\"fieldKey\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        if (someObject[tempKey][\"value\"] === undefined & someObject[tempKey][\"type\"] !== \"object\") {\r\n            delete someObject[tempKey]\r\n        } else {\r\n            someObject[tempKey] = tempElements;\r\n            Object.keys(tempElements).forEach((item) => {\r\n                if (item === \"properties\") {\r\n                    // some recursion\r\n                    someObject[tempKey] = convData2FormData(\r\n                        someObject[tempKey][\"properties\"]\r\n                    );\r\n                }\r\n                if (item === \"value\") {\r\n                    if (Array.isArray(someObject[tempKey][\"value\"])) {\r\n                        if (typeof someObject[tempKey][\"value\"][0] === 'object') {\r\n                            someObject[tempKey][\"value\"].forEach((item, index) => {\r\n                                Object.keys(item).forEach(key => {\r\n                                    if (key === \"adamant-ui-specific-expand\") {\r\n                                        delete someObject[tempKey][\"value\"][index][\"adamant-ui-specific-expand\"]\r\n                                    }\r\n                                })\r\n                            })\r\n\r\n                            let value = someObject[tempKey][\"value\"]\r\n                            delete someObject[tempKey]\r\n                            someObject[tempKey] = value\r\n\r\n                        } else {\r\n                            let value = someObject[tempKey][\"value\"]\r\n                            delete someObject[tempKey]\r\n                            someObject[tempKey] = value\r\n                        }\r\n                    } else {\r\n                        let value = someObject[tempKey][\"value\"]\r\n                        delete someObject[tempKey]\r\n                        someObject[tempKey] = value\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default convData2FormData;","import React, { useState } from \"react\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { IconButton, Button } from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\n\r\n\r\nconst FormReviewBeforeSubmit = ({ onlineMode, openFormReviewDialog, setOpenFormReviewDialog, descriptionList, setOpenFunctions, submitFunctions, submitText }) => {\r\n\r\n    // for dropdown buttons\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    }; //\r\n\r\n    return (<>\r\n        <Dialog\r\n            onClose={() => setOpenFormReviewDialog(false)}\r\n            maxWidth=\"md\"\r\n            fullWidth={true}\r\n            open={openFormReviewDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ fontSize: \"30px\", width: \"100%\", alignSelf: \"center\" }}>\r\n                        Form review and submission\r\n                    </div>\r\n                    <IconButton onClick={() => setOpenFormReviewDialog(false)}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContentText style={{ paddingLeft: \"25px\", paddingTop: \"10px\" }} id=\"alert-dialog-description\" component=\"span\">\r\n                Please review your filled form before submitting.\r\n            </DialogContentText>\r\n            <DialogContent>\r\n                <div dangerouslySetInnerHTML={{ __html: descriptionList }}></div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => setOpenFormReviewDialog(false)} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button\r\n                    style={{ float: \"right\", marginRight: \"5px\" }}\r\n                    id=\"demo-positioned-button\"\r\n                    aria-controls={open ? \"demo-positioned-menu\" : undefined}\r\n                    aria-haspopup=\"true\"\r\n                    aria-expanded={open ? \"true\" : undefined}\r\n                    onClick={handleClick}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >\r\n                    Submit\r\n                </Button>\r\n                <Menu\r\n                    id=\"demo-positioned-menu\"\r\n                    aria-labelledby=\"demo-positioned-button\"\r\n                    anchorEl={anchorEl}\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{\r\n                        vertical: \"top\",\r\n                        horizontal: \"left\",\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: \"top\",\r\n                        horizontal: \"left\",\r\n                    }}\r\n                >\r\n                    <MenuItem disabled={!onlineMode} onClick={() => {\r\n                        setOpenFunctions.setOpenCreateElabFTWExperimentDialog(true);\r\n                        setOpenFormReviewDialog(false);\r\n                    }} >\r\n                        Create eLabFTW Experiment\r\n                    </MenuItem>\r\n                    <MenuItem disabled={!onlineMode} onClick={() => {\r\n                        submitFunctions.submitJobRequest();\r\n                        setOpenFormReviewDialog(false);\r\n                    }} >\r\n                        {submitText}\r\n                    </MenuItem>\r\n                </Menu>\r\n            </DialogActions>\r\n        </Dialog>\r\n    </>);\r\n};\r\n\r\nexport default FormReviewBeforeSubmit;","const changeKeywords = (convertedSchema, oldKey, desiredNewKey) => {\r\n    if (typeof convertedSchema === 'object' && !Array.isArray(convertedSchema) && convertedSchema !== null) {\r\n        Object.keys(convertedSchema).forEach(keyword => {\r\n            if (keyword === oldKey) {\r\n                let tempValue = convertedSchema[keyword]\r\n                delete convertedSchema[keyword]\r\n                convertedSchema[desiredNewKey] = tempValue\r\n            } else {\r\n                // to maintain the order\r\n                let tempValue = convertedSchema[keyword]\r\n                delete convertedSchema[keyword]\r\n                convertedSchema[keyword] = tempValue\r\n                //\r\n            }\r\n            if (typeof convertedSchema[keyword] === 'object' && !Array.isArray(convertedSchema[keyword]) && convertedSchema[keyword] !== null) {\r\n                changeKeywords(convertedSchema[keyword], oldKey, desiredNewKey)\r\n            }\r\n            else if (Array.isArray(convertedSchema[keyword]) && convertedSchema[keyword] !== null) {\r\n                convertedSchema[keyword].forEach(item => {\r\n                    changeKeywords(item, oldKey, desiredNewKey)\r\n                })\r\n            }\r\n        })\r\n    }\r\n    else if (Array.isArray(convertedSchema) && convertedSchema !== null) {\r\n        convertedSchema.forEach(item => {\r\n            changeKeywords(item, oldKey, desiredNewKey)\r\n        })\r\n    }\r\n}\r\n\r\nexport default changeKeywords","export default __webpack_public_path__ + \"static/media/adamant-header-christmas2022.2ee6ef44.svg\";","const checkObjectExistance = (arr, path) => {\r\n    let loc = false\r\n    arr.forEach((element, index) => {\r\n        if (element[\"path\"] === path) {\r\n            loc = index\r\n        }\r\n    })\r\n    return loc;\r\n}\r\n\r\nconst nicelySort = (arr) => {\r\n    let sortedArr = []\r\n    arr.forEach(element => {\r\n        // check if an object with element[\"path\"] already exists\r\n        let loc = checkObjectExistance(sortedArr, element[\"path\"])\r\n\r\n        if (loc !== false) {\r\n            let fieldArr = sortedArr[loc][\"fields\"]\r\n            fieldArr.push({ key: element[\"key\"], label: element[\"label\"], value: element[\"value\"], $id: element[\"$id\"] })\r\n        } else {\r\n            // if not then create a new object\r\n            let newObj = {}\r\n            newObj[\"path\"] = element[\"path\"]\r\n            newObj[\"pathURIs\"] = element[\"pathURIs\"]\r\n            newObj[\"pathLabels\"] = element[\"pathLabels\"]\r\n            newObj[\"fields\"] = [{ key: element[\"key\"], label: element[\"label\"], value: element[\"value\"], $id: element[\"$id\"] }]\r\n            //console.log(newObj)\r\n            sortedArr.push(newObj)\r\n        }\r\n    });\r\n\r\n\r\n    return sortedArr;\r\n}\r\n\r\nexport default nicelySort;","const getPaths = (object, value) => {\r\n    return Object\r\n        .keys(object)\r\n        .reduce((r, k) => {\r\n            var kk = Array.isArray(object) ? `[${k}]` : `${k}`;\r\n            if (object[k] === value) {\r\n                r.push(kk);\r\n            }\r\n            if (object[k] && typeof object[k] === 'object') {\r\n                r.push(...getPaths(object[k], value).map(p => kk + (p[0] === '[' ? '' : '.') + p));\r\n            }\r\n            return r;\r\n        }, []);\r\n}\r\n\r\nexport default getPaths;","// get json value in schema given path\r\nconst getValueInSchema = (json, path) => {\r\n    if (path === undefined) {\r\n        return json[\"properties\"]\r\n    }\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    if (path[0] === \"\") {\r\n        return undefined;\r\n    }\r\n    let tempValue = jsonData[\"properties\"]\r\n    for (let i = 0; i < path.length; i++) {\r\n        if (tempValue[\"type\"] === \"object\") {\r\n            tempValue = tempValue[\"properties\"][path[i]]\r\n        } else {\r\n            tempValue = tempValue[path[i]]\r\n        }\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValueInSchema;","import getValueInSchema from \"./getValueInSchema\";\r\n\r\nconst getPathURIsAndLabels = (object, path) => {\r\n\r\n    let pathArr = path.split(\".\")\r\n    let newPath = []\r\n    let uris = []\r\n    let labels = []\r\n    for (let i = 0; i < pathArr.length; i++) {\r\n        newPath.push(pathArr[i])\r\n\r\n        let thePath = JSON.parse(JSON.stringify(newPath));\r\n        thePath = thePath.join(\".\")\r\n        let value = getValueInSchema(object, thePath)\r\n        if (typeof (value) === \"object\") {\r\n            if (value[\"$id\"] !== undefined) {\r\n                uris.push(value[\"$id\"])\r\n            }\r\n            else if (value[\"id\"] !== undefined) {\r\n                uris.push(value[\"id\"])\r\n            }\r\n            else {\r\n                uris.push(\"\")\r\n            }\r\n            if (value[\"title\"] !== undefined) {\r\n                labels.push(value[\"title\"])\r\n            } else {\r\n                labels.push(\"\")\r\n            }\r\n        } else {\r\n            uris.push(\"\")\r\n            labels.push(\"\")\r\n        }\r\n    }\r\n\r\n    return [uris, labels];\r\n\r\n}\r\n\r\nexport default getPathURIsAndLabels;","import getPaths from \"./getPaths\";\r\nimport getPathURIsAndLabels from \"./getPathURIsAndLabels\";\r\n\r\n/**\r\n * Get rid of the last two items of each path in pathArr\r\n * @param {*} pathArr \r\n * @returns processedArr\r\n */\r\nconst pathPreProcess = (pathArr) => {\r\n    let processedArr = []\r\n    pathArr.forEach((item) => {\r\n        item = item.split(\".\");\r\n        item.pop();\r\n        item.pop();\r\n        item = item.join(\".\");\r\n        processedArr.push(item)\r\n    })\r\n\r\n    return processedArr\r\n}\r\n\r\nconst preProcessB4DescList = (content, originalContent, originalSchema, arr) => {\r\n\r\n    Object.keys(content).forEach((item) => {\r\n        if (content[item][\"label\"] === undefined) {\r\n            preProcessB4DescList(content[item], originalContent, originalSchema, arr)\r\n        }\r\n        else {\r\n            if (content[item][\"value\"] !== undefined) {\r\n                /*\r\n                 a function to get a path of a given a key:attribute pair\r\n                */\r\n                let path_key = getPaths(originalContent, content[item][\"key\"])\r\n                path_key = pathPreProcess(path_key)\r\n                let path_label = getPaths(originalContent, content[item][\"label\"])\r\n                path_label = pathPreProcess(path_label)\r\n                let path = path_key.filter(value => path_label.includes(value));\r\n                let URIsAndLabels = getPathURIsAndLabels(originalSchema, path[0])\r\n\r\n                arr.push({\r\n                    \"path\": path[0],\r\n                    \"pathURIs\": URIsAndLabels[0],\r\n                    \"pathLabels\": URIsAndLabels[1],\r\n                    \"key\": content[item][\"key\"],\r\n                    \"label\": content[item][\"label\"],\r\n                    \"value\": content[item][\"value\"],\r\n                    \"$id\": content[item][\"$id\"]\r\n                })\r\n            }\r\n        }\r\n    })\r\n\r\n    return arr;\r\n};\r\n\r\nexport default preProcessB4DescList;","\r\nconst getTableCandidates = (convProp, container) => {\r\n\r\n    convProp.forEach(element => {\r\n        if (element[\"type\"] === \"object\") {\r\n            getTableCandidates(element[\"properties\"], container)\r\n        } else if (element[\"type\"] === \"array\") {\r\n            if (typeof (element[\"value\"][0]) === \"object\") {\r\n                container.push({\r\n                    \"fieldKey\": element[\"fieldKey\"],\r\n                    \"title\": element[\"title\"],\r\n                    \"schemaProperties\": element[\"items\"][\"properties\"],\r\n                    \"$id\": element[\"$id\"],\r\n                    \"id\": element[\"id\"],\r\n                    \"value\": element[\"value\"]\r\n                })\r\n            }\r\n        }\r\n    });\r\n\r\n    return container;\r\n}\r\n\r\nexport default getTableCandidates;","// curently only works with flat json structure\r\nimport listMimeTypes from \"../../assets/mime-types-extensions.json\"\r\n\r\nconst table2DescListTable = (table) => {\r\n\r\n    // create table definition (?)\r\n    //let descListTable = `<div>${table[\"title\"]}</div>\\n`\r\n    let descListTable = `<div style=\"background-color: #ffffff; border: 0px;\">`\r\n    descListTable += `<a style=\"color:#000000;\"><strong>${table[\"title\"]}</strong></a>`\r\n    descListTable += \"</div>\\n\"\r\n\r\n    descListTable += \"<div>\\n\"\r\n    descListTable += `<table style=\"border-collapse: collapse;\" border=\"1\">\\n`\r\n    descListTable += `<tbody>\\n`\r\n\r\n    // now create the table header\r\n    let keyTitleMapper = []\r\n    descListTable += `<tr>\\n`\r\n    descListTable += `<td style=\"text-align: left;\"><strong>No.</strong></td>\\n`\r\n    Object.keys(table[\"schemaProperties\"]).forEach((element, index) => {\r\n        //keyTitleMapper.push({ [element]: table[\"schemaProperties\"][element][\"title\"] })\r\n        keyTitleMapper.push(element)\r\n        descListTable += `<td style=\"text-align: center;\"><strong>${table[\"schemaProperties\"][element][\"title\"]}</strong></td>\\n`\r\n    })\r\n    descListTable += `</tr>\\n`\r\n\r\n    // now the table contents\r\n    table[\"value\"].forEach((element, index) => {\r\n        descListTable += `<tr>\\n`\r\n        descListTable += `<td style=\"text-align: center;\">${index + 1}</td>\\n`\r\n        keyTitleMapper.forEach(item => {\r\n            // check if value is of data url base64\r\n            if (table[\"value\"][index][item] === undefined) {\r\n                descListTable += `<td style=\"text-align: left;\">n/a</td>\\n`\r\n            } else {\r\n                if (typeof table[\"value\"][index][item] === \"string\"){\r\n                    if (table[\"value\"][index][item].startsWith(\"data:\") & table[\"value\"][index][item].includes(\"base64\")) {\r\n                        //console.log(table[\"fieldKey\"] + \"-\" + (index + 1))\r\n                        let extension = table[\"value\"][index][item].split(\";\")[0].replace(\"data:\", \"\")\r\n                        extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                        let fileName = table[\"fieldKey\"] + \"-\" + (index + 1) + extension\r\n                        console.log(fileName)\r\n                        descListTable += `<td style=\"text-align: left;\">See attachment (${fileName})</td>\\n`\r\n                    }\r\n                    else if (table[\"value\"][index][item].trim() === \"\") {\r\n                        descListTable += `<td style=\"text-align: left;\">n/a</td>\\n`\r\n                    }\r\n                    else {\r\n                        descListTable += `<td style=\"text-align: left;\">${table[\"value\"][index][item].trim()}</td>\\n`\r\n                    }\r\n                }\r\n                else {\r\n                    descListTable += `<td style=\"text-align: left;\">${table[\"value\"][index][item]}</td>\\n`\r\n                }\r\n            }\r\n        })\r\n        descListTable += `</tr>\\n`\r\n    });\r\n\r\n    descListTable += \"</tbody>\\n\"\r\n    descListTable += `</table>\\n`\r\n    descListTable += `</div>\\n`\r\n    descListTable += `<div>&nbsp;</div>\\n`\r\n\r\n\r\n    return descListTable\r\n}\r\n\r\n\r\nexport default table2DescListTable;","import listMimeTypes from \"../../assets/mime-types-extensions.json\"\r\n\r\nconst createDescriptionList = (data) => {\r\n    let descList = \"\";\r\n    const emptyString = (element) => element === \"\";\r\n\r\n    data.forEach(element => {\r\n        if (element[\"path\"] === \"\") {\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span style=\"color: #ffffff;\"><a style=\"color: #ffffff;\" title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                } else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n        } else {\r\n            let pathArr = element[\"path\"].split(\".\");\r\n            let titleDiv = `<dt style=\"background-color: #ffffff; border: 0px; height: 10px;\"></dt>\\n`\r\n            titleDiv += `<dt style=\"background-color: #ffffff; border: 0px;\">`\r\n            pathArr.forEach((item, index) => {\r\n                if (element[\"pathURIs\"] !== undefined & !element[\"pathURIs\"].some(emptyString)) {\r\n                    if (item !== \"\") {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a style=\"color:#29AEB9;\" title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a style=\"color:#29AEB9;\" title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}>${element[\"pathLabels\"][index]}</a><a style=\"color: #29aeb9;\">/</a>`\r\n                        }\r\n                    } else {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a style=\"color:#000000;\"><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a style=\"color:#000000;\">${element[\"pathLabels\"][index]}/</a>`\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (index === (pathArr.length - 1)) {\r\n                        titleDiv += `<a style=\"color:#000000;\"><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                    } else {\r\n                        titleDiv += `<a style=\"color:#000000;\">${element[\"pathLabels\"][index]}/</a>`\r\n                    }\r\n                }\r\n            })\r\n            titleDiv += \"</dt>\\n\"\r\n\r\n            descList += titleDiv\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span style=\"color: #ffffff;\"><a style=\"color: #ffffff;\" title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n                else if (item[\"$id\"] === undefined & item[\"id\"] !== undefined) {\r\n                    descList += `<dt><span style=\"color: #ffffff;\"><a style=\"color: #ffffff;\" title=${item[\"id\"]} href=${item[\"id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n\r\n                else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    return descList;\r\n}\r\n\r\nexport default createDescriptionList;","import listMimeTypes from \"../../assets/mime-types-extensions.json\"\r\n\r\nconst createDescriptionListWithoutStyling = (data) => {\r\n    let descList = \"\";\r\n    const emptyString = (element) => element === \"\";\r\n\r\n    data.forEach(element => {\r\n        if (element[\"path\"] === \"\") {\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                } else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n        } else {\r\n            let pathArr = element[\"path\"].split(\".\");\r\n            let titleDiv = `<dt></dt>\\n`\r\n            titleDiv += `<dt>`\r\n            pathArr.forEach((item, index) => {\r\n                if (element[\"pathURIs\"] !== undefined & !element[\"pathURIs\"].some(emptyString)) {\r\n                    if (item !== \"\") {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}>${element[\"pathLabels\"][index]}</a><a>/</a>`\r\n                        }\r\n                    } else {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a>${element[\"pathLabels\"][index]}/</a>`\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (index === (pathArr.length - 1)) {\r\n                        titleDiv += `<a><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                    } else {\r\n                        titleDiv += `<a>${element[\"pathLabels\"][index]}/</a>`\r\n                    }\r\n                }\r\n            })\r\n            titleDiv += \"</dt>\\n\"\r\n\r\n            descList += titleDiv\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span><a title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n                else if (item[\"$id\"] === undefined & item[\"id\"] !== undefined) {\r\n                    descList += `<dt><span><a title=${item[\"id\"]} href=${item[\"id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n\r\n                else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    return descList;\r\n}\r\n\r\nexport default createDescriptionListWithoutStyling;","import nicelySort from \"./nicelySort\";\r\nimport preProcessB4DescList from \"./preProcessB4DescList\";\r\nimport getTableCandidates from \"./getTableCandidates\";\r\nimport table2DescListTable from \"./table2DescListTable\";\r\nimport createDescriptionList from \"./createDescriptionList\";\r\nimport createDescriptionListWithoutStyling from \"./createDescriptionListWithoutStyling\";\r\n\r\n\r\nconst createDescriptionListFromJSON = (cleanedJson, convertedSchema, convertedProperties, schema, footnote, styling) => {\r\n\r\n    let preProcessed = preProcessB4DescList(cleanedJson, cleanedJson, schema, []);\r\n    //console.log(preProcessed);\r\n    let nicelySorted = nicelySort(preProcessed);\r\n    // now check if there is array that contains object if there is then create a html table for this array\r\n    let tables = getTableCandidates(convertedProperties, []);\r\n    let descListTables = [];\r\n    if (tables.length !== 0) {\r\n        tables.forEach((table) =>\r\n            descListTables.push(table2DescListTable(table))\r\n        );\r\n    }\r\n    let descList;\r\n    if (styling) {\r\n        descList = `<dl>\\n${createDescriptionList(\r\n            nicelySorted\r\n        )}</dl>\\n`;\r\n    }\r\n    else {\r\n        descList = `<dl>\\n${createDescriptionListWithoutStyling(\r\n            nicelySorted\r\n        )}</dl>\\n`;\r\n    }\r\n    let descListHeading = `<h1><strong>${convertedSchema[\"title\"]}</strong></h1>\\n`;\r\n    descListHeading += descList;\r\n    // now insert desc list tables if applicable/available\r\n    if (descListTables.length !== 0) {\r\n        descListTables.forEach((item) => {\r\n            descListHeading += item;\r\n        });\r\n    }\r\n    descListHeading += footnote\r\n\r\n    return descListHeading;\r\n}\r\n\r\n\r\nexport default createDescriptionListFromJSON;","import Ajv from \"ajv\";\r\nimport Ajv04 from \"ajv-draft-04\";\r\nimport deleteKeySchema from \"./deleteKeySchema\";\r\n\r\nconst validateSchemaAgainstSpecification = (schema, spec) => {\r\n    if (schema[\"$schema\"] !== undefined) {\r\n        if ([\"http://json-schema.org/draft-04/schema#\", \"http://json-schema.org/draft-05/schema#\", \"http://json-schema.org/draft-06/schema#\"].includes(schema[\"$schema\"])) {\r\n            console.log(`${spec.replace(\"http://json-schema.org/\", \"\").replace(\"/schema#\", \"\")} is detected`)\r\n            console.log(\"Using Ajv for draft 04\")\r\n            schema[\"$schema\"] = \"http://json-schema.org/draft-04/schema#\"\r\n            if (schema[\"$id\"] !== undefined) {\r\n                schema[\"id\"] = schema[\"$id\"]\r\n                delete schema[\"$id\"]\r\n            }\r\n            const ajv = new Ajv04({ schemaId: \"id\", allErrors: true });\r\n            try {\r\n                ajv.compile(schema);\r\n                return [true, \"schema is valid\"]\r\n            }\r\n            catch (error) {\r\n                let errorMessage = error.toString()\r\n                errorMessage = errorMessage.replace(\"Error: strict mode: unknown keyword\", `This specification (${spec}) does not support keyword`)\r\n                //console.log(error)\r\n                return [false, errorMessage]\r\n            }\r\n        }\r\n        else {\r\n            console.log(\"draft-07 or above is detected\")\r\n            console.log(\"Using latest Ajv\")\r\n            const ajv = new Ajv({ allErrors: true });\r\n            /*schema = deleteKeySchema(schema, \"$schema\")\r\n            if (schema[\"id\"] !== undefined) {\r\n                schema = deleteKeySchema(schema, \"id\")\r\n            }*/\r\n            try {\r\n                ajv.compile(schema);\r\n                return [true, \"schema is valid\"]\r\n            }\r\n            catch (error) {\r\n                let errorMessage = error.toString()\r\n                errorMessage = errorMessage.replace(\"Error: strict mode: unknown keyword\", `This specification (${spec}) does not support keyword`)\r\n                //console.log(error)\r\n                return [false, errorMessage]\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        console.log(\"'$schema' is not found. Latest spec is used.\")\r\n        const ajv = new Ajv({ allErrors: true });\r\n        if (schema[\"$schema\"] !== undefined) {\r\n            schema = deleteKeySchema(schema, \"$schema\")\r\n        }\r\n        if (schema[\"id\"] !== undefined) {\r\n            schema = deleteKeySchema(schema, \"id\")\r\n        }\r\n        ajv.compile(schema);\r\n        return [true, \"schema does not have schema specification\"]\r\n    }\r\n}\r\n\r\nexport default validateSchemaAgainstSpecification;","// check if id already exists in a schema\r\n\r\nconst checkIDexistence = (schema, id, result) => {\r\n    //alert(id)\r\n    Object.keys(schema).forEach(key=>{\r\n        if (typeof schema[key] !== \"object\"){\r\n            //alert(id+\" | \"+schema[key])\r\n            if (key === \"id\" || key === \"$id\") {\r\n                if (schema[key] === id){\r\n                    result = true\r\n                }\r\n            }\r\n        }\r\n        else if (typeof schema[key] === \"object\" ) {\r\n            result = checkIDexistence(schema[key], id, result)\r\n        }\r\n    })\r\n\r\n    if (result) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n\r\n}\r\n\r\nexport default checkIDexistence","import React, { useCallback, useState } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n//import QPTDATLogo from \"../assets/header-image.png\";\r\nimport FormRenderer from \"../components/FormRenderer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { IconButton, TextField } from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { FormContext } from \"../FormContext\";\r\nimport array2object from \"../components/utils/array2object\";\r\nimport object2array from \"../components/utils/object2array\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport DownloadIcon from \"@material-ui/icons/GetApp\";\r\nimport set from \"set-value\";\r\nimport getValue from \"../components/utils/getValue\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport deleteKeySchema from \"../components/utils/deleteKeySchema\";\r\nimport validateAgainstSchema from \"../components/utils/validateAgainstSchema\";\r\nimport CreateELabFTWExperimentDialog from \"../components/CreateELabFTWExperimentDialog\";\r\nimport { useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport prepareDataForDescList from \"../components/utils/prepareDataForDescList\";\r\nimport array2objectAnyOf from \"../components/utils/array2objectAnyOf\";\r\nimport SchemaOne from \"../schemas/all-types.json\";\r\nimport SchemaTwo from \"../schemas/demo-schema.json\";\r\nimport SchemaThree from \"../schemas/example-experiment-schema.json\";\r\nimport SchemaFour from \"../schemas/example-request-schema.json\";\r\nimport SchemaFive from \"../schemas/plasma-mds.json\";\r\nimport fillValueWithEmptyString from \"../components/utils/fillValueWithEmptyString\";\r\nimport convData2FormData from \"../components/utils/convData2FormData\";\r\nimport FormReviewBeforeSubmit from \"../components/FormReviewBeforeSubmit\";\r\nimport changeKeywords from \"../components/utils/changeKeywords\";\r\n//import QPTDATLogo from \"../assets/adamant-header-5.svg\";\r\nimport QPTDATLogo from \"../assets/adamant-header-christmas2022.svg\";\r\nimport createDescriptionListFromJSON from \"../components/utils/createDescriptionListFromJSON\";\r\nimport HelpIcon from \"@material-ui/icons/HelpOutlineRounded\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport validateSchemaAgainstSpecification from \"../components/utils/validateSchemaAgainstSpecification\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport getPaths from \"../components/utils/getPaths\";\r\nimport checkIDexistence from \"../components/utils/checkIDexistence\";\r\n\r\n// function that receive the schema and convert it to Form/json data blueprint\r\n// also to already put the default value to this blueprint\r\nconst createFormDataBlueprint = (schemaProperties) => {\r\n  let newObject = {};\r\n\r\n  Object.keys(schemaProperties).forEach((item) => {\r\n    if (schemaProperties[item][\"type\"] !== \"object\") {\r\n      if (schemaProperties[item][\"default\"] !== undefined) {\r\n        newObject[item] = schemaProperties[item][\"default\"];\r\n      } else if (\r\n        (schemaProperties[item][\"default\"] === undefined) &\r\n        (schemaProperties[item][\"enum\"] !== undefined)\r\n      ) {\r\n        newObject[item] = schemaProperties[item][\"enum\"][0];\r\n      } else if (\r\n        (schemaProperties[item][\"type\"] === \"boolean\") &\r\n        (schemaProperties[item][\"default\"] === undefined)\r\n      ) {\r\n        newObject[item] = false;\r\n      }\r\n    } else {\r\n      if (schemaProperties[item][\"properties\"] !== undefined) {\r\n        newObject[item] = createFormDataBlueprint(\r\n          schemaProperties[item][\"properties\"]\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return newObject;\r\n};\r\n\r\n// function to remove empty artributes\r\nconst removeEmpty = (obj) => {\r\n  Object.keys(obj).forEach((key) => {\r\n    if (obj[key] && typeof obj[key] === \"object\") {\r\n      const childObject = removeEmpty(obj[key]);\r\n      if (childObject === undefined) {\r\n        delete obj[key];\r\n      }\r\n    } else if (obj[key] === \"\" || obj[key] === null || obj[key] === undefined) {\r\n      delete obj[key];\r\n    }\r\n  });\r\n  return Object.keys(obj).length > 0 || obj instanceof Array ? obj : undefined;\r\n};\r\n\r\nconst AdamantMain = () => {\r\n  // state management\r\n  const [disable, setDisable] = useState(true);\r\n  const [schemaMessage, setSchemaMessage] = useState(null);\r\n  const [schemaValidity, setSchemaValidity] = useState(false);\r\n  const [schema, setSchema] = useState(null);\r\n  const [schemaIntermediate, setSchemaIntermediate] = useState(null);\r\n  const [renderReady, setRenderReady] = useState(false);\r\n  const [editMode, setEditMode] = useState(true);\r\n  const [schemaList, setSchemaList] = useState([]);\r\n  const [schemaNameList, setSchemaNameList] = useState([]);\r\n  const [selectedSchemaName, setSelectedSchemaName] = useState(\"\");\r\n  const [originalSchema, setOriginalSchema] = useState();\r\n  const [inputMode, setInputMode] = useState(false);\r\n  const [convertedSchema, setConvertedSchema] = useState(null);\r\n  const [createScratchMode, setCreateScratchMode] = useState(false);\r\n  const [jsonData, setJsonData] = useState({});\r\n  const [descriptionList, setDescriptionList] = useState(\"\");\r\n  const [schemaWithValues, setSchemaWithValues] = useState({});\r\n  const [schemaSpecification, setSchemaSpecification] = useState(\"\");\r\n  const [token, setToken] = useState(\"\");\r\n  const [eLabURL, setELabURL] = useState(\"\");\r\n  const [experimentTitle, setExperimentTitle] = useState(\"\");\r\n  const [onlineMode, setOnlineMode] = useState(false);\r\n  const [tags, setTags] = useState([]);\r\n  const [retrievedTags, setRetrievedTags] = useState([]);\r\n  const [SEMSelectedDevice, setSEMSelectedDevice] = useState(\"\");\r\n  const [HeaderImage, setHeaderImage] = useState(QPTDATLogo);\r\n  const [openFormReviewDialog, setOpenFormReviewDialog] = useState(false);\r\n  const [openJobRequestDialog, setOpenJobRequestDialog] = useState(false);\r\n  const [jobRequestSchemas, setJobRequestSchemas] = useState([]);\r\n  const [submitTextList, setSubmitTextList] = useState([]);\r\n  const [submitText, setSubmitText] = useState(\"Submit Job Request\");\r\n  // for dropdown buttons\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [\r\n    openCreateElabFTWExperimentDialog,\r\n    setOpenCreateElabFTWExperimentDialog,\r\n  ] = useState(false);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  }; //\r\n\r\n  // loaded files object\r\n  const [loadedFiles, setLoadedFiles] = useState([]);\r\n\r\n  // FilesDialog\r\n  const [openFilesDialog, setOpenFilesDialog] = useState(false);\r\n  const [filesDialogContent, setFilesDialogContent] = useState([\"\", \"\", \"\"]);\r\n\r\n  let implementedFieldTypes = [\r\n    \"string\",\r\n    \"number\",\r\n    \"integer\",\r\n    \"array\",\r\n    \"boolean\",\r\n    \"object\",\r\n  ];\r\n\r\n  // check if the front-end is connected to backend at all\r\n  useEffect(() => {\r\n    let $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"GET\",\r\n      url: \"/api/check_mode\",\r\n      success: function (status) {\r\n        console.log(\"Connection to server is established. Online mode\");\r\n        setJobRequestSchemas(status[\"jobRequestSchemaList\"]);\r\n        console.log(status[\"jobRequestSchemaList\"]);\r\n        setSubmitTextList(status[\"submitButtonText\"]);\r\n        setOnlineMode(true);\r\n        toast.success(\r\n          <>\r\n            <div>\r\n              <strong>Connection to server is established.</strong>\r\n            </div>\r\n          </>,\r\n          {\r\n            toastId: \"connectionSuccess\",\r\n          }\r\n        );\r\n      },\r\n      error: function () {\r\n        console.log(\r\n          \"Unable to establish connection to server. Offline mode. Submit feature is disabled.\"\r\n        );\r\n        setOnlineMode(false);\r\n\r\n        // use available schema as a place holder\r\n        setSchemaNameList([\r\n          \"\",\r\n          \"all-types.json\",\r\n          \"demo-schema.json\",\r\n          \"example-experiment-schema.json\",\r\n          \"example-request-schema.json\",\r\n          \"plasma-mds.json\",\r\n        ]);\r\n        setSchemaList([\r\n          null,\r\n          SchemaOne,\r\n          SchemaTwo,\r\n          SchemaThree,\r\n          SchemaFour,\r\n          SchemaFive,\r\n        ]);\r\n\r\n        toast.warning(\r\n          <>\r\n            <div>\r\n              <strong>Unable to establish connection to server.</strong>\r\n            </div>\r\n            <div>Submit feature is disabled.</div>\r\n          </>,\r\n          {\r\n            toastId: \"connectionWarning\",\r\n          }\r\n        );\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // get schemas from server when onlinemode is true\r\n  useEffect(() => {\r\n    // if online mode then get available schemas from server\r\n    if (onlineMode === true) {\r\n      let $ = require(\"jquery\");\r\n      $.ajax({\r\n        type: \"GET\",\r\n        url: \"/api/get_schemas\",\r\n        success: function (status) {\r\n          console.log(\"SUCCESS\");\r\n\r\n          // do this to preserver the order\r\n          let sch = [];\r\n          status[\"schema\"].forEach((element) => {\r\n            sch.push(JSON.parse(element));\r\n          });\r\n\r\n          setSchemaList(sch);\r\n          setSchemaNameList(status[\"schemaName\"]);\r\n        },\r\n        error: function () {\r\n          console.log(\"ERROR\");\r\n          toast.warning(\r\n            \"Error while fetching the schemas. Using basic list of schemas.\",\r\n            {\r\n              toastId: \"fetchingSchemasError\",\r\n            }\r\n          );\r\n          // if unable to fetch the schemas then use the basic list of schemas\r\n          setSchemaNameList([\r\n            \"\",\r\n            \"all-types.json\",\r\n            \"demo-schema.json\",\r\n            \"example-experiment-schema.json\",\r\n            \"example-request-schema.json\",\r\n            \"plasma-mds.json\",\r\n          ]);\r\n          setSchemaList([\r\n            null,\r\n            SchemaOne,\r\n            SchemaTwo,\r\n            SchemaThree,\r\n            SchemaFour,\r\n            SchemaFive,\r\n          ]);\r\n        },\r\n      });\r\n    }\r\n  }, [onlineMode]);\r\n\r\n  // handle select schema on change\r\n  const handleSelectSchemaOnChange = (schemaName) => {\r\n    if (schemaName === null) {\r\n      clearSchemaOnClick()\r\n\r\n      return \r\n    }\r\n    \r\n    //console.log(event)\r\n    // first reset states\r\n    setRenderReady(false);\r\n    setDisable(true);\r\n    setCreateScratchMode(false);\r\n    setJsonData({});\r\n    //\r\n\r\n    console.log(\"selected schema:\", schemaName);\r\n    setSelectedSchemaName(schemaName);\r\n\r\n    let selectedSchema = schemaList[schemaNameList.indexOf(schemaName)];\r\n\r\n    // reset everything when selectedSchema is empty\r\n    if (selectedSchema === null) {\r\n      setDisable(true);\r\n      setRenderReady(false);\r\n      setSchema(null);\r\n      setSchemaValidity(false);\r\n      setSchemaMessage();\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      return;\r\n    }\r\n\r\n    // convert selectedSchema schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n    try {\r\n      convertedSchema[\"properties\"] = object2array(\r\n        selectedSchema[\"properties\"]\r\n      );\r\n\r\n      // update states\r\n      setSchemaValidity(true);\r\n      setSchemaMessage(`${schemaName} is a valid schema`);\r\n      setSchema(selectedSchema);\r\n      let oriSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n      setOriginalSchema(oriSchema);\r\n      setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n      setConvertedSchema(convertedSchema);\r\n\r\n      if (jobRequestSchemas.includes(convertedSchema[\"title\"])) {\r\n        try {\r\n          //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n          //setHeaderImage(SEMlogo[\"default\"]);\r\n          setHeaderImage(QPTDATLogo);\r\n          setEditMode(false);\r\n          setSubmitText(\r\n            submitTextList[jobRequestSchemas.indexOf(convertedSchema[\"title\"])]\r\n          );\r\n        } catch (error) {\r\n          console.log(error);\r\n          setHeaderImage(QPTDATLogo);\r\n          setEditMode(true);\r\n        }\r\n      } else {\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(true);\r\n      }\r\n\r\n      // create form data\r\n      let formData = createFormDataBlueprint(selectedSchema[\"properties\"]);\r\n      setJsonData(formData);\r\n    } catch (error) {\r\n      console.log(error);\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${schemaName} is invalid`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // function to check if the file accepted is of json format and json schema valid\r\n  const checkSchemaValidity = (schemaFile) => {\r\n    // place holder\r\n    if (schemaFile[0][\"type\"] === \"application/json\") {\r\n      // read the file with FileReadr API\r\n      const reader = new FileReader();\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = () => {\r\n        const binaryStr = reader.result;\r\n        const obj = JSON.parse(binaryStr);\r\n\r\n        // convert obj schema to iterable array properties\r\n        let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n        try {\r\n          convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n          // update states\r\n          setSchemaValidity(true);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is a valid schema`);\r\n          setSchema(obj);\r\n          let oriSchema = JSON.parse(JSON.stringify(obj));\r\n          setOriginalSchema(oriSchema);\r\n          setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n          setConvertedSchema(convertedSchema);\r\n\r\n          if (jobRequestSchemas.includes(obj[\"title\"])) {\r\n            try {\r\n              //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n              //setHeaderImage(SEMlogo[\"default\"]);\r\n              setHeaderImage(QPTDATLogo);\r\n              setEditMode(false);\r\n              setSubmitText(\r\n                submitTextList[\r\n                  jobRequestSchemas.findIndex(convertedSchema[\"title\"])\r\n                ]\r\n              );\r\n            } catch (error) {\r\n              console.log(error);\r\n              setHeaderImage(QPTDATLogo);\r\n              setEditMode(true);\r\n            }\r\n          } else {\r\n            setHeaderImage(QPTDATLogo);\r\n            setEditMode(true);\r\n          }\r\n\r\n          // create form data\r\n          let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n          setJsonData(formData);\r\n        } catch (error) {\r\n          console.log(error);\r\n          // update states\r\n          setSchemaValidity(false);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is invalid`);\r\n          setSchema(null);\r\n        }\r\n      };\r\n      reader.readAsText(schemaFile[0]);\r\n    } else {\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${schemaFile[0][\"name\"]} is of incorrect file type`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // browse or drag&drop schema file\r\n  const onDrop = useCallback(\r\n    (acceptedFile) => {\r\n      // process the schema, validation etc\r\n      checkSchemaValidity(acceptedFile);\r\n\r\n      // store schema file in the state\r\n      // update states\r\n      setRenderReady(false);\r\n      setDisable(true);\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      setSelectedSchemaName(\"\");\r\n    },\r\n    [setRenderReady, jobRequestSchemas, submitTextList]\r\n  );\r\n  //\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    multiple: false,\r\n  });\r\n\r\n  // render on-click handle\r\n  const renderOnClick = () => {\r\n    //setFormRenderInProgress(true);\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // clear schema on-click handle\r\n  const clearSchemaOnClick = () => {\r\n    setHeaderImage(QPTDATLogo);\r\n    setDisable(true);\r\n    setRenderReady(false);\r\n    setSchema(null);\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setCreateScratchMode(false);\r\n    setSelectedSchemaName(\"\");\r\n  };\r\n\r\n  // create new schema from scratch\r\n  const createSchemaFromScratch = () => {\r\n    // update browse schema render states\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setJsonData({});\r\n    setSelectedSchemaName(\"\");\r\n\r\n    // always use newer schema specification\r\n    let schemaBlueprint = {\r\n      $schema: \"http://json-schema.org/draft-07/schema#\",\r\n      type: \"object\",\r\n      properties: {},\r\n    };\r\n    const obj = JSON.parse(JSON.stringify(schemaBlueprint));\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n    setJsonData(formData);\r\n\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n    convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n    // update states\r\n    setCreateScratchMode(true);\r\n    setSchema(obj);\r\n    let oriSchema = JSON.parse(JSON.stringify(obj));\r\n    setOriginalSchema(oriSchema);\r\n    setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n    setConvertedSchema(convertedSchema);\r\n\r\n    if (jobRequestSchemas.includes(obj[\"title\"])) {\r\n      try {\r\n        //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n        //setHeaderImage(SEMlogo[\"default\"]);\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(false);\r\n        setSubmitText(\r\n          submitTextList[jobRequestSchemas.findIndex(convertedSchema[\"title\"])]\r\n        );\r\n      } catch (error) {\r\n        console.log(error);\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(true);\r\n      }\r\n    } else {\r\n      setHeaderImage(QPTDATLogo);\r\n      setEditMode(true);\r\n    }\r\n\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // compile on-click handle\r\n  const compileOnClick = () => {\r\n    let value = schema;\r\n\r\n    const [valid, message] = validateSchemaAgainstSpecification(\r\n      JSON.parse(JSON.stringify(schema)),\r\n      schemaSpecification\r\n    );\r\n    if (valid) {\r\n      setInputMode(true);\r\n      setSchema(value);\r\n      setEditMode(false);\r\n      setDisable(true);\r\n    } else {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Your schema is not valid.</strong>\r\n          </div>\r\n          {message}\r\n        </>,\r\n        {\r\n          toastId: \"schemaError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n  };\r\n\r\n  // return to edit mode handle\r\n  const toEditMode = () => {\r\n    let value = schema;\r\n    if (jobRequestSchemas.includes(schema[\"title\"])) {\r\n      setInputMode(false);\r\n      setSchema(value);\r\n      setEditMode(false);\r\n      setDisable(false);\r\n    } else {\r\n      setInputMode(false);\r\n      setSchema(value);\r\n      setEditMode(true);\r\n      setDisable(false);\r\n    }\r\n  };\r\n\r\n  // update parent (re-render everything)\r\n  const updateParent = (value) => {\r\n    let newValue = { ...value };\r\n\r\n    if (newValue[\"$schema\"] === \"http://json-schema.org/draft-04/schema#\") {\r\n      changeKeywords(newValue, \"$id\", \"id\");\r\n    } else {\r\n      changeKeywords(newValue, \"id\", \"$id\");\r\n    }\r\n\r\n    // update original schema\r\n    let updatedSchema = JSON.parse(JSON.stringify(newValue));\r\n    let tempSchema = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema[\"properties\"] = array2object(tempSchema[\"properties\"]);\r\n\r\n    setConvertedSchema(newValue);\r\n    setSchema(updatedSchema);\r\n\r\n    // update intermediate schema\r\n    let updatedSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    let tempSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema2[\"properties\"] = array2objectAnyOf(tempSchema2[\"properties\"]);\r\n    setSchemaIntermediate(updatedSchema2);\r\n  };\r\n\r\n  // update error stuff visually after validation (if some field(s) is are invalid)\r\n  const setErrorStuffUponValidation = (errorMessages) => {\r\n    let value = { ...convertedSchema };\r\n    errorMessages.forEach((message) => {\r\n      let path = message.path;\r\n      path = path.split(\".\");\r\n      let newPath = [];\r\n      let tempValue = JSON.parse(JSON.stringify(value));\r\n      for (let i = 0; i < path.length; ) {\r\n        if (path[i] === \"items\" && tempValue[path[i]][\"type\"] === \"object\") {\r\n          set(value, newPath.join(\".\") + \".adamant_field_error\", true);\r\n          set(\r\n            value,\r\n            newPath.join(\".\") + \".adamant_error_description\",\r\n            \"One or more fields in this array have invalid inputs. Please fix them.\"\r\n          );\r\n          return;\r\n        }\r\n        if (\r\n          path[i] === \"properties\" &&\r\n          Array.isArray(tempValue[\"properties\"])\r\n        ) {\r\n          newPath.push(path[i]);\r\n          i += 1;\r\n          let index = tempValue[\"properties\"].findIndex(\r\n            (val) => val.fieldKey === path[i]\r\n          );\r\n          newPath.push(index);\r\n          i += 1;\r\n          tempValue = tempValue[\"properties\"][index];\r\n        } else {\r\n          newPath.push(path[i]);\r\n          tempValue = tempValue[path[i]];\r\n          i += 1;\r\n        }\r\n      }\r\n      //console.log(newPath.join(\".\"));\r\n      set(value, newPath.join(\".\") + \".adamant_field_error\", true);\r\n      set(\r\n        value,\r\n        newPath.join(\".\") + \".adamant_error_description\",\r\n        message.message\r\n      );\r\n    });\r\n\r\n    updateParent(value);\r\n  };\r\n\r\n  // revert all changes to the schema\r\n  const revertAllChanges = () => {\r\n    let value = { ...originalSchema };\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(value));\r\n    convertedSchema[\"properties\"] = object2array(value[\"properties\"]);\r\n    console.log(convertedSchema);\r\n    setConvertedSchema(convertedSchema);\r\n    setSchema(value);\r\n    setSchemaWithValues(value);\r\n    setDescriptionList(\"\");\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(value[\"properties\"]);\r\n    setJsonData(formData);\r\n  };\r\n\r\n  /*/ handle data input on blur\r\n  const handleDataInput = (event, path, type) => {\r\n    let jData = { ...jsonData };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(jData, path, value);\r\n    //console.log(\"Current form data    (jData):\", jData);\r\n    setJsonData(jData);\r\n  };\r\n  /*/\r\n\r\n  // handle data input on blur to convertedSchema\r\n  const handleConvertedDataInput = (event, path, type) => {\r\n    let convSchemaData = { ...convertedSchema };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(convSchemaData, path, value);\r\n    setConvertedSchema(convSchemaData);\r\n    console.log(convSchemaData);\r\n\r\n    let data = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    setJsonData(data);\r\n\r\n    // convert to form data\r\n    console.log(\"Current form data (convData):\", data);\r\n\r\n    // unconverted\r\n    //console.log(\"Current form data (unconverted convData):\", convSchemaData);\r\n  };\r\n\r\n  // delete data in jsonData when the field in schema is deleted\r\n  const handleDataDelete = (path) => {\r\n    console.log(\"path\", path)\r\n    console.log(jsonData)\r\n    let jData = { ...jsonData };\r\n    let value = deleteKeySchema(jData, path);\r\n    setJsonData(value);\r\n    console.log(\"Current form data:\", value);\r\n  };\r\n\r\n  // handle check if id already exists in the schema\r\n  const handleCheckIDexistence = (id) =>{\r\n    let result = false\r\n    result = checkIDexistence(schema, id, result);\r\n    return result\r\n  }\r\n\r\n  // update form data id if a fieldkey changes, simply delete key value pair of the oldfieldid from jsonData\r\n  const updateFormDataId = (\r\n    oldFieldId,\r\n    newFieldId,\r\n    pathFormData,\r\n    defaultValue\r\n  ) => {\r\n    if (oldFieldId === newFieldId) {\r\n      return;\r\n    }\r\n    if (defaultValue === undefined) {\r\n      let jData = { ...jsonData };\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    } else {\r\n      let newPathFormData = pathFormData.split(\".\");\r\n      newPathFormData.pop();\r\n      newPathFormData.push(newFieldId);\r\n\r\n      let jData = { ...jsonData };\r\n      let value = getValue(jData, pathFormData);\r\n      set(jData, newPathFormData, value);\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    }\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadJsonSchema = () => {\r\n    let content = { ...schema };\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `jsonschema-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadFormData = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `formdata-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadDescriptionList = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = prepareDataForDescList(convProp); // skip keyword that has value of array with objects as its elements\r\n    //let cleaned = removeEmpty(prepareDataForDescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to download. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // create description list\r\n    let footnote = `<div> This template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>ADAMANT v1.2.0</a></span> </div>`;\r\n    let descList = createDescriptionListFromJSON(\r\n      cleaned,\r\n      convSch,\r\n      convProp,\r\n      schema,\r\n      footnote,\r\n      false\r\n    ); // false means without styling\r\n\r\n    setDescriptionList(descList);\r\n\r\n    let sha256_hash = CryptoJS.SHA256(descList);\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([descList], {\r\n      type: \"text/html\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `desclist-${sha256_hash}.tpl`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // get available tags from elabftw\r\n  const getTagsELabFTW = () => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/get_tags\",\r\n      dataType: \"json\",\r\n      data: {\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n      },\r\n      success: function (status) {\r\n        console.log(\"Tags retrieved successfully\");\r\n        //let arr = [];\r\n        //for (let i = 0; i < status.length; i++) {\r\n        //  arr.push(status[i][\"tag\"]);\r\n        //}\r\n        setRetrievedTags(status);\r\n        toast.success(`Successfully retrieved the tags!`, {\r\n          toastId: \"fetchingTagsSuccess\",\r\n        });\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Failed to retrieve tags\");\r\n        console.log(status);\r\n        toast.error(`Failed to get the tags!\\nMaybe wrong url or token?`, {\r\n          toastId: \"fetchingTagsError\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // create an experiment in elabftw based on the schema and data\r\n  const createExperimentELabFTW = () => {\r\n    // validate the data first using ajv\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    console.log(\"content\", content);\r\n    //console.log(\"loadedFiles\", loadedFiles)\r\n\r\n    /*\r\n    // get the paths where the uploaded files are from content\r\n    let fileEntries = []\r\n    for (let i=0; i<loadedFiles.length; i++) {\r\n      let file = loadedFiles[i]\r\n      let fileName = file[\"name\"]\r\n      let fileType = file[\"type\"]\r\n      let fileSize = file[\"size\"]\r\n      //console.log(file[\"name\"])\r\n      fileEntries.push(`fileupload:${fileType};${fileName};${fileSize}`)\r\n    }\r\n    //console.log(fileEntries)\r\n    let paths = []\r\n    for (let i=0; i<fileEntries.length; i++) {\r\n      let path = getPaths(content, fileEntries[i])\r\n      paths.push(path)\r\n    }\r\n    console.log(paths)\r\n\r\n    // read files from loadedFiles then insert it to the content\r\n    */\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(\r\n      content,\r\n      JSON.parse(JSON.stringify(contentSchema))\r\n    );\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      // clear states\r\n      setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    }\r\n    // call create experiment api\r\n    console.log(\"tags:\", tags);\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/create_experiment\",\r\n      async: false,\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n        title: experimentTitle,\r\n        body: descriptionList,\r\n        tags: JSON.stringify(tags),\r\n      },\r\n      success: function (status) {\r\n        console.log(\"SUCCESS\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenCreateElabFTWExperimentDialog(false);\r\n        toast.success(\r\n          `Successfully created an experiment with id: ${status[\"experimentId\"]}!`,\r\n          {\r\n            toastId: \"createExperimentSuccess\",\r\n          }\r\n        );\r\n\r\n        // clear states\r\n        setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenCreateElabFTWExperimentDialog(false);\r\n        toast.error(\r\n          `Failed to create an experiment!\\nMaybe wrong url or token?`,\r\n          {\r\n            toastId: \"createExperimentError\",\r\n          }\r\n        );\r\n        // clear states\r\n        setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n    });\r\n  };\r\n\r\n  // submit sem job request\r\n  const submitJobRequest = () => {\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/submit_job_request\",\r\n      async: false,\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        body: descriptionList,\r\n      },\r\n      success: function (status) {\r\n        if (status[\"response\"] === 200) {\r\n          console.log(\"SUCCESS\");\r\n          console.log(status);\r\n\r\n          // close submit dialog\r\n          setOpenJobRequestDialog(false);\r\n          toast.success(`${status.responseText}`, {\r\n            toastId: \"jobRequestSubmitSuccess\",\r\n          });\r\n        } else {\r\n          console.log(\"ERROR\");\r\n          console.log(status);\r\n\r\n          // close submit dialog\r\n          setOpenJobRequestDialog(false);\r\n          toast.error(`${status.responseText}`, {\r\n            toastId: \"jobRequestSubmitError\",\r\n          });\r\n        }\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenJobRequestDialog(false);\r\n        toast.error(`${status.responseText}`, {\r\n          toastId: \"jobRequestSubmitError\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleOnClickProceedButton = () => {\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = prepareDataForDescList(convProp);\r\n    //let cleaned = removeEmpty(prepareDataForDescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to proceed. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // create description list\r\n    let footnote = `<div> This template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>ADAMANT v1.0.0</a></span> </div>`;\r\n    let descList = createDescriptionListFromJSON(\r\n      cleaned,\r\n      convSch,\r\n      convProp,\r\n      schema,\r\n      footnote,\r\n      true\r\n    );\r\n\r\n    setDescriptionList(descList);\r\n\r\n    // validate the data first using ajv\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n    let contentSchema = { ...schema };\r\n\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    //console.log(content);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      // clear states\r\n      setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    } else {\r\n      //setOpenSubmitDialog(true);\r\n      setOpenFormReviewDialog(true);\r\n    }\r\n  };\r\n\r\n  // gather all loaded files in one object\r\n  const handleLoadedFiles = (file) => {\r\n    let files = loadedFiles;\r\n    //console.log(files);\r\n\r\n    // check if file already exists\r\n    let isFileAlreadyExist = false;\r\n    for (let i = 0; i < files.length; i++) {\r\n      if (files[i][\"name\"] === file[\"name\"]) {\r\n        isFileAlreadyExist = true;\r\n      }\r\n    }\r\n\r\n    if (isFileAlreadyExist) {\r\n      console.log(\"File already exists. Skipping it.\");\r\n      toast.warning(\r\n        <>\r\n          <div>\r\n            <strong>File already loaded: {`${file[\"name\"]}`}.</strong>\r\n          </div>\r\n        </>,\r\n        {\r\n          toastId: \"fileAlreadyLoaded\" + file[\"name\"],\r\n        }\r\n      );\r\n      //console.log(\"loaded files:\", files);\r\n      return true;\r\n    } else {\r\n      console.log(\"File not exist yet. Pushing it.\");\r\n      files.push(file);\r\n      //console.log(\"loaded files:\", files);\r\n      setLoadedFiles(files);\r\n      console.log(\"File added. Current files:\", loadedFiles);\r\n      toast.success(\r\n        <>\r\n          <div>\r\n            <strong>File successfully loaded:</strong>\r\n            {` ${file[\"name\"]}`}.\r\n          </div>\r\n        </>,\r\n        {\r\n          toastId: \"fileLoadedSuccessfully\" + file[\"name\"],\r\n        }\r\n      );\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // remove file from loadedFiles based on its index\r\n  const handleRemoveFile = (fileIndex) => {\r\n    let files = loadedFiles;\r\n    if (fileIndex > -1) {\r\n      files.splice(fileIndex, 1);\r\n      setLoadedFiles(files);\r\n      console.log(\"File removed. Current files:\", loadedFiles);\r\n    } else {\r\n      console.log(\"No file needs to be removed. Current files:\", loadedFiles);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormContext.Provider\r\n        value={{\r\n          loadedFiles,\r\n          handleRemoveFile,\r\n          handleLoadedFiles,\r\n          updateParent,\r\n          convertedSchema,\r\n          updateFormDataId,\r\n          handleDataDelete,\r\n          handleConvertedDataInput,\r\n          SEMSelectedDevice,\r\n          schemaSpecification,\r\n          setSchemaSpecification,\r\n          setSEMSelectedDevice,\r\n          implementedFieldTypes,\r\n          handleCheckIDexistence,\r\n        }}\r\n      >\r\n        <div style={{ paddingBottom: \"5px\" }}>\r\n          <img\r\n            style={{ height: \"100px\", borderRadius: \"5px\" }}\r\n            alt=\"header\"\r\n            src={HeaderImage !== undefined ? HeaderImage : QPTDATLogo}\r\n          />\r\n          {!inputMode ? (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                textAlign: \"left\",\r\n                padding: \"10px 10px 0px 10px\",\r\n              }}\r\n            >\r\n              <Autocomplete\r\n                disablePortal\r\n                value={selectedSchemaName}\r\n                onChange={(event, newValue) =>\r\n                  handleSelectSchemaOnChange(newValue)\r\n                }\r\n                id=\"select-available-schema\"\r\n                options={schemaNameList}\r\n                style={{ width: \"100%\" }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    {...params}\r\n                    label=\"Select existing schema\"\r\n                  />\r\n                )}\r\n              />\r\n              {/* <TextField\r\n                onChange={(event) => handleSelectSchemaOnChange(event)}\r\n                style={{ width: \"100%\" }}\r\n                fullWidth={false}\r\n                value={selectedSchemaName}\r\n                select\r\n                id={\"select-schema\"}\r\n                label={\"Select existing schema\"}\r\n                variant=\"outlined\"\r\n                SelectProps={{ native: true }}\r\n              >\r\n                {schemaNameList.map((content, index) => (\r\n                  <option key={index} value={content}>\r\n                    {content}\r\n                  </option>\r\n                ))}\r\n              </TextField>\r\n              */}\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <Button\r\n                style={{ width: \"100%\", marginLeft: \"10px\" }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                {...getRootProps()}\r\n              >\r\n                <input {...getInputProps()} />\r\n                {isDragActive ? \"Drop here\" : \"Browse Schema\"}\r\n              </Button>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <Button\r\n                onClick={() => createSchemaFromScratch()}\r\n                style={{\r\n                  width: \"100%\",\r\n                  marginLeft: \"10px\",\r\n                  marginRight: \"10px\",\r\n                }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                CREATE FROM SCRATCH\r\n              </Button>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  width: \"100%\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"right\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                {/* <Tooltip\r\n                  placement=\"top\"\r\n                  title=\"Wondering how to use this tool?\"\r\n                >\r\n                  <Button\r\n                    onClick={() => {\r\n                      window.open(\r\n                        \"https://github.com/csihda/adamant\",\r\n                        \"_blank\" // <- This is what makes it open in a new window.\r\n                      );\r\n                    }}\r\n                  >\r\n                    <HelpIcon />\r\n                  </Button>\r\n                  </Tooltip>*/}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        {!inputMode ? (\r\n          <div\r\n            style={{\r\n              paddingLeft: \"10px\",\r\n              display: \"flex\",\r\n              width: \"100%\",\r\n              textAlign: \"left\",\r\n            }}\r\n          >\r\n            {schemaValidity === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"left\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}. You can now render the form.\r\n                </div>\r\n                <Button\r\n                  style={{ marginRight: \"5px\" }}\r\n                  onClick={() => renderOnClick()}\r\n                  variant=\"outlined\"\r\n                >\r\n                  Render\r\n                </Button>\r\n                <Button\r\n                  style={{ marginRight: \"10px\" }}\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    paddingTop: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"red\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}\r\n                </div>\r\n              </>\r\n            )}\r\n            {createScratchMode === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  Create from scratch mode. You can now start editing.\r\n                </div>\r\n                <Button\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : null}\r\n          </div>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        {renderReady === true ? (\r\n          <FormRenderer\r\n            revertAllChanges={revertAllChanges}\r\n            schema={convertedSchema}\r\n            setSchemaSpecification={setSchemaSpecification}\r\n            originalSchema={schema}\r\n            edit={editMode}\r\n          />\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        <div\r\n          style={{\r\n            padding: \"10px 10px\",\r\n            display: \"flex\",\r\n            justifyContent: \"right\",\r\n          }}\r\n        >\r\n          {inputMode ? (\r\n            <div style={{ width: \"100%\", display: \"inline-block\" }}>\r\n              <Button\r\n                onClick={() => toEditMode()}\r\n                style={{ float: \"left\", marginRight: \"5px\" }}\r\n                variant=\"outlined\"\r\n              >\r\n                Back to Edit Mode\r\n              </Button>\r\n              <Button\r\n                onClick={() => handleOnClickProceedButton()}\r\n                style={{ float: \"right\" }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Proceed\r\n              </Button>\r\n              <Button\r\n                style={{ float: \"right\", marginRight: \"5px\" }}\r\n                id=\"demo-positioned-button\"\r\n                aria-controls={open ? \"demo-positioned-menu\" : undefined}\r\n                aria-haspopup=\"true\"\r\n                aria-expanded={open ? \"true\" : undefined}\r\n                onClick={handleClick}\r\n              >\r\n                <DownloadIcon /> Download Schema/Data\r\n              </Button>\r\n              <Menu\r\n                id=\"demo-positioned-menu\"\r\n                aria-labelledby=\"demo-positioned-button\"\r\n                anchorEl={anchorEl}\r\n                open={open}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n                transformOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n              >\r\n                <MenuItem onClick={handleDownloadJsonSchema}>\r\n                  Download JSON Schema\r\n                </MenuItem>\r\n                <MenuItem onClick={handleDownloadFormData}>\r\n                  Download JSON Data\r\n                </MenuItem>\r\n                <MenuItem onClick={handleDownloadDescriptionList}>\r\n                  Download Description List\r\n                </MenuItem>\r\n              </Menu>\r\n            </div>\r\n          ) : (\r\n            <Button\r\n              disabled={disable}\r\n              onClick={() => compileOnClick()}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Compile\r\n            </Button>\r\n          )}\r\n        </div>\r\n        <div style={{ padding: \"10px\", color: \"grey\" }}>ADAMANT v1.2.0</div>\r\n      </FormContext.Provider>\r\n      <CreateELabFTWExperimentDialog\r\n        setTags={setTags}\r\n        tags={tags}\r\n        setRetrievedTags={setRetrievedTags}\r\n        retrievedTags={retrievedTags}\r\n        setExperimentTitle={setExperimentTitle}\r\n        createExperimentELabFTW={createExperimentELabFTW}\r\n        setToken={setToken}\r\n        token={token}\r\n        setELabURL={setELabURL}\r\n        eLabURL={eLabURL}\r\n        setOpenCreateElabFTWExperimentDialog={\r\n          setOpenCreateElabFTWExperimentDialog\r\n        }\r\n        openCreateElabFTWExperimentDialog={openCreateElabFTWExperimentDialog}\r\n        getTagsELabFTW={getTagsELabFTW}\r\n      />\r\n      {openFormReviewDialog ? (\r\n        <FormReviewBeforeSubmit\r\n          onlineMode={onlineMode}\r\n          openFormReviewDialog={openFormReviewDialog}\r\n          setOpenFormReviewDialog={setOpenFormReviewDialog}\r\n          descriptionList={descriptionList}\r\n          setOpenFunctions={{\r\n            setOpenCreateElabFTWExperimentDialog,\r\n            setOpenJobRequestDialog,\r\n          }}\r\n          submitFunctions={{ submitJobRequest }}\r\n          submitText={submitText}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdamantMain;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport AdamantMain from \"./pages/AdamantMain\";\r\nimport \"cors\";\r\nimport packageJson from \"../package.json\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nexport default function App() {\r\n\r\n  // check if adamant endpoint exists in the homepage\r\n  const homepage = packageJson[\"homepage\"];\r\n  const adamantEndpoint = homepage.includes(\"/adamant\")\r\n\r\n  if (adamantEndpoint) {\r\n    console.log(\"/adamant endpoint is detected\")\r\n    return (\r\n      /** Use this for if homepage has /adamant endpoint, this is only for deploying on github-page */\r\n      <>\r\n        <div className=\"the_app\">\r\n          <Switch>\r\n            <Redirect exact from=\"/\" to=\"/adamant\" />\r\n            <Route exact path=\"/adamant\" component={AdamantMain}></Route>\r\n          </Switch>\r\n        </div>\r\n        <ToastContainer\r\n          position=\"top-right\"\r\n          autoClose={5000}\r\n          hideProgressBar={false}\r\n          closeOnClick={true}\r\n          pauseOnHover={true}\r\n          draggable={false}\r\n          progress={undefined} />\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <div className=\"the_app\">\r\n          <Switch>\r\n            <Route exact path=\"/\" component={AdamantMain}></Route>\r\n          </Switch>\r\n        </div>\r\n        <ToastContainer\r\n          position=\"top-right\"\r\n          autoClose={5000}\r\n          hideProgressBar={false}\r\n          closeOnClick={true}\r\n          pauseOnHover={true}\r\n          draggable={false}\r\n          progress={undefined} />\r\n      </>\r\n    );\r\n  };\r\n};","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n//import { HashRouter as Router } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\n// strict mode is disabled so that findDOMNode warning is suppressed\r\nReactDOM.render(\r\n  <Router>\r\n    <CssBaseline />\r\n    <App />\r\n  </Router>,\r\n  rootElement\r\n);\r\n\r\n\r\n//use this for strict mode, however it always throws the findDOMNode warning\r\n/*ReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <CssBaseline />\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n*/"],"sourceRoot":""}