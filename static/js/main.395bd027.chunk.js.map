{"version":3,"sources":["assets/header-image.png","components/utils/getValue.js","components/utils/checkIfFieldIDExist.js","FormContext.js","components/utils/updateRequired.js","components/EditElement.js","components/utils/deleteKey.js","components/elements/StringType.js","components/utils/getUnit.js","components/elements/NumberType.js","components/AddElement.js","components/elements/ObjectType.js","components/elements/IntegerType.js","components/elements/BooleanType.js","components/elements/array_items/ItemIntegerType.js","components/elements/array_items/ItemNumberType.js","components/elements/array_items/ItemStringType.js","components/elements/array_items/ItemObjectType.js","components/elements/ArrayItemRenderer.js","components/utils/generateUniqueID.js","components/elements/ArrayType.js","components/elements/AnyOfKeyword.js","components/ElementRenderer.js","components/EditSchemaHeader.js","components/FormRenderer.js","components/JSONSchemaViewer.js","components/utils/array2object.js","components/utils/object2array.js","components/utils/deleteKeySchema.js","pages/AdamantMain.jsx","App.js","index.js"],"names":["getValue","json","path","undefined","jsonData","JSON","parse","stringify","split","tempValue","i","length","checkIfFieldIDExist","schema","fieldId","result","forEach","element","value","newPath","pop","join","FormContext","createContext","updateRequired","selectedType","requiredChecked","field_id","convertedSchema","set","require","immediateValue","requiredArray","push","Set","includes","filter","item","EditElement","makeStyles","theme","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","enumerated","field_enumerate","field_required","UISchema","pathSchema","openDialog","setOpenDialog","defaultValue","useState","setSelectedType","title","setTitle","setFieldId","description","setDescription","defValue","setDefValue","useContext","updateParent","updateFormDataId","setRequiredChecked","enumChecked","setEnumChecked","enumList","setEnumList","tempUISchema","handleChangeUISchema","event","keyword","target","replace","handleCancelEdit","handleCheckBoxOnChange","prev","Dialog","open","DialogTitle","id","style","display","verticalAlign","color","alignSelf","IconButton","onClick","Divider","DialogContent","DialogContentText","component","FormControl","FormLabel","TextField","margin","required","onChange","marginTop","variant","fullWidth","label","helperText","multiline","rows","select","SelectProps","native","map","content","index","FormControlLabel","control","Checkbox","checked","marginBottom","paddingTop","paddingBottom","FormGroup","DialogActions","Button","toString","existed","alert","newConvertedSchema","newList","Array","isArray","parsed","parseInt","parseFloat","handleUpdateSchemaOnClick","autoFocus","deleteKey","elementValue","deleteIndex","at","splice","useStyles","StringType","dataInputItems","setDataInputItems","withinArray","field_index","edit","field_label","field_description","handleDataInput","handleDataDelete","classes","handleDeleteElement","handleOnBlur","type","newPathSchema","console","log","arr","items","from","useEffect","onBlur","className","marginLeft","height","getUnit","addorn","match","NumberType","inputValue","setInputValue","unit","handleInputOnChange","inputValueVar","handleInputOnBlur","isNaN","e","InputProps","endAdornment","InputAdornment","position","AddElement","defaultSchema","schemaTitle","inputProps","maxLength","handleOnBlurFieldId","properties","ObjectType","field_properties","openDialogAddElement","setOpenDialogAddElement","expand","setExpand","padding","Accordion","expanded","AccordionSummary","expandIcon","IconButtonProps","Typography","AccordionDetails","onDragEnd","destination","source","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","Object","keys","isDragDisabled","draggableId","draggableProps","dragHandleProps","fieldIndex","elementRequired","field","placeholder","justifyContent","IntegerType","BooleanType","alignItems","paddingLeft","textAlign","FormHelperText","ItemIntegerType","handleDeleteArrayItem","ItemNumberType","field_type","ItemStringType","ItemObjectType","field_items","objectIndex","justifySelf","tempField","ArrayItemRenderer","enumerate","generateUID","firstPart","Math","random","secondPart","slice","ArrayType","field_prefixItems","inputItems","setInputItems","arr2","items2","reorderedItem2","generateUniqueID","newFieldItems","handleAddArrayItem","AnyOfKeyword","anyOf_list","setField_items","globalIndex","setGlobalIndex","schemaList","fill","x","handleChooseAnyOfSchema","ElementRenderer","anyOf","EditSchemaHeader","schemaID","schemaURI","_schemaID","_setSchemaID","_title","_setTitle","_description","_setDescription","_schemaURI","_setSchemaURI","FormRenderer","revertAllChanges","$schema","paddingRight","JSONSchemaViewer","jsonschema","overflowX","whiteSpace","wordWrap","array2object","propert","someObject","tempKey","tempElements","enumContent","object2array","someArray","tempVariable2","tempVariable","item_","deleteKeySchema","pathArray","tobeDeleted","createFormDataBlueprint","schemaProperties","newObject","AdamantMain","disable","setDisable","schemaMessage","setSchemaMessage","schemaValidity","setSchemaValidity","setSchema","renderReady","setRenderReady","editMode","setEditMode","setSchemaFile","originalSchema","setOriginalSchema","inputMode","setInputMode","setConvertedSchema","createScratchMode","setCreateScratchMode","setJsonData","anchorEl","setAnchorEl","Boolean","handleClose","onDrop","useCallback","acceptedFile","schemaFile","reader","FileReader","onabort","onerror","onload","binaryStr","obj","oriSchema","formData","error","readAsText","checkSchemaValidity","useDropzone","multiple","getRootProps","getInputProps","isDragActive","clearSchemaOnClick","Provider","newValue","updatedSchema","tempSchema","jData","oldFieldId","newFieldId","borderRadius","alt","src","HeaderImage","createSchemaFromScratch","marginRight","toEditMode","float","currentTarget","Menu","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","disabled","compileOnClick","App","exact","to","rootElement","document","getElementById","ReactDOM","render","CssBaseline"],"mappings":"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","file":"static/js/main.395bd027.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/header-image.37bfe931.png\";","// get json value given path\r\nconst getValue = (json, path) => {\r\n    if (path === undefined) {\r\n        return json[\"properties\"]\r\n    }\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValue;","import getValue from \"./getValue\";\r\nconst checkIfFieldIDExist = (schema, path, fieldId) => {\r\n    let result\r\n    if (path === undefined) {\r\n        let value = schema[\"properties\"]\r\n        value.forEach(element => {\r\n            if (element[\"fieldId\"] === fieldId) {\r\n                return result = true;\r\n            }\r\n        });\r\n    } else {\r\n\r\n        let value = getValue(schema, path)[\"properties\"]\r\n\r\n        if (value === undefined) {\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n            let value = getValue(schema, newPath)\r\n            value.forEach(element => {\r\n                if (element[\"fieldId\"] === fieldId) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        } else {\r\n            value.forEach(element => {\r\n                if (element[\"fieldId\"] === fieldId) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    if (result) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n\r\n}\r\n\r\nexport default checkIfFieldIDExist;","import { createContext } from 'react';\r\nexport const FormContext = createContext(null);","/*\r\nFunction to add or remove \"required\" flag for a specific field\r\n*/\r\n\r\n\r\n// get json value given path\r\nconst getValue = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n}\r\n\r\nconst updateRequired = ({ selectedType, path, requiredChecked, field_id, convertedSchema }) => {\r\n\r\n    if (selectedType === \"object\") {\r\n        requiredChecked = false\r\n    }\r\n\r\n    const set = require(\"set-value\");\r\n\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const immediateValue = getValue(convertedSchema, newPath)\r\n    if (immediateValue !== undefined) {\r\n        // check if there is required array\r\n        if (immediateValue[\"required\"] !== undefined) {\r\n            let requiredArray = immediateValue[\"required\"]\r\n            if (requiredChecked) {\r\n                requiredArray.push(field_id)\r\n                requiredArray = [...new Set(requiredArray)]\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            } else {\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_id)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_id)\r\n                    set(convertedSchema, newPath + \".required\", requiredArray)\r\n\r\n                    if (requiredArray.length === 0) {\r\n                        delete immediateValue[\"required\"]\r\n                        set(convertedSchema, newPath, immediateValue)\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_id}`]\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            }\r\n        }\r\n    } else {\r\n        // check if there is required array\r\n        if (convertedSchema[\"required\"] !== undefined) {\r\n            let requiredArray = convertedSchema[\"required\"]\r\n            if (requiredChecked) {\r\n                requiredArray.push(field_id)\r\n                requiredArray = [...new Set(requiredArray)]\r\n                convertedSchema[\"required\"] = requiredArray\r\n            } else {\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_id)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_id)\r\n                    convertedSchema[\"required\"] = requiredArray\r\n                    if (requiredArray.length === 0) {\r\n                        delete convertedSchema[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_id}`]\r\n                convertedSchema[\"required\"] = requiredArray\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return convertedSchema;\r\n}\r\n\r\nexport default updateRequired;","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport checkIfFieldIDExist from './utils/checkIfFieldIDExist';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport { FormGroup } from '@material-ui/core';\r\nimport updateRequired from './utils/updateRequired';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\nconst EditElement = ({ enumerated, field_enumerate, field_required, field_id, UISchema, path, pathSchema, openDialog, setOpenDialog, defaultValue }) => {\r\n\r\n    const [selectedType, setSelectedType] = useState(UISchema[\"type\"])\r\n    const [title, setTitle] = useState(UISchema[\"title\"])\r\n    const [fieldId, setFieldId] = useState(UISchema[\"fieldId\"])\r\n    const [description, setDescription] = useState(UISchema[\"description\"])\r\n    const [defValue, setDefValue] = useState(defaultValue)\r\n    const { updateParent, convertedSchema, updateFormDataId } = useContext(FormContext);\r\n    const [requiredChecked, setRequiredChecked] = useState(field_required === undefined ? false : field_required)\r\n    const [enumChecked, setEnumChecked] = useState(enumerated === undefined ? false : enumerated)\r\n    const [enumList, setEnumList] = useState(field_enumerate === undefined ? [] : field_enumerate);\r\n\r\n    let tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n\r\n\r\n    const datatypes = [\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\"]\r\n\r\n\r\n    const handleOnChangeListField = (event) => {\r\n        setEnumList(event.target.value);\r\n    }\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        // update default value\r\n        if (defValue === undefined & defaultValue === undefined) {\r\n            // do nothing\r\n        } else if (defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n            // do nothing\r\n        } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n            // do nothing\r\n        } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') !== \"\" & defaultValue !== undefined) {\r\n            tempUISchema[\"defaultValue\"] = (defValue === \"true\")\r\n        } else if (defValue.toString().replace(/\\s+/g, '') === \"\") {\r\n            delete tempUISchema[\"defaultValue\"]\r\n        }\r\n        else {\r\n            tempUISchema[\"defaultValue\"] = defValue\r\n        };\r\n\r\n        // check if fieldId already exist\r\n        let existed = checkIfFieldIDExist(convertedSchema, path, fieldId)\r\n        if (UISchema[\"fieldId\"] !== fieldId) {\r\n            if (existed) {\r\n                alert(\"Field ID already exists!\")\r\n                return\r\n            }\r\n        }\r\n\r\n        if (fieldId === undefined | fieldId.replace(/\\s+/g, '') === \"\") {\r\n            alert(\"Field ID must be defined!\")\r\n            return\r\n        }\r\n\r\n        tempUISchema[\"fieldId\"] = fieldId;\r\n        tempUISchema[\"type\"] = selectedType;\r\n        if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n        if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n        if (tempUISchema[\"type\"] === \"object\" & tempUISchema[\"properties\"] === undefined) {\r\n            tempUISchema[\"properties\"] = []\r\n        }\r\n        if (tempUISchema[\"type\"] === \"array\" & tempUISchema[\"items\"] === undefined) {\r\n            tempUISchema[\"items\"] = {}\r\n        }\r\n        if (![\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"])) {\r\n            setEnumChecked(false);\r\n        }\r\n        const set = require(\"set-value\");\r\n        set(convertedSchema, path, tempUISchema)\r\n        // update the required value\r\n        const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_id, convertedSchema })\r\n        // update enum\r\n        if ([\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"]) & enumChecked) {\r\n            let newList = enumList\r\n\r\n            switch (tempUISchema[\"type\"]) {\r\n                case 'string':\r\n                    if (Array.isArray(newList)) {\r\n                        set(newConvertedSchema, path + \".enumerate\", newList)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                    }\r\n                case 'integer':\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    }\r\n                case 'number':\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    }\r\n            }\r\n        }\r\n        // update main component\r\n        updateParent(newConvertedSchema)\r\n        setOpenDialog(false)\r\n\r\n        //* update form data if fieldId change\r\n        // update pathSchema with new fieldId\r\n        updateFormDataId(field_id, fieldId, pathSchema, defaultValue)\r\n\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'type':\r\n                return setSelectedType(event.target.value)\r\n            case 'title':\r\n                return setTitle(event.target.value)\r\n            case 'description':\r\n                return setDescription(event.target.value)\r\n            case 'fieldId':\r\n                return setFieldId(event.target.value.replace(/ /g, \"_\"))\r\n            case 'defaultValue':\r\n                return setDefValue(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n        setOpenDialog(false)\r\n        setEnumList(field_enumerate)\r\n        setDefValue(defaultValue)\r\n        setSelectedType(UISchema[\"type\"])\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleCheckBoxOnChange = () => {\r\n        setRequiredChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleEnumBoxOnChange = () => {\r\n        setEnumChecked(prev => !prev)\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Edit \"{tempUISchema[\"title\"]}\"\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                            <TextField margin=\"normal\" required onChange={event => handleChangeUISchema(event, \"fieldId\")} style={{ marginTop: \"20px\" }} defaultValue={field_id} variant=\"outlined\" fullWidth={true} label={\"Field ID or Key\"} helperText='A unique json key or id for this field. Usually short and no spaces (use \"_\" instead). Spaces are replaced automatically with \"_\" upon saving.' />\r\n                            <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"title\"]} variant=\"outlined\" fullWidth={true} label={\"Field Title\"} helperText='Label or title of the field. For a field that requires a unit, the unit can be placed within a square bracket, e,g., \"Chamber Pressure [Pa]\".' />\r\n                            <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"description\"]} variant=\"outlined\" fullWidth={true} label={\"Field Description\"} multiline rows={3} helperText='A detailed description of the field, how the input should be formated, etc.' />\r\n                            <TextField\r\n                                margin=\"normal\"\r\n                                helperText='Data type of the field input.'\r\n                                onChange={event => handleChangeUISchema(event, \"type\")}\r\n                                style={{ marginTop: \"10px\" }}\r\n                                defaultValue={tempUISchema[\"type\"]}\r\n                                select\r\n                                fullWidth={true}\r\n                                id={field_id}\r\n                                label={\"Field Data Type\"}\r\n                                variant=\"outlined\"\r\n                                SelectProps={{\r\n                                    native: true,\r\n                                }}\r\n                            >\r\n                                {datatypes.map((content, index) => (\r\n                                    <option key={index} value={content}>\r\n                                        {content}\r\n                                    </option>\r\n                                ))}\r\n                            </TextField>\r\n                            {[\"string\", \"integer\", \"number\"].includes(selectedType) ?\r\n                                <>\r\n                                    <FormControlLabel control={<Checkbox onChange={() => handleEnumBoxOnChange()} checked={enumChecked} />} label=\"Enumerated. Choose from an available list of inputs.\" />\r\n                                    <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\r\n                                        {enumChecked ? <TextField defaultValue={enumList !== undefined ? enumList : \"\"} onChange={handleOnChangeListField} variant=\"outlined\" fullWidth={true} label=\"Enumerate List\" multiline rows={4} helperText=\"A list of inputs separated by commas, e,g.: item 1, item 2, item 3. Make sure that the item data type matches the field input data type. Invalid items will be replaced with NaN upon saving.\" /> : null}\r\n                                    </div>\r\n                                </> : null}\r\n                        </FormControl>\r\n                        <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\" }}>\r\n                            <FormControl component=\"validation-related\">\r\n                                <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Validation Related:</FormLabel>\r\n                            </FormControl>\r\n                            <FormGroup>\r\n                                {selectedType === \"array\" ?\r\n                                    <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                    : null}\r\n                                {selectedType !== \"object\" & selectedType !== \"array\" & selectedType !== \"boolean\" ?\r\n                                    <>\r\n                                        <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                        <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"defaultValue\")} style={{ marginTop: \"10px\" }} defaultValue={defaultValue} variant=\"outlined\" fullWidth={true} label={\"Field Default Value\"} helperText=\"Initial value of the field.\" />\r\n                                    </>\r\n                                    : null}\r\n                                {selectedType === \"boolean\" ?\r\n                                    <>\r\n                                        <TextField\r\n                                            margin='normal'\r\n                                            onChange={event => handleChangeUISchema(event, \"defaultValue\")}\r\n                                            style={{ marginTop: \"20px\" }}\r\n                                            defaultValue={defaultValue !== undefined ? defaultValue : \"\"}\r\n                                            select\r\n                                            fullWidth={true}\r\n                                            id={field_id}\r\n                                            label={\"Boolean Field Default Value\"}\r\n                                            variant=\"outlined\"\r\n                                            SelectProps={{\r\n                                                native: true,\r\n                                            }}\r\n                                        >\r\n                                            {[\"\", \"true\", \"false\"].map((content, index) => (\r\n                                                <option key={index} value={content}>\r\n                                                    {content}\r\n                                                </option>\r\n                                            ))}\r\n                                        </TextField>\r\n                                    </>\r\n                                    : null}\r\n                            </FormGroup>\r\n                        </div>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n            {/*<Dialog\r\n                open={openDialog}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\"><EditIcon fontSize=\"large\" color=\"primary\" style={{ display: \"inline-block\", marginBottom: \"-10px\" }} />  Edit Field \"{UISchema[`${field_id}`][\"title\"]}\"</DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        <div>\r\n                            <FormControl component=\"widget-type\">\r\n                                <FormLabel component=\"legend\">Available widgets for string type:</FormLabel>\r\n                                <RadioGroup row aria-label=\"widgetType\" name=\"row-radio-buttons-group\" value={value}\r\n                                    onChange={handleRadioChange}>\r\n                                    <FormControlLabel value=\"Text\" control={<Radio />} label=\"Text\" />\r\n                                    <FormControlLabel value=\"Long Text\" control={<Radio />} label=\"Long Text\" />\r\n                                    <FormControlLabel value=\"List\" control={<Radio />} label=\"List\" />\r\n                                    <FormControlLabel value=\"Autocomplete\" control={<Radio disabled />} label=\"Autocomplete\" />\r\n                                    <FormControlLabel value=\"Tag-like\" control={<Radio disabled />} label=\"Tag-like\" />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n                            <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\r\n                                {value === \"List\" ? <TextField defaultValue={inputList} onChange={handleOnChangeListField} variant=\"outlined\" fullWidth={true} label=\"List\" multiline rows={4} /> : null}\r\n                            </div>\r\n                            <FormControl component=\"validation\">\r\n                                <FormLabel component=\"legend\">Validation:</FormLabel>\r\n                            </FormControl>\r\n                        </div>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setOpenDialog(false)} color=\"secondary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => handleSaveChange()} color=\"primary\" autoFocus>\r\n                        Save\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>*/}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditElement;","import getValue from \"./getValue\";\r\n\r\n// delete key and value given path\r\nconst deleteKey = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const elementValue = getValue(jsonData, newPath);\r\n\r\n    if (Array.isArray(elementValue)) {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        elementValue.splice(parseInt(deleteIndex), 1)\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    } else {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        delete elementValue[deleteIndex]\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    }\r\n\r\n};\r\n\r\nexport default deleteKey;","import React, { useContext, useEffect, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst StringType = ({ dataInputItems, setDataInputItems, withinArray, path, pathSchema, field_required, field_index, edit, field_id, field_label, field_description, field_enumerate, defaultValue }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete } = useContext(FormContext);\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"type\": \"string\"\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathSchema);\r\n    }\r\n\r\n    // handle on blur\r\n    const handleOnBlur = (event, pathSchema, type) => {\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathSchema = pathSchema.split(\".\");\r\n            newPathSchema.pop()\r\n            newPathSchema = newPathSchema.join(\".\")\r\n            console.log(newPathSchema)\r\n\r\n            let arr = dataInputItems;\r\n            console.log(pathSchema)\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = event.target.value;\r\n            setDataInputItems(items);\r\n            console.log(items)\r\n\r\n            // store to the main form data\r\n            let value = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(value, newPathSchema, \"string\")\r\n        } else {\r\n            handleDataInput(event, pathSchema, type)\r\n        }\r\n    }\r\n\r\n    // if enumerate and no defaultValue then already store the first enumerate value to form data\r\n    useEffect(() => {\r\n        if (field_enumerate !== undefined & defaultValue === undefined & withinArray === undefined) {\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        field_enumerate[0]\r\n                }\r\n            }\r\n            handleDataInput(event, pathSchema, \"string\")\r\n        } else if (field_enumerate !== undefined & withinArray !== undefined & withinArray === true) {\r\n            let newPathSchema = pathSchema.split(\".\");\r\n            newPathSchema.pop()\r\n            newPathSchema = newPathSchema.join(\".\")\r\n            console.log(newPathSchema)\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = field_enumerate[0];\r\n            setDataInputItems(items);\r\n            console.log(items)\r\n\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(event, newPathSchema, \"string\")\r\n        }\r\n    }, [])\r\n\r\n\r\n    if (field_enumerate === undefined) {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onBlur={(event) => handleOnBlur(event, pathSchema, \"string\")} required={required} helperText={field_description} defaultValue={defaultValue} fullWidth={true} className={classes.heading} id={field_id} label={field_label} variant=\"outlined\" />\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement pathSchema={pathSchema} defaultValue={defaultValue} enumerated={enumerated} field_enumerate={field_enumerate} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    < TextField\r\n                        onBlur={(event) => handleOnBlur(event, pathSchema, \"string\")}\r\n                        required={required}\r\n                        select\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_id}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }\r\n                        }\r\n                        helperText={field_description}\r\n                        defaultValue={defaultValue}\r\n                    >\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField >\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div >\r\n                {openDialog ? <EditElement pathSchema={pathSchema} enumerated={enumerated} defaultValue={defaultValue} field_enumerate={field_enumerate} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default StringType;\r\n","const getUnit = (field_label) => {\r\n\r\n    if (field_label === undefined) {\r\n        return \"\"\r\n    }\r\n\r\n    let addorn = field_label.match(/[^[\\]]+(?=])/g)\r\n    if (addorn === null) {\r\n        return \"\"\r\n    } else {\r\n        return addorn\r\n    }\r\n}\r\n\r\nexport default getUnit;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { InputAdornment } from '@material-ui/core';\r\nimport getUnit from '../utils/getUnit';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst NumberType = ({ dataInputItems, setDataInputItems, withinArray, path, pathSchema, defaultValue, field_required, field_index, edit, field_id, field_label, field_description, field_enumerate }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue === undefined ? \"\" : defaultValue)\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    let unit = getUnit(field_label)\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"type\": \"number\"\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathSchema);\r\n    }\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathSchema = pathSchema.split(\".\");\r\n                newPathSchema.pop()\r\n                newPathSchema = newPathSchema.join(\".\")\r\n                console.log(newPathSchema)\r\n\r\n                let arr = dataInputItems;\r\n                console.log(pathSchema)\r\n                const items = Array.from(arr);\r\n                items[field_index][field_id] = value;\r\n                setDataInputItems(items);\r\n                console.log(items)\r\n\r\n                // store to the main form data\r\n                handleDataInput(items, newPathSchema, \"number\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                handleDataInput(parseFloat(inputValue), pathSchema, \"number\")\r\n            }\r\n        }\r\n    }\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} helperText={field_description} fullWidth={true} className={classes.heading} id={field_id} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{unit}</InputAdornment>,\r\n                    }} />\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement pathSchema={pathSchema} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        helperText={field_description}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_id}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{unit}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement pathSchema={pathSchema} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default NumberType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport { FormGroup } from '@material-ui/core';\r\nimport updateRequired from './utils/updateRequired';\r\nimport getValue from './utils/getValue';\r\nimport checkIfFieldIDExist from './utils/checkIfFieldIDExist';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst AddElement = ({ enumerated, field_enumerate, field_required, defaultSchema, path, openDialog, setOpenDialog, UISchema, schemaTitle }) => {\r\n\r\n    const [selectedType, setSelectedType] = useState(\"string\")\r\n    const [fieldId, setFieldId] = useState(undefined)\r\n    const [title, setTitle] = useState(undefined)\r\n    const [description, setDescription] = useState(undefined)\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n    const [requiredChecked, setRequiredChecked] = useState(field_required === undefined ? false : field_required)\r\n    const [enumChecked, setEnumChecked] = useState(enumerated === undefined ? false : enumerated)\r\n    const [enumList, setEnumList] = useState(field_enumerate === undefined ? [] : field_enumerate.join(\",\"));\r\n\r\n    let tempUISchema = JSON.parse(JSON.stringify(defaultSchema))\r\n\r\n\r\n    const datatypes = [\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\"]\r\n\r\n\r\n    const handleOnChangeListField = (event) => {\r\n        setEnumList(event.target.value);\r\n    }\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        // check if fieldId already exist\r\n        if (checkIfFieldIDExist(convertedSchema, path, fieldId)) {\r\n            alert(\"Field ID already exists!\")\r\n            return\r\n        }\r\n\r\n        tempUISchema[\"fieldId\"] = fieldId;\r\n        tempUISchema[\"type\"] = selectedType;\r\n        if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n        if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n        if (fieldId === undefined) {\r\n            alert(\"Field ID must be defined!\")\r\n            return\r\n        }\r\n\r\n        if (typeof (fieldId) === \"string\" & fieldId.replace(/\\s+/g, '') === \"\") {\r\n            alert(\"Field ID must be defined!\")\r\n            return\r\n        }\r\n\r\n        if (tempUISchema[\"type\"] === \"object\") {\r\n            tempUISchema[\"properties\"] = []\r\n        }\r\n        if (tempUISchema[\"type\"] === \"array\") {\r\n            tempUISchema[\"items\"] = {}\r\n        }\r\n        if (tempUISchema[\"type\"] !== \"string\") {\r\n            setEnumChecked(false);\r\n        }\r\n\r\n        if (path !== undefined) {\r\n            const set = require(\"set-value\");\r\n\r\n            let properties = getValue(convertedSchema, path)[\"properties\"]\r\n            properties.push(tempUISchema)\r\n            set(convertedSchema, path + \".properties\", properties)\r\n\r\n            // create a new path to the new element\r\n            path = path + \".properties.\" + (properties.length - 1).toString()\r\n            let field_id = fieldId\r\n            // update the required value\r\n            const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_id, convertedSchema })\r\n            // update enum\r\n            if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                let newList = enumList\r\n                if (Array.isArray(newList)) {\r\n                    set(newConvertedSchema, path + \".enumerate\", newList)\r\n                } else {\r\n                    newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                    set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                }\r\n\r\n            }\r\n\r\n            updateParent(newConvertedSchema)\r\n            setOpenDialog(false)\r\n        } else {\r\n            const set = require(\"set-value\");\r\n            let properties = convertedSchema[\"properties\"]\r\n            properties.push(tempUISchema)\r\n            convertedSchema[\"properties\"] = properties\r\n\r\n            // create a new path to the new element\r\n            path = \"properties.\" + (properties.length - 1).toString()\r\n            let field_id = fieldId\r\n            // update the required value\r\n            const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_id, convertedSchema })\r\n            // update enum\r\n            if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                let newList = enumList\r\n                if (Array.isArray(newList)) {\r\n                    set(newConvertedSchema, path + \".enumerate\", newList)\r\n                } else {\r\n                    newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                    set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                }\r\n\r\n            }\r\n\r\n            updateParent(newConvertedSchema)\r\n            setOpenDialog(false)\r\n        }\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'type':\r\n                return setSelectedType(event.target.value)\r\n            case 'title':\r\n                return setTitle(event.target.value)\r\n            case 'description':\r\n                return setDescription(event.target.value)\r\n            case 'fieldId':\r\n                return setFieldId(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        tempUISchema = JSON.parse(JSON.stringify(defaultSchema))\r\n        setOpenDialog(false)\r\n        setEnumList(field_enumerate)\r\n        setSelectedType(\"string\")\r\n    }\r\n\r\n    // handle field id on change\r\n    const handleOnBlurFieldId = (event) => {\r\n        setFieldId(event.target.value)\r\n        tempUISchema[\"fieldId\"] = event.target.value\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleCheckBoxOnChange = () => {\r\n        setRequiredChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleEnumBoxOnChange = () => {\r\n        setEnumChecked(prev => !prev)\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <AddIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Add Element in \"{UISchema !== undefined ? UISchema[\"title\"] : schemaTitle}\"\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                            <TextField inputProps={{ maxLength: 12 }} required onBlur={event => handleOnBlurFieldId(event)} onChange={event => handleChangeUISchema(event, \"fieldId\")} style={{ marginTop: \"20px\" }} defaultValue={tempUISchema[\"fieldId\"]} variant=\"outlined\" fullWidth={true} label={\"Field ID or Key\"} />\r\n                            <TextField onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"title\"]} variant=\"outlined\" fullWidth={true} label={\"Field Title\"} />\r\n                            <TextField onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"description\"]} variant=\"outlined\" fullWidth={true} label={\"Field Description\"} multiline rows={3} />\r\n                            <TextField\r\n                                onChange={event => handleChangeUISchema(event, \"type\")}\r\n                                style={{ marginTop: \"10px\" }}\r\n                                defaultValue={selectedType}\r\n                                select\r\n                                fullWidth={true}\r\n                                label={\"Field Data Type\"}\r\n                                variant=\"outlined\"\r\n                                SelectProps={{\r\n                                    native: true,\r\n                                }}\r\n                            >\r\n                                {datatypes.map((content, index) => (\r\n                                    <option key={index} value={content}>\r\n                                        {content}\r\n                                    </option>\r\n                                ))}\r\n                            </TextField>\r\n                            {selectedType === \"string\" ?\r\n                                <>\r\n                                    <FormControlLabel control={<Checkbox onChange={() => handleEnumBoxOnChange()} checked={enumChecked} />} label=\"Enumerated\" />\r\n                                    <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\r\n                                        {enumChecked ? <TextField defaultValue={enumList !== undefined ? enumList : \"\"} onChange={handleOnChangeListField} variant=\"outlined\" fullWidth={true} label=\"Enumerate List\" multiline rows={4} /> : null}\r\n                                    </div>\r\n                                </> : null}\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                    ADD\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default AddElement;","import React, { useState, useContext } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"../ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport AddElement from \"../AddElement\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst ObjectType = ({ path, pathSchema, field_required, field_id, field_index, edit, field_label, field_description, field_properties }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema, handleDataDelete } = useContext(FormContext);\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(field_properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        const set = require(\"set-value\");\r\n        let value = { ...convertedSchema }\r\n        set(convertedSchema, path + \".properties\", items)\r\n        updateParent(value);\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathSchema);\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"properties\": field_properties,\r\n        \"type\": \"object\"\r\n    }\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    style={{ height: \"auto\" }}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography className={classes.heading}>{field_label}</Typography>\r\n                            {expand ? <div style={{ color: \"gray\" }}>\r\n                                {field_description}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <><Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button></> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(field_properties).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={!edit} key={field_properties[item][\"fieldId\"]} draggableId={field_properties[item][\"fieldId\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <DragHandleIcon fontSize=\"small\" />\r\n                                                            </div> : null}\r\n                                                            <ElementRenderer path={path + \".properties\"} pathSchema={pathSchema} fieldId={field_properties[item][\"fieldId\"]} fieldIndex={item} elementRequired={field_required} edit={edit} field={field_properties[item]} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                                    </div> : null}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement pathSchema={pathSchema} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} /> : null}\r\n        {openDialogAddElement ? <AddElement openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} path={path} defaultSchema={defaultSchema} UISchema={UISchema} /> : null}\r\n    </>);\r\n};\r\n\r\nexport default ObjectType;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport getUnit from '../utils/getUnit';\r\nimport { InputAdornment } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst IntegerType = ({ dataInputItems, setDataInputItems, withinArray, defaultValue, path, pathSchema, field_required, field_index, edit, field_id, field_label, field_description, field_enumerate }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue === undefined ? \"\" : defaultValue);\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    let unit = getUnit(field_label)\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"type\": \"integer\"\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathSchema);\r\n    }\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathSchema = pathSchema.split(\".\");\r\n                newPathSchema.pop()\r\n                newPathSchema = newPathSchema.join(\".\")\r\n                console.log(newPathSchema)\r\n\r\n                let arr = dataInputItems;\r\n                console.log(pathSchema)\r\n                const items = Array.from(arr);\r\n                items[field_index][field_id] = value;\r\n                setDataInputItems(items);\r\n                console.log(items)\r\n\r\n                // store to the main form data\r\n                handleDataInput(items, newPathSchema, \"integer\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                handleDataInput(parseInt(inputValue), pathSchema, \"integer\")\r\n            }\r\n        }\r\n    }\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} helperText={field_description} fullWidth={true} className={classes.heading} id={field_id} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{unit}</InputAdornment>,\r\n                    }} />\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement pathSchema={pathSchema} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        helperText={field_description}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_id}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{unit}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement pathSchema={pathSchema} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default IntegerType;\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport { Checkbox, FormLabel, FormHelperText, FormControl } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst BooleanType = ({ path, pathSchema, field_required, field_index, edit, field_id, field_label, field_description, defaultValue }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(typeof (defaultValue) === \"boolean\" ? defaultValue : false);\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"type\": \"boolean\"\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathSchema);\r\n    }\r\n\r\n    // handle input on change for checkbox (boolean type: checked is true unchecked is false)\r\n    const handleInputOnChange = () => {\r\n        let value = inputValue\r\n        setInputValue(!value)\r\n        handleDataInput(!value, pathSchema, \"boolean\")\r\n    }\r\n\r\n    // if boolean field is newly created then store a false input data already to the form data\r\n    useEffect(() => {\r\n        if (defaultValue === undefined)\r\n            handleDataInput(false, pathSchema, \"boolean\")\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', alignItems: \"center\", width: '100%' }}>\r\n                <div style={{ paddingLeft: \"15px\", width: \"100%\" }}>\r\n                    <FormControl >\r\n                        <FormLabel>{field_label === undefined ? \"\" : field_label + \":\"}</FormLabel>\r\n                        <div style={{ textAlign: \"center\", width: \"100%\" }}>\r\n                            <Checkbox onChange={() => handleInputOnChange()} checked={inputValue} />\r\n                        </div>\r\n                        <FormHelperText>{field_description}</FormHelperText>\r\n                    </FormControl>\r\n                </div>\r\n                {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                    <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n            {openDialog ? <EditElement pathSchema={pathSchema} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default BooleanType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemIntegerType = ({ pathSchema, dataInputItems, setDataInputItems, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const { handleDataInput } = useContext(FormContext);\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        let value = inputValue;\r\n        value = parseInt(value)\r\n        if (!isNaN(value)) {\r\n            setInputValue(value)\r\n\r\n            // store it to input data array\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[index] = value;\r\n            setDataInputItems(items);\r\n            console.log(items)\r\n\r\n            // store to form data\r\n            handleDataInput(items, pathSchema, \"array\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_id} variant=\"outlined\" />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemIntegerType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemNumberType = ({ pathSchema, dataInputItems, setDataInputItems, path, field_type, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const { handleDataInput } = useContext(FormContext);\r\n\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        let value = inputValue;\r\n        value = parseFloat(value)\r\n        if (!isNaN(value)) {\r\n            setInputValue(value)\r\n\r\n            // store it to input data array\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[index] = value;\r\n            setDataInputItems(items);\r\n            console.log(items)\r\n\r\n            // store to the main form data\r\n            handleDataInput(items, pathSchema, \"array\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_id} variant=\"outlined\" />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemNumberType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemStringType = ({ pathSchema, dataInputItems, setDataInputItems, path, field_type, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const { handleDataInput } = useContext(FormContext)\r\n\r\n    // handle input field on blur\r\n    const handleOnBlur = (event, index) => {\r\n        let arr = dataInputItems;\r\n        const items = Array.from(arr);\r\n        items[index] = event.target.value;\r\n        setDataInputItems(items);\r\n        console.log(items)\r\n\r\n        // store to form data\r\n        handleDataInput(items, pathSchema, \"array\")\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={(event) => handleOnBlur(event, index)} id={field_id} fullWidth={true} className={classes.heading} variant=\"outlined\" />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default ItemStringType;\r\n","import React, { useContext, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"../../ElementRenderer\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { FormContext } from \"../../../FormContext\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemObjectType = ({ dataInputItems, setDataInputItems, field_label, pathSchema, field_required, field_items, field_type, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n    let objectIndex = index;\r\n    let field_properties = field_items[\"properties\"]\r\n    let withinArray = true;\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    style={{ height: \"auto\" }}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\", justifySelf: \"center\" }}>\r\n                            {field_label + \" #\" + parseInt(index + 1)}\r\n                        </div>\r\n                        {edit ? <Button onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div style={{ width: \"100%\" }}>\r\n                        {Object.keys(field_properties).map((item, index) => {\r\n                            let tempField = field_properties[item]\r\n                            if (tempField[\"enum\"]) {\r\n                                tempField[\"enumerate\"] = tempField[\"enum\"]\r\n                            }\r\n                            return (\r\n                                <div key={item} style={{ display: \"flex\" }}>\r\n                                    <ElementRenderer pathSchema={pathSchema} withinArray={withinArray} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} fieldId={item} fieldIndex={objectIndex} elementRequired={field_required} edit={false} field={tempField} />\r\n                                </div>\r\n                            )\r\n                        })\r\n                        }\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div >\r\n    </>);\r\n\r\n};\r\n\r\nexport default ItemObjectType;\r\n","import React from 'react';\r\nimport ItemIntegerType from './array_items/ItemIntegerType';\r\nimport ItemNumberType from './array_items/ItemNumberType';\r\nimport ItemStringType from \"./array_items/ItemStringType\";\r\nimport ItemObjectType from \"./array_items/ItemObjectType\";\r\n\r\n\r\nconst ArrayItemRenderer = ({ pathSchema, dataInputItems, setDataInputItems, field_label, field_items, path, type, edit, fieldIndex, fieldId, enumerate, handleDeleteArrayItem, properties }) => {\r\n\r\n    switch (type) {\r\n        case 'string':\r\n            return (<ItemStringType\r\n                setDataInputItems={setDataInputItems}\r\n                pathSchema={pathSchema}\r\n                dataInputItems={dataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'number':\r\n            return (<ItemNumberType\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'integer':\r\n            return (<ItemIntegerType\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'object':\r\n            return (<ItemObjectType\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                field_label={field_label}\r\n                pathSchema={pathSchema}\r\n                path={path + \".\" + fieldIndex}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n                field_items={field_items}\r\n            />)\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ArrayItemRenderer;\r\n","const generateUID = () => {\r\n    // I generate the UID from two parts here \r\n    // to ensure the random number provide enough bits.\r\n    var firstPart = (Math.random() * 46656) | 0;\r\n    var secondPart = (Math.random() * 46656) | 0;\r\n    firstPart = (\"000\" + firstPart.toString(36)).slice(-3);\r\n    secondPart = (\"000\" + secondPart.toString(36)).slice(-3);\r\n    return firstPart + secondPart;\r\n}\r\n\r\nexport default generateUID;","import React, { useState, useContext } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ArrayItemRenderer from \"./ArrayItemRenderer\";\r\nimport generateUniqueID from \"../utils/generateUniqueID\";\r\nimport { IconButton } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst ArrayType = ({ pathSchema, path, field_required, field_id, field_index, edit, field_label, field_description, field_items, field_prefixItems }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete } = useContext(FormContext);\r\n    const [inputItems, setInputItems] = useState([]);\r\n    const [dataInputItems, setDataInputItems] = useState([]);\r\n    const [itemSchema, setItemSchema] = useState();\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n        setInputItems(items)\r\n        console.log(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems\r\n        const items2 = Array.from(arr2);\r\n        const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n        items2.splice(result.destination.index, 0, reorderedItem2);\r\n        setDataInputItems(items2)\r\n        console.log(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathSchema, \"array\");\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathSchema);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"items\": field_items,\r\n        \"type\": \"array\"\r\n    }\r\n\r\n    // handle add array item\r\n    const handleAddArrayItem = () => {\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (Object.keys(field_items).length === 0) {\r\n                // create field_items if items is empty\r\n                field_items = { type: \"string\", field_id: `${generateUniqueID()}` }\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(field_items);\r\n                setInputItems(items);\r\n\r\n                // push a new item for the data\r\n                let arr2 = dataInputItems;\r\n                const items2 = Array.from(arr2);\r\n                items2.push(\"\");\r\n                setDataInputItems(items2)\r\n                console.log(items2)\r\n            } else {\r\n                // use existing schema if items is not empty\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                newFieldItems[\"field_id\"] = generateUniqueID();\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(newFieldItems);\r\n                setInputItems(items);\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    setDataInputItems(items2)\r\n                    console.log(items2)\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push({});\r\n                    setDataInputItems(items2)\r\n                    console.log(items2)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle delete item\r\n    const handleDeleteArrayItem = (index) => {\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        items.splice(index, 1);\r\n        setInputItems(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems;\r\n        const items2 = Array.from(arr2);\r\n        items2.splice(index, 1);\r\n        setDataInputItems(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathSchema, \"array\");\r\n    }\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography className={classes.heading}>{field_label + (required ? \"*\" : \"\")}</Typography>\r\n                            {expand ? <div style={{ color: \"gray\" }}>\r\n                                {field_description}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <><Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button></> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(inputItems).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={false} key={inputItems[index][\"field_id\"]} draggableId={inputItems[index][\"field_id\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <DragHandleIcon fontSize=\"small\" />\r\n                                                            </div>\r\n                                                            <ArrayItemRenderer pathSchema={pathSchema} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} field_label={field_label} field_items={field_items} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path + \".properties\"} fieldIndex={index} fieldId={inputItems[index][\"field_id\"]} type={inputItems[index][\"type\"]} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <IconButton onClick={() => { handleAddArrayItem() }} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><AddIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement pathSchema={pathSchema} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default ArrayType;","import React, { useState, useContext } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ArrayItemRenderer from \"./ArrayItemRenderer\";\r\nimport generateUniqueID from \"../utils/generateUniqueID\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport ElementRenderer from \"../ElementRenderer\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst AnyOfKeyword = ({ path, field_required, field_id, field_index, edit, field_label, field_description, field_prefixItems, anyOf_list }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n    const [inputItems, setInputItems] = useState([]);\r\n    const [field_items, setField_items] = useState(Array.isArray(anyOf_list) & anyOf_list[0][\"type\"] === \"array\" ? anyOf_list[0][\"items\"] : anyOf_list[0])\r\n    const [globalIndex, setGlobalIndex] = useState(0)\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    let schemaList = Array(anyOf_list.length).fill().map((x, i) => i)\r\n\r\n    // select existing schema option from anyOf list\r\n    const handleChooseAnyOfSchema = (event) => {\r\n        const index = parseInt(event.target.value)\r\n        setGlobalIndex(index)\r\n        if (anyOf_list[index][\"type\"] === \"array\") {\r\n            setField_items(anyOf_list[index][\"items\"])\r\n        } else {\r\n            setField_items(anyOf_list[index])\r\n        }\r\n    }\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        setInputItems(items)\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"items\": field_items,\r\n        \"type\": [anyOf_list[globalIndex][\"type\"]]\r\n    }\r\n\r\n    // handle add array item\r\n    const handleAddArrayItem = () => {\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (Object.keys(field_items).length === 0) {\r\n                // create field_items if items is empty\r\n                field_items = { type: \"string\", field_id: `${generateUniqueID()}` }\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(field_items);\r\n                setInputItems(items);\r\n            } else {\r\n                // use existing schema if items is not empty\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                newFieldItems[\"field_id\"] = generateUniqueID();\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(newFieldItems);\r\n                setInputItems(items);\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle delete item\r\n    const handleDeleteArrayItem = (index) => {\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        items.splice(index, 1);\r\n        setInputItems(items)\r\n    }\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography className={classes.heading}>{field_label + (required ? \"*\" : \"\")}</Typography>\r\n                            {expand ? <div style={{ color: \"gray\" }}>\r\n                                {field_description}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <><Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button></> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <TextField\r\n                    onChange={(event) => handleChooseAnyOfSchema(event)}\r\n                    style={{ width: \"220px\", marginLeft: \"10px\", marginTop: \"20px\" }}\r\n                    fullWidth={false}\r\n                    select\r\n                    id={\"select-schema\"}\r\n                    label={\"Choose a subschema\"}\r\n                    SelectProps={{ native: true }}\r\n                >\r\n                    {schemaList.map((content, index) => (\r\n                        <option key={index} value={content}>\r\n                            {content}\r\n                        </option>\r\n                    ))}\r\n                </TextField>\r\n                {anyOf_list[globalIndex][\"type\"] === \"array\" ?\r\n                    <AccordionDetails>\r\n                        <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                            <Droppable droppableId=\"subforms\">\r\n                                {(provided) => (\r\n                                    <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                        {Object.keys(inputItems).map((item, index) => {\r\n                                            return (\r\n                                                <Draggable key={inputItems[index][\"field_id\"]} draggableId={inputItems[index][\"field_id\"]} index={index}>\r\n                                                    {(provided) => (\r\n                                                        <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                            <div style={{ display: \"flex\" }}>\r\n                                                                <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                    <DragHandleIcon fontSize=\"small\" />\r\n                                                                </div>\r\n                                                                <ArrayItemRenderer field_label={field_label} field_items={inputItems[index]} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path + \".properties\"} fieldIndex={index} fieldId={inputItems[index][\"field_id\"]} type={inputItems[index][\"type\"]} />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    )}\r\n                                                </Draggable>\r\n                                            );\r\n                                        })}\r\n                                        {provided.placeholder}\r\n                                        <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                            <IconButton onClick={() => { handleAddArrayItem() }} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><AddIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                        </DragDropContext>\r\n                    </AccordionDetails>\r\n                    :\r\n                    <div style={{ padding: \"10px\" }}>\r\n                        <ElementRenderer path={path} fieldId={field_id} fieldIndex={0} elementRequired={field_required} edit={false} field={field_items} />\r\n                    </div>}\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default AnyOfKeyword;","import React from 'react';\r\nimport StringType from \"./elements/StringType\";\r\nimport NumberType from \"./elements/NumberType\";\r\nimport ObjectType from './elements/ObjectType';\r\nimport IntegerType from './elements/IntegerType';\r\nimport BooleanType from './elements/BooleanType';\r\nimport ArrayType from './elements/ArrayType';\r\nimport AnyOfKeyword from './elements/AnyOfKeyword';\r\n\r\n\r\nconst ElementRenderer = ({ dataInputItems, setDataInputItems, withinArray, path, pathSchema, elementRequired, fieldId, fieldIndex, edit, field: { type, title, description, properties, required, enumerate, items, defaultValue, anyOf } }) => {\r\n\r\n    switch (type) {\r\n        case 'string':\r\n            return (<StringType\r\n                withinArray={withinArray}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema !== undefined ? pathSchema + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'number':\r\n            return (<NumberType\r\n                withinArray={withinArray}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema !== undefined ? pathSchema + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'integer':\r\n            return (<IntegerType\r\n                withinArray={withinArray}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema !== undefined ? pathSchema + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'boolean':\r\n            return (<BooleanType\r\n                withinArray={withinArray}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema !== undefined ? pathSchema + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'array':\r\n            return (<ArrayType\r\n                withinArray={withinArray}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema !== undefined ? pathSchema + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_items={items}\r\n                edit={edit}\r\n            />)\r\n        case 'object':\r\n            return (<ObjectType\r\n                withinArray={withinArray}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema !== undefined ? pathSchema + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={required}\r\n                field_properties={properties}\r\n                edit={edit}\r\n            />)\r\n        case undefined:\r\n            if (anyOf) {\r\n                return (\r\n                    <AnyOfKeyword\r\n                        withinArray={withinArray}\r\n                        path={path + \".\" + fieldIndex}\r\n                        field_id={fieldId}\r\n                        field_label={title}\r\n                        field_description={description}\r\n                        field_required={elementRequired}\r\n                        anyOf_list={anyOf}\r\n                        edit={edit}\r\n                    />\r\n                )\r\n            } else {\r\n                return null\r\n            }\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ElementRenderer;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst EditSchemaHeader = ({ schemaID, title, description, schemaURI, openDialog, setOpenDialog }) => {\r\n\r\n    const [_schemaID, _setSchemaID] = useState(schemaID);\r\n    const [_title, _setTitle] = useState(title);\r\n    const [_description, _setDescription] = useState(description);\r\n    const [_schemaURI, _setSchemaURI] = useState(schemaURI);\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n\r\n\r\n\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n\r\n        if (_schemaURI === undefined) {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else if (_schemaURI.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else {\r\n            convertedSchema[\"$schema\"] = _schemaURI\r\n        };\r\n\r\n        if (_schemaID === undefined) {\r\n            delete convertedSchema[\"id\"]\r\n        } else if (_schemaID.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"id\"]\r\n        } else {\r\n            convertedSchema[\"id\"] = _schemaID\r\n        };\r\n\r\n        if (_title === undefined) {\r\n            delete convertedSchema[\"title\"]\r\n        } else if (_title.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"title\"]\r\n        } else {\r\n            convertedSchema[\"title\"] = _title\r\n        };\r\n\r\n        if (_description === undefined) {\r\n            delete convertedSchema[\"description\"]\r\n        } else if (_description.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"description\"]\r\n        } else {\r\n            convertedSchema[\"description\"] = _description\r\n        };\r\n\r\n        updateParent(convertedSchema)\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'title':\r\n                return _setTitle(event.target.value)\r\n            case 'description':\r\n                return _setDescription(event.target.value)\r\n            case 'id':\r\n                return _setSchemaID(event.target.value)\r\n            case 'uri':\r\n                return _setSchemaURI(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        _setDescription(description);\r\n        _setSchemaID(schemaID);\r\n        _setSchemaURI(schemaURI);\r\n        _setTitle(title);\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Edit schema \"{title}\"\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"uri\")} style={{ marginTop: \"20px\" }} defaultValue={schemaURI} variant=\"outlined\" fullWidth={true} label={\"Schema URI\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"id\")} style={{ marginTop: \"10px\" }} defaultValue={schemaID} variant=\"outlined\" fullWidth={true} label={\"Schema ID\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={title} variant=\"outlined\" fullWidth={true} label={\"Schema Title\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={description} variant=\"outlined\" fullWidth={true} label={\"Schema Description\"} multiline rows={3} />\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditSchemaHeader;","import React, { useContext, useState } from \"react\";\r\n//import { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"./ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from '../FormContext';\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport RevertIvon from \"@material-ui/icons/History\";\r\nimport AddElement from \"./AddElement\";\r\nimport EditSchemaHeader from \"./EditSchemaHeader\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst FormRenderer = ({ revertAllChanges, schema, edit }) => {\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    // deconstruct\r\n    const { properties, title, description, required, $schema, id } = schema ?? {}\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        let value = { ...convertedSchema };\r\n        value[\"properties\"] = items;\r\n        updateParent(value);\r\n    }\r\n\r\n    /*\r\n    console.log(\"converted:\", convertedSchema)\r\n    let deconvertedSchema = JSON.parse(JSON.stringify(convertedSchema))\r\n    deconvertedSchema[\"properties\"] = array2object(convertedSchema[\"properties\"])\r\n    console.log(\"deconverted:\", deconvertedSchema)\r\n    */\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <Typography className={classes.heading} style={{ width: \"100%\" }}>{title}</Typography>\r\n                {edit ? <> <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}> <EditIcon color=\"primary\" /></Button> <Button onClick={() => revertAllChanges()} style={{ marginLeft: \"5px\" }}> <RevertIvon color=\"primary\" /></Button>  </> : null}\r\n            </div>\r\n            <Divider />\r\n            <Typography>{description}</Typography>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"forms\">\r\n                    {(provided) => (\r\n                        <form {...provided.droppableProps} ref={provided.innerRef}>\r\n                            {Object.keys(properties).map((item, index) => {\r\n                                return (\r\n                                    <Draggable isDragDisabled={!edit} key={properties[item][\"fieldId\"]} draggableId={properties[item][\"fieldId\"]} index={index}>\r\n                                        {(provided) => (\r\n                                            <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                <div style={{ display: \"flex\" }}>\r\n                                                    {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                        <DragHandleIcon fontSize=\"small\" />\r\n                                                    </div> : null}\r\n                                                    <ElementRenderer schema={schema} path={\"properties\"} fieldId={properties[item][\"fieldId\"]} fieldIndex={item} elementRequired={required} edit={edit} field={properties[item]} />\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                );\r\n                            })}\r\n                            {provided.placeholder}\r\n                            {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                            </div> : null}\r\n                        </form>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n        {openDialogAddElement ? <AddElement openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} defaultSchema={defaultSchema} schemaTitle={title} /> : null}\r\n        {openDialog ? <EditSchemaHeader schemaID={id} title={title} description={description} schemaURI={$schema} openDialog={openDialog} setOpenDialog={setOpenDialog} /> : null}\r\n    </>);\r\n};\r\n\r\nexport default FormRenderer;","import React, { useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst JSONSchemaViewer = ({ jsonschema }) => {\r\n    //console.log(\"path:\", path)\r\n    const [expand, setExpand] = useState(false); // set to \"true\" for normally open accordion\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div>\r\n                            <Typography className={classes.heading}>JSON Schema Viewer</Typography>\r\n                        </div>\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div >\r\n                        <pre style={{ overflowX: \"auto\", whiteSpace: \"pre-wrap\", wordWrap: \"break-word\" }}>\r\n                            {JSON.stringify(jsonschema, null, 2)}\r\n                        </pre>\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n    </>);\r\n};\r\n\r\nexport default JSONSchemaViewer;","// convert iterable array to json schema properties\r\nconst array2object = (propert) => {\r\n    var someObject = {};\r\n    propert.forEach((item) => {\r\n        const tempKey = item[\"fieldId\"];\r\n        delete item[\"fieldId\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        Object.keys(tempElements).forEach((item) => {\r\n            // change \"enumerate\" to \"enum\"\r\n            if (item === \"enumerate\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"enumerate\"])\r\n                );\r\n                delete someObject[tempKey][\"enumerate\"];\r\n                someObject[tempKey][\"enum\"] = enumContent;\r\n            }\r\n            if (item === \"defaultValue\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"defaultValue\"])\r\n                );\r\n                delete someObject[tempKey][\"defaultValue\"];\r\n                someObject[tempKey][\"default\"] = enumContent;\r\n            }\r\n            if (item === \"properties\") {\r\n                // some recursion\r\n                someObject[tempKey][\"properties\"] = array2object(\r\n                    someObject[tempKey][\"properties\"]\r\n                );\r\n            }\r\n        });\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default array2object;","// convert json schema properties to an iterable array\r\nconst object2array = (propert) => {\r\n    let someArray = [];\r\n    Object.keys(propert).forEach((item) => {\r\n        var tempVariable = {};\r\n        var tempVariable2;\r\n        tempVariable2 = propert[item];\r\n        tempVariable[\"fieldId\"] = item;\r\n        Object.keys(tempVariable2).forEach((item_) => {\r\n            // make enum indexable by changing the key to \"enumerate\"\r\n            if (item_ === \"enum\") {\r\n                tempVariable[\"enumerate\"] = tempVariable2[item_];\r\n            }\r\n            if (item_ === \"default\") {\r\n                tempVariable[\"defaultValue\"] = tempVariable2[item_];\r\n            }\r\n            tempVariable[item_] = tempVariable2[item_];\r\n            if (item_ === \"properties\") {\r\n                // recursive on action to access nested properties\r\n                tempVariable[item_] = object2array(tempVariable2[item_]);\r\n            }\r\n        });\r\n        someArray.push(tempVariable);\r\n    });\r\n\r\n    return someArray;\r\n};\r\n\r\nexport default object2array;","import getValue from \"./getValue\";\r\nimport set from \"set-value\";\r\n\r\n// delete key and value given path\r\nconst deleteKeySchema = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json));\r\n    let pathArray = path.split('.');\r\n\r\n    if (pathArray.length === 1) {\r\n        delete jsonData[pathArray[0]];\r\n    } else {\r\n        let tobeDeleted = pathArray.pop();\r\n        pathArray = pathArray.join(\".\");\r\n        let value = getValue(jsonData, pathArray);\r\n        delete value[tobeDeleted]\r\n        set(jsonData, pathArray, value);\r\n    }\r\n\r\n    return jsonData;\r\n\r\n\r\n};\r\n\r\nexport default deleteKeySchema;","import React, { useCallback, useState } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport HeaderImage from \"../assets/header-image.png\";\r\nimport FormRenderer from \"../components/FormRenderer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { FormContext } from \"../FormContext\";\r\nimport JSONSchemaViewer from \"../components/JSONSchemaViewer\";\r\nimport array2object from \"../components/utils/array2object\";\r\nimport object2array from \"../components/utils/object2array\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport DownloadIcon from \"@material-ui/icons/GetApp\";\r\nimport set from \"set-value\";\r\nimport getValue from \"../components/utils/getValue\";\r\nimport deleteKey from \"../components/utils/deleteKey\";\r\nimport deleteKeySchema from \"../components/utils/deleteKeySchema\";\r\n\r\n// function that receive the schema and convert it to Form/json data blueprint\r\n// also to already put the default value to this blueprint\r\nconst createFormDataBlueprint = (schemaProperties) => {\r\n  let newObject = {};\r\n\r\n  Object.keys(schemaProperties).forEach((item) => {\r\n    if (schemaProperties[item][\"type\"] !== \"object\") {\r\n      if (schemaProperties[item][\"default\"] !== undefined) {\r\n        newObject[item] = schemaProperties[item][\"default\"];\r\n      } else if (\r\n        (schemaProperties[item][\"type\"] === \"boolean\") &\r\n        (schemaProperties[item][\"default\"] === undefined)\r\n      ) {\r\n        newObject[item] = false;\r\n      }\r\n    } else {\r\n      if (\r\n        (schemaProperties[item][\"properties\"] !== undefined) &\r\n        schemaProperties[item][\"properties\"]\r\n      ) {\r\n        newObject[item] = createFormDataBlueprint(\r\n          schemaProperties[item][\"properties\"]\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return newObject;\r\n};\r\n\r\nconst AdamantMain = () => {\r\n  // state management\r\n  const [disable, setDisable] = useState(true);\r\n  const [schemaMessage, setSchemaMessage] = useState(null);\r\n  const [schemaValidity, setSchemaValidity] = useState(false);\r\n  const [schema, setSchema] = useState(null);\r\n  const [renderReady, setRenderReady] = useState(false);\r\n  const [editMode, setEditMode] = useState(true);\r\n  const [schemaFile, setSchemaFile] = useState();\r\n  const [originalSchema, setOriginalSchema] = useState();\r\n  const [inputMode, setInputMode] = useState(false);\r\n  const [convertedSchema, setConvertedSchema] = useState(null);\r\n  const [createScratchMode, setCreateScratchMode] = useState(false);\r\n  const [jsonData, setJsonData] = useState({});\r\n  // for dropdown buttons\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  }; //\r\n\r\n  // place holders\r\n  let schemaList = [\r\n    \"\",\r\n    \"SEM-request-form\",\r\n    \"Plasma-MDS\",\r\n    \"unreasonably long title lalalala...\",\r\n  ]; //\r\n\r\n  // function to check if the file accepted is of json format and json schema valid\r\n  const checkSchemaValidity = (schemaFile) => {\r\n    // place holder\r\n    if (schemaFile[0][\"type\"] === \"application/json\") {\r\n      // read the file with FileReadr API\r\n      const reader = new FileReader();\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = () => {\r\n        const binaryStr = reader.result;\r\n        const obj = JSON.parse(binaryStr);\r\n\r\n        // convert obj schema to iterable array properties\r\n        let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n        try {\r\n          convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n          // update states\r\n          setSchemaValidity(true);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is a valid schema`);\r\n          setSchema(obj);\r\n          let oriSchema = JSON.parse(JSON.stringify(obj));\r\n          setOriginalSchema(oriSchema);\r\n          setConvertedSchema(convertedSchema);\r\n          setEditMode(true);\r\n\r\n          // create form data\r\n          let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n          setJsonData(formData);\r\n          console.log(formData);\r\n        } catch (error) {\r\n          console.log(error);\r\n          // update states\r\n          setSchemaValidity(false);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is invalid`);\r\n          setSchema(null);\r\n        }\r\n      };\r\n      reader.readAsText(schemaFile[0]);\r\n    } else {\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${schemaFile[0][\"name\"]} is of incorrect file type`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // browse or drag&drop schema file\r\n  const onDrop = useCallback(\r\n    (acceptedFile) => {\r\n      // process the schema, validation etc\r\n      checkSchemaValidity(acceptedFile);\r\n\r\n      // store schema file in the state\r\n      setSchemaFile(acceptedFile);\r\n      // update states\r\n      setRenderReady(false);\r\n      setDisable(true);\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n    },\r\n    [setRenderReady]\r\n  );\r\n  //\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    multiple: false,\r\n  });\r\n\r\n  // render on-click handle\r\n  const renderOnClick = () => {\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // clear schema on-click handle\r\n  const clearSchemaOnClick = () => {\r\n    setDisable(true);\r\n    setRenderReady(false);\r\n    setSchema(null);\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setCreateScratchMode(false);\r\n  };\r\n\r\n  // create new schema from scratch\r\n  const createSchemaFromScratch = () => {\r\n    // update browse schema render states\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setJsonData({});\r\n\r\n    let schemaBlueprint = { properties: {}, type: \"object\" };\r\n    const obj = JSON.parse(JSON.stringify(schemaBlueprint));\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n    setJsonData(formData);\r\n    console.log(formData);\r\n\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n    convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n    // update states\r\n    setCreateScratchMode(true);\r\n    setSchema(obj);\r\n    let oriSchema = JSON.parse(JSON.stringify(obj));\r\n    setOriginalSchema(oriSchema);\r\n    setConvertedSchema(convertedSchema);\r\n    setEditMode(true);\r\n\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // compile on-click handle\r\n  const compileOnClick = () => {\r\n    const value = schema;\r\n    setInputMode(true);\r\n    setSchema(value);\r\n    setEditMode(false);\r\n    setDisable(true);\r\n  };\r\n\r\n  // return to edit mode handle\r\n  const toEditMode = () => {\r\n    const value = schema;\r\n    setInputMode(false);\r\n    setSchema(value);\r\n    setEditMode(true);\r\n    setDisable(false);\r\n  };\r\n\r\n  // update parent (re-render everything)\r\n  const updateParent = (value) => {\r\n    const newValue = { ...value };\r\n\r\n    // update original schema\r\n    const updatedSchema = JSON.parse(JSON.stringify(newValue));\r\n    const tempSchema = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema[\"properties\"] = array2object(tempSchema[\"properties\"]);\r\n\r\n    setConvertedSchema(newValue);\r\n    setSchema(updatedSchema);\r\n  };\r\n\r\n  // revert all changes to the schema\r\n  const revertAllChanges = () => {\r\n    const value = { ...originalSchema };\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(value));\r\n    convertedSchema[\"properties\"] = object2array(value[\"properties\"]);\r\n    setConvertedSchema(convertedSchema);\r\n    setSchema(value);\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(value[\"properties\"]);\r\n    setJsonData(formData);\r\n    console.log(formData);\r\n  };\r\n\r\n  // handle data input on blur\r\n  const handleDataInput = (event, path, type) => {\r\n    let jData = { ...jsonData };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(jData, path, value);\r\n    console.log(\"Current form data:\", jData);\r\n    setJsonData(jData);\r\n  };\r\n  //\r\n\r\n  // delete data in jsonData when the field in schema is deleted\r\n  const handleDataDelete = (path) => {\r\n    let jData = { ...jsonData };\r\n    let value = deleteKeySchema(jData, path);\r\n    setJsonData(value);\r\n    console.log(value);\r\n  };\r\n\r\n  // update form data id if a fieldId changes, simply delete key value pair of the oldfieldid from jsonData\r\n  const updateFormDataId = (\r\n    oldFieldId,\r\n    newFieldId,\r\n    pathSchema,\r\n    defaultValue\r\n  ) => {\r\n    if (oldFieldId === newFieldId) {\r\n      return;\r\n    }\r\n    if (defaultValue === undefined) {\r\n      let jData = { ...jsonData };\r\n      jData = deleteKeySchema(jData, pathSchema);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    } else {\r\n      let newPathSchema = pathSchema.split(\".\");\r\n      newPathSchema.pop();\r\n      newPathSchema.push(newFieldId);\r\n\r\n      let jData = { ...jsonData };\r\n      let value = getValue(jData, pathSchema);\r\n      set(jData, newPathSchema, value);\r\n      jData = deleteKeySchema(jData, pathSchema);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormContext.Provider\r\n        value={{\r\n          updateParent,\r\n          convertedSchema,\r\n          handleDataInput,\r\n          updateFormDataId,\r\n          handleDataDelete,\r\n        }}\r\n      >\r\n        <div style={{ paddingBottom: \"5px\" }}>\r\n          <img\r\n            style={{ width: \"100%\", borderRadius: \"5px\" }}\r\n            alt=\"header\"\r\n            src={HeaderImage}\r\n          />\r\n          {!inputMode ? (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                textAlign: \"left\",\r\n                padding: \"10px 10px 0px 10px\",\r\n              }}\r\n            >\r\n              <Button variant=\"contained\" color=\"primary\" {...getRootProps()}>\r\n                <input {...getInputProps()} />\r\n                {isDragActive ? \"Drop here\" : \"Browse Schema\"}\r\n              </Button>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <TextField\r\n                style={{ width: \"220px\", marginLeft: \"10px\" }}\r\n                fullWidth={false}\r\n                select\r\n                id={\"select-schema\"}\r\n                label={\"Select existing schema\"}\r\n                variant=\"outlined\"\r\n                SelectProps={{ native: true }}\r\n              >\r\n                {schemaList.map((content, index) => (\r\n                  <option key={index} value={content}>\r\n                    {content}\r\n                  </option>\r\n                ))}\r\n              </TextField>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <Button\r\n                onClick={() => createSchemaFromScratch()}\r\n                style={{\r\n                  marginLeft: \"10px\",\r\n                  marginRight: \"10px\",\r\n                }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                CREATE SCHEMA/FORM\r\n              </Button>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        {!inputMode ? (\r\n          <div\r\n            style={{\r\n              paddingLeft: \"10px\",\r\n              display: \"flex\",\r\n              width: \"100%\",\r\n              textAlign: \"left\",\r\n            }}\r\n          >\r\n            {schemaValidity === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}. You can now render the form.\r\n                </div>\r\n                <Button\r\n                  style={{ marginRight: \"5px\" }}\r\n                  onClick={() => renderOnClick()}\r\n                  variant=\"outlined\"\r\n                >\r\n                  Render\r\n                </Button>\r\n                <Button\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    paddingTop: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"red\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}\r\n                </div>\r\n              </>\r\n            )}\r\n            {createScratchMode === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  Create from scratch mode. You can now start editing.\r\n                </div>\r\n                <Button\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : null}\r\n          </div>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        {renderReady === true ? (\r\n          <FormRenderer\r\n            revertAllChanges={revertAllChanges}\r\n            schema={convertedSchema}\r\n            edit={editMode}\r\n          />\r\n        ) : null}\r\n        {renderReady === true ? <JSONSchemaViewer jsonschema={schema} /> : null}\r\n        <div\r\n          style={{\r\n            padding: \"10px 10px\",\r\n            display: \"flex\",\r\n            justifyContent: \"right\",\r\n          }}\r\n        >\r\n          {inputMode ? (\r\n            <div style={{ width: \"100%\", display: \"inline-block\" }}>\r\n              <Button\r\n                onClick={() => toEditMode()}\r\n                style={{ float: \"left\", marginRight: \"5px\" }}\r\n                variant=\"outlined\"\r\n              >\r\n                Back to Edit Mode\r\n              </Button>\r\n              <Button\r\n                style={{ float: \"right\" }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Proceed\r\n              </Button>\r\n              <Button\r\n                style={{ float: \"right\", marginRight: \"5px\" }}\r\n                id=\"demo-positioned-button\"\r\n                aria-controls={open ? \"demo-positioned-menu\" : undefined}\r\n                aria-haspopup=\"true\"\r\n                aria-expanded={open ? \"true\" : undefined}\r\n                onClick={handleClick}\r\n              >\r\n                <DownloadIcon /> Download Schema/Data\r\n              </Button>\r\n              <Menu\r\n                id=\"demo-positioned-menu\"\r\n                aria-labelledby=\"demo-positioned-button\"\r\n                anchorEl={anchorEl}\r\n                open={open}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n                transformOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n              >\r\n                <MenuItem onClick={handleClose}>Download JSON Schema</MenuItem>\r\n                <MenuItem onClick={handleClose}>Download JSON Data</MenuItem>\r\n              </Menu>\r\n            </div>\r\n          ) : (\r\n            <Button\r\n              disabled={disable}\r\n              onClick={() => compileOnClick()}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Compile\r\n            </Button>\r\n          )}\r\n        </div>\r\n        <div style={{ padding: \"5px\" }}>ADAMANT v0.0.1</div>\r\n      </FormContext.Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdamantMain;\r\n","import React from \"react\";\nimport \"./styles.css\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport AdamantMain from \"./pages/AdamantMain\";\nimport \"cors\";\n\nexport default function App() {\n\n\n  return (\n    /*\n    <div className=\"the_app\">\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/pbb/adamant\" />\n        <Route exact path=\"/pbb/adamant\" component={AdamantMain}></Route>\n      </Switch>\n    </div>\n    */\n    <div className=\"the_app\">\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/adamant\" />\n        <Route exact path=\"/adamant\" component={AdamantMain}></Route>\n      </Switch>\n    </div>\n  );\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n//import { HashRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nconst rootElement = document.getElementById(\"root\");\n\n// strict mode is disabled so that findDOMNode warning is suppressed\nReactDOM.render(\n  <Router>\n    <CssBaseline />\n    <App />\n  </Router>,\n  rootElement\n);\n\n\n/* use this for strict mode, however it always throws the findDOMNode warning\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <CssBaseline />\n      <App />\n    </Router>\n  </React.StrictMode>,\n  rootElement\n);\n*/"],"sourceRoot":""}