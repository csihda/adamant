{"version":3,"sources":["assets/header-image.png","components/utils/getValue.js","components/utils/checkIfFieldIDExist.js","FormContext.js","components/utils/updateRequired.js","components/EditElement.js","components/utils/deleteKey.js","components/elements/StringType.js","components/utils/getUnit.js","components/elements/NumberType.js","components/AddElement.js","components/elements/ObjectType.js","components/elements/IntegerType.js","components/elements/BooleanType.js","components/elements/array_items/ItemIntegerType.js","components/elements/array_items/ItemNumberType.js","components/elements/array_items/ItemStringType.js","components/elements/array_items/ItemObjectType.js","components/elements/ArrayItemRenderer.js","components/utils/generateUniqueID.js","components/elements/ArrayType.js","components/elements/AnyOfKeyword.js","components/ElementRenderer.js","components/EditSchemaHeader.js","components/FormRenderer.js","components/JSONSchemaViewer.js","components/utils/array2object.js","components/utils/object2array.js","components/utils/deleteKeySchema.js","components/utils/validateAgainstSchema.js","components/CreateELabFTWExperimentDialog.js","components/utils/formData2descriptionList.js","pages/AdamantMain.jsx","App.js","index.js"],"names":["getValue","json","path","undefined","jsonData","JSON","parse","stringify","split","tempValue","i","length","checkIfFieldIDExist","schema","fieldId","result","forEach","element","value","newPath","pop","join","FormContext","createContext","updateRequired","selectedType","requiredChecked","field_id","convertedSchema","set","require","immediateValue","requiredArray","push","Set","includes","filter","item","EditElement","makeStyles","theme","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","enumerated","field_enumerate","field_required","UISchema","pathSchema","openDialog","setOpenDialog","defaultValue","useState","setSelectedType","title","setTitle","setFieldId","description","setDescription","defValue","setDefValue","useContext","updateParent","updateFormDataId","setRequiredChecked","enumChecked","setEnumChecked","enumList","setEnumList","tempUISchema","notImplemented","handleUpdateSchemaOnClick","toString","replace","existed","alert","newConvertedSchema","newList","Array","isArray","parsed","map","parseInt","parseFloat","handleChangeUISchema","event","keyword","target","handleCancelEdit","handleCheckBoxOnChange","prev","Dialog","open","DialogTitle","id","style","display","verticalAlign","color","alignSelf","IconButton","onClick","Divider","DialogContent","DialogActions","Button","disabled","autoFocus","DialogContentText","component","FormControl","FormLabel","TextField","margin","required","onChange","marginTop","variant","fullWidth","label","helperText","multiline","rows","select","SelectProps","native","content","index","FormControlLabel","control","Checkbox","checked","marginBottom","paddingTop","paddingBottom","FormGroup","deleteKey","elementValue","deleteIndex","at","splice","useStyles","StringType","dataInputItems","setDataInputItems","withinArray","field_index","edit","field_label","field_description","handleDataInput","handleDataDelete","classes","handleDeleteElement","handleOnBlur","type","newPathSchema","arr","items","from","useEffect","onBlur","className","marginLeft","height","getUnit","addorn","match","NumberType","inputValue","setInputValue","unit","handleInputOnChange","inputValueVar","handleInputOnBlur","isNaN","e","InputProps","endAdornment","InputAdornment","position","AddElement","defaultSchema","schemaTitle","inputProps","maxLength","handleOnBlurFieldId","properties","ObjectType","field_properties","openDialogAddElement","setOpenDialogAddElement","expand","setExpand","padding","Accordion","expanded","AccordionSummary","expandIcon","IconButtonProps","Typography","AccordionDetails","onDragEnd","destination","source","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","Object","keys","isDragDisabled","draggableId","draggableProps","dragHandleProps","fieldIndex","elementRequired","field","placeholder","justifyContent","IntegerType","BooleanType","alignItems","paddingLeft","textAlign","FormHelperText","ItemIntegerType","handleDeleteArrayItem","ItemNumberType","field_type","ItemStringType","ItemObjectType","field_items","objectIndex","justifySelf","tempField","ArrayItemRenderer","enumerate","generateUID","firstPart","Math","random","secondPart","slice","ArrayType","field_prefixItems","inputItems","setInputItems","arr2","items2","reorderedItem2","generateUniqueID","newFieldItems","handleAddArrayItem","AnyOfKeyword","anyOf_list","setField_items","globalIndex","setGlobalIndex","schemaList","fill","x","handleChooseAnyOfSchema","ElementRenderer","anyOf","EditSchemaHeader","schemaID","schemaURI","_schemaID","_setSchemaID","_title","_setTitle","_description","_setDescription","_schemaURI","_setSchemaURI","FormRenderer","revertAllChanges","$schema","paddingRight","JSONSchemaViewer","jsonschema","overflowX","whiteSpace","wordWrap","array2object","propert","someObject","tempKey","tempElements","enumContent","object2array","someArray","tempVariable2","tempVariable","item_","deleteKeySchema","pathArray","tobeDeleted","validateAgainstSchema","formData","ajv","Ajv","allErrors","validate","compile","CreateELabFTWExperimentDialog","getTagsELabFTW","eLabURL","setELabURL","setTags","setRetrievedTags","tags","retrievedTags","setExperimentTitle","setToken","token","setOpenSubmitDialog","openSubmitDialog","createExperimentELabFTW","Autocomplete","multiple","freeSolo","options","getOptionLabel","option","tag","values","console","log","renderInput","params","trim","formData2descriptionList","descList","createFormDataBlueprint","schemaProperties","newObject","removeEmpty","obj","key","AdamantMain","disable","setDisable","schemaMessage","setSchemaMessage","schemaValidity","setSchemaValidity","setSchema","renderReady","setRenderReady","editMode","setEditMode","setSchemaFile","originalSchema","setOriginalSchema","inputMode","setInputMode","setConvertedSchema","createScratchMode","setCreateScratchMode","setJsonData","experimentTitle","onlineMode","setOnlineMode","anchorEl","setAnchorEl","Boolean","handleClose","ajax","url","success","toast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","error","warning","onDrop","useCallback","acceptedFile","schemaFile","reader","FileReader","onabort","onerror","onload","binaryStr","oriSchema","readAsText","checkSchemaValidity","useDropzone","getRootProps","getInputProps","isDragActive","clearSchemaOnClick","Provider","newValue","updatedSchema","tempSchema","jData","oldFieldId","newFieldId","borderRadius","alt","src","HeaderImage","createSchemaFromScratch","marginRight","toEditMode","float","contentSchema","valid","validation","errorMessages","errors","message","currentMessage","handleOnClickProceedButton","currentTarget","Menu","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","sha256_hash","CryptoJS","SHA256","a","document","createElement","file","Blob","href","URL","createObjectURL","download","click","compileOnClick","descriptionList","dataType","data","javascript_data","eLabToken","body","status","App","exact","to","rootElement","getElementById","ReactDOM","render","CssBaseline"],"mappings":"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","file":"static/js/main.eaae7d0e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/header-image.37bfe931.png\";","// get json value given path\r\nconst getValue = (json, path) => {\r\n    if (path === undefined) {\r\n        return json[\"properties\"]\r\n    }\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValue;","import getValue from \"./getValue\";\r\nconst checkIfFieldIDExist = (schema, path, fieldId) => {\r\n    let result\r\n    if (path === undefined) {\r\n        let value = schema[\"properties\"]\r\n        value.forEach(element => {\r\n            if (element[\"fieldId\"] === fieldId) {\r\n                return result = true;\r\n            }\r\n        });\r\n    } else {\r\n\r\n        let value = getValue(schema, path)[\"properties\"]\r\n\r\n        if (value === undefined) {\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n            let value = getValue(schema, newPath)\r\n            value.forEach(element => {\r\n                if (element[\"fieldId\"] === fieldId) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        } else {\r\n            value.forEach(element => {\r\n                if (element[\"fieldId\"] === fieldId) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    if (result) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n\r\n}\r\n\r\nexport default checkIfFieldIDExist;","import { createContext } from 'react';\r\nexport const FormContext = createContext(null);","/*\r\nFunction to add or remove \"required\" flag for a specific field\r\n*/\r\n\r\n\r\n// get json value given path\r\nconst getValue = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n}\r\n\r\nconst updateRequired = ({ selectedType, path, requiredChecked, field_id, convertedSchema }) => {\r\n\r\n    if (selectedType === \"object\") {\r\n        requiredChecked = false\r\n    }\r\n\r\n    const set = require(\"set-value\");\r\n\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const immediateValue = getValue(convertedSchema, newPath)\r\n    if (immediateValue !== undefined) {\r\n        // check if there is required array\r\n        if (immediateValue[\"required\"] !== undefined) {\r\n            let requiredArray = immediateValue[\"required\"]\r\n            if (requiredChecked) {\r\n                requiredArray.push(field_id)\r\n                requiredArray = [...new Set(requiredArray)]\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            } else {\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_id)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_id)\r\n                    set(convertedSchema, newPath + \".required\", requiredArray)\r\n\r\n                    if (requiredArray.length === 0) {\r\n                        delete immediateValue[\"required\"]\r\n                        set(convertedSchema, newPath, immediateValue)\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_id}`]\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            }\r\n        }\r\n    } else {\r\n        // check if there is required array\r\n        if (convertedSchema[\"required\"] !== undefined) {\r\n            let requiredArray = convertedSchema[\"required\"]\r\n            if (requiredChecked) {\r\n                requiredArray.push(field_id)\r\n                requiredArray = [...new Set(requiredArray)]\r\n                convertedSchema[\"required\"] = requiredArray\r\n            } else {\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_id)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_id)\r\n                    convertedSchema[\"required\"] = requiredArray\r\n                    if (requiredArray.length === 0) {\r\n                        delete convertedSchema[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_id}`]\r\n                convertedSchema[\"required\"] = requiredArray\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return convertedSchema;\r\n}\r\n\r\nexport default updateRequired;","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport checkIfFieldIDExist from './utils/checkIfFieldIDExist';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport { FormGroup } from '@material-ui/core';\r\nimport updateRequired from './utils/updateRequired';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\nconst EditElement = ({ enumerated, field_enumerate, field_required, field_id, UISchema, path, pathSchema, openDialog, setOpenDialog, defaultValue }) => {\r\n\r\n    const [selectedType, setSelectedType] = useState(UISchema[\"type\"])\r\n    const [title, setTitle] = useState(UISchema[\"title\"])\r\n    const [fieldId, setFieldId] = useState(UISchema[\"fieldId\"])\r\n    const [description, setDescription] = useState(UISchema[\"description\"])\r\n    const [defValue, setDefValue] = useState(defaultValue)\r\n    const { updateParent, convertedSchema, updateFormDataId } = useContext(FormContext);\r\n    const [requiredChecked, setRequiredChecked] = useState(field_required === undefined ? false : field_required)\r\n    const [enumChecked, setEnumChecked] = useState(enumerated === undefined ? false : enumerated)\r\n    const [enumList, setEnumList] = useState(field_enumerate === undefined ? [] : field_enumerate);\r\n\r\n    let tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n\r\n    let notImplemented = false;\r\n    if (![\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\"].includes(UISchema[\"type\"])) {\r\n        notImplemented = true;\r\n    }\r\n\r\n\r\n    const datatypes = [\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\"]\r\n\r\n\r\n    const handleOnChangeListField = (event) => {\r\n        setEnumList(event.target.value);\r\n    }\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        // update default value\r\n        if (defValue === undefined & defaultValue === undefined) {\r\n            // do nothing\r\n        } else if (defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n            // do nothing\r\n        } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n            // do nothing\r\n        } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') !== \"\" & defaultValue !== undefined) {\r\n            tempUISchema[\"defaultValue\"] = (defValue === \"true\")\r\n        } else if (defValue.toString().replace(/\\s+/g, '') === \"\") {\r\n            delete tempUISchema[\"defaultValue\"]\r\n        }\r\n        else {\r\n            tempUISchema[\"defaultValue\"] = defValue\r\n        };\r\n\r\n        // check if fieldId already exist\r\n        let existed = checkIfFieldIDExist(convertedSchema, path, fieldId)\r\n        if (UISchema[\"fieldId\"] !== fieldId) {\r\n            if (existed) {\r\n                alert(\"Field ID already exists!\")\r\n                return\r\n            }\r\n        }\r\n\r\n        if (fieldId === undefined | fieldId.replace(/\\s+/g, '') === \"\") {\r\n            alert(\"Field ID must be defined!\")\r\n            return\r\n        }\r\n\r\n        tempUISchema[\"fieldId\"] = fieldId;\r\n        tempUISchema[\"type\"] = selectedType;\r\n        if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n        if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n        if (tempUISchema[\"type\"] === \"object\" & tempUISchema[\"properties\"] === undefined) {\r\n            tempUISchema[\"properties\"] = []\r\n        }\r\n        if (tempUISchema[\"type\"] === \"array\" & tempUISchema[\"items\"] === undefined) {\r\n            tempUISchema[\"items\"] = {}\r\n        }\r\n        if (![\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"])) {\r\n            setEnumChecked(false);\r\n        }\r\n        const set = require(\"set-value\");\r\n        set(convertedSchema, path, tempUISchema)\r\n        // update the required value\r\n        const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_id, convertedSchema })\r\n        // update enum\r\n        if ([\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"]) & enumChecked) {\r\n            let newList = enumList\r\n\r\n            switch (tempUISchema[\"type\"]) {\r\n                case 'string':\r\n                    if (Array.isArray(newList)) {\r\n                        set(newConvertedSchema, path + \".enumerate\", newList)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                    }\r\n                case 'integer':\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    }\r\n                case 'number':\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed)\r\n                    }\r\n            }\r\n        }\r\n        // update main component\r\n        updateParent(newConvertedSchema)\r\n        setOpenDialog(false)\r\n\r\n        //* update form data if fieldId change\r\n        // update pathSchema with new fieldId\r\n        updateFormDataId(field_id, fieldId, pathSchema, defaultValue)\r\n\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'type':\r\n                return setSelectedType(event.target.value)\r\n            case 'title':\r\n                return setTitle(event.target.value)\r\n            case 'description':\r\n                return setDescription(event.target.value)\r\n            case 'fieldId':\r\n                return setFieldId(event.target.value.replace(/ /g, \"_\"))\r\n            case 'defaultValue':\r\n                return setDefValue(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n        setOpenDialog(false)\r\n        setEnumList(field_enumerate)\r\n        setDefValue(defaultValue)\r\n        setSelectedType(UISchema[\"type\"])\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleCheckBoxOnChange = () => {\r\n        setRequiredChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleEnumBoxOnChange = () => {\r\n        setEnumChecked(prev => !prev)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {notImplemented ?\r\n                <Dialog\r\n                    open={openDialog}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">\r\n                        <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                            <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                                Edit \"{tempUISchema[\"title\"]}\"\r\n                            </div>\r\n                            <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        We are sorry! Editing feature for the \"{UISchema[\"type\"]}\" type/keyword is not yet implemented.\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button disabled onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                :\r\n                <Dialog\r\n                    open={openDialog}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">\r\n                        <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                            <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                                Edit \"{tempUISchema[\"title\"]}\"\r\n                            </div>\r\n                            <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                            <div>\r\n                                <FormControl component=\"widget-type\">\r\n                                    <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                                    <TextField margin=\"normal\" required onChange={event => handleChangeUISchema(event, \"fieldId\")} style={{ marginTop: \"20px\" }} defaultValue={field_id} variant=\"outlined\" fullWidth={true} label={\"Field ID or Key\"} helperText='A unique json key or id for this field. Usually short and no spaces (use \"_\" instead). Spaces are replaced automatically with \"_\" upon saving.' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"title\"]} variant=\"outlined\" fullWidth={true} label={\"Field Title\"} helperText='Label or title of the field. For a field that requires a unit, the unit can be placed within a square bracket, e,g., \"Chamber Pressure [Pa]\".' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"description\"]} variant=\"outlined\" fullWidth={true} label={\"Field Description\"} multiline rows={3} helperText='A detailed description of the field, how the input should be formated, etc.' />\r\n                                    <TextField\r\n                                        margin=\"normal\"\r\n                                        helperText='Data type of the field input.'\r\n                                        onChange={event => handleChangeUISchema(event, \"type\")}\r\n                                        style={{ marginTop: \"10px\" }}\r\n                                        defaultValue={tempUISchema[\"type\"]}\r\n                                        select\r\n                                        fullWidth={true}\r\n                                        id={field_id}\r\n                                        label={\"Field Data Type\"}\r\n                                        variant=\"outlined\"\r\n                                        SelectProps={{\r\n                                            native: true,\r\n                                        }}\r\n                                    >\r\n                                        {datatypes.map((content, index) => (\r\n                                            <option key={index} value={content}>\r\n                                                {content}\r\n                                            </option>\r\n                                        ))}\r\n                                    </TextField>\r\n                                    {[\"string\", \"integer\", \"number\"].includes(selectedType) ?\r\n                                        <>\r\n                                            <FormControlLabel control={<Checkbox onChange={() => handleEnumBoxOnChange()} checked={enumChecked} />} label=\"Enumerated. Choose from an available list of inputs.\" />\r\n                                            <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\r\n                                                {enumChecked ? <TextField defaultValue={enumList !== undefined ? enumList : \"\"} onChange={handleOnChangeListField} variant=\"outlined\" fullWidth={true} label=\"Enumerate List\" multiline rows={4} helperText=\"A list of inputs separated by commas, e,g.: item 1, item 2, item 3. Make sure that the item data type matches the field input data type. Invalid items will be replaced with NaN upon saving.\" /> : null}\r\n                                            </div>\r\n                                        </> : null}\r\n                                </FormControl>\r\n                                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\" }}>\r\n                                    <FormControl component=\"validation-related\">\r\n                                        <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Validation Related:</FormLabel>\r\n                                    </FormControl>\r\n                                    <FormGroup>\r\n                                        {selectedType === \"array\" ?\r\n                                            <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                            : null}\r\n                                        {selectedType !== \"object\" & selectedType !== \"array\" & selectedType !== \"boolean\" ?\r\n                                            <>\r\n                                                <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                                <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"defaultValue\")} style={{ marginTop: \"10px\" }} defaultValue={defaultValue} variant=\"outlined\" fullWidth={true} label={\"Field Default Value\"} helperText=\"Initial value of the field.\" />\r\n                                            </>\r\n                                            : null}\r\n                                        {selectedType === \"boolean\" ?\r\n                                            <>\r\n                                                <TextField\r\n                                                    margin='normal'\r\n                                                    onChange={event => handleChangeUISchema(event, \"defaultValue\")}\r\n                                                    style={{ marginTop: \"20px\" }}\r\n                                                    defaultValue={defaultValue !== undefined ? defaultValue : \"\"}\r\n                                                    select\r\n                                                    fullWidth={true}\r\n                                                    id={field_id}\r\n                                                    label={\"Boolean Field Default Value\"}\r\n                                                    variant=\"outlined\"\r\n                                                    SelectProps={{\r\n                                                        native: true,\r\n                                                    }}\r\n                                                >\r\n                                                    {[\"\", \"true\", \"false\"].map((content, index) => (\r\n                                                        <option key={index} value={content}>\r\n                                                            {content}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </TextField>\r\n                                            </>\r\n                                            : null}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditElement;","import getValue from \"./getValue\";\r\n\r\n// delete key and value given path\r\nconst deleteKey = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const elementValue = getValue(jsonData, newPath);\r\n\r\n    if (Array.isArray(elementValue)) {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        elementValue.splice(parseInt(deleteIndex), 1)\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    } else {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        delete elementValue[deleteIndex]\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    }\r\n\r\n};\r\n\r\nexport default deleteKey;","import React, { useContext, useEffect, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst StringType = ({ dataInputItems, setDataInputItems, withinArray, path, pathSchema, field_required, field_index, edit, field_id, field_label, field_description, field_enumerate, defaultValue }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete } = useContext(FormContext);\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"type\": \"string\"\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathSchema);\r\n    }\r\n\r\n    // handle on blur\r\n    const handleOnBlur = (event, pathSchema, type) => {\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathSchema = pathSchema.split(\".\");\r\n            newPathSchema.pop()\r\n            newPathSchema = newPathSchema.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = event.target.value;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let value = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(value, newPathSchema, \"string\")\r\n        } else {\r\n            handleDataInput(event, pathSchema, type)\r\n        }\r\n    }\r\n\r\n\r\n    // if enumerate and no defaultValue then already store the first enumerate value to form data\r\n    // this is for any enumerate in a subschema (e.g., in anyOf), for the rest of enumerate is taken care of in AdamantMain.jsx\r\n    useEffect(() => {\r\n        if (field_enumerate !== undefined & withinArray !== undefined & withinArray === true) {\r\n            let newPathSchema = pathSchema.split(\".\");\r\n            newPathSchema.pop()\r\n            newPathSchema = newPathSchema.join(\".\")\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_id] = field_enumerate[0];\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(event, newPathSchema, \"string\")\r\n        }\r\n    }, [])\r\n\r\n    if (field_enumerate === undefined) {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onBlur={(event) => handleOnBlur(event, pathSchema, \"string\")} required={required} helperText={field_description} defaultValue={defaultValue} fullWidth={true} className={classes.heading} id={field_id} label={field_label} variant=\"outlined\" />\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement pathSchema={pathSchema} defaultValue={defaultValue} enumerated={enumerated} field_enumerate={field_enumerate} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    < TextField\r\n                        onBlur={(event) => handleOnBlur(event, pathSchema, \"string\")}\r\n                        required={required}\r\n                        select\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_id}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }\r\n                        }\r\n                        helperText={field_description}\r\n                        defaultValue={defaultValue}\r\n                    >\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField >\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div >\r\n                {openDialog ? <EditElement pathSchema={pathSchema} enumerated={enumerated} defaultValue={defaultValue} field_enumerate={field_enumerate} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default StringType;\r\n","const getUnit = (field_label) => {\r\n\r\n    if (field_label === undefined) {\r\n        return \"\"\r\n    }\r\n\r\n    let addorn = field_label.match(/[^[\\]]+(?=])/g)\r\n    if (addorn === null) {\r\n        return \"\"\r\n    } else {\r\n        return addorn\r\n    }\r\n}\r\n\r\nexport default getUnit;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { InputAdornment } from '@material-ui/core';\r\nimport getUnit from '../utils/getUnit';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst NumberType = ({ dataInputItems, setDataInputItems, withinArray, path, pathSchema, defaultValue, field_required, field_index, edit, field_id, field_label, field_description, field_enumerate }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue === undefined ? \"\" : defaultValue)\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    let unit = getUnit(field_label)\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"type\": \"number\"\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathSchema);\r\n    }\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathSchema = pathSchema.split(\".\");\r\n                newPathSchema.pop()\r\n                newPathSchema = newPathSchema.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_id] = value;\r\n                setDataInputItems(items);\r\n\r\n                // store to the main form data\r\n                handleDataInput(items, newPathSchema, \"number\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                handleDataInput(parseFloat(inputValue), pathSchema, \"number\")\r\n            }\r\n        }\r\n    }\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} helperText={field_description} fullWidth={true} className={classes.heading} id={field_id} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{unit}</InputAdornment>,\r\n                    }} />\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement pathSchema={pathSchema} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        helperText={field_description}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_id}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{unit}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement pathSchema={pathSchema} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default NumberType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport { FormGroup } from '@material-ui/core';\r\nimport updateRequired from './utils/updateRequired';\r\nimport getValue from './utils/getValue';\r\nimport checkIfFieldIDExist from './utils/checkIfFieldIDExist';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst AddElement = ({ enumerated, field_enumerate, field_required, defaultSchema, path, openDialog, setOpenDialog, UISchema, schemaTitle }) => {\r\n\r\n    const [selectedType, setSelectedType] = useState(\"string\")\r\n    const [fieldId, setFieldId] = useState(undefined)\r\n    const [title, setTitle] = useState(undefined)\r\n    const [description, setDescription] = useState(undefined)\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n    const [requiredChecked, setRequiredChecked] = useState(field_required === undefined ? false : field_required)\r\n    const [enumChecked, setEnumChecked] = useState(enumerated === undefined ? false : enumerated)\r\n    const [enumList, setEnumList] = useState(field_enumerate === undefined ? [] : field_enumerate.join(\",\"));\r\n\r\n    let tempUISchema = JSON.parse(JSON.stringify(defaultSchema))\r\n\r\n\r\n    const datatypes = [\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\"]\r\n\r\n\r\n    const handleOnChangeListField = (event) => {\r\n        setEnumList(event.target.value);\r\n    }\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        // check if fieldId already exist\r\n        if (checkIfFieldIDExist(convertedSchema, path, fieldId)) {\r\n            alert(\"Field ID already exists!\")\r\n            return\r\n        }\r\n\r\n        tempUISchema[\"fieldId\"] = fieldId;\r\n        tempUISchema[\"type\"] = selectedType;\r\n        if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n        if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n        if (fieldId === undefined) {\r\n            alert(\"Field ID must be defined!\")\r\n            return\r\n        }\r\n\r\n        if (typeof (fieldId) === \"string\" & fieldId.replace(/\\s+/g, '') === \"\") {\r\n            alert(\"Field ID must be defined!\")\r\n            return\r\n        }\r\n\r\n        if (tempUISchema[\"type\"] === \"object\") {\r\n            tempUISchema[\"properties\"] = []\r\n        }\r\n        if (tempUISchema[\"type\"] === \"array\") {\r\n            tempUISchema[\"items\"] = {}\r\n        }\r\n        if (tempUISchema[\"type\"] !== \"string\") {\r\n            setEnumChecked(false);\r\n        }\r\n\r\n        if (path !== undefined) {\r\n            const set = require(\"set-value\");\r\n\r\n            let properties = getValue(convertedSchema, path)[\"properties\"]\r\n            properties.push(tempUISchema)\r\n            set(convertedSchema, path + \".properties\", properties)\r\n\r\n            // create a new path to the new element\r\n            path = path + \".properties.\" + (properties.length - 1).toString()\r\n            let field_id = fieldId\r\n            // update the required value\r\n            const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_id, convertedSchema })\r\n            // update enum\r\n            if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                let newList = enumList\r\n                if (Array.isArray(newList)) {\r\n                    set(newConvertedSchema, path + \".enumerate\", newList)\r\n                } else {\r\n                    newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                    set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                }\r\n\r\n            }\r\n\r\n            updateParent(newConvertedSchema)\r\n            setOpenDialog(false)\r\n        } else {\r\n            const set = require(\"set-value\");\r\n            let properties = convertedSchema[\"properties\"]\r\n            properties.push(tempUISchema)\r\n            convertedSchema[\"properties\"] = properties\r\n\r\n            // create a new path to the new element\r\n            path = \"properties.\" + (properties.length - 1).toString()\r\n            let field_id = fieldId\r\n            // update the required value\r\n            const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_id, convertedSchema })\r\n            // update enum\r\n            if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                let newList = enumList\r\n                if (Array.isArray(newList)) {\r\n                    set(newConvertedSchema, path + \".enumerate\", newList)\r\n                } else {\r\n                    newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                    set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                }\r\n\r\n            }\r\n\r\n            updateParent(newConvertedSchema)\r\n            setOpenDialog(false)\r\n        }\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'type':\r\n                return setSelectedType(event.target.value)\r\n            case 'title':\r\n                return setTitle(event.target.value)\r\n            case 'description':\r\n                return setDescription(event.target.value)\r\n            case 'fieldId':\r\n                return setFieldId(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        tempUISchema = JSON.parse(JSON.stringify(defaultSchema))\r\n        setOpenDialog(false)\r\n        setEnumList(field_enumerate)\r\n        setSelectedType(\"string\")\r\n    }\r\n\r\n    // handle field id on change\r\n    const handleOnBlurFieldId = (event) => {\r\n        setFieldId(event.target.value)\r\n        tempUISchema[\"fieldId\"] = event.target.value\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleCheckBoxOnChange = () => {\r\n        setRequiredChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleEnumBoxOnChange = () => {\r\n        setEnumChecked(prev => !prev)\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <AddIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Add Element in \"{UISchema !== undefined ? UISchema[\"title\"] : schemaTitle}\"\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                            <TextField inputProps={{ maxLength: 12 }} required onBlur={event => handleOnBlurFieldId(event)} onChange={event => handleChangeUISchema(event, \"fieldId\")} style={{ marginTop: \"20px\" }} defaultValue={tempUISchema[\"fieldId\"]} variant=\"outlined\" fullWidth={true} label={\"Field ID or Key\"} />\r\n                            <TextField onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"title\"]} variant=\"outlined\" fullWidth={true} label={\"Field Title\"} />\r\n                            <TextField onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"description\"]} variant=\"outlined\" fullWidth={true} label={\"Field Description\"} multiline rows={3} />\r\n                            <TextField\r\n                                onChange={event => handleChangeUISchema(event, \"type\")}\r\n                                style={{ marginTop: \"10px\" }}\r\n                                defaultValue={selectedType}\r\n                                select\r\n                                fullWidth={true}\r\n                                label={\"Field Data Type\"}\r\n                                variant=\"outlined\"\r\n                                SelectProps={{\r\n                                    native: true,\r\n                                }}\r\n                            >\r\n                                {datatypes.map((content, index) => (\r\n                                    <option key={index} value={content}>\r\n                                        {content}\r\n                                    </option>\r\n                                ))}\r\n                            </TextField>\r\n                            {selectedType === \"string\" ?\r\n                                <>\r\n                                    <FormControlLabel control={<Checkbox onChange={() => handleEnumBoxOnChange()} checked={enumChecked} />} label=\"Enumerated\" />\r\n                                    <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\r\n                                        {enumChecked ? <TextField defaultValue={enumList !== undefined ? enumList : \"\"} onChange={handleOnChangeListField} variant=\"outlined\" fullWidth={true} label=\"Enumerate List\" multiline rows={4} /> : null}\r\n                                    </div>\r\n                                </> : null}\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                    ADD\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default AddElement;","import React, { useState, useContext } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"../ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport AddElement from \"../AddElement\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst ObjectType = ({ path, pathSchema, field_required, field_id, field_index, edit, field_label, field_description, field_properties }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema, handleDataDelete } = useContext(FormContext);\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(field_properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        const set = require(\"set-value\");\r\n        let value = { ...convertedSchema }\r\n        set(convertedSchema, path + \".properties\", items)\r\n        updateParent(value);\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathSchema);\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"properties\": field_properties,\r\n        \"type\": \"object\"\r\n    }\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    style={{ height: \"auto\" }}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography className={classes.heading}>{field_label}</Typography>\r\n                            {expand ? <div style={{ color: \"gray\" }}>\r\n                                {field_description}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <><Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button></> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(field_properties).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={!edit} key={field_properties[item][\"fieldId\"]} draggableId={field_properties[item][\"fieldId\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <DragHandleIcon fontSize=\"small\" />\r\n                                                            </div> : null}\r\n                                                            <ElementRenderer path={path + \".properties\"} pathSchema={pathSchema} fieldId={field_properties[item][\"fieldId\"]} fieldIndex={item} elementRequired={field_required} edit={edit} field={field_properties[item]} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                                    </div> : null}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement pathSchema={pathSchema} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} /> : null}\r\n        {openDialogAddElement ? <AddElement openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} path={path} defaultSchema={defaultSchema} UISchema={UISchema} /> : null}\r\n    </>);\r\n};\r\n\r\nexport default ObjectType;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport getUnit from '../utils/getUnit';\r\nimport { InputAdornment } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst IntegerType = ({ dataInputItems, setDataInputItems, withinArray, defaultValue, path, pathSchema, field_required, field_index, edit, field_id, field_label, field_description, field_enumerate }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue === undefined ? \"\" : defaultValue);\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    let unit = getUnit(field_label)\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"type\": \"integer\"\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathSchema);\r\n    }\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathSchema = pathSchema.split(\".\");\r\n                newPathSchema.pop()\r\n                newPathSchema = newPathSchema.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_id] = value;\r\n                setDataInputItems(items);\r\n\r\n                // store to the main form data\r\n                handleDataInput(items, newPathSchema, \"integer\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                handleDataInput(parseInt(inputValue), pathSchema, \"integer\")\r\n            }\r\n        }\r\n    }\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} helperText={field_description} fullWidth={true} className={classes.heading} id={field_id} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{unit}</InputAdornment>,\r\n                    }} />\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement pathSchema={pathSchema} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        helperText={field_description}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_id}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{unit}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n                </div>\r\n                {openDialog ? <EditElement pathSchema={pathSchema} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default IntegerType;\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport { Checkbox, FormLabel, FormHelperText, FormControl } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst BooleanType = ({ path, pathSchema, field_required, field_index, edit, field_id, field_label, field_description, defaultValue }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(typeof (defaultValue) === \"boolean\" ? defaultValue : false);\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"type\": \"boolean\"\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathSchema);\r\n    }\r\n\r\n    // handle input on change for checkbox (boolean type: checked is true unchecked is false)\r\n    const handleInputOnChange = () => {\r\n        let value = inputValue\r\n        setInputValue(!value)\r\n        handleDataInput(!value, pathSchema, \"boolean\")\r\n    }\r\n\r\n    // if boolean field is newly created then store a false input data already to the form data\r\n    useEffect(() => {\r\n        if (defaultValue === undefined)\r\n            handleDataInput(false, pathSchema, \"boolean\")\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', alignItems: \"center\", width: '100%' }}>\r\n                <div style={{ paddingLeft: \"15px\", width: \"100%\" }}>\r\n                    <FormControl >\r\n                        <FormLabel>{field_label === undefined ? \"\" : field_label + \":\"}</FormLabel>\r\n                        <div style={{ textAlign: \"center\", width: \"100%\" }}>\r\n                            <Checkbox onChange={() => handleInputOnChange()} checked={inputValue} />\r\n                        </div>\r\n                        <FormHelperText>{field_description}</FormHelperText>\r\n                    </FormControl>\r\n                </div>\r\n                {edit ? <><IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                    <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n            {openDialog ? <EditElement pathSchema={pathSchema} defaultValue={defaultValue} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default BooleanType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemIntegerType = ({ pathSchema, dataInputItems, setDataInputItems, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const { handleDataInput } = useContext(FormContext);\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        let value = inputValue;\r\n        value = parseInt(value)\r\n        if (!isNaN(value)) {\r\n            setInputValue(value)\r\n\r\n            // store it to input data array\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[index] = value;\r\n            setDataInputItems(items);\r\n\r\n            // store to form data\r\n            handleDataInput(items, pathSchema, \"array\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_id} variant=\"outlined\" />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemIntegerType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemNumberType = ({ pathSchema, dataInputItems, setDataInputItems, path, field_type, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const { handleDataInput } = useContext(FormContext);\r\n\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        let value = inputValue;\r\n        value = parseFloat(value)\r\n        if (!isNaN(value)) {\r\n            setInputValue(value)\r\n\r\n            // store it to input data array\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[index] = value;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            handleDataInput(items, pathSchema, \"array\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_id} variant=\"outlined\" />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemNumberType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemStringType = ({ pathSchema, dataInputItems, setDataInputItems, path, field_type, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const { handleDataInput } = useContext(FormContext)\r\n\r\n    // handle input field on blur\r\n    const handleOnBlur = (event, index) => {\r\n        let arr = dataInputItems;\r\n        const items = Array.from(arr);\r\n        items[index] = event.target.value;\r\n        setDataInputItems(items);\r\n\r\n        // store to form data\r\n        handleDataInput(items, pathSchema, \"array\")\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={(event) => handleOnBlur(event, index)} id={field_id} fullWidth={true} className={classes.heading} variant=\"outlined\" />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default ItemStringType;\r\n","import React, { useContext, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"../../ElementRenderer\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { FormContext } from \"../../../FormContext\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemObjectType = ({ dataInputItems, setDataInputItems, field_label, pathSchema, field_required, field_items, field_type, edit, index, field_id, handleDeleteArrayItem }) => {\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n    let objectIndex = index;\r\n    let field_properties = field_items[\"properties\"]\r\n    let withinArray = true;\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    style={{ height: \"auto\" }}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\", justifySelf: \"center\" }}>\r\n                            {field_label + \" #\" + parseInt(index + 1)}\r\n                        </div>\r\n                        {edit ? <Button onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div style={{ width: \"100%\" }}>\r\n                        {Object.keys(field_properties).map((item, index) => {\r\n                            let tempField = JSON.parse(JSON.stringify(field_properties[item]));\r\n                            if (tempField[\"enum\"]) {\r\n                                tempField[\"enumerate\"] = tempField[\"enum\"]\r\n                            }\r\n                            return (\r\n                                <div key={item} style={{ display: \"flex\" }}>\r\n                                    <ElementRenderer pathSchema={pathSchema} withinArray={withinArray} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} fieldId={item} fieldIndex={objectIndex} elementRequired={field_required} edit={false} field={tempField} />\r\n                                </div>\r\n                            )\r\n                        })\r\n                        }\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div >\r\n    </>);\r\n\r\n};\r\n\r\nexport default ItemObjectType;\r\n","import React from 'react';\r\nimport ItemIntegerType from './array_items/ItemIntegerType';\r\nimport ItemNumberType from './array_items/ItemNumberType';\r\nimport ItemStringType from \"./array_items/ItemStringType\";\r\nimport ItemObjectType from \"./array_items/ItemObjectType\";\r\n\r\n\r\nconst ArrayItemRenderer = ({ pathSchema, dataInputItems, setDataInputItems, field_label, field_items, path, type, edit, fieldIndex, fieldId, enumerate, handleDeleteArrayItem, properties }) => {\r\n\r\n    switch (type) {\r\n        case 'string':\r\n            return (<ItemStringType\r\n                setDataInputItems={setDataInputItems}\r\n                pathSchema={pathSchema}\r\n                dataInputItems={dataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'number':\r\n            return (<ItemNumberType\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'integer':\r\n            return (<ItemIntegerType\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'object':\r\n            return (<ItemObjectType\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                field_label={field_label}\r\n                pathSchema={pathSchema}\r\n                path={path + \".\" + fieldIndex}\r\n                index={fieldIndex}\r\n                field_id={fieldId}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n                field_items={field_items}\r\n            />)\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ArrayItemRenderer;\r\n","const generateUID = () => {\r\n    // I generate the UID from two parts here \r\n    // to ensure the random number provide enough bits.\r\n    var firstPart = (Math.random() * 46656) | 0;\r\n    var secondPart = (Math.random() * 46656) | 0;\r\n    firstPart = (\"000\" + firstPart.toString(36)).slice(-3);\r\n    secondPart = (\"000\" + secondPart.toString(36)).slice(-3);\r\n    return firstPart + secondPart;\r\n}\r\n\r\nexport default generateUID;","import React, { useState, useContext } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ArrayItemRenderer from \"./ArrayItemRenderer\";\r\nimport generateUniqueID from \"../utils/generateUniqueID\";\r\nimport { IconButton } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst ArrayType = ({ pathSchema, path, field_required, field_id, field_index, edit, field_label, field_description, field_items, field_prefixItems }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete } = useContext(FormContext);\r\n    const [inputItems, setInputItems] = useState([]);\r\n    const [dataInputItems, setDataInputItems] = useState([]);\r\n    const [itemSchema, setItemSchema] = useState();\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n        setInputItems(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems\r\n        const items2 = Array.from(arr2);\r\n        const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n        items2.splice(result.destination.index, 0, reorderedItem2);\r\n        setDataInputItems(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathSchema, \"array\");\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathSchema);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"items\": field_items,\r\n        \"type\": \"array\"\r\n    }\r\n\r\n    // handle add array item\r\n    const handleAddArrayItem = () => {\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (Object.keys(field_items).length === 0) {\r\n                // create field_items if items is empty\r\n                field_items = { type: \"string\", field_id: `${generateUniqueID()}` }\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(field_items);\r\n                setInputItems(items);\r\n\r\n                // push a new item for the data\r\n                let arr2 = dataInputItems;\r\n                const items2 = Array.from(arr2);\r\n                items2.push(\"\");\r\n                setDataInputItems(items2)\r\n            } else {\r\n                // use existing schema if items is not empty\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                newFieldItems[\"field_id\"] = generateUniqueID();\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(newFieldItems);\r\n                setInputItems(items);\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    setDataInputItems(items2)\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push({});\r\n                    setDataInputItems(items2)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle delete item\r\n    const handleDeleteArrayItem = (index) => {\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        items.splice(index, 1);\r\n        setInputItems(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems;\r\n        const items2 = Array.from(arr2);\r\n        items2.splice(index, 1);\r\n        setDataInputItems(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathSchema, \"array\");\r\n    }\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography className={classes.heading}>{field_label + (required ? \"*\" : \"\")}</Typography>\r\n                            {expand ? <div style={{ color: \"gray\" }}>\r\n                                {field_description}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <><Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button></> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(inputItems).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={false} key={inputItems[index][\"field_id\"]} draggableId={inputItems[index][\"field_id\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <DragHandleIcon fontSize=\"small\" />\r\n                                                            </div>\r\n                                                            <ArrayItemRenderer pathSchema={pathSchema} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} field_label={field_label} field_items={field_items} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path + \".properties\"} fieldIndex={index} fieldId={inputItems[index][\"field_id\"]} type={inputItems[index][\"type\"]} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <IconButton onClick={() => { handleAddArrayItem() }} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><AddIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement pathSchema={pathSchema} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default ArrayType;","import React, { useState, useContext } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ArrayItemRenderer from \"./ArrayItemRenderer\";\r\nimport generateUniqueID from \"../utils/generateUniqueID\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport ElementRenderer from \"../ElementRenderer\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst AnyOfKeyword = ({ pathSchema, path, field_required, field_id, field_index, edit, field_label, field_description, field_prefixItems, anyOf_list }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete } = useContext(FormContext);\r\n    const [field_items, setField_items] = useState(Array.isArray(anyOf_list) & anyOf_list[0][\"type\"] === \"array\" ? anyOf_list[0][\"items\"] : anyOf_list[0])\r\n    const [globalIndex, setGlobalIndex] = useState(0);\r\n    const [inputItems, setInputItems] = useState([]);\r\n    const [dataInputItems, setDataInputItems] = useState([]);\r\n\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    let schemaList = Array(anyOf_list.length).fill().map((x, i) => i)\r\n\r\n    // select existing schema option from anyOf list\r\n    const handleChooseAnyOfSchema = (event) => {\r\n        // reset states\r\n        setDataInputItems([]);\r\n        setInputItems([]);\r\n\r\n        // get rid of the current value\r\n        handleDataDelete(pathSchema)\r\n\r\n        const index = parseInt(event.target.value)\r\n        setGlobalIndex(index)\r\n        if (anyOf_list[index][\"type\"] === \"array\") {\r\n            setField_items(anyOf_list[index][\"items\"])\r\n        } else {\r\n            setField_items(anyOf_list[index])\r\n        }\r\n    }\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_id)) {\r\n        required = true;\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n        setInputItems(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems\r\n        const items2 = Array.from(arr2);\r\n        const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n        items2.splice(result.destination.index, 0, reorderedItem2);\r\n        setDataInputItems(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathSchema, \"array\");\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        const value = deleteKey(convertedSchema, path)\r\n        updateParent(value)\r\n\r\n        handleDataDelete(pathSchema);\r\n    }\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    /*\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"items\": field_items,\r\n        \"type\": [anyOf_list[globalIndex][\"type\"]]\r\n    }*/\r\n\r\n    let UISchema = {\r\n        \"fieldId\": field_id,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"items\": field_items,\r\n        \"type\": \"anyOf\"\r\n    }\r\n\r\n    // handle add array item\r\n    const handleAddArrayItem = () => {\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (Object.keys(field_items).length === 0) {\r\n                // create field_items if items is empty\r\n                field_items = { type: \"string\", field_id: `${generateUniqueID()}` }\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(field_items);\r\n                setInputItems(items);\r\n\r\n                // push a new item for the data\r\n                let arr2 = dataInputItems;\r\n                const items2 = Array.from(arr2);\r\n                items2.push(\"\");\r\n                setDataInputItems(items2)\r\n            } else {\r\n                // use existing schema if items is not empty\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                newFieldItems[\"field_id\"] = generateUniqueID();\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(newFieldItems);\r\n                setInputItems(items);\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    setDataInputItems(items2)\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push({});\r\n                    setDataInputItems(items2)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle delete item\r\n    const handleDeleteArrayItem = (index) => {\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        items.splice(index, 1);\r\n        setInputItems(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems;\r\n        const items2 = Array.from(arr2);\r\n        items2.splice(index, 1);\r\n        setDataInputItems(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathSchema, \"array\");\r\n    }\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography className={classes.heading}>{field_label + (required ? \"*\" : \"\")}</Typography>\r\n                            {expand ? <div style={{ color: \"gray\" }}>\r\n                                {field_description}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <><Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button></> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <TextField\r\n                    onChange={(event) => handleChooseAnyOfSchema(event)}\r\n                    style={{ width: \"220px\", marginLeft: \"10px\", marginTop: \"20px\" }}\r\n                    fullWidth={false}\r\n                    select\r\n                    id={\"select-schema\"}\r\n                    label={\"Choose a subschema\"}\r\n                    SelectProps={{ native: true }}\r\n                >\r\n                    {schemaList.map((content, index) => (\r\n                        <option key={index} value={content}>\r\n                            {content}\r\n                        </option>\r\n                    ))}\r\n                </TextField>\r\n                {anyOf_list[globalIndex][\"type\"] === \"array\" ?\r\n                    <AccordionDetails>\r\n                        <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                            <Droppable droppableId=\"subforms\">\r\n                                {(provided) => (\r\n                                    <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                        {Object.keys(inputItems).map((item, index) => {\r\n                                            return (\r\n                                                <Draggable key={inputItems[index][\"field_id\"]} draggableId={inputItems[index][\"field_id\"]} index={index}>\r\n                                                    {(provided) => (\r\n                                                        <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                            <div style={{ display: \"flex\" }}>\r\n                                                                <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                    <DragHandleIcon fontSize=\"small\" />\r\n                                                                </div>\r\n                                                                {/*\r\n                                                                <ArrayItemRenderer field_label={field_label} field_items={inputItems[index]} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path + \".properties\"} fieldIndex={index} fieldId={inputItems[index][\"field_id\"]} type={inputItems[index][\"type\"]} />\r\n                                                                */}\r\n\r\n                                                                <ArrayItemRenderer pathSchema={pathSchema} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} field_label={field_label} field_items={field_items} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path + \".properties\"} fieldIndex={index} fieldId={inputItems[index][\"field_id\"]} type={inputItems[index][\"type\"]} />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    )}\r\n                                                </Draggable>\r\n                                            );\r\n                                        })}\r\n                                        {provided.placeholder}\r\n                                        <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                            <IconButton onClick={() => { handleAddArrayItem() }} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><AddIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                        </DragDropContext>\r\n                    </AccordionDetails>\r\n                    :\r\n                    <div style={{ padding: \"10px\" }}>\r\n                        <ElementRenderer path={path} fieldId={field_id} fieldIndex={0} elementRequired={field_required} edit={false} field={field_items} />\r\n                    </div>}\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement anyOf_list={anyOf_list} pathSchema={pathSchema} field_id={field_id} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default AnyOfKeyword;","import React from 'react';\r\nimport StringType from \"./elements/StringType\";\r\nimport NumberType from \"./elements/NumberType\";\r\nimport ObjectType from './elements/ObjectType';\r\nimport IntegerType from './elements/IntegerType';\r\nimport BooleanType from './elements/BooleanType';\r\nimport ArrayType from './elements/ArrayType';\r\nimport AnyOfKeyword from './elements/AnyOfKeyword';\r\n\r\n\r\nconst ElementRenderer = ({ dataInputItems, setDataInputItems, withinArray, path, pathSchema, elementRequired, fieldId, fieldIndex, edit, field: { type, title, description, properties, required, enumerate, items, defaultValue, anyOf } }) => {\r\n\r\n    switch (type) {\r\n        case 'string':\r\n            return (<StringType\r\n                withinArray={withinArray}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema !== undefined ? pathSchema + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'number':\r\n            return (<NumberType\r\n                withinArray={withinArray}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema !== undefined ? pathSchema + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'integer':\r\n            return (<IntegerType\r\n                withinArray={withinArray}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema !== undefined ? pathSchema + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'boolean':\r\n            return (<BooleanType\r\n                withinArray={withinArray}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema !== undefined ? pathSchema + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'array':\r\n            return (<ArrayType\r\n                withinArray={withinArray}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema !== undefined ? pathSchema + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_items={items}\r\n                edit={edit}\r\n            />)\r\n        case 'object':\r\n            return (<ObjectType\r\n                withinArray={withinArray}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema !== undefined ? pathSchema + \".\" + fieldId : fieldId}\r\n                field_id={fieldId}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={required}\r\n                field_properties={properties}\r\n                edit={edit}\r\n            />)\r\n        case undefined:\r\n            if (anyOf) {\r\n                return (\r\n                    <AnyOfKeyword\r\n                        pathSchema={pathSchema !== undefined ? pathSchema + \".\" + fieldId : fieldId}\r\n                        withinArray={withinArray}\r\n                        path={path + \".\" + fieldIndex}\r\n                        field_id={fieldId}\r\n                        field_label={title}\r\n                        field_description={description}\r\n                        field_required={elementRequired}\r\n                        anyOf_list={anyOf}\r\n                        edit={edit}\r\n                    />\r\n                )\r\n            } else {\r\n                return null\r\n            }\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ElementRenderer;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst EditSchemaHeader = ({ schemaID, title, description, schemaURI, openDialog, setOpenDialog }) => {\r\n\r\n    const [_schemaID, _setSchemaID] = useState(schemaID);\r\n    const [_title, _setTitle] = useState(title);\r\n    const [_description, _setDescription] = useState(description);\r\n    const [_schemaURI, _setSchemaURI] = useState(schemaURI);\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n\r\n\r\n\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n\r\n        if (_schemaURI === undefined) {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else if (_schemaURI.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else {\r\n            convertedSchema[\"$schema\"] = _schemaURI\r\n        };\r\n\r\n        if (_schemaID === undefined) {\r\n            delete convertedSchema[\"id\"]\r\n        } else if (_schemaID.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"id\"]\r\n        } else {\r\n            convertedSchema[\"id\"] = _schemaID\r\n        };\r\n\r\n        if (_title === undefined) {\r\n            delete convertedSchema[\"title\"]\r\n        } else if (_title.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"title\"]\r\n        } else {\r\n            convertedSchema[\"title\"] = _title\r\n        };\r\n\r\n        if (_description === undefined) {\r\n            delete convertedSchema[\"description\"]\r\n        } else if (_description.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"description\"]\r\n        } else {\r\n            convertedSchema[\"description\"] = _description\r\n        };\r\n\r\n        updateParent(convertedSchema)\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'title':\r\n                return _setTitle(event.target.value)\r\n            case 'description':\r\n                return _setDescription(event.target.value)\r\n            case 'id':\r\n                return _setSchemaID(event.target.value)\r\n            case 'uri':\r\n                return _setSchemaURI(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        _setDescription(description);\r\n        _setSchemaID(schemaID);\r\n        _setSchemaURI(schemaURI);\r\n        _setTitle(title);\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Edit schema \"{title}\"\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                            <TextField disabled margin='normal' onChange={event => handleChangeUISchema(event, \"uri\")} style={{ marginTop: \"20px\" }} defaultValue={schemaURI} variant=\"outlined\" fullWidth={true} label={\"$schema\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"id\")} style={{ marginTop: \"10px\" }} defaultValue={schemaID} variant=\"outlined\" fullWidth={true} label={\"Schema ID\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={title} variant=\"outlined\" fullWidth={true} label={\"Schema Title\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={description} variant=\"outlined\" fullWidth={true} label={\"Schema Description\"} multiline rows={3} />\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditSchemaHeader;","import React, { useContext, useState } from \"react\";\r\n//import { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"./ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from '../FormContext';\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport RevertIvon from \"@material-ui/icons/History\";\r\nimport AddElement from \"./AddElement\";\r\nimport EditSchemaHeader from \"./EditSchemaHeader\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst FormRenderer = ({ revertAllChanges, schema, edit }) => {\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    // deconstruct\r\n    const { properties, title, description, required, $schema, id } = schema ?? {}\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        let value = { ...convertedSchema };\r\n        value[\"properties\"] = items;\r\n        updateParent(value);\r\n    }\r\n\r\n    /*\r\n    console.log(\"converted:\", convertedSchema)\r\n    let deconvertedSchema = JSON.parse(JSON.stringify(convertedSchema))\r\n    deconvertedSchema[\"properties\"] = array2object(convertedSchema[\"properties\"])\r\n    console.log(\"deconverted:\", deconvertedSchema)\r\n    */\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <Typography className={classes.heading} style={{ width: \"100%\" }}>{title}</Typography>\r\n                {edit ? <> <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}> <EditIcon color=\"primary\" /></Button> <Button onClick={() => revertAllChanges()} style={{ marginLeft: \"5px\" }}> <RevertIvon color=\"primary\" /></Button>  </> : null}\r\n            </div>\r\n            <Divider />\r\n            <Typography>{description}</Typography>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"forms\">\r\n                    {(provided) => (\r\n                        <form {...provided.droppableProps} ref={provided.innerRef}>\r\n                            {Object.keys(properties).map((item, index) => {\r\n                                return (\r\n                                    <Draggable isDragDisabled={!edit} key={properties[item][\"fieldId\"]} draggableId={properties[item][\"fieldId\"]} index={index}>\r\n                                        {(provided) => (\r\n                                            <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                <div style={{ display: \"flex\" }}>\r\n                                                    {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                        <DragHandleIcon fontSize=\"small\" />\r\n                                                    </div> : null}\r\n                                                    <ElementRenderer schema={schema} path={\"properties\"} fieldId={properties[item][\"fieldId\"]} fieldIndex={item} elementRequired={required} edit={edit} field={properties[item]} />\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                );\r\n                            })}\r\n                            {provided.placeholder}\r\n                            {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                            </div> : null}\r\n                        </form>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n        {openDialogAddElement ? <AddElement openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} defaultSchema={defaultSchema} schemaTitle={title} /> : null}\r\n        {openDialog ? <EditSchemaHeader schemaID={id} title={title} description={description} schemaURI={$schema} openDialog={openDialog} setOpenDialog={setOpenDialog} /> : null}\r\n    </>);\r\n};\r\n\r\nexport default FormRenderer;","import React, { useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst JSONSchemaViewer = ({ jsonschema }) => {\r\n    //console.log(\"path:\", path)\r\n    const [expand, setExpand] = useState(false); // set to \"true\" for normally open accordion\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div>\r\n                            <Typography className={classes.heading}>JSON Schema Viewer</Typography>\r\n                        </div>\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div >\r\n                        <pre style={{ overflowX: \"auto\", whiteSpace: \"pre-wrap\", wordWrap: \"break-word\" }}>\r\n                            {JSON.stringify(jsonschema, null, 2)}\r\n                        </pre>\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n    </>);\r\n};\r\n\r\nexport default JSONSchemaViewer;","// convert iterable array to json schema properties\r\nconst array2object = (propert) => {\r\n    var someObject = {};\r\n    propert.forEach((item) => {\r\n        const tempKey = item[\"fieldId\"];\r\n        delete item[\"fieldId\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        Object.keys(tempElements).forEach((item) => {\r\n            // change \"enumerate\" to \"enum\"\r\n            if (item === \"enumerate\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"enumerate\"])\r\n                );\r\n                delete someObject[tempKey][\"enumerate\"];\r\n                someObject[tempKey][\"enum\"] = enumContent;\r\n            }\r\n            if (item === \"defaultValue\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"defaultValue\"])\r\n                );\r\n                delete someObject[tempKey][\"defaultValue\"];\r\n                someObject[tempKey][\"default\"] = enumContent;\r\n            }\r\n            if (item === \"properties\") {\r\n                // some recursion\r\n                someObject[tempKey][\"properties\"] = array2object(\r\n                    someObject[tempKey][\"properties\"]\r\n                );\r\n            }\r\n        });\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default array2object;","// convert json schema properties to an iterable array\r\nconst object2array = (propert) => {\r\n    let someArray = [];\r\n    Object.keys(propert).forEach((item) => {\r\n        var tempVariable = {};\r\n        var tempVariable2;\r\n        tempVariable2 = propert[item];\r\n        tempVariable[\"fieldId\"] = item;\r\n        Object.keys(tempVariable2).forEach((item_) => {\r\n            // make enum indexable by changing the key to \"enumerate\"\r\n            if (item_ === \"enum\") {\r\n                tempVariable[\"enumerate\"] = tempVariable2[item_];\r\n            }\r\n            if (item_ === \"default\") {\r\n                tempVariable[\"defaultValue\"] = tempVariable2[item_];\r\n            }\r\n            tempVariable[item_] = tempVariable2[item_];\r\n            if (item_ === \"properties\") {\r\n                // recursive on action to access nested properties\r\n                tempVariable[item_] = object2array(tempVariable2[item_]);\r\n            }\r\n        });\r\n        someArray.push(tempVariable);\r\n    });\r\n\r\n    return someArray;\r\n};\r\n\r\nexport default object2array;","import getValue from \"./getValue\";\r\nimport set from \"set-value\";\r\n\r\n// delete key and value given path\r\nconst deleteKeySchema = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json));\r\n    let pathArray = path.split('.');\r\n\r\n    if (pathArray.length === 1) {\r\n        delete jsonData[pathArray[0]];\r\n    } else {\r\n        let tobeDeleted = pathArray.pop();\r\n        pathArray = pathArray.join(\".\");\r\n        let value = getValue(jsonData, pathArray);\r\n        delete value[tobeDeleted]\r\n        set(jsonData, pathArray, value);\r\n    }\r\n\r\n    return jsonData;\r\n\r\n\r\n};\r\n\r\nexport default deleteKeySchema;","// validate form data against its schema using the Ajv package\r\n\r\n//\r\n// TO DO: since AJV does not really check the nested schemas easily, we must then implement a recursion to check every object type that has subschemas\r\n//      : for both formData and schema\r\n\r\nimport Ajv from \"ajv\";\r\nimport deleteKeySchema from \"./deleteKeySchema\";\r\n\r\nconst validateAgainstSchema = (formData, schema) => {\r\n    const ajv = new Ajv({ allErrors: true });\r\n\r\n    if (schema[\"$schema\"] !== undefined) {\r\n        schema = deleteKeySchema(schema, \"$schema\")\r\n    }\r\n    if (schema[\"id\"] !== undefined) {\r\n        schema = deleteKeySchema(schema, \"id\")\r\n    }\r\n\r\n    const validate = ajv.compile(schema);\r\n    const valid = validate(formData)\r\n\r\n    return [valid, validate];\r\n}\r\n\r\nexport default validateAgainstSchema;","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { Autocomplete } from '@material-ui/lab';\r\n\r\n\r\nconst CreateELabFTWExperimentDialog = ({ getTagsELabFTW, eLabURL, setELabURL, setTags, tags, setRetrievedTags, retrievedTags, setExperimentTitle, setToken, token, setOpenSubmitDialog, openSubmitDialog, createExperimentELabFTW }) => {\r\n\r\n    const onTagsChange = (event, values) => {\r\n        setTags(values);\r\n        console.log(values)\r\n    };\r\n\r\n    // cancel submit\r\n    const handleCancelEdit = () => {\r\n        setOpenSubmitDialog(false)\r\n        setRetrievedTags([])\r\n        setELabURL(\"\")\r\n        setToken(\"\")\r\n        setTags([])\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openSubmitDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Create eLabFTW Experiment\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">eLabFTW</FormLabel>\r\n                            <TextField required margin='normal' onChange={event => setELabURL(event.target.value)} style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Your eLabFTW main URL\"} />\r\n                            <TextField required margin='normal' onChange={event => setToken(event.target.value)} style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Your eLabFTW token\"} />\r\n                            <TextField margin='normal' onBlur={event => setExperimentTitle(event.target.value)} style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Experiment title\"} />\r\n                            <div style={{ display: 'inline-flex', width: '100%' }}>\r\n                                <Autocomplete\r\n                                    style={{ width: \"100%\" }}\r\n                                    disabled={retrievedTags.length === 0 ? true : false}\r\n                                    multiple\r\n                                    freeSolo\r\n                                    options={retrievedTags}\r\n                                    getOptionLabel={option => option.tag || option}\r\n                                    onChange={onTagsChange}\r\n                                    renderInput={params => (\r\n                                        <TextField\r\n                                            {...params}\r\n                                            disabled={retrievedTags.length === 0 ? true : false}\r\n                                            variant=\"outlined\"\r\n                                            label=\"Tags\"\r\n                                            margin=\"normal\"\r\n                                            style={{ marginTop: \"10px\" }}\r\n                                            helperText='Press the \"GET TAGS\" button to retrieve available tags from your eLabFTW system.Note: you have to provide the eLabFTW main URL and token to enable the button.'\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                {/*<TextField disabled={retrievedTags.length === 0 ? true : false} margin='normal' style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Tags\"} helperText='Press the \"GET TAGS\" button to retrieve available tags from your eLabFTW system. Note: you have to provide the eLabFTW main URL and token to enable the button.' />*/}\r\n                                <Button onClick={() => getTagsELabFTW()} disabled={(token.trim() === \"\" | eLabURL.trim() === \"\") | (token === undefined | eLabURL === undefined) ? true : false} style={{ marginLeft: \"5px\", height: \"55px\", marginTop: \"11px\" }} variant=\"contained\" color=\"primary\">Get Tags</Button>\r\n                            </div>\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={(token.trim() === \"\" | eLabURL.trim() === \"\") | (token === undefined | eLabURL === undefined) ? true : false} onClick={() => createExperimentELabFTW()} color=\"primary\" autoFocus>\r\n                    Create Experiment\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default CreateELabFTWExperimentDialog;","const formData2descriptionList = (jsonData) => {\r\n    let descList = \"\";\r\n    Object.keys(jsonData).forEach(item => {\r\n        if (typeof (jsonData[item]) === 'object') {\r\n            //descList += `<h2>${item}</h2>\\n`\r\n            if (Array.isArray(jsonData[item])) {\r\n                descList += `<dt>${item}</dt>\\n`;\r\n                descList += `<dd>${jsonData[item]}</dd>\\n`;\r\n            } else {\r\n                descList += (\"<dl>\\n\" + formData2descriptionList(jsonData[item]) + \"</dl>\\n\");\r\n            }\r\n        }\r\n        else {\r\n            descList += `<dt>${item}</dt>\\n`;\r\n            descList += `<dd>${jsonData[item]}</dd>\\n`;\r\n        }\r\n    })\r\n\r\n    return descList;\r\n}\r\n\r\nexport default formData2descriptionList;","import React, { useCallback, useState } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport HeaderImage from \"../assets/header-image.png\";\r\nimport FormRenderer from \"../components/FormRenderer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { FormContext } from \"../FormContext\";\r\nimport JSONSchemaViewer from \"../components/JSONSchemaViewer\";\r\nimport array2object from \"../components/utils/array2object\";\r\nimport object2array from \"../components/utils/object2array\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport DownloadIcon from \"@material-ui/icons/GetApp\";\r\nimport set from \"set-value\";\r\nimport getValue from \"../components/utils/getValue\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport deleteKeySchema from \"../components/utils/deleteKeySchema\";\r\nimport validateAgainstSchema from \"../components/utils/validateAgainstSchema\";\r\nimport CreateELabFTWExperimentDialog from \"../components/CreateELabFTWExperimentDialog\";\r\nimport { useEffect } from \"react\";\r\nimport formData2descriptionList from \"../components/utils/formData2descriptionList\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n// function that receive the schema and convert it to Form/json data blueprint\r\n// also to already put the default value to this blueprint\r\nconst createFormDataBlueprint = (schemaProperties) => {\r\n  let newObject = {};\r\n\r\n  Object.keys(schemaProperties).forEach((item) => {\r\n    if (schemaProperties[item][\"type\"] !== \"object\") {\r\n      if (schemaProperties[item][\"default\"] !== undefined) {\r\n        newObject[item] = schemaProperties[item][\"default\"];\r\n      } else if (\r\n        (schemaProperties[item][\"default\"] === undefined) &\r\n        (schemaProperties[item][\"enum\"] !== undefined)\r\n      ) {\r\n        newObject[item] = schemaProperties[item][\"enum\"][0];\r\n      } else if (\r\n        (schemaProperties[item][\"type\"] === \"boolean\") &\r\n        (schemaProperties[item][\"default\"] === undefined)\r\n      ) {\r\n        newObject[item] = false;\r\n      }\r\n    } else {\r\n      if (schemaProperties[item][\"properties\"] !== undefined) {\r\n        newObject[item] = createFormDataBlueprint(\r\n          schemaProperties[item][\"properties\"]\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return newObject;\r\n};\r\n\r\n/*\r\n// function to remove empty artributes\r\nconst removeEmpty = (obj) => {\r\n  return Object.fromEntries(\r\n    Object.entries(obj)\r\n      .filter(([_, v]) => (v !== null) & (v !== \"\") & (v !== {}) & (v !== []))\r\n      .map(([k, v]) => [k, v === Object(v) ? removeEmpty(v) : v])\r\n  );\r\n};\r\n*/\r\n\r\n// function to remove empty artributes\r\nconst removeEmpty = (obj) => {\r\n  Object.keys(obj).forEach((key) => {\r\n    if (obj[key] && typeof obj[key] === \"object\") {\r\n      const childObject = removeEmpty(obj[key]);\r\n      if (childObject === undefined) {\r\n        delete obj[key];\r\n      }\r\n    } else if (obj[key] === \"\" || obj[key] === null || obj[key] === undefined) {\r\n      delete obj[key];\r\n    }\r\n  });\r\n  return Object.keys(obj).length > 0 || obj instanceof Array ? obj : undefined;\r\n};\r\n\r\nconst AdamantMain = () => {\r\n  // state management\r\n  const [disable, setDisable] = useState(true);\r\n  const [schemaMessage, setSchemaMessage] = useState(null);\r\n  const [schemaValidity, setSchemaValidity] = useState(false);\r\n  const [schema, setSchema] = useState(null);\r\n  const [renderReady, setRenderReady] = useState(false);\r\n  const [editMode, setEditMode] = useState(true);\r\n  const [schemaFile, setSchemaFile] = useState();\r\n  const [originalSchema, setOriginalSchema] = useState();\r\n  const [inputMode, setInputMode] = useState(false);\r\n  const [convertedSchema, setConvertedSchema] = useState(null);\r\n  const [createScratchMode, setCreateScratchMode] = useState(false);\r\n  const [jsonData, setJsonData] = useState({});\r\n  const [jsonDataElab, SetJsonDataElab] = useState({});\r\n  const [token, setToken] = useState(\"\");\r\n  const [eLabURL, setELabURL] = useState(\"\");\r\n  const [experimentTitle, setExperimentTitle] = useState(\"\");\r\n  const [onlineMode, setOnlineMode] = useState(false);\r\n  const [tags, setTags] = useState([]);\r\n  const [retrievedTags, setRetrievedTags] = useState([]);\r\n  // for dropdown buttons\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [openSubmitDialog, setOpenSubmitDialog] = useState(false);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  }; //\r\n\r\n  // check if the front-end is connected to backend at all\r\n  useEffect(() => {\r\n    let $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"GET\",\r\n      url: \"/adamant/api/check_mode\",\r\n      success: function () {\r\n        console.log(\"Connection to server is established. Online mode\");\r\n        setOnlineMode(true);\r\n        toast.success(\"Connection to server is established. Online mode.\", {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        });\r\n      },\r\n      error: function () {\r\n        console.log(\"Unable to establish connection to server. Offline mode\");\r\n        setOnlineMode(false);\r\n        toast.warning(\r\n          \"Unable to establish connection to server. Offline mode.\",\r\n          {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false,\r\n            progress: undefined,\r\n          }\r\n        );\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // place holders\r\n  let schemaList = [\r\n    \"\",\r\n    \"SEM-request-form\",\r\n    \"Plasma-MDS\",\r\n    \"unreasonably long title lalalala...\",\r\n  ]; //\r\n\r\n  // function to check if the file accepted is of json format and json schema valid\r\n  const checkSchemaValidity = (schemaFile) => {\r\n    // place holder\r\n    if (schemaFile[0][\"type\"] === \"application/json\") {\r\n      // read the file with FileReadr API\r\n      const reader = new FileReader();\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = () => {\r\n        const binaryStr = reader.result;\r\n        const obj = JSON.parse(binaryStr);\r\n\r\n        // convert obj schema to iterable array properties\r\n        let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n        try {\r\n          convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n          // update states\r\n          setSchemaValidity(true);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is a valid schema`);\r\n          setSchema(obj);\r\n          let oriSchema = JSON.parse(JSON.stringify(obj));\r\n          setOriginalSchema(oriSchema);\r\n          setConvertedSchema(convertedSchema);\r\n          setEditMode(true);\r\n\r\n          // create form data\r\n          let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n          setJsonData(formData);\r\n        } catch (error) {\r\n          console.log(error);\r\n          // update states\r\n          setSchemaValidity(false);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is invalid`);\r\n          setSchema(null);\r\n        }\r\n      };\r\n      reader.readAsText(schemaFile[0]);\r\n    } else {\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${schemaFile[0][\"name\"]} is of incorrect file type`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // browse or drag&drop schema file\r\n  const onDrop = useCallback(\r\n    (acceptedFile) => {\r\n      // process the schema, validation etc\r\n      checkSchemaValidity(acceptedFile);\r\n\r\n      // store schema file in the state\r\n      setSchemaFile(acceptedFile);\r\n      // update states\r\n      setRenderReady(false);\r\n      setDisable(true);\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n    },\r\n    [setRenderReady]\r\n  );\r\n  //\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    multiple: false,\r\n  });\r\n\r\n  // render on-click handle\r\n  const renderOnClick = () => {\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // clear schema on-click handle\r\n  const clearSchemaOnClick = () => {\r\n    setDisable(true);\r\n    setRenderReady(false);\r\n    setSchema(null);\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setCreateScratchMode(false);\r\n  };\r\n\r\n  // create new schema from scratch\r\n  const createSchemaFromScratch = () => {\r\n    // update browse schema render states\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setJsonData({});\r\n\r\n    let schemaBlueprint = {\r\n      $schema: \"http://json-schema.org/draft-04/schema#\",\r\n      properties: {},\r\n      type: \"object\",\r\n    };\r\n    const obj = JSON.parse(JSON.stringify(schemaBlueprint));\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n    setJsonData(formData);\r\n    console.log(formData);\r\n\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n    convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n    // update states\r\n    setCreateScratchMode(true);\r\n    setSchema(obj);\r\n    let oriSchema = JSON.parse(JSON.stringify(obj));\r\n    setOriginalSchema(oriSchema);\r\n    setConvertedSchema(convertedSchema);\r\n    setEditMode(true);\r\n\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // compile on-click handle\r\n  const compileOnClick = () => {\r\n    const value = schema;\r\n    setInputMode(true);\r\n    setSchema(value);\r\n    setEditMode(false);\r\n    setDisable(true);\r\n  };\r\n\r\n  // return to edit mode handle\r\n  const toEditMode = () => {\r\n    const value = schema;\r\n    setInputMode(false);\r\n    setSchema(value);\r\n    setEditMode(true);\r\n    setDisable(false);\r\n  };\r\n\r\n  // update parent (re-render everything)\r\n  const updateParent = (value) => {\r\n    const newValue = { ...value };\r\n\r\n    // update original schema\r\n    const updatedSchema = JSON.parse(JSON.stringify(newValue));\r\n    const tempSchema = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema[\"properties\"] = array2object(tempSchema[\"properties\"]);\r\n\r\n    setConvertedSchema(newValue);\r\n    setSchema(updatedSchema);\r\n  };\r\n\r\n  // revert all changes to the schema\r\n  const revertAllChanges = () => {\r\n    const value = { ...originalSchema };\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(value));\r\n    convertedSchema[\"properties\"] = object2array(value[\"properties\"]);\r\n    setConvertedSchema(convertedSchema);\r\n    setSchema(value);\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(value[\"properties\"]);\r\n    setJsonData(formData);\r\n    console.log(formData);\r\n  };\r\n\r\n  // handle data input on blur\r\n  const handleDataInput = (event, path, type) => {\r\n    let jData = { ...jsonData };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(jData, path, value);\r\n    console.log(\"Current form data:\", jData);\r\n    setJsonData(jData);\r\n  };\r\n  //\r\n\r\n  // delete data in jsonData when the field in schema is deleted\r\n  const handleDataDelete = (path) => {\r\n    let jData = { ...jsonData };\r\n    let value = deleteKeySchema(jData, path);\r\n    setJsonData(value);\r\n    console.log(\"Current form data:\", value);\r\n  };\r\n\r\n  // update form data id if a fieldId changes, simply delete key value pair of the oldfieldid from jsonData\r\n  const updateFormDataId = (\r\n    oldFieldId,\r\n    newFieldId,\r\n    pathSchema,\r\n    defaultValue\r\n  ) => {\r\n    if (oldFieldId === newFieldId) {\r\n      return;\r\n    }\r\n    if (defaultValue === undefined) {\r\n      let jData = { ...jsonData };\r\n      jData = deleteKeySchema(jData, pathSchema);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    } else {\r\n      let newPathSchema = pathSchema.split(\".\");\r\n      newPathSchema.pop();\r\n      newPathSchema.push(newFieldId);\r\n\r\n      let jData = { ...jsonData };\r\n      let value = getValue(jData, pathSchema);\r\n      set(jData, newPathSchema, value);\r\n      jData = deleteKeySchema(jData, pathSchema);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    }\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadJsonSchema = () => {\r\n    let content = { ...schema };\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `jsonschema-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadFormData = () => {\r\n    let content = { ...jsonData };\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, validation] = validateAgainstSchema(content, contentSchema);\r\n    if (!valid) {\r\n      let errorMessages = \"\";\r\n      for (let i = 0; i < validation.errors.length; i++) {\r\n        let currentMessage = validation.errors[i].message + \".\";\r\n        errorMessages += currentMessage + \"\\n\";\r\n      }\r\n      errorMessages = errorMessages.split(\"\\n\");\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {errorMessages.map((item) => {\r\n            return <div>{item}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `formdata-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // get available tags from elabftw\r\n  const getTagsELabFTW = () => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/adamant/api/get_tags\",\r\n      dataType: \"json\",\r\n      data: {\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n      },\r\n      success: function (status) {\r\n        console.log(\"Tags retrieved successfully\");\r\n        //let arr = [];\r\n        //for (let i = 0; i < status.length; i++) {\r\n        //  arr.push(status[i][\"tag\"]);\r\n        //}\r\n        setRetrievedTags(status);\r\n        toast.success(`Successfully retrieved the tags!`, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        });\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Failed to retrieve tags\");\r\n        console.log(status);\r\n        toast.error(`Failed to get the tags!\\nMaybe wrong url or token?`, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // create an experiment in elabftw based on the schema and data\r\n  const createExperimentELabFTW = () => {\r\n    // validate the data first using ajv\r\n    let content = { ...jsonData };\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, validation] = validateAgainstSchema(content, contentSchema);\r\n    if (!valid) {\r\n      let errorMessages = \"\";\r\n      for (let i = 0; i < validation.errors.length; i++) {\r\n        let currentMessage = validation.errors[i].message + \".\";\r\n        errorMessages += currentMessage + \"\\n\";\r\n      }\r\n      errorMessages = errorMessages.split(\"\\n\");\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {errorMessages.map((item) => {\r\n            return <div>{item}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      // clear states\r\n      setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    }\r\n\r\n    // create description list\r\n    let descriptionList =\r\n      \"<dl>\\n\" +\r\n      formData2descriptionList(JSON.parse(JSON.stringify(content))) +\r\n      \"</dl>\";\r\n    // call create experiment api\r\n    console.log(\"tags:\", tags);\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/adamant/api/create_experiment\",\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n        title: experimentTitle,\r\n        body: descriptionList,\r\n        tags: JSON.stringify(tags),\r\n      },\r\n      success: function (status) {\r\n        console.log(\"SUCCESS\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenSubmitDialog(false);\r\n        toast.success(\r\n          `Successfully created an experiment with id: ${status[\"experimentId\"]}!`,\r\n          {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false,\r\n            progress: undefined,\r\n          }\r\n        );\r\n\r\n        // clear states\r\n        setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenSubmitDialog(false);\r\n        toast.error(\r\n          `Failed to create an experiment!\\nMaybe wrong url or token?`,\r\n          {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false,\r\n            progress: undefined,\r\n          }\r\n        );\r\n        // clear states\r\n        setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleOnClickProceedButton = () => {\r\n    // validate the data first using ajv\r\n    let content = { ...jsonData };\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, validation] = validateAgainstSchema(content, contentSchema);\r\n    if (!valid) {\r\n      let errorMessages = \"\";\r\n      for (let i = 0; i < validation.errors.length; i++) {\r\n        let currentMessage = validation.errors[i].message + \".\";\r\n        errorMessages += currentMessage + \"\\n\";\r\n      }\r\n      errorMessages = errorMessages.split(\"\\n\");\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {errorMessages.map((item) => {\r\n            return <div>{item}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      // clear states\r\n      setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    } else {\r\n      setOpenSubmitDialog(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormContext.Provider\r\n        value={{\r\n          updateParent,\r\n          convertedSchema,\r\n          handleDataInput,\r\n          updateFormDataId,\r\n          handleDataDelete,\r\n        }}\r\n      >\r\n        <div style={{ paddingBottom: \"5px\" }}>\r\n          <img\r\n            style={{ width: \"100%\", borderRadius: \"5px\" }}\r\n            alt=\"header\"\r\n            src={HeaderImage}\r\n          />\r\n          {!inputMode ? (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                textAlign: \"left\",\r\n                padding: \"10px 10px 0px 10px\",\r\n              }}\r\n            >\r\n              <Button variant=\"contained\" color=\"primary\" {...getRootProps()}>\r\n                <input {...getInputProps()} />\r\n                {isDragActive ? \"Drop here\" : \"Browse Schema\"}\r\n              </Button>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <TextField\r\n                style={{ width: \"220px\", marginLeft: \"10px\" }}\r\n                fullWidth={false}\r\n                select\r\n                id={\"select-schema\"}\r\n                label={\"Select existing schema\"}\r\n                variant=\"outlined\"\r\n                SelectProps={{ native: true }}\r\n              >\r\n                {schemaList.map((content, index) => (\r\n                  <option key={index} value={content}>\r\n                    {content}\r\n                  </option>\r\n                ))}\r\n              </TextField>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <Button\r\n                onClick={() => createSchemaFromScratch()}\r\n                style={{\r\n                  marginLeft: \"10px\",\r\n                  marginRight: \"10px\",\r\n                }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                CREATE FROM SCRATCH\r\n              </Button>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        {!inputMode ? (\r\n          <div\r\n            style={{\r\n              paddingLeft: \"10px\",\r\n              display: \"flex\",\r\n              width: \"100%\",\r\n              textAlign: \"left\",\r\n            }}\r\n          >\r\n            {schemaValidity === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}. You can now render the form.\r\n                </div>\r\n                <Button\r\n                  style={{ marginRight: \"5px\" }}\r\n                  onClick={() => renderOnClick()}\r\n                  variant=\"outlined\"\r\n                >\r\n                  Render\r\n                </Button>\r\n                <Button\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    paddingTop: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"red\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}\r\n                </div>\r\n              </>\r\n            )}\r\n            {createScratchMode === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  Create from scratch mode. You can now start editing.\r\n                </div>\r\n                <Button\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : null}\r\n          </div>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        {renderReady === true ? (\r\n          <FormRenderer\r\n            revertAllChanges={revertAllChanges}\r\n            schema={convertedSchema}\r\n            edit={editMode}\r\n          />\r\n        ) : null}\r\n        {renderReady === true ? <JSONSchemaViewer jsonschema={schema} /> : null}\r\n        <div\r\n          style={{\r\n            padding: \"10px 10px\",\r\n            display: \"flex\",\r\n            justifyContent: \"right\",\r\n          }}\r\n        >\r\n          {inputMode ? (\r\n            <div style={{ width: \"100%\", display: \"inline-block\" }}>\r\n              <Button\r\n                onClick={() => toEditMode()}\r\n                style={{ float: \"left\", marginRight: \"5px\" }}\r\n                variant=\"outlined\"\r\n              >\r\n                Back to Edit Mode\r\n              </Button>\r\n              <Button\r\n                disabled={!onlineMode}\r\n                onClick={() => handleOnClickProceedButton()}\r\n                style={{ float: \"right\" }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Proceed\r\n              </Button>\r\n              <Button\r\n                style={{ float: \"right\", marginRight: \"5px\" }}\r\n                id=\"demo-positioned-button\"\r\n                aria-controls={open ? \"demo-positioned-menu\" : undefined}\r\n                aria-haspopup=\"true\"\r\n                aria-expanded={open ? \"true\" : undefined}\r\n                onClick={handleClick}\r\n              >\r\n                <DownloadIcon /> Download Schema/Data\r\n              </Button>\r\n              <Menu\r\n                id=\"demo-positioned-menu\"\r\n                aria-labelledby=\"demo-positioned-button\"\r\n                anchorEl={anchorEl}\r\n                open={open}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n                transformOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n              >\r\n                <MenuItem onClick={handleDownloadJsonSchema}>\r\n                  Download JSON Schema\r\n                </MenuItem>\r\n                <MenuItem onClick={handleDownloadFormData}>\r\n                  Download JSON Data\r\n                </MenuItem>\r\n              </Menu>\r\n            </div>\r\n          ) : (\r\n            <Button\r\n              disabled={disable}\r\n              onClick={() => compileOnClick()}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Compile\r\n            </Button>\r\n          )}\r\n        </div>\r\n        <div style={{ padding: \"5px\" }}>ADAMANT v0.0.1</div>\r\n      </FormContext.Provider>\r\n      <CreateELabFTWExperimentDialog\r\n        setTags={setTags}\r\n        tags={tags}\r\n        setRetrievedTags={setRetrievedTags}\r\n        retrievedTags={retrievedTags}\r\n        setExperimentTitle={setExperimentTitle}\r\n        createExperimentELabFTW={createExperimentELabFTW}\r\n        setToken={setToken}\r\n        token={token}\r\n        setELabURL={setELabURL}\r\n        eLabURL={eLabURL}\r\n        setOpenSubmitDialog={setOpenSubmitDialog}\r\n        openSubmitDialog={openSubmitDialog}\r\n        getTagsELabFTW={getTagsELabFTW}\r\n      />\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdamantMain;\r\n","import React from \"react\";\nimport \"./styles.css\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport AdamantMain from \"./pages/AdamantMain\";\nimport \"cors\";\n\nexport default function App() {\n\n\n  return (\n    /*\n    <div className=\"the_app\">\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/pbb/adamant\" />\n        <Route exact path=\"/pbb/adamant\" component={AdamantMain}></Route>\n      </Switch>\n    </div>\n    */\n    <div className=\"the_app\">\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/adamant\" />\n        <Route exact path=\"/adamant\" component={AdamantMain}></Route>\n      </Switch>\n    </div>\n  );\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n//import { HashRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nconst rootElement = document.getElementById(\"root\");\n\n// strict mode is disabled so that findDOMNode warning is suppressed\nReactDOM.render(\n  <Router>\n    <CssBaseline />\n    <App />\n  </Router>,\n  rootElement\n);\n\n\n/* use this for strict mode, however it always throws the findDOMNode warning\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <CssBaseline />\n      <App />\n    </Router>\n  </React.StrictMode>,\n  rootElement\n);\n*/"],"sourceRoot":""}