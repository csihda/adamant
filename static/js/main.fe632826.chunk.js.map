{"version":3,"sources":["assets/json-file-svgrepo-com.svg","components/utils/getValue.js","components/utils/checkIfFieldIDExist.js","FormContext.js","components/utils/updateRequired.js","components/utils/object2array.js","components/utils/getFileIndex.js","components/utils/getValueInSchemaFullPath.js","components/EditElement.js","components/utils/deleteKey.js","components/elements/StringType.js","components/utils/getUnit.js","components/elements/NumberType.js","components/elements/ObjectType.js","components/elements/IntegerType.js","components/elements/BooleanType.js","components/elements/array_items/ItemIntegerType.js","components/elements/array_items/ItemNumberType.js","components/elements/array_items/ItemStringType.js","assets/file-icon.svg","components/elements/array_items/ItemObjectType.js","components/elements/ArrayItemRenderer.js","components/utils/generateUniqueID.js","components/elements/ArrayType.js","components/elements/AnyOfKeywordPlaceHolder.js","components/elements/FileUpload.js","components/ElementRenderer.js","components/EditSchemaHeader.js","components/JSONSchemaViewerDialog.js","components/utils/fillForm.js","components/FormRenderer.js","components/utils/array2object.js","components/utils/deleteKeySchema.js","components/utils/validateAgainstSchema.js","components/CreateELabFTWExperimentDialog.js","components/utils/prepareDataForDescList.js","components/utils/array2objectAnyOf.js","components/utils/fillValueWithEmptyString.js","components/utils/convData2FormData.js","components/FormReviewBeforeSubmit.js","components/utils/changeKeywords.js","assets/adamant-header-5.svg","components/utils/nicelySort.js","components/utils/getPaths.js","components/utils/getValueInSchema.js","components/utils/getPathURIsAndLabels.js","components/utils/preProcessB4DescList.js","components/utils/getTableCandidates.js","components/utils/table2DescListTable.js","components/utils/createDescriptionList.js","components/utils/createDescriptionListWithoutStyling.js","components/utils/createDescriptionListFromJSON.js","components/utils/checkIDexistence.js","assets/browse-edit-exp.svg","assets/request_analysis.svg","assets/process_request.svg","components/ChooseUseCasesDialog.js","components/LDAPLoginDialog.js","components/DatasetSubmissionDialog.js","assets/fileloading.gif","components/FilesDialog.js","components/ProgressDialog.js","pages/AdamantMain.jsx","pages/AdamantRequest.jsx","pages/AdamantProcess.jsx","assets/adamant-new-logo.ico","components/RenderExperimentCard.js","pages/AdamantBrowseExp.jsx","pages/AsyncTestPage.jsx","App.js","index.js"],"names":["_g","_g2","_g3","_g4","_g5","_g6","_g7","_g8","_g9","_g10","_g11","_g12","_g13","_g14","_g15","_g16","getValue","json","path","undefined","jsonData","JSON","parse","stringify","split","tempValue","i","length","checkIfFieldIDExist","schema","fieldkey","result","forEach","element","value","newPath","pop","join","FormContext","createContext","removeValue","arr","index","indexOf","splice","updateRequired","selectedType","requiredChecked","field_key","old_field_key","convertedSchema","set","require","immediateValue","requiredArray","push","includes","filter","item","object2array","propert","someArray","Object","keys","tempVariable2","tempVariable","item_","getFileIndex","files","fileMetadata","filetype","replace","filename","filesize","toString","getValueInSchemaFullPath","getAllFileMetadata","object","arrai","key","useStyles","makeStyles","theme","root","width","input","fontSize","fontFamily","EditElement","editOrAdd","field_uri","enumerated","field_enumerate","field_required","UISchema","pathFormData","openDialog","setOpenDialog","defaultValue","field_label","useState","setSelectedType","title","setTitle","setFieldKey","oldFieldkey","fieldUri","setFieldUri","description","setDescription","defValue","setDefValue","useContext","loadedFiles","handleRemoveFile","updateParent","updateFormDataId","schemaSpecification","handleCheckIDexistence","handleDataDelete","setRequiredChecked","enumChecked","setEnumChecked","enumList","setEnumList","arrayItemType","setArrayItemType","arrayMinMaxItem","setArrayMinMaxItem","numberMinMaxValue","setNumberMinMaxValue","charMinMaxLengthValue","setCharMinMaxLengthValue","charMinMaxHelperText","setCharMinMaxHelperText","arrayMinMaxHelperText","setArrayMinMaxHelperText","numberMinMaxValueHelperText","setNumberMinMaxValueHelpertext","arrayUniqueItems","setArrayUniqueItems","subSchemaValidity","setSubSchemaValidity","convertedSubSchema","setConvertedSubSchema","subSchemaFilename","setSubSchemaFilename","activeSubSchemaButton","setActiveSubSchemaButton","setArrayItemDataType","itemSchemaTFrow","setItemSchemaTFrow","itemSchemaEdit","setItemSchemaEdit","itemSchemaData","setItemSchemaData","arrayItemTypeList","tempUISchema","classes","useEffect","notImplemented","handleUpdateSchemaOnClick","alert","defValueState","parseFloat","parseInt","error","console","log","properties","newConvertedSchema","newList","Array","isArray","fileIndex","cSchema","metmet","keywords","temporary","existed","parsed","map","x","handleChangeUISchema","event","keyword","target","newValue","at","isFinite","handleMinMaxArrayItem","field","Number","isNaN","handleMinMaxArrayItemOnBlur","style","color","handleMinMaxValue","minMax","handleMinMaxValueOnBlur","handleMinMaxCharLength","handleMinMaxCharLengthOnBlur","handleCancelEdit","handleValidateItemSchema","tooDeep","err","handleCheckBoxOnChange","prev","onDrop","useCallback","acceptedFile","schemaFile","reader","FileReader","onabort","onerror","onload","binaryStr","obj","copiedObj","readAsText","checkSubSchemaValidity","itemSchema","useDropzone","multiple","getRootProps","getInputProps","Dialog","open","DialogTitle","id","display","verticalAlign","alignSelf","IconButton","onClick","Divider","DialogContent","DialogActions","Button","disabled","autoFocus","DialogContentText","component","FormControl","FormLabel","TextField","margin","required","onChange","marginTop","variant","fullWidth","label","helperText","multiline","rows","paddingTop","paddingBottom","select","SelectProps","native","content","onFocus","onBlur","paddingLeft","paddingRight","FormControlLabel","control","Checkbox","checked","marginLeft","marginBottom","FormGroup","backgroundColor","height","size","itemType","handleChangeDefaultItemSchema","handleChangeItemSchemaTextField","InputProps","className","justifyContent","marginRight","tempID","tempID2","ID","handleEditItemSchema","deleteKey","elementValue","deleteIndex","heading","typography","pxToRem","fontWeight","fontWeightRegular","StringType","adamant_field_error","adamant_error_description","minLength","maxLength","withinObject","dataInputItems","setDataInputItems","withinArray","field_index","edit","field_description","descriptionText","setDescriptionText","inputError","setInputError","handleConvertedDataInput","SEMSelectedDevice","setSEMSelectedDevice","fieldValue","setFieldValue","fieldEnumerate","setFieldEnumerate","handleOnChange","handleOnFocus","semOperatorDeviceList","e","handleDeleteElement","pathArr","val","handleOnBlur","type","newPathFormData","items","from","dataInputItemVal","Tooltip","placement","onKeyDown","shiftKey","preventDefault","mimeTypesExt","extension","substring","defaultStyles","getUnit","addorn","match","NumberType","minimum","maximum","inputValue","setInputValue","unit","handleInputOnChange","inputValueVar","handleInputOnBlur","endAdornment","InputAdornment","position","tex","String","raw","onMouseEnter","Accordion","withStyles","border","borderBottom","boxShadow","expanded","MuiAccordion","AccordionSummary","minHeight","MuiAccordionSummary","ObjectType","pathSchema","object_is_required","field_properties","openDialogAddElement","setOpenDialogAddElement","expand","setExpand","padding","borderRadius","expandIcon","IconButtonProps","Typography","lineHeight","AccordionDetails","onDragEnd","destination","source","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","isDragDisabled","draggableId","draggableProps","dragHandleProps","fieldIndex","elementRequired","placeholder","defaultSchema","IntegerType","isInteger","BooleanType","handleInputWhenInvalid","alignItems","textAlign","FormHelperText","ItemIntegerType","oDataInputItems","oSetDataInputItems","arrayFieldKey","handleDeleteArrayItem","arr2","items2","prevIndex","ItemNumberType","ItemStringType","ItemObjectType","field_items","field_type","isResource","setUseIcon","setMimeType","setFileName","setExtension","objectIndex","something","ext","slice","newVal","tempField","ArrayItemRenderer","enumerate","generateUID","firstPart","Math","random","secondPart","ArrayType","maxItems","minItems","uniqueItems","field_prefixItems","handleLoadedFiles","setLoadedFiles","openDatasetSubmissionDialog","inputItems","setInputItems","currentFiles","setCurrentFiles","toast","warning","toastId","desiredValues","inputItemIndex","handleAddArrayItem","generateUniqueID","newFieldItems","currentInputItems","modPath","lastKey","reorderedItem2","items3","reorderedItem3","AnyOfKeywordPlaceHolder","anyOf_list","FileUpload","contentEncoding","dataUrl","setDataUrl","renderingInProgress","setRenderingInProgress","mediaFileType","setMediaFileType","fileSize","setFileSize","renderableMediaFileTypes","fieldLabel","acceptedTypes","matches","submatch","replaceAll","getAcceptedTypes","valid","fileType","validateAcceptedFile","readAsDataURL","Box","sx","LinearProgress","alt","src","FileIcon","whiteSpace","textOverflow","overflow","handleOnClickedClear","ElementRenderer","$id","anyOf","_excluded","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgJsonFileSvgrepoCom","_ref","svgRef","titleId","props","xmlns","xmlnsXlink","y","viewBox","enableBackground","xmlSpace","d","points","cx","cy","r","ForwardRef","changeKeywords","oldKey","desiredNewKey","EditSchemaHeader","schemaVersion","schemaID","_schemaVersion","_setSchemaVersion","_title","_setTitle","_description","_setDescription","_schemaID","_setSchemaID","setSchemaSpecification","emptyObject","emptyArray","f","JSONSchemaViewerDialog","openSchemaViewer","setOpenSchemaViewer","jsonschema","onClose","maxWidth","fillForm","schemaProp","data","FormRenderer","revertAllChanges","setEditMode","originalSchema","receivedData","setReceivedData","validity","file","message","checkFormDataValidity","$schema","schemaTitle","array2object","someObject","tempKey","tempElements","enumContent","deleteKeySchema","pathArray","tobeDeleted","createBetterValidationMessages","validate","errors","messages","schemaPath","params","missingProperty","errorMessage","newMessage","s","messageLookUpTable","validateAgainstSchema","formData","Ajv04","schemaId","allErrors","compile","Ajv","ajv","CreateELabFTWExperimentDialog","getTagsELabFTW","eLabURL","setELabURL","setTags","setRetrievedTags","tags","retrievedTags","setExperimentTitle","setToken","token","setOpenCreateElabFTWExperimentDialog","openCreateElabFTWExperimentDialog","createExperimentELabFTW","Autocomplete","freeSolo","options","getOptionLabel","option","tag","values","renderInput","trim","prepareDataForDescList","convDataProp","array2objectAnyOf","fillValueWithEmptyString","jsonObjProp","convData2FormData","FormReviewBeforeSubmit","onlineMode","openFormReviewDialog","setOpenFormReviewDialog","descriptionList","setOpenFunctions","submitFunctions","submitText","endPoint","anchorEl","setAnchorEl","Boolean","dangerouslySetInnerHTML","__html","float","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","submitJobRequest","setOpenDatasetSubmissionDialog","nicelySort","sortedArr","loc","checkObjectExistance","newObj","getPaths","reduce","k","kk","p","getValueInSchema","getPathURIsAndLabels","uris","labels","thePath","pathPreProcess","processedArr","preProcessB4DescList","originalContent","path_key","path_label","URIsAndLabels","getTableCandidates","convProp","container","table2DescListTable","table","descListTable","keyTitleMapper","startsWith","listMimeTypes","find","fileName","createDescriptionList","descList","emptyString","titleDiv","some","createDescriptionListWithoutStyling","createDescriptionListFromJSON","cleanedJson","convertedProperties","footnote","styling","preProcessed","nicelySorted","tables","descListTables","descListHeading","checkIDexistence","ChooseUseCasesDialog","openUseCasesDialog","setOpenUseCasesDialog","firstName","loginState","setOpenLDAPLoginDialog","handleLogOut","borderRight","AdamantHeader","render","history","ReqAnalysisLogo","BrowseEditLogo","ProcRequestLogo","LDAPLoginDialog","openLDAPLoginDialog","setIntranetUsername","setUserPassword","email","setEmail","handleLogin","handleKeypress","charCode","onKeyPress","autoComplete","href","DatasetSubmissionDialog","submitDataset","handleCreateBundle","handleOnlyCertify","username","setUsername","pass","setPass","disableButton","setDisableButton","handleUsernamePass","FilesDialog","openFilesDialog","setOpenFilesDialog","CircularProgress","CircularProgressWithLabel","top","left","bottom","right","round","ProgressDialog","openProgressDialog","setOpenProgressDialog","progress","createFormDataBlueprint","schemaProperties","newObject","removeEmpty","AdamantMain","setDisable","schemaMessage","setSchemaMessage","schemaValidity","setSchemaValidity","setSchema","setSchemaIntermediate","renderReady","setRenderReady","editMode","schemaList","setSchemaList","schemaNameList","setSchemaNameList","selectedSchemaName","setSelectedSchemaName","setOriginalSchema","inputMode","setConvertedSchema","createScratchMode","setCreateScratchMode","setJsonData","setDescriptionList","setSchemaWithValues","GeneralConfig","experimentTitle","setOnlineMode","QPTDATLogo","HeaderImage","setHeaderImage","setOpenJobRequestDialog","jobRequestSchemas","setJobRequestSchemas","submitTextList","setSubmitTextList","setSubmitText","setLoginState","setFirstName","handleClose","filesDialogContent","setFilesDialogContent","progressDialogMessages","setProgressDialogMessages","setProgress","progressDialogTitle","setProgressDialogTitle","setHashes","window","sessionStorage","getItem","setItem","ajax","url","success","status","SchemaOne","SchemaTwo","SchemaThree","SchemaFour","SchemaFive","sch","oriSchema","findIndex","checkSchemaValidity","isDragActive","clearSchemaOnClick","updatedSchema","tempSchema","updatedSchema2","tempSchema2","setErrorStuffUponValidation","errorMessages","fieldKey","readAndHash","Promise","resolve","onloadend","file_result","file_wordArr","CryptoJS","lib","WordArray","create","sha256_hash","SHA256","readAsArrayBuffer","certifyOnBloxberg","hashes","metadata","crid","file_names","entries","async","dataType","hashes_dict","a","convSchemaData","contentSchema","hashDict","increment","resourceKeyIndex","content_hash","zip","JSZip","file_name","base64","generateAsync","then","saveAs","Provider","isFileAlreadyExist","isFileMetadataAlreadyExist","whichIndex","oldFieldId","newFieldId","jData","implementedFieldTypes","location","reload","disablePortal","schemaName","selectedSchema","handleSelectSchemaOnChange","createSchemaFromScratch","convSch","cleaned","AdamantVersion","autoClose","handleOnClickProceedButton","document","createElement","Blob","URL","createObjectURL","download","click","javascript_data","eLabToken","body","fileDir","folder","binary","responseText","elabUrl","createButtonColorStatesFromConfigs","config","buttonStates","AdamantRequest","jobRequestConfList","setJobRequestConfList","availableRequestSchemas","setAvailableRequestSchemas","renderAvailableSchemas","setRenderAvailableSchemas","buttonColorStates","setButtonColorStates","schemaSelectionButtonColors","setSchemaSelectionButtonColors","handleJobRequestButton","btnStates","availableSchemas","requestSchemas","requestSchemasTitle","createSchemaButtonColorStates","handleSelectSchema","indx","AdamantProcess","availableExpSchemas","setAvailableExpSchemas","experimentSchemas","experimentSchemasTitle","RenderExperimentCard","experiments","readExperimentELabFTW","flexDirection","flexWrap","Card","overflowY","CardContent","gutterBottom","AdamantIcon","CardActions","experimentID","AdamantBrowseExp","setExperiments","experimentData","setExperimentData","setRetrievedJSONSchema","setRetrievedJSONData","toggleJSONForm","setToggleJSONForm","experiment_id","initialData","handlePrepareDescList","json_data","desc_list","new_schema","new_data","updateExperimentELabFTW","AsyncTestPage","resolveAfter2Seconds","setTimeout","hashAllFiles","selectedFile","getElementById","handleShowFiles","asyncCall","App","packageJson","exact","to","hideProgressBar","closeOnClick","pauseOnHover","draggable","rootElement","ReactDOM","CssBaseline"],"mappings":"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","file":"static/js/main.fe632826.chunk.js","sourcesContent":["var _g, _g2, _g3, _g4, _g5, _g6, _g7, _g8, _g9, _g10, _g11, _g12, _g13, _g14, _g15, _g16;\n\nconst _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgJsonFileSvgrepoCom(_ref, svgRef) {\n  let {\n    title,\n    titleId\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Capa_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 58 58\",\n    style: {\n      enableBackground: \"new 0 0 58 58\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M50.949,12.187l-1.361-1.361l-9.504-9.505c-0.001-0.001-0.001-0.001-0.002-0.001l-0.77-0.771 C38.957,0.195,38.486,0,37.985,0H8.963C7.776,0,6.5,0.916,6.5,2.926V39v16.537V56c0,0.837,0.841,1.652,1.836,1.909 c0.051,0.014,0.1,0.033,0.152,0.043C8.644,57.983,8.803,58,8.963,58h40.074c0.16,0,0.319-0.017,0.475-0.048 c0.052-0.01,0.101-0.029,0.152-0.043C50.659,57.652,51.5,56.837,51.5,56v-0.463V39V13.978C51.5,13.211,51.407,12.644,50.949,12.187 z M39.5,3.565L47.935,12H39.5V3.565z M8.963,56c-0.071,0-0.135-0.025-0.198-0.049C8.61,55.877,8.5,55.721,8.5,55.537V41h41v14.537 c0,0.184-0.11,0.34-0.265,0.414C49.172,55.975,49.108,56,49.037,56H8.963z M8.5,39V2.926C8.5,2.709,8.533,2,8.963,2h28.595 C37.525,2.126,37.5,2.256,37.5,2.391V13.78c-0.532-0.48-1.229-0.78-2-0.78c-0.553,0-1,0.448-1,1s0.447,1,1,1c0.552,0,1,0.449,1,1v4 c0,1.2,0.542,2.266,1.382,3c-0.84,0.734-1.382,1.8-1.382,3v4c0,0.551-0.448,1-1,1c-0.553,0-1,0.448-1,1s0.447,1,1,1 c1.654,0,3-1.346,3-3v-4c0-1.103,0.897-2,2-2c0.553,0,1-0.448,1-1s-0.447-1-1-1c-1.103,0-2-0.897-2-2v-4 c0-0.771-0.301-1.468-0.78-2h11.389c0.135,0,0.265-0.025,0.391-0.058c0,0.015,0.001,0.021,0.001,0.036V39H8.5z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.354,51.43c-0.019,0.446-0.171,0.764-0.458,0.95s-0.672,0.28-1.155,0.28c-0.191,0-0.396-0.022-0.615-0.068 s-0.429-0.098-0.629-0.157s-0.385-0.123-0.554-0.191s-0.299-0.135-0.39-0.198l-0.697,1.107c0.183,0.137,0.405,0.26,0.67,0.369 s0.54,0.207,0.827,0.294s0.565,0.15,0.834,0.191s0.504,0.062,0.704,0.062c0.401,0,0.791-0.039,1.169-0.116 c0.378-0.077,0.713-0.214,1.005-0.41s0.524-0.456,0.697-0.779s0.26-0.723,0.26-1.196v-7.848h-1.668V51.43z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M25.083,49.064c-0.314-0.228-0.654-0.422-1.019-0.581s-0.702-0.323-1.012-0.492s-0.569-0.364-0.779-0.588 s-0.314-0.518-0.314-0.882c0-0.146,0.036-0.299,0.109-0.458s0.173-0.303,0.301-0.431s0.273-0.234,0.438-0.321 s0.337-0.139,0.52-0.157c0.328-0.027,0.597-0.032,0.807-0.014s0.378,0.05,0.506,0.096s0.226,0.091,0.294,0.137 s0.13,0.082,0.185,0.109c0.009-0.009,0.036-0.055,0.082-0.137s0.101-0.185,0.164-0.308s0.132-0.255,0.205-0.396 s0.137-0.271,0.191-0.39c-0.265-0.173-0.61-0.299-1.039-0.376s-0.853-0.116-1.271-0.116c-0.41,0-0.8,0.063-1.169,0.191 s-0.692,0.313-0.971,0.554s-0.499,0.535-0.663,0.882S20.4,46.13,20.4,46.576c0,0.492,0.104,0.902,0.314,1.23 s0.474,0.613,0.793,0.854s0.661,0.451,1.025,0.629s0.704,0.355,1.019,0.533s0.576,0.376,0.786,0.595s0.314,0.483,0.314,0.793 c0,0.511-0.148,0.896-0.444,1.155s-0.723,0.39-1.278,0.39c-0.183,0-0.378-0.019-0.588-0.055s-0.419-0.084-0.629-0.144 s-0.412-0.123-0.608-0.191s-0.357-0.139-0.485-0.212l-0.287,1.176c0.155,0.137,0.34,0.253,0.554,0.349s0.439,0.171,0.677,0.226 c0.237,0.055,0.472,0.094,0.704,0.116s0.458,0.034,0.677,0.034c0.511,0,0.966-0.077,1.367-0.232s0.738-0.362,1.012-0.622 s0.485-0.561,0.636-0.902s0.226-0.695,0.226-1.06c0-0.538-0.104-0.978-0.314-1.319S25.397,49.292,25.083,49.064z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.872,45.072c-0.378-0.429-0.82-0.754-1.326-0.978s-1.06-0.335-1.661-0.335s-1.155,0.111-1.661,0.335 s-0.948,0.549-1.326,0.978s-0.675,0.964-0.889,1.606s-0.321,1.388-0.321,2.235s0.107,1.595,0.321,2.242s0.511,1.185,0.889,1.613 s0.82,0.752,1.326,0.971s1.06,0.328,1.661,0.328s1.155-0.109,1.661-0.328s0.948-0.542,1.326-0.971s0.675-0.966,0.889-1.613 s0.321-1.395,0.321-2.242s-0.107-1.593-0.321-2.235S35.25,45.501,34.872,45.072z M34.195,50.698 c-0.137,0.487-0.326,0.882-0.567,1.183s-0.515,0.518-0.82,0.649s-0.627,0.198-0.964,0.198c-0.328,0-0.641-0.07-0.937-0.212 s-0.561-0.364-0.793-0.67s-0.415-0.699-0.547-1.183s-0.203-1.066-0.212-1.75c0.009-0.702,0.082-1.294,0.219-1.777 c0.137-0.483,0.326-0.877,0.567-1.183s0.515-0.521,0.82-0.649s0.627-0.191,0.964-0.191c0.328,0,0.641,0.068,0.937,0.205 s0.561,0.36,0.793,0.67s0.415,0.704,0.547,1.183s0.203,1.06,0.212,1.743C34.405,49.616,34.332,50.211,34.195,50.698z\"\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"44.012,50.869 40.061,43.924 38.393,43.924 38.393,54 40.061,54 40.061,47.055 44.012,54 45.68,54 45.68,43.924  44.012,43.924  \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20.5,20v-4c0-0.551,0.448-1,1-1c0.553,0,1-0.448,1-1s-0.447-1-1-1c-1.654,0-3,1.346-3,3v4c0,1.103-0.897,2-2,2 c-0.553,0-1,0.448-1,1s0.447,1,1,1c1.103,0,2,0.897,2,2v4c0,1.654,1.346,3,3,3c0.553,0,1-0.448,1-1s-0.447-1-1-1 c-0.552,0-1-0.449-1-1v-4c0-1.2-0.542-2.266-1.382-3C19.958,22.266,20.5,21.2,20.5,20z\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 28.5,\n    cy: 19.5,\n    r: 1.5\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M28.5,25c-0.553,0-1,0.448-1,1v3c0,0.552,0.447,1,1,1s1-0.448,1-1v-3C29.5,25.448,29.053,25,28.5,25z\"\n  }))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", null)), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", null)), _g4 || (_g4 = /*#__PURE__*/React.createElement(\"g\", null)), _g5 || (_g5 = /*#__PURE__*/React.createElement(\"g\", null)), _g6 || (_g6 = /*#__PURE__*/React.createElement(\"g\", null)), _g7 || (_g7 = /*#__PURE__*/React.createElement(\"g\", null)), _g8 || (_g8 = /*#__PURE__*/React.createElement(\"g\", null)), _g9 || (_g9 = /*#__PURE__*/React.createElement(\"g\", null)), _g10 || (_g10 = /*#__PURE__*/React.createElement(\"g\", null)), _g11 || (_g11 = /*#__PURE__*/React.createElement(\"g\", null)), _g12 || (_g12 = /*#__PURE__*/React.createElement(\"g\", null)), _g13 || (_g13 = /*#__PURE__*/React.createElement(\"g\", null)), _g14 || (_g14 = /*#__PURE__*/React.createElement(\"g\", null)), _g15 || (_g15 = /*#__PURE__*/React.createElement(\"g\", null)), _g16 || (_g16 = /*#__PURE__*/React.createElement(\"g\", null)));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgJsonFileSvgrepoCom);\nexport default __webpack_public_path__ + \"static/media/json-file-svgrepo-com.805d27de.svg\";\nexport { ForwardRef as ReactComponent };","// get json value given path\r\nconst getValue = (json, path) => {\r\n    if (path === undefined) {\r\n        return json[\"properties\"]\r\n    }\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n        if (tempValue === undefined){\r\n            return tempValue\r\n        }\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValue;","import getValue from \"./getValue\";\r\nconst checkIfFieldIDExist = (schema, path, fieldkey) => {\r\n    let result\r\n    if (path === undefined) {\r\n        let value = schema[\"properties\"]\r\n        value.forEach(element => {\r\n            if (element[\"fieldKey\"] === fieldkey) {\r\n                return result = true;\r\n            }\r\n        });\r\n    } else {\r\n\r\n        let value = getValue(schema, path)[\"properties\"]\r\n\r\n        if (value === undefined) {\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n            let value = getValue(schema, newPath)\r\n            value.forEach(element => {\r\n                if (element[\"fieldKey\"] === fieldkey) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        } else {\r\n            value.forEach(element => {\r\n                if (element[\"fieldKey\"] === fieldkey) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    if (result) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n\r\n}\r\n\r\nexport default checkIfFieldIDExist;","import { createContext } from 'react';\r\nexport const FormContext = createContext(null);","/*\r\nFunction to add or remove \"required\" flag for a specific field\r\n*/\r\n\r\n\r\n// get json value given path\r\nconst getValue = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n}\r\n\r\nconst removeValue = (arr, value) => {\r\n    const index = arr.indexOf(value);\r\n    if (index > -1) { // only splice array when item is found\r\n        arr.splice(index, 1); // 2nd parameter means remove one item only\r\n    }\r\n    return arr\r\n}\r\n\r\nconst updateRequired = ({ selectedType, path, requiredChecked, field_key, old_field_key, convertedSchema }) => {\r\n\r\n    /*if (selectedType === \"object\") {\r\n        requiredChecked = false\r\n    }*/\r\n\r\n    const set = require(\"set-value\");\r\n\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const immediateValue = getValue(convertedSchema, newPath)\r\n    if (immediateValue !== undefined) {\r\n        // check if there is required array\r\n        if (immediateValue[\"required\"] !== undefined) {\r\n            let requiredArray = immediateValue[\"required\"]\r\n            if (requiredChecked) {\r\n                // remove old value\r\n                requiredArray = removeValue(requiredArray, old_field_key)\r\n                // add new value\r\n                requiredArray.push(field_key)\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            } else {\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_key)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_key)\r\n                    set(convertedSchema, newPath + \".required\", requiredArray)\r\n\r\n                    if (requiredArray.length === 0) {\r\n                        delete immediateValue[\"required\"]\r\n                        set(convertedSchema, newPath, immediateValue)\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_key}`]\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            }\r\n        }\r\n    } else {\r\n        // check if there is required array\r\n        if (convertedSchema[\"required\"] !== undefined) {\r\n            let requiredArray = convertedSchema[\"required\"]\r\n            if (requiredChecked) {\r\n                // remove old value\r\n                requiredArray = removeValue(requiredArray, old_field_key)\r\n                // add new value\r\n                requiredArray.push(field_key)\r\n                // finally push it into the schema\r\n                convertedSchema[\"required\"] = requiredArray\r\n            } else {\r\n                //alert(\"4\")\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_key)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_key)\r\n                    convertedSchema[\"required\"] = requiredArray\r\n                    if (requiredArray.length === 0) {\r\n                        delete convertedSchema[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_key}`]\r\n                convertedSchema[\"required\"] = requiredArray\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return convertedSchema;\r\n}\r\n\r\nexport default updateRequired;","// convert json schema properties to an iterable array\r\nconst object2array = (propert) => {\r\n    let someArray = [];\r\n    Object.keys(propert).forEach((item) => {\r\n        var tempVariable = {};\r\n        var tempVariable2;\r\n        tempVariable2 = propert[item];\r\n        tempVariable[\"fieldKey\"] = item;\r\n        Object.keys(tempVariable2).forEach((item_) => {\r\n            // make enum indexable by changing the key to \"enumerate\"\r\n            if (item_ === \"enum\") {\r\n                tempVariable[\"enumerate\"] = tempVariable2[item_];\r\n            }\r\n            if (item_ === \"default\") {\r\n                tempVariable[\"defaultValue\"] = tempVariable2[item_];\r\n            }\r\n            tempVariable[item_] = tempVariable2[item_];\r\n            if (item_ === \"properties\") {\r\n                // recursive on action to access nested properties\r\n                tempVariable[item_] = object2array(tempVariable2[item_]);\r\n            }\r\n        });\r\n        someArray.push(tempVariable);\r\n    });\r\n\r\n    return someArray;\r\n};\r\n\r\nexport default object2array;","const getFileIndex = (files, fileMetadata) => {\r\n    fileMetadata = fileMetadata.split(\";\")\r\n    // alert(fileMetadata)\r\n    const filetype = fileMetadata[0].replace(\"fileupload:\", \"\")\r\n    const filename = fileMetadata[1]\r\n    const filesize = fileMetadata[2]\r\n    // console.log(filetype, filename, filesize)\r\n    for (let i = 0; i < files.length; i++) {\r\n        if (files[i][\"name\"] === filename && files[i][\"type\"] === filetype && files[i][\"size\"].toString() === filesize) {\r\n            return i\r\n        }\r\n    }\r\n    return -1\r\n}\r\n\r\nexport default getFileIndex","// get json value in schema given the full path\r\nconst getValueInSchemaFullPath = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    if (path[0] === \"\") {\r\n        return undefined;\r\n    }\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValueInSchemaFullPath;","import React, { useContext, useEffect, useState, useCallback} from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport checkIfFieldIDExist from './utils/checkIfFieldIDExist';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport { FormGroup } from '@material-ui/core';\r\nimport updateRequired from './utils/updateRequired';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport getValue from './utils/getValue';\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport object2array from './utils/object2array';\r\nimport convertedSchemaPropertiesSort from './utils/convertedSchemaPropertiesSort';\r\nimport getFileIndex from './utils/getFileIndex';\r\nimport getValueInSchemaFullPath from './utils/getValueInSchemaFullPath';\r\n\r\nconst getAllFileMetadata = (object, arr) => {\r\n    let arrai = arr\r\n    Object.keys(object).forEach((key) => {\r\n        if (typeof object[key] === \"object\") {\r\n            getAllFileMetadata(object[key], arrai)\r\n        }\r\n        if (typeof object[key] === \"string\") {\r\n            if (object[key].includes(\"fileupload:\") && object[key].split(\";\").length === 3) {\r\n                arr.push(object[key])\r\n            }\r\n        }\r\n    })\r\n    return arrai\r\n}\r\n\r\n/*const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n})); */\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    input: {\r\n        fontSize: \"12px\",\r\n        fontFamily: \"monospace\"\r\n    }\r\n}));\r\n\r\n\r\nconst EditElement = ({ editOrAdd, field_uri, enumerated, field_enumerate, field_required, field_key, UISchema, path, pathFormData, openDialog, setOpenDialog, defaultValue, field_label }) => {\r\n\r\n    const [selectedType, setSelectedType] = useState(UISchema !== undefined ? UISchema[\"type\"] : \"string\")\r\n    const [title, setTitle] = useState(UISchema !== undefined ? UISchema[\"title\"] : \"\")\r\n    const [fieldkey, setFieldKey] = useState(UISchema !== undefined ? UISchema[\"fieldKey\"] : \"\")\r\n    const [oldFieldkey, setOldFieldkey] = useState(UISchema !== undefined ? UISchema[\"fieldKey\"] : \"\")\r\n    const [fieldUri, setFieldUri] = useState(UISchema !== undefined ? UISchema[\"$id\"] : \"\")\r\n    const [description, setDescription] = useState(UISchema !== undefined ? UISchema[\"description\"] : \"\")\r\n    const [defValue, setDefValue] = useState(defaultValue !== undefined ? defaultValue : \"\")\r\n    const { loadedFiles, handleRemoveFile, updateParent, convertedSchema, updateFormDataId, schemaSpecification, handleDataDelete, handleCheckIDexistence } = useContext(FormContext);\r\n    const [requiredChecked, setRequiredChecked] = useState(field_required === undefined ? false : field_required)\r\n    const [enumChecked, setEnumChecked] = useState(enumerated === undefined ? false : enumerated)\r\n    const [enumList, setEnumList] = useState(field_enumerate === undefined ? [] : field_enumerate);\r\n    const [arrayItemType, setArrayItemType] = useState(\"string\")\r\n    const [arrayMinMaxItem, setArrayMinMaxItem] = useState([\"None\", \"None\"])\r\n    const [numberMinMaxValue, setNumberMinMaxValue] = useState([\"None\", \"None\"])\r\n    const [charMinMaxLengthValue, setCharMinMaxLengthValue] = useState([\"None\", \"None\"])\r\n    const [charMinMaxHelperText, setCharMinMaxHelperText] = useState(\"Set the minimum and maximum length allowed for this string input.\")\r\n    const [arrayMinMaxHelperText, setArrayMinMaxHelperText] = useState(\"Set the minimum and maximum values of the items allowed for this array field.\")\r\n    const [numberMinMaxValueHelperText, setNumberMinMaxValueHelpertext] = useState(\"Set the minimum and maximum values of this field.\")\r\n    const [arrayUniqueItems, setArrayUniqueItems] = useState(UISchema !== undefined ? (UISchema[\"uniqueItems\"] !== undefined ? UISchema[\"uniqueItems\"] : false) : false)\r\n    const [subSchemaValidity, setSubSchemaValidity] = useState(false);\r\n    const [convertedSubSchema, setConvertedSubSchema] = useState({})\r\n    const [subSchemaFilename, setSubSchemaFilename] = useState(\"\")\r\n    const [activeSubSchemaButton, setActiveSubSchemaButton] = useState(\"\")\r\n    const [arrayItemDataType, setArrayItemDataType] = useState(\"\")\r\n    const [itemSchemaTFrow,setItemSchemaTFrow] = useState(false)\r\n    const [itemSchemaEdit, setItemSchemaEdit] = useState(false)\r\n    const [itemSchemaData, setItemSchemaData] = useState(\"\")\r\n\r\n    let arrayItemTypeList = [\"string\", \"number\", \"integer\", \"object\"]\r\n    if (UISchema !== undefined) {\r\n        if (UISchema[\"items\"] !== undefined) {\r\n            if (UISchema[\"items\"][\"type\"] === \"object\") {\r\n                arrayItemTypeList = [\"string\", \"number\", \"integer\", \"object\"]\r\n            }\r\n        }\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (field_uri !== undefined) {\r\n            setFieldUri(field_uri)\r\n        }\r\n        else if (UISchema[\"$id\"] !== undefined) {\r\n            setFieldUri(UISchema[\"$id\"])\r\n        }\r\n        else {\r\n            setFieldUri(\"\")\r\n        }\r\n        // for array\r\n        if (UISchema !== undefined) {\r\n            if (UISchema[\"type\"] === \"array\") {\r\n                setArrayItemDataType(UISchema[\"items\"][\"type\"])\r\n                setArrayItemType(UISchema[\"items\"][\"type\"])\r\n                setItemSchemaData(JSON.stringify(UISchema[\"items\"], null, 2))\r\n                let value = [...arrayMinMaxItem]\r\n                if (UISchema[\"minItems\"] !== undefined) {\r\n                    value[0] = UISchema[\"minItems\"]\r\n                }\r\n                if (UISchema[\"maxItems\"] !== undefined) {\r\n                    value[1] = UISchema[\"maxItems\"]\r\n                }\r\n                if (UISchema[\"items\"] === undefined) {\r\n                    UISchema[\"items\"] = { \"type\": \"string\" }\r\n                    setArrayItemDataType(UISchema[\"items\"][\"type\"])\r\n                    setItemSchemaData(JSON.stringify({ \"type\": \"string\" }, null, 2))\r\n                }\r\n                if (arrayUniqueItems) {\r\n                    UISchema[\"uniqueItems\"] = arrayUniqueItems\r\n                }\r\n                else {\r\n                    delete UISchema[\"uniqueItems\"]\r\n                }\r\n                setArrayMinMaxItem(value)\r\n            }\r\n            else {\r\n                UISchema[\"items\"] = \"None\"\r\n            }\r\n        }\r\n\r\n        // for numeric types\r\n        if (UISchema !== undefined) {\r\n            if ([\"number\", \"integer\"].includes(UISchema[\"type\"])) {\r\n                let value = [...numberMinMaxValue]\r\n                if (UISchema[\"minimum\"] !== undefined) {\r\n                    value[0] = UISchema[\"minimum\"]\r\n                }\r\n                if (UISchema[\"maximum\"] !== undefined) {\r\n                    value[1] = UISchema[\"maximum\"]\r\n                }\r\n                setNumberMinMaxValue(value)\r\n            }\r\n        }\r\n\r\n        // for string type\r\n        if (UISchema !== undefined) {\r\n            if (UISchema[\"type\"] === \"string\") {\r\n                let value = [...charMinMaxLengthValue]\r\n                if (UISchema[\"minLength\"] !== undefined) {\r\n                    value[0] = UISchema[\"minLength\"]\r\n                }\r\n                if (UISchema[\"maxLength\"] !== undefined) {\r\n                    value[1] = UISchema[\"maxLength\"]\r\n                }\r\n                setCharMinMaxLengthValue(value)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n\r\n    let tempUISchema\r\n    if (editOrAdd !== undefined && editOrAdd === \"add\") {\r\n        UISchema = {\r\n            \"type\": \"string\",\r\n            \"fieldKey\": \"\",\r\n            \"title\": \"\",\r\n            \"description\": \"\",\r\n            \"items\": \"None\"\r\n        }\r\n        tempUISchema = {\r\n            \"type\": \"string\",\r\n            \"fieldKey\": \"\",\r\n            \"title\": \"\",\r\n            \"description\": \"\",\r\n            \"items\": \"None\"\r\n        }\r\n    } else {\r\n        tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n    }\r\n\r\n    let notImplemented = false;\r\n    if (UISchema !== undefined) {\r\n        if (![\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\", \"fileupload (string)\"].includes(UISchema[\"type\"])) {\r\n            notImplemented = true;\r\n        }\r\n    }\r\n\r\n\r\n    let datatypes = [\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\", \"fileupload (string)\"]\r\n\r\n\r\n    const handleOnChangeListField = (event) => {\r\n        setEnumList(event.target.value);\r\n    }\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        // check if field id/uri already exists or not\r\n        if (fieldUri !== tempUISchema[\"$id\"] && fieldUri !== tempUISchema[\"id\"]){\r\n            //alert(fieldUri+\",\"+tempUISchema[\"$id\"])\r\n            if (handleCheckIDexistence(fieldUri)) {\r\n                alert(\"A field element with the same Field ID/URI already exists. Either change the ID or remove it.\")\r\n                return\r\n            }\r\n        }\r\n\r\n        if (itemSchemaEdit) {\r\n            alert(\"You must save the array item schema first.\")\r\n            return\r\n        }\r\n        // do this if add\r\n        if (editOrAdd === \"add\") {\r\n            // update default value\r\n            let defValueState = defValue\r\n            if (selectedType === 'number' && defValueState !== \"\" && defaultValue !== undefined) {\r\n                defValueState = parseFloat(defValueState)\r\n            }\r\n            if (selectedType === 'integer' && defValueState !== \"\" && defaultValue !== undefined) {\r\n                defValueState = parseInt(defValueState)\r\n            }\r\n            if (defValueState === undefined & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (defValueState.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (selectedType === \"boolean\" & defValueState.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (selectedType === \"boolean\" & defValueState.toString().replace(/\\s+/g, '') !== \"\") {\r\n                tempUISchema[\"defaultValue\"] = (defValueState === \"true\" ? true : false)\r\n            } else if (defValueState.toString().replace(/\\s+/g, '') === \"\") {\r\n                delete tempUISchema[\"defaultValue\"]\r\n            }\r\n            else {\r\n                //console.log(\"default value:\", defValue)\r\n                //console.log(\"type default value:\", typeof defValue)\r\n                tempUISchema[\"defaultValue\"] = defValueState\r\n            };\r\n\r\n            // check if fieldkey already exist\r\n            if (checkIfFieldIDExist(convertedSchema, path, fieldkey)) {\r\n                alert(\"Field Keyword already exists!\")\r\n                return\r\n            }\r\n\r\n            tempUISchema[\"fieldKey\"] = fieldkey;\r\n            if (fieldUri !== undefined) {\r\n                if (fieldUri.toString().replace(/\\s+/g, '') !== \"\") {\r\n                    tempUISchema[\"$id\"] = fieldUri\r\n                }\r\n            }\r\n            tempUISchema[\"type\"] = selectedType;\r\n            if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n            if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n            if (fieldkey === undefined) {\r\n                alert(\"Field Keyword must be defined!\")\r\n                return\r\n            }\r\n\r\n            if (typeof (fieldkey) === \"string\" & fieldkey.replace(/\\s+/g, '') === \"\") {\r\n                alert(\"Field Keyword must be defined!\")\r\n                return\r\n            }\r\n            if (tempUISchema[\"type\"] === \"object\" & subSchemaValidity) {\r\n                // delete json data for this path first\r\n                //handleDataDelete(pathFormData)\r\n\r\n                tempUISchema[\"properties\"] = convertedSubSchema[\"properties\"]\r\n                // check required\r\n                try {\r\n                    if (convertedSubSchema[\"required\"] !== undefined) {\r\n                        tempUISchema[\"required\"] = convertedSubSchema[\"required\"]\r\n                    } else {\r\n                        delete tempUISchema[\"required\"]\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n            if (tempUISchema[\"type\"] === \"object\" & !subSchemaValidity) {\r\n                // delete json data for this path first\r\n                //handleDataDelete(pathFormData)\r\n\r\n                tempUISchema[\"properties\"] = []\r\n                // check required\r\n                try {\r\n                    if (convertedSubSchema[\"required\"] !== undefined) {\r\n                        tempUISchema[\"required\"] = convertedSubSchema[\"required\"]\r\n                    } else {\r\n                        delete tempUISchema[\"required\"]\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n            /*\r\n            if (tempUISchema[\"type\"] === \"object\") {\r\n                if (subSchemaValidity) {\r\n                    tempUISchema[\"properties\"] = convertedSubSchema[\"properties\"]\r\n                } else {\r\n                    tempUISchema[\"properties\"] = []\r\n                }\r\n\r\n                // check required\r\n                try {\r\n                    tempUISchema[\"required\"] = convertedSubSchema[\"required\"]\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }*/\r\n            // more validation keywords for array\r\n            if (tempUISchema[\"type\"] === \"array\") {\r\n                // remove value\r\n                delete tempUISchema[\"value\"]\r\n\r\n                if (arrayItemType === \"string\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData) //{ \"type\": \"string\" }\r\n                }\r\n                if (arrayItemType === \"integer\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData) //{ \"type\": \"integer\" }\r\n                }\r\n                if (arrayItemType === \"number\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData) //{ \"type\": \"number\" }\r\n                }\r\n                if (arrayItemType === \"object\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData)\r\n                }\r\n                if (arrayMinMaxItem[0] !== \"None\") {\r\n                    tempUISchema[\"minItems\"] = arrayMinMaxItem[0]\r\n                } else {\r\n                    delete tempUISchema[\"minItems\"]\r\n                }\r\n                if (arrayMinMaxItem[1] !== \"None\") {\r\n                    tempUISchema[\"maxItems\"] = arrayMinMaxItem[1]\r\n                } else {\r\n                    delete delete tempUISchema[\"maxItems\"]\r\n                }\r\n\r\n                if (arrayUniqueItems) {\r\n                    tempUISchema[\"uniqueItems\"] = arrayUniqueItems\r\n                }\r\n                else {\r\n                    delete tempUISchema[\"uniqueItems\"]\r\n                }\r\n\r\n                delete tempUISchema[\"required\"]\r\n                if (UISchema[\"type\"] === \"object\") {\r\n                    delete tempUISchema[\"properties\"]\r\n                }\r\n            }\r\n            // more validation keywords for numeric types\r\n            if ([\"number\", \"integer\"].includes(tempUISchema[\"type\"])) {\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n                if (numberMinMaxValue[0] !== \"None\") {\r\n                    tempUISchema[\"minimum\"] = numberMinMaxValue[0]\r\n                } else {\r\n                    delete tempUISchema[\"minimum\"]\r\n                }\r\n                if (numberMinMaxValue[1] !== \"None\") {\r\n                    tempUISchema[\"maximum\"] = numberMinMaxValue[1]\r\n                } else {\r\n                    delete tempUISchema[\"maximum\"]\r\n                }\r\n            }\r\n            // more validation keywords for string\r\n            if (tempUISchema[\"type\"] === \"string\") {\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n                if (charMinMaxLengthValue[0] !== \"None\") {\r\n                    tempUISchema[\"minLength\"] = charMinMaxLengthValue[0]\r\n                } else {\r\n                    delete tempUISchema[\"minLength\"]\r\n                }\r\n                if (charMinMaxLengthValue[1] !== \"None\") {\r\n                    tempUISchema[\"maxLength\"] = charMinMaxLengthValue[1]\r\n                } else {\r\n                    delete tempUISchema[\"maxLength\"]\r\n                }\r\n            }\r\n\r\n            if (tempUISchema[\"type\"] !== \"string\") {\r\n                setEnumChecked(false);\r\n            }\r\n\r\n            // get rid of array-specific keywords if selectedType is not array\r\n            if (selectedType !== \"array\" & tempUISchema[\"items\"] !== undefined) {\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n            }\r\n\r\n            if (selectedType === \"fileupload (string)\" && schemaSpecification === \"http://json-schema.org/draft-04/schema#\") {\r\n                delete tempUISchema[\"contentEncoding\"]\r\n            }\r\n\r\n            // for fileupload\r\n            if (selectedType === \"fileupload (string)\") {\r\n                // set type to string\r\n                tempUISchema[\"type\"] = \"string\"\r\n                // set the encoding type\r\n                tempUISchema[\"contentEncoding\"] = \"base64\"\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"maxLength\"]\r\n                delete tempUISchema[\"minLength\"]\r\n                delete tempUISchema[\"enumerate\"]\r\n                delete tempUISchema[\"enum\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n\r\n                // set tempUISchema.value to emptystring\r\n                tempUISchema[\"value\"] = \"\"\r\n            }\r\n\r\n            if (path !== undefined) {\r\n                const set = require(\"set-value\");\r\n\r\n                let properties = getValue(convertedSchema, path)[\"properties\"]\r\n                properties.push(tempUISchema)\r\n                set(convertedSchema, path + \".properties\", properties)\r\n\r\n                // create a new path to the new element\r\n                path = path + \".properties.\" + (properties.length - 1).toString()\r\n                // update the required value\r\n                let old_field_key = oldFieldkey\r\n                let field_key = fieldkey\r\n                let newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_key, old_field_key, convertedSchema })\r\n                // update enum\r\n                if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                    let newList = enumList\r\n                    if (Array.isArray(newList)) {\r\n                        set(newConvertedSchema, path + \".enumerate\", newList)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                    }\r\n\r\n                }\r\n\r\n                // delete the file if it's not fileupload and if the file exists\r\n                if (UISchema[\"type\"] === \"fileupload (string)\") {\r\n                    if (UISchema[\"value\"] !== undefined) {\r\n                        if (typeof UISchema[\"value\"] === \"string\") {\r\n                            if (UISchema[\"value\"].includes(\"fileupload:\") && UISchema[\"value\"].split(\";\").length === 3) {\r\n                                let fileIndex = getFileIndex(loadedFiles, UISchema[\"value\"])\r\n                                handleRemoveFile(fileIndex)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // delete all files if the new type is not object\r\n                // remove the file in loadedFiles\r\n                if (UISchema[\"type\"] === \"object\" && tempUISchema[\"type\"] !== \"object\") {\r\n                    let cSchema = JSON.parse(JSON.stringify(convertedSchema))\r\n                    const set = require(\"set-value\");\r\n                    set(cSchema, path + \".properties\", UISchema[\"properties\"])\r\n                    let metmet = getValueInSchemaFullPath(cSchema, path + \".properties\")\r\n                    const fileMetadata = getAllFileMetadata(metmet, [])\r\n                    if (fileMetadata.length > 0) {\r\n                        for (let i = 0; i < fileMetadata.length; i++) {\r\n                            const fileIndex = getFileIndex(loadedFiles, fileMetadata[i])\r\n                            handleRemoveFile(fileIndex)\r\n                        }\r\n                    }\r\n                }\r\n                // delete all files if the new type is not array\r\n                if (UISchema[\"type\"] === \"array\" && tempUISchema[\"type\"] !== \"array\") {\r\n                    // remove the file in loadedFiles\r\n                    const fileMetadata = getValue(convertedSchema, path + `.value`)\r\n                    console.log(\"fileMetadata:\", fileMetadata)\r\n                    if (fileMetadata !== undefined) {\r\n                        let keywords = []\r\n                        if (Array.isArray(fileMetadata)) {\r\n                            if (fileMetadata.length > 0) {\r\n                                for (let i = 0; i < fileMetadata.length; i++) {\r\n                                    if (typeof fileMetadata[i] === \"object\") {\r\n                                        Object.keys(fileMetadata[i]).forEach((key) => {\r\n                                            if (typeof fileMetadata[i][key] === \"string\") {\r\n                                                if (fileMetadata[i][key].includes(\"fileupload:\") && fileMetadata[i][key].split(\";\").length === 3) {\r\n                                                    keywords.push(fileMetadata[i][key])\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (keywords.length > 0) {\r\n                            for (let i = 0; i < keywords.length; i++) {\r\n                                const fileIndex = getFileIndex(loadedFiles, keywords[i])\r\n                                handleRemoveFile(fileIndex)\r\n                            }\r\n                        }\r\n                    }\r\n                    // remove the value in general\r\n                    let temporary = getValue(convertedSchema, path)\r\n                    delete temporary[\"value\"]\r\n                    set(newConvertedSchema, path, temporary)\r\n                }\r\n                // update main component\r\n                updateParent(newConvertedSchema)\r\n                setOpenDialog(false)\r\n            } else {\r\n                const set = require(\"set-value\");\r\n                let properties = convertedSchema[\"properties\"]\r\n                properties.push(tempUISchema)\r\n                convertedSchema[\"properties\"] = properties\r\n\r\n                // create a new path to the new element\r\n                path = \"properties.\" + (properties.length - 1).toString()\r\n                // update the required value\r\n                let old_field_key = oldFieldkey\r\n                let field_key = fieldkey\r\n                let newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_key, old_field_key, convertedSchema })\r\n                // update enum\r\n                if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                    let newList = enumList\r\n                    if (Array.isArray(newList)) {\r\n                        set(newConvertedSchema, path + \".enumerate\", newList)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                // delete the file if it's not fileupload and if the file exists\r\n                if (UISchema[\"type\"] === \"fileupload (string)\") {\r\n                    if (UISchema[\"value\"] !== undefined) {\r\n                        if (typeof UISchema[\"value\"] === \"string\") {\r\n                            if (UISchema[\"value\"].includes(\"fileupload:\") && UISchema[\"value\"].split(\";\").length === 3) {\r\n                                let fileIndex = getFileIndex(loadedFiles, UISchema[\"value\"])\r\n                                handleRemoveFile(fileIndex)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // delete all files if the new type is not object\r\n                // remove the file in loadedFiles\r\n                if (UISchema[\"type\"] === \"object\" && tempUISchema[\"type\"] !== \"object\") {\r\n                    let cSchema = JSON.parse(JSON.stringify(convertedSchema))\r\n                    const set = require(\"set-value\");\r\n                    set(cSchema, path + \".properties\", UISchema[\"properties\"])\r\n                    let metmet = getValueInSchemaFullPath(cSchema, path + \".properties\")\r\n                    const fileMetadata = getAllFileMetadata(metmet, [])\r\n                    if (fileMetadata.length > 0) {\r\n                        for (let i = 0; i < fileMetadata.length; i++) {\r\n                            const fileIndex = getFileIndex(loadedFiles, fileMetadata[i])\r\n                            handleRemoveFile(fileIndex)\r\n                        }\r\n                    }\r\n                }\r\n                // delete all files if the new type is not array\r\n                if (UISchema[\"type\"] === \"array\" && tempUISchema[\"type\"] !== \"array\") {\r\n                    // remove the file in loadedFiles\r\n                    const fileMetadata = getValue(convertedSchema, path + `.value`)\r\n                    console.log(\"fileMetadata:\", fileMetadata)\r\n                    if (fileMetadata !== undefined) {\r\n                        let keywords = []\r\n                        if (Array.isArray(fileMetadata)) {\r\n                            if (fileMetadata.length > 0) {\r\n                                for (let i = 0; i < fileMetadata.length; i++) {\r\n                                    if (typeof fileMetadata[i] === \"object\") {\r\n                                        Object.keys(fileMetadata[i]).forEach((key) => {\r\n                                            if (typeof fileMetadata[i][key] === \"string\") {\r\n                                                if (fileMetadata[i][key].includes(\"fileupload:\") && fileMetadata[i][key].split(\";\").length === 3) {\r\n                                                    keywords.push(fileMetadata[i][key])\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (keywords.length > 0) {\r\n                            for (let i = 0; i < keywords.length; i++) {\r\n                                const fileIndex = getFileIndex(loadedFiles, keywords[i])\r\n                                handleRemoveFile(fileIndex)\r\n                            }\r\n                        }\r\n                    }\r\n                    // remove the value in general\r\n                    let temporary = getValue(convertedSchema, path)\r\n                    delete temporary[\"value\"]\r\n                    set(newConvertedSchema, path, temporary)\r\n                }\r\n                // update main component\r\n                updateParent(newConvertedSchema)\r\n                setOpenDialog(false)\r\n            }\r\n        }\r\n        else { // and do this if edit\r\n            // update default value\r\n            let defValueState = defValue\r\n            if (selectedType === 'number' && defValueState !== \"\" && defaultValue !== undefined) {\r\n                defValueState = parseFloat(defValueState)\r\n            }\r\n            if (selectedType === 'integer' && defValueState !== \"\" && defaultValue !== undefined) {\r\n                defValueState = parseInt(defValueState)\r\n            }\r\n            if (defValueState === undefined & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (defValueState.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (selectedType === \"boolean\" & defValueState.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n                // do nothing\r\n            } else if (selectedType === \"boolean\" & defValueState.toString().replace(/\\s+/g, '') !== \"\") {\r\n                tempUISchema[\"defaultValue\"] = (defValueState === \"true\" ? true : false)\r\n            } else if (defValueState.toString().replace(/\\s+/g, '') === \"\") {\r\n                delete tempUISchema[\"defaultValue\"]\r\n            }\r\n            else {\r\n                //console.log(\"default value:\", defValue)\r\n                //console.log(\"type default value:\", typeof defValue)\r\n                tempUISchema[\"defaultValue\"] = defValueState\r\n            };\r\n\r\n            // check if fieldkey already exist\r\n            let existed = checkIfFieldIDExist(convertedSchema, path, fieldkey)\r\n            if (UISchema[\"fieldKey\"] !== fieldkey) {\r\n                if (existed) {\r\n                    alert(\"Field Keyword already exists!\")\r\n                    return\r\n                }\r\n            }\r\n\r\n            if (fieldkey === undefined | fieldkey.replace(/\\s+/g, '') === \"\") {\r\n                alert(\"Field Keyword must be defined!\")\r\n                return\r\n            }\r\n\r\n            tempUISchema[\"fieldKey\"] = fieldkey;\r\n            if (fieldUri !== undefined) {\r\n                if (fieldUri.toString().replace(/\\s+/g, '') !== \"\") {\r\n                    tempUISchema[\"$id\"] = fieldUri\r\n                }\r\n            }\r\n            tempUISchema[\"type\"] = selectedType;\r\n            if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n            if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n            if (tempUISchema[\"type\"] === \"object\" & tempUISchema[\"properties\"] === undefined) {\r\n                // delete json data for this path first\r\n                //handleDataDelete(pathFormData)\r\n                tempUISchema[\"properties\"] = []\r\n            }\r\n            if (tempUISchema[\"type\"] === \"object\" & subSchemaValidity) {\r\n                // delete json data for this path first\r\n                //handleDataDelete(pathFormData)\r\n                tempUISchema[\"properties\"] = convertedSubSchema[\"properties\"]\r\n                // check required\r\n                try {\r\n                    if (convertedSubSchema[\"required\"] !== undefined) {\r\n                        tempUISchema[\"required\"] = convertedSubSchema[\"required\"]\r\n                    } else {\r\n                        delete tempUISchema[\"required\"]\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n\r\n            // more validation keywords for array\r\n            if (tempUISchema[\"type\"] === \"array\") {\r\n                // remove value\r\n                delete tempUISchema[\"value\"]\r\n\r\n                if (arrayItemType === \"string\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData) //{ \"type\": \"string\" }\r\n                }\r\n                if (arrayItemType === \"integer\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData) //{ \"type\": \"integer\" }\r\n                }\r\n                if (arrayItemType === \"number\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData) //{ \"type\": \"number\" }\r\n                }\r\n                if (arrayItemType === \"object\") {\r\n                    tempUISchema[\"items\"] = JSON.parse(itemSchemaData)\r\n                }\r\n                if (arrayMinMaxItem[0] !== \"None\") {\r\n                    tempUISchema[\"minItems\"] = arrayMinMaxItem[0]\r\n                } else {\r\n                    delete tempUISchema[\"minItems\"]\r\n                }\r\n                if (arrayMinMaxItem[1] !== \"None\") {\r\n                    tempUISchema[\"maxItems\"] = arrayMinMaxItem[1]\r\n                } else {\r\n                    delete delete tempUISchema[\"maxItems\"]\r\n                }\r\n\r\n                if (arrayUniqueItems) {\r\n                    tempUISchema[\"uniqueItems\"] = arrayUniqueItems\r\n                }\r\n                else {\r\n                    delete tempUISchema[\"uniqueItems\"]\r\n                }\r\n\r\n                delete tempUISchema[\"required\"]\r\n                if (UISchema[\"type\"] === \"object\") {\r\n                    delete tempUISchema[\"properties\"]\r\n                }\r\n            }\r\n            // more validation keywords for numeric types\r\n            if ([\"number\", \"integer\"].includes(tempUISchema[\"type\"])) {\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n                if (numberMinMaxValue[0] !== \"None\") {\r\n                    tempUISchema[\"minimum\"] = numberMinMaxValue[0]\r\n                } else {\r\n                    delete tempUISchema[\"minimum\"]\r\n                }\r\n                if (numberMinMaxValue[1] !== \"None\") {\r\n                    tempUISchema[\"maximum\"] = numberMinMaxValue[1]\r\n                } else {\r\n                    delete delete tempUISchema[\"maximum\"]\r\n                }\r\n            }\r\n            // more validation keywords for string\r\n            if (tempUISchema[\"type\"] === \"string\") {\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n                if (charMinMaxLengthValue[0] !== \"None\") {\r\n                    tempUISchema[\"minLength\"] = charMinMaxLengthValue[0]\r\n                } else {\r\n                    delete tempUISchema[\"minLength\"]\r\n                }\r\n                if (charMinMaxLengthValue[1] !== \"None\") {\r\n                    tempUISchema[\"maxLength\"] = charMinMaxLengthValue[1]\r\n                } else {\r\n                    delete tempUISchema[\"maxLength\"]\r\n                }\r\n            }\r\n\r\n\r\n            if (![\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"])) {\r\n                setEnumChecked(false);\r\n            }\r\n\r\n            // get rid of array-specific keywords if selectedType is not array\r\n            if (selectedType !== \"array\" & tempUISchema[\"items\"] !== undefined) {\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n            }\r\n\r\n            // for fileupload\r\n            if (selectedType === \"fileupload (string)\") {\r\n                // set type to string\r\n                tempUISchema[\"type\"] = \"string\"\r\n                // set the encoding type\r\n                tempUISchema[\"contentEncoding\"] = \"base64\"\r\n                // delete all unrelated keywords\r\n                delete tempUISchema[\"items\"]\r\n                delete tempUISchema[\"minItems\"]\r\n                delete tempUISchema[\"maxItems\"]\r\n                delete tempUISchema[\"uniqueItems\"]\r\n                delete tempUISchema[\"maxLength\"]\r\n                delete tempUISchema[\"minLength\"]\r\n                delete tempUISchema[\"enumerate\"]\r\n                delete tempUISchema[\"enum\"]\r\n                delete tempUISchema[\"properties\"]\r\n                delete tempUISchema[\"maximum\"]\r\n                delete tempUISchema[\"minimum\"]\r\n\r\n                // set tempUISchema.value to emptystring\r\n                tempUISchema[\"value\"] = \"\"\r\n            }\r\n\r\n            const set = require(\"set-value\");\r\n            set(convertedSchema, path, tempUISchema)\r\n            // update the required value\r\n            let old_field_key = oldFieldkey\r\n            let field_key = fieldkey\r\n            let newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_key, old_field_key, convertedSchema })\r\n            //console.log(\"path:\", path)\r\n            console.log(\"stuff:\", newConvertedSchema)\r\n            // update enum\r\n            if ([\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"]) & enumChecked) {\r\n                let newList = enumList\r\n\r\n                // use if else statements instead of switch case statements for this case\r\n                if (tempUISchema[\"type\"] === \"string\") {\r\n                    if (Array.isArray(newList)) {\r\n                        set(newConvertedSchema, path + \".enumerate\", newList)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return item.toString();\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                        //console.log(\"stuff:\", newConvertedSchema)\r\n                    }\r\n                } else if (tempUISchema[\"type\"] === \"number\") {\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    }\r\n                } else if (tempUISchema[\"type\"] === \"integer\") {\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    }\r\n                }\r\n            }\r\n\r\n            //let sorted = convertedSchemaPropertiesSort(JSON.parse(JSON.stringify(newConvertedSchema[\"properties\"])))\r\n            //console.log(sorted)\r\n            //newConvertedSchema[\"properties\"] = sorted\r\n\r\n            // delete the file if it's not fileupload and if the file exists\r\n            if (UISchema[\"type\"] === \"fileupload (string)\") {\r\n                if (UISchema[\"value\"] !== undefined) {\r\n                    if (typeof UISchema[\"value\"] === \"string\") {\r\n                        if (UISchema[\"value\"].includes(\"fileupload:\") && UISchema[\"value\"].split(\";\").length === 3) {\r\n                            let fileIndex = getFileIndex(loadedFiles, UISchema[\"value\"])\r\n                            handleRemoveFile(fileIndex)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // delete all files if the new type is not object\r\n            // remove the file in loadedFiles\r\n            if (UISchema[\"type\"] === \"object\" && tempUISchema[\"type\"] !== \"object\") {\r\n                let cSchema = JSON.parse(JSON.stringify(convertedSchema))\r\n                const set = require(\"set-value\");\r\n                set(cSchema, path + \".properties\", UISchema[\"properties\"])\r\n                let metmet = getValueInSchemaFullPath(cSchema, path + \".properties\")\r\n                const fileMetadata = getAllFileMetadata(metmet, [])\r\n                if (fileMetadata.length > 0) {\r\n                    for (let i = 0; i < fileMetadata.length; i++) {\r\n                        const fileIndex = getFileIndex(loadedFiles, fileMetadata[i])\r\n                        handleRemoveFile(fileIndex)\r\n                    }\r\n                }\r\n            }\r\n            // delete all files if the new type is not array\r\n            if (UISchema[\"type\"] === \"array\" && tempUISchema[\"type\"] !== \"array\") {\r\n                // remove the file in loadedFiles\r\n                const fileMetadata = getValue(convertedSchema, path + `.value`)\r\n                console.log(\"fileMetadata:\", fileMetadata)\r\n                if (fileMetadata !== undefined) {\r\n                    let keywords = []\r\n                    if (Array.isArray(fileMetadata)) {\r\n                        if (fileMetadata.length > 0) {\r\n                            for (let i = 0; i < fileMetadata.length; i++) {\r\n                                if (typeof fileMetadata[i] === \"object\") {\r\n                                    Object.keys(fileMetadata[i]).forEach((key) => {\r\n                                        if (typeof fileMetadata[i][key] === \"string\") {\r\n                                            if (fileMetadata[i][key].includes(\"fileupload:\") && fileMetadata[i][key].split(\";\").length === 3) {\r\n                                                keywords.push(fileMetadata[i][key])\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (keywords.length > 0) {\r\n                        for (let i = 0; i < keywords.length; i++) {\r\n                            const fileIndex = getFileIndex(loadedFiles, keywords[i])\r\n                            handleRemoveFile(fileIndex)\r\n                        }\r\n                    }\r\n                }\r\n                // remove the value in general\r\n                let temporary =  getValue(convertedSchema, path)\r\n                delete temporary[\"value\"]\r\n                set(newConvertedSchema, path, temporary)\r\n            }\r\n            // update main component\r\n            updateParent(newConvertedSchema)\r\n            setOpenDialog(false)\r\n\r\n            //* update form data if fieldkey change\r\n            // update pathFormData with new fieldkey\r\n            updateFormDataId(field_key, fieldkey, pathFormData, defaultValue)\r\n        }\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n        if (itemSchemaEdit && keyword === \"type\") {\r\n            alert(\"You must save the array item schema edit first.\")\r\n            return\r\n        } else {\r\n        switch (keyword) {\r\n            case 'type':\r\n                // change default value to empty string\r\n                setDefValue(\"\")\r\n                // special treatment for array\r\n                if (event.target.value === \"array\") {\r\n                    if (UISchema[\"type\"] !== \"array\") {\r\n                        setItemSchemaData(JSON.stringify({ \"type\": \"string\" }, null, 2))\r\n                    }\r\n                }\r\n                return setSelectedType(event.target.value)\r\n            case 'title':\r\n                return setTitle(event.target.value)\r\n            case 'description':\r\n                return setDescription(event.target.value)\r\n            case 'fieldKey':\r\n                return setFieldKey(event.target.value.replace(/ /g, \"_\"))\r\n            case 'defaultValue':\r\n                let newValue = event.target.value\r\n                if (selectedType === \"number\") {\r\n                    if (event.target.value.at(-1) === '.') {\r\n                        newValue = newValue.replace(/ /g, '')\r\n                    } else {\r\n                        newValue = newValue.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n                        newValue = newValue.replace(/ /g, '')\r\n                        if (newValue.toString().length - event.target.value.length !== 0) {\r\n                            alert(\"Invalid input type. This field only accepts input of a number type.\")\r\n                            newValue = parseFloat(newValue)\r\n                        }\r\n                        newValue = parseFloat(newValue)\r\n                        if (!isFinite(newValue)){\r\n                            newValue = \"\"\r\n                        }\r\n                    }\r\n                }\r\n                if (selectedType === \"integer\") {\r\n                    newValue = newValue.replace(/(?!^-)[^0-9]/g, \"\")\r\n                    newValue = newValue.replace(/ /g, '')\r\n                    if (newValue.toString().length - event.target.value.length !== 0) {\r\n                        alert(\"Invalid input type. This field only accepts input of an integer type.\")\r\n                        newValue = parseInt(newValue)\r\n                    }\r\n                    newValue = parseInt(newValue)\r\n                    if (!isFinite(newValue)) {\r\n                        newValue = \"\"\r\n                    }\r\n                }\r\n                console.log(newValue)\r\n                return setDefValue(newValue)\r\n            case '$id':\r\n                //handleCheckIDexistence(event.target.value)\r\n                return setFieldUri(event.target.value)\r\n            case 'id':\r\n                //handleCheckIDexistence(event.target.value)\r\n                return setFieldUri(event.target.value)\r\n            case 'itemType':\r\n                return setArrayItemType(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n        }\r\n    }\r\n\r\n\r\n    // handleChange MinMax array item\r\n    const handleMinMaxArrayItem = (event, field) => {\r\n        let value = [...arrayMinMaxItem]\r\n        switch (field) {\r\n            case 'max':\r\n                value[1] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                value[1] = (value[1] === 0 ? \"None\" : value[1])\r\n                //console.log(value)\r\n                return setArrayMinMaxItem(value);\r\n            case 'min':\r\n                value[0] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                return setArrayMinMaxItem(value);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    const handleMinMaxArrayItemOnBlur = (event, keyword) => {\r\n        let value = [...arrayMinMaxItem]\r\n\r\n        // early exit\r\n        if (value[0] === \"None\" && value[1] === \"None\") {\r\n            console.log(\"Doing nothing because the inputs have not changed.\")\r\n            return\r\n        }\r\n        switch (keyword) {\r\n            case 'min':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setArrayMinMaxHelperText(<div style={{ color: \"#f44336\" }}>minItems value cannot be greater or equal than maxItems value. minItems value was changed to 'None'.</div>)\r\n                    value[0] = \"None\"\r\n                    return setArrayMinMaxItem(value);\r\n                } else {\r\n                    setArrayMinMaxHelperText(\"Set the minimum and maximum values of the items allowed for this array field.\")\r\n                    return setArrayMinMaxItem(value);\r\n                }\r\n            case 'max':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setArrayMinMaxHelperText(<div style={{ color: \"#f44336\" }}>minItems value cannot be greater or equal than maxItems value. maxItems value was changed to 'None'.</div>)\r\n                    value[1] = \"None\"\r\n                    return setArrayMinMaxItem(value);\r\n                } else {\r\n                    setArrayMinMaxHelperText(\"Set the minimum and maximum values of the items allowed for this array field.\")\r\n                    return setArrayMinMaxItem(value);\r\n                }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // handleChange MinMax array item\r\n    const handleMinMaxValue = (event, minMax) => {\r\n        let value = [...numberMinMaxValue]\r\n        switch (minMax) {\r\n            case 'max-integer':\r\n                if (event.target.value.replace(\"None\", \"\") === \"-\") {\r\n                    console.log(event.target.value)\r\n                    value[1] = event.target.value.replace(\"None\", \"\")\r\n                    return setNumberMinMaxValue(value)\r\n                } else {\r\n                    value[1] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            case 'min-integer':\r\n                if (event.target.value.replace(\"None\", \"\") === \"-\") {\r\n                    console.log(event.target.value)\r\n                    value[0] = event.target.value.replace(\"None\", \"\")\r\n                    return setNumberMinMaxValue(value)\r\n                } else {\r\n                    value[0] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            // for now number is the same as integer\r\n            case 'max-number':\r\n                if (event.target.value.replace(\"None\", \"\") === \"-\") {\r\n                    console.log(event.target.value)\r\n                    value[1] = event.target.value.replace(\"None\", \"\")\r\n                    return setNumberMinMaxValue(value)\r\n                } else {\r\n                    value[1] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            case 'min-number':\r\n                if (event.target.value.replace(\"None\", \"\") === \"-\") {\r\n                    console.log(event.target.value)\r\n                    value[0] = event.target.value.replace(\"None\", \"\")\r\n                    return setNumberMinMaxValue(value)\r\n                } else {\r\n                    value[0] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    const handleMinMaxValueOnBlur = (event, minMax) => {\r\n        let value = [...numberMinMaxValue]\r\n\r\n        // early exit\r\n        if (value[0] === \"None\" && value[1] === \"None\") {\r\n            console.log(\"Doing nothing because the inputs have not changed.\")\r\n            return\r\n        }\r\n\r\n        switch (minMax) {\r\n            case 'min-integer':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setNumberMinMaxValueHelpertext(<div style={{ color: \"#f44336\" }}>Min. value cannot be greater or equal than max. value. Min. value was changed to 'None'.</div>)\r\n                    value[0] = \"None\"\r\n                    return setNumberMinMaxValue(value);\r\n                } else {\r\n                    setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            case 'min-number':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setNumberMinMaxValueHelpertext(<div style={{ color: \"#f44336\" }}>Min. value cannot be greater or equal than max. value. Min. value was changed to 'None'.</div>)\r\n                    value[0] = \"None\"\r\n                    return setNumberMinMaxValue(value);\r\n                } else if (value.includes(\"None\")) {\r\n                    return setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                }\r\n                else {\r\n                    setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            case 'max-integer':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setNumberMinMaxValueHelpertext(<div style={{ color: \"#f44336\" }}>Min. value cannot be greater or equal than max. value.  Max. value was changed to 'None'.</div>)\r\n                    value[1] = \"None\"\r\n                    return setNumberMinMaxValue(value);\r\n                } else {\r\n                    setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            case 'max-number':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setNumberMinMaxValueHelpertext(<div style={{ color: \"#f44336\" }}>Min. value cannot be greater or equal than max. value. Max. value was changed to 'None'.</div>)\r\n                    value[1] = \"None\"\r\n                    return setNumberMinMaxValue(value);\r\n                } else if (value.includes(\"None\")) {\r\n                    return setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                }\r\n                else {\r\n                    setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")\r\n                    return setNumberMinMaxValue(value);\r\n                }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // handleChange MinMax length for string\r\n    const handleMinMaxCharLength = (event, field) => {\r\n        let value = [...charMinMaxLengthValue]\r\n        switch (field) {\r\n            case 'maxLength':\r\n                value[1] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                value[1] = (value[1] === 0 ? \"None\" : value[1])\r\n                //console.log(value)\r\n                return setCharMinMaxLengthValue(value);\r\n            case 'minLength':\r\n                value[0] = (Number.isNaN(parseInt(event.target.value.replace(\"None\", \"\"))) ? \"None\" : parseInt(event.target.value.replace(\"None\", \"\")))\r\n                return setCharMinMaxLengthValue(value);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    const handleMinMaxCharLengthOnBlur = (event, keyword) => {\r\n        let value = [...charMinMaxLengthValue]\r\n\r\n        // early exit\r\n        if (value[0] === \"None\" && value[1] === \"None\") {\r\n            console.log(\"Doing nothing because the inputs have not changed.\")\r\n            return\r\n        }\r\n\r\n        switch (keyword) {\r\n            case 'minLength':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setCharMinMaxHelperText(<div style={{ color: \"#f44336\" }}>minLength value cannot be greater or equal than maxLength value.</div>)\r\n                    value[0] = \"None\"\r\n                    return setCharMinMaxLengthValue(value);\r\n                } else {\r\n                    setCharMinMaxHelperText(\"Set the minimum and maximum length allowed for this string input.\")\r\n                    return setCharMinMaxLengthValue(value);\r\n                }\r\n            case 'maxLength':\r\n                if (value[0] >= value[1]) {\r\n                    console.log(\"min value cannot be greater than max value\")\r\n                    setCharMinMaxHelperText(<div style={{ color: \"#f44336\" }}>minLength value cannot be greater or equal than maxLength value.</div>)\r\n                    value[1] = \"None\"\r\n                    return setCharMinMaxLengthValue(value);\r\n                } else {\r\n                    setCharMinMaxHelperText(\"Set the minimum and maximum length allowed for this string input.\")\r\n                    return setCharMinMaxLengthValue(value);\r\n                }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        if (editOrAdd !== undefined && editOrAdd === \"add\") {\r\n            setOpenDialog(false)\r\n        }\r\n        else {\r\n            tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n            setOpenDialog(false)\r\n            setEnumList(field_enumerate)\r\n            setDefValue(defaultValue)\r\n            setSelectedType(UISchema[\"type\"])\r\n        }\r\n    }\r\n\r\n    // show / hide item schema textfield\r\n    const handleShowItemSchemaText = () => {\r\n        setItemSchemaTFrow(!itemSchemaTFrow)\r\n    }\r\n\r\n    // Edit item schema manually\r\n    const handleEditItemSchema = () => {\r\n        if (itemSchemaEdit) {\r\n            // validate and save the inputed schema\r\n            let schemaIsValid = handleValidateItemSchema()\r\n            if (schemaIsValid) {\r\n                setArrayItemType(JSON.parse(itemSchemaData)[\"type\"])\r\n                let tempID = JSON.parse(itemSchemaData)[\"id\"]\r\n                let tempID2 = JSON.parse(itemSchemaData)[\"$id\"]\r\n                let ID = undefined\r\n                if (tempID !== undefined){\r\n                    ID = tempID\r\n                }\r\n                if (tempID2 !== undefined){\r\n                    ID = tempID2\r\n                }\r\n\r\n                //alert(ID + \" | \" + UISchema[\"items\"][\"$id\"] + \" | \" + ID + \" | \" + UISchema[\"items\"][\"id\"])\r\n                if (ID == undefined) {\r\n                    setItemSchemaEdit(false)\r\n                } else if (ID === UISchema[\"items\"][\"$id\"] || ID === UISchema[\"items\"][\"id\"]) {\r\n                    //alert(ID + \" | \" + UISchema[\"items\"][\"$id\"] + \" | \" + ID + \" | \" + UISchema[\"items\"][\"id\"])\r\n                    setItemSchemaEdit(false)\r\n                } else if (ID !== undefined) {\r\n                    if (handleCheckIDexistence(ID)){\r\n                        alert(\"A field element with the same ID already exists. Either change the ID or remove it.\")\r\n                        setItemSchemaEdit(true)\r\n                        setItemSchemaTFrow(true)\r\n                    } else {\r\n                        setItemSchemaEdit(false)\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            setItemSchemaEdit(true)\r\n            setItemSchemaTFrow(true)\r\n        }\r\n    }\r\n\r\n    // handle change itemSchemaData\r\n    const handleChangeItemSchemaTextField = (event) =>{\r\n        //console.log(event.target.value)\r\n        setItemSchemaData(event.target.value)\r\n    }\r\n\r\n    const handleChangeDefaultItemSchema = (itemType) =>{\r\n        if (UISchema[\"items\"] !== \"None\") {\r\n            if (UISchema[\"items\"][\"type\"] !== itemType){\r\n                switch (itemType) {\r\n                    case 'integer':\r\n                        setItemSchemaData(JSON.stringify({ \"type\": \"integer\" }, null, 2))\r\n                        return\r\n                    case 'number':\r\n                        setItemSchemaData(JSON.stringify({ \"type\": \"number\" }, null, 2))\r\n                        return\r\n                    case 'string':\r\n                        setItemSchemaData(JSON.stringify({ \"type\": \"string\" }, null, 2))\r\n                        return\r\n                    case 'object':\r\n                        setItemSchemaEdit(true)\r\n                        setItemSchemaTFrow(true)\r\n                        setItemSchemaData(\"Browse or copy your item schema here then save.\")\r\n                        return\r\n                }\r\n            } else {\r\n                setItemSchemaData(JSON.stringify(UISchema[\"items\"], null, 2))\r\n            }\r\n        } else {\r\n            if (itemType !== \"object\") {\r\n                setItemSchemaData(JSON.stringify({ \"type\": itemType }, null,2))\r\n            } else {\r\n                setItemSchemaEdit(true)\r\n                setItemSchemaTFrow(true)\r\n                setItemSchemaData(\"Browse or copy your item schema here then save.\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle validate on click for Edit item schema \r\n    const handleValidateItemSchema = () => {\r\n        try {\r\n            // first check if the format is correct\r\n            let parsed = JSON.parse(itemSchemaData)\r\n            // then check if the schema is managable\r\n            /*\r\n            if (parsed[\"type\"] !== arrayItemDataType) {\r\n                alert(\"The inputted schema data type and selected item data type don't match.\")\r\n                return false\r\n            }*/\r\n            if (parsed[\"type\"] === \"object\") {\r\n                if (parsed[\"properties\"] === undefined){\r\n                    alert(\"Object type schema does not have properties.\")\r\n                    return false\r\n                }\r\n                if (typeof parsed[\"properties\"] !== 'object'){\r\n                    alert(\"Object type properties is not of object type\")\r\n                    return false\r\n                }\r\n\r\n                let tooDeep = false\r\n                Object.keys(parsed[\"properties\"]).forEach(key =>{\r\n                    if (parsed[\"properties\"][key][\"type\"] === \"object\"){\r\n                        alert(\"Schema is too deep. At the moment, this feature only supports a flat schema.\")\r\n                        tooDeep = true\r\n                    }\r\n                })\r\n\r\n                if (tooDeep){\r\n                    return false\r\n                } else {\r\n                    return true\r\n                }\r\n                                \r\n            } else {\r\n                return true\r\n            }\r\n        } catch(err) {\r\n            alert(\"Invalid item schema.\")\r\n            return false\r\n        }\r\n        \r\n    }\r\n\r\n    // handle change required check box\r\n    const handleCheckBoxOnChange = () => {\r\n        setRequiredChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleEnumBoxOnChange = () => {\r\n        setEnumChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change uniqueItems check box\r\n    const handleUniqueItemsCheckBoxOnChange = () => {\r\n        setArrayUniqueItems(prev => !prev)\r\n    }\r\n\r\n    // function to check if the file accepted is of json format and json schema valid\r\n    const checkSubSchemaValidity = (schemaFile) => {\r\n        // place holder\r\n        if (schemaFile[0][\"type\"] === \"application/json\") {\r\n            // read the file with FileReadr API\r\n            const reader = new FileReader();\r\n            reader.onabort = () => console.log(\"file reading was aborted\");\r\n            reader.onerror = () => console.log(\"file reading has failed\");\r\n            reader.onload = () => {\r\n                const binaryStr = reader.result;\r\n                const obj = JSON.parse(binaryStr);\r\n\r\n                // convert obj schema to iterable array properties\r\n                let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n                try {\r\n                    convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n                    console.log(\"Converted Schema:\", convertedSchema)\r\n                    setConvertedSubSchema(convertedSchema)\r\n                    // update states\r\n                    setSubSchemaValidity(true);\r\n                    setSubSchemaFilename(schemaFile[0][\"name\"])\r\n                    console.log(\"Subschema is valid\")\r\n\r\n                    const copiedObj = JSON.parse(JSON.stringify(obj))\r\n\r\n                    //alert(activeSubSchemaButton)\r\n                    if (activeSubSchemaButton === \"subschema\") {\r\n                        Object.keys(copiedObj).forEach(key => {\r\n                            if (key === \"id\") {\r\n                                //return setSelectedType(event.target.value)\r\n                                //setFieldUri(obj[key])\r\n                                //alert(key)\r\n                                //let event = {target: {value: copiedObj[key]}}\r\n                                //handleChangeUISchema(event, key)\r\n                                setFieldUri(copiedObj[key])\r\n                            }\r\n                            if (key === \"$id\") {\r\n                                //let event = {target: {value: copiedObj[key]}}\r\n                                //handleChangeUISchema(event, key)\r\n                                setFieldUri(copiedObj[key])\r\n                            }\r\n                            if (key === \"title\") {\r\n                                //setTitle(obj[key])\r\n                                let event = { target: { value: copiedObj[key] } }\r\n                                handleChangeUISchema(event, key)\r\n                            }\r\n                            if (key === \"description\") {\r\n                                //setDescription(obj[key])\r\n                                let event = { target: { value: copiedObj[key] } }\r\n                                handleChangeUISchema(event, key)\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                } catch (error) {\r\n                    console.log(error);\r\n                    alert(`${schemaFile[0][\"name\"]} is invalid!`)\r\n                    // update states\r\n                    setSubSchemaValidity(false);\r\n                    setSubSchemaFilename(schemaFile[0][\"name\"])\r\n                }\r\n            };\r\n            reader.readAsText(schemaFile[0]);\r\n        } else {\r\n            // update states\r\n            alert(`${schemaFile[0][\"name\"]} is invalid!`)\r\n            setSubSchemaValidity(false);\r\n            setSubSchemaFilename(schemaFile[0][\"name\"])\r\n        }\r\n    };\r\n\r\n\r\n    // browse or drag&drop schema file\r\n    const onDrop = useCallback(\r\n        (acceptedFile) => {\r\n            // process the schema, validation etc\r\n            if (selectedType !== \"array\") {\r\n                checkSubSchemaValidity(acceptedFile);\r\n            }\r\n            else {\r\n                if (acceptedFile[0][\"type\"] !== \"application/json\") {\r\n                    alert(\"Only json files please.\")\r\n                    return\r\n                }\r\n                // read the schema and send it to itemSchemaData\r\n                console.log(\"browse item schema for array type\")\r\n                const reader = new FileReader();\r\n                reader.onabort = () => console.log(\"file reading was aborted\");\r\n                reader.onerror = () => console.log(\"file reading has failed\");\r\n                reader.onload = () => {\r\n                    const binaryStr = reader.result;\r\n                    const obj = JSON.parse(binaryStr);\r\n                    let itemSchema = JSON.stringify(obj, null, 2);\r\n                    setItemSchemaData(itemSchema)\r\n                    setItemSchemaEdit(true)\r\n                    setItemSchemaTFrow(true)\r\n                }\r\n                reader.readAsText(acceptedFile[0]);\r\n            }\r\n            // store schema file in the state\r\n            // update states\r\n            // setRenderReady(false);\r\n            // setDisable(true);\r\n            // setCreateScratchMode(false);\r\n            // setJsonData({});\r\n            // setSelectedSchemaName(\"\");\r\n        },\r\n        [activeSubSchemaButton, selectedType]\r\n    );\r\n    // for upload subschema\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        multiple: false,\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {notImplemented ?\r\n                <Dialog\r\n                    open={openDialog}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">\r\n                        <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            {editOrAdd === \"add\" ? <AddIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} /> : <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />}\r\n                            <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                                {editOrAdd === \"add\" ? `Add element in \"${field_label}\"` : `Edit \"${tempUISchema[\"title\"]}\"`}\r\n                            </div>\r\n                            <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        We are sorry! Editing feature for the \"{UISchema[\"type\"]}\" type/keyword is not yet implemented.\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button disabled onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                            {editOrAdd === \"add\" ? \"Add\" : \"Save\"}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                :\r\n                <Dialog\r\n                    open={openDialog}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">\r\n                        <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            {editOrAdd === \"add\" ? <AddIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} /> : <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />}\r\n                            <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                                {editOrAdd === \"add\" ? `Add element in \"${field_label}\"` : `Edit \"${tempUISchema[\"title\"]}\"`}\r\n                            </div>\r\n                            <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                            <div>\r\n                                <FormControl component=\"widget-type\">\r\n                                    <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                                    <TextField margin=\"normal\" required onChange={event => handleChangeUISchema(event, \"fieldKey\")} style={{ marginTop: \"20px\" }} value={fieldkey} variant=\"outlined\" fullWidth={true} label={\"Field Keyword\"} helperText='A unique json keyword for this field. Usually short and has no spaces (use \"_\" instead). Spaces are replaced automatically with \"_\" upon saving.' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"$id\")} style={{ marginTop: \"10px\" }} value={fieldUri} variant=\"outlined\" fullWidth={true} label={\"Field ID/URI\"} helperText='ID or URI for this field if available.' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} value={title} variant=\"outlined\" fullWidth={true} label={\"Field Title\"} helperText='Label or title of the field. For a field that requires a unit, the unit can be placed within a square bracket, e,g., \"Chamber Pressure [Pa]\".' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} value={description} variant=\"outlined\" fullWidth={true} label={\"Field Description\"} multiline rows={3} helperText='A detailed description of the field, how the input should be formated, etc.' />\r\n                                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\" }}>\r\n                                        <FormControl component=\"validation-related\">\r\n                                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Validation Related:</FormLabel>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <TextField\r\n                                        margin=\"normal\"\r\n                                        helperText='Data type of the field input.'\r\n                                        onChange={event => handleChangeUISchema(event, \"type\")}\r\n                                        style={{ marginTop: \"10px\" }}\r\n                                        //defaultValue={tempUISchema[\"type\"]}\r\n                                        select\r\n                                        fullWidth={true}\r\n                                        id={field_key}\r\n                                        label={\"Field Data Type\"}\r\n                                        variant=\"outlined\"\r\n                                        value={selectedType}\r\n                                        SelectProps={{\r\n                                            native: true,\r\n                                        }}\r\n                                    >\r\n                                        {datatypes.map((content, index) => (\r\n                                            <option key={index} value={content}>\r\n                                                {content}\r\n                                            </option>\r\n                                        ))}\r\n                                    </TextField>\r\n                                    {[\"number\", \"integer\"].includes(selectedType) ?\r\n                                        <>\r\n                                            <div style={{ display: \"flex\" }}>\r\n                                                <TextField onFocus={() => setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")} value={numberMinMaxValue[0]} onBlur={(event) => { handleMinMaxValueOnBlur(event, \"min-\" + selectedType) }} onChange={event => handleMinMaxValue(event, \"min-\" + selectedType)} margin=\"normal\" fullWidth variant='outlined' label=\"Minimum Value\" />\r\n                                                <div style={{ paddingLeft: \"10px\" }}></div>\r\n                                                <TextField onFocus={() => setNumberMinMaxValueHelpertext(\"Set the minimum and maximum values of this field.\")} value={numberMinMaxValue[1]} onBlur={(event) => { handleMinMaxValueOnBlur(event, \"max-\" + selectedType) }} onChange={event => handleMinMaxValue(event, \"max-\" + selectedType)} margin=\"normal\" fullWidth variant='outlined' label=\"Maximum Value\" />\r\n                                            </div>\r\n                                            <div style={{ color: \"gray\", fontSize: \"12px\", paddingLeft: \"11px\", paddingRight: \"11px\" }}>{numberMinMaxValueHelperText}</div>\r\n                                        </>\r\n                                        : null}\r\n                                    {selectedType === \"string\" ?\r\n                                        <>\r\n                                            <div style={{ display: \"flex\" }}>\r\n                                                <TextField onFocus={() => setCharMinMaxHelperText(\"Set the minimum and maximum length allowed for this string input.\")} value={charMinMaxLengthValue[0]} onBlur={(event) => { handleMinMaxCharLengthOnBlur(event, \"minLength\") }} onChange={event => handleMinMaxCharLength(event, \"minLength\")} margin=\"normal\" fullWidth variant='outlined' label=\"Minimum Character Length\" />\r\n                                                <div style={{ paddingLeft: \"10px\" }}></div>\r\n                                                <TextField onFocus={() => setCharMinMaxHelperText(\"Set the minimum and maximum length allowed for this string input.\")} value={charMinMaxLengthValue[1]} onBlur={(event) => { handleMinMaxCharLengthOnBlur(event, \"maxLength\") }} onChange={event => handleMinMaxCharLength(event, \"maxLength\")} margin=\"normal\" fullWidth variant='outlined' label=\"Maximum Character Length\" />\r\n                                            </div>\r\n                                            <div style={{ color: \"gray\", fontSize: \"12px\", paddingLeft: \"11px\", paddingRight: \"11px\" }}>{charMinMaxHelperText}</div>\r\n                                        </>\r\n                                        : null}\r\n                                    {[\"string\", \"integer\", \"number\"].includes(selectedType) ?\r\n                                        <>\r\n                                            <FormControlLabel control={<Checkbox onChange={() => handleEnumBoxOnChange()} checked={enumChecked} />} label=\"Enumerated. Provide a list of possible inputs for this field.\" />\r\n                                            <div style={{ marginLeft: \"32px\", marginTop: \"0px\", marginBottom: \"10px\" }}>\r\n                                                {enumChecked ? <TextField defaultValue={enumList !== undefined ? enumList : \"\"} onChange={handleOnChangeListField} variant=\"outlined\" fullWidth={true} label=\"Enumerate List\" multiline rows={2} helperText=\"A list of inputs separated by commas, e,g.: item 1, item 2, item 3. Make sure that the item data type matches the field input data type. Invalid items will be not saved.\" /> : <Divider />}\r\n                                            </div>\r\n                                        </> : null}\r\n                                </FormControl>\r\n                                <div style={{ paddingBottom: \"10px\" }}>\r\n                                    <FormGroup>\r\n                                        {selectedType === \"array\" ?\r\n                                            <>\r\n                                                <div style={{ display: \"flex\" }}>\r\n                                                    <div style={{ backgroundColor: \"#3f51b5\", paddingRight: \"2px\" }}></div>\r\n                                                    <div style={{ height: \"auto\", width: \"100%\", paddingLeft: \"5px\" }}>\r\n                                                <TextField\r\n                                                    size='small'\r\n                                                    margin=\"normal\"\r\n                                                    helperText={'Data type of the array items.'}\r\n                                                    onChange={event => { handleChangeUISchema(event, \"itemType\"); setArrayItemDataType(event.target.value); handleChangeDefaultItemSchema(event.target.value)}}\r\n                                                    style={{ marginTop: \"10px\" }}\r\n                                                    defaultValue={tempUISchema[\"items\"] !== undefined ? tempUISchema[\"items\"][\"type\"] : \"string\"}\r\n                                                    select\r\n                                                    fullWidth={true}\r\n                                                    id={field_key}\r\n                                                    label={\"Item Data Type\"}\r\n                                                    variant=\"outlined\"\r\n                                                    SelectProps={{\r\n                                                        native: true,\r\n                                                    }}\r\n                                                >\r\n                                                    {arrayItemTypeList.map((content, index) => (\r\n                                                        <option key={index} value={content}>\r\n                                                            {content}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </TextField>\r\n                                                        {itemSchemaTFrow ? <TextField fullWidth={true} disabled={!itemSchemaEdit} margin=\"normal\" label={\"Item Schema\"} onChange={(event) => handleChangeItemSchemaTextField(event)} variant=\"filled\" multiline rows={itemSchemaData.split(/\\r?\\n|\\r|\\n/g).length > 10 ? 20 : 2} InputProps={{ className: classes.input }}\r\n                                                            value={arrayItemDataType === UISchema[\"items\"][\"type\"] ? itemSchemaData : itemSchemaData}> </TextField> : null}\r\n                                                    <div style={{ display: \"flex\", width: \"100%\", justifyContent: \"center\" }}>\r\n                                                            <Button fullWidth={true} size=\"small\" color='primary' margin=\"normal\" variant=\"outlined\" style={{ marginRight: \"5px\", fontSize: \"9pt\" }} {...getRootProps()}> <input {...getInputProps()} />Browse Item Schema</Button>\r\n                                                            <Button fullWidth={true} size=\"small\" color={!itemSchemaEdit ? 'primary':'secondary'} margin=\"normal\" variant=\"outlined\" style={{ fontSize: \"9pt\" }} onClick={()=> handleEditItemSchema()}> {itemSchemaEdit ? \"Save\" : \"Edit\"} Item Schema</Button>\r\n                                                            <Button fullWidth={true} size=\"small\" color='primary' margin=\"normal\" variant=\"outlined\" style={{ marginLeft: \"5px\", fontSize: \"9pt\" }} onClick={() => handleShowItemSchemaText()}> {!itemSchemaTFrow ? \"Show\" : \"Hide\" } Item Schema </Button>\r\n                                                    </div>\r\n                                                    <div style={{ height:\"10px\", fontSize: \"9pt\", paddingLeft: \"13px\", paddingTop: \"5px\"}}>This is where you edit the item schema for this array type.</div>\r\n                                                </div>\r\n                                                </div>\r\n                                                <div style={{ display: \"flex\" }}>\r\n                                                    <TextField value={arrayMinMaxItem[0]} onChange={event => handleMinMaxArrayItem(event, \"min\")} onBlur={event => { handleMinMaxArrayItemOnBlur(event, \"min\") }} margin=\"normal\" fullWidth variant='outlined' label=\"Min. Array Items\" />\r\n                                                    <div style={{ paddingLeft: \"10px\" }}></div>\r\n                                                    <TextField value={arrayMinMaxItem[1]} onChange={event => handleMinMaxArrayItem(event, \"max\")} onBlur={event => { handleMinMaxArrayItemOnBlur(event, \"max\") }} margin=\"normal\" fullWidth variant='outlined' label=\"Max. Array items\" />\r\n                                                </div>\r\n                                                <div style={{ color: \"gray\", fontSize: \"12px\", paddingLeft: \"11px\", paddingRight: \"11px\", paddingBottom: \"10px\" }}>{arrayMinMaxHelperText}</div>\r\n                                                <FormControlLabel control={<Checkbox onChange={() => handleUniqueItemsCheckBoxOnChange()} checked={arrayUniqueItems} />} label=\"Input items must be unique.\" />\r\n                                                <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                            </>\r\n                                            : null}\r\n                                        <div style={{ display: \"flex\" }}>\r\n                                            <div style={{ backgroundColor: \"#3f51b5\", paddingRight: \"2px\" }}></div>\r\n                                            <div style={{ height: \"auto\", width: \"100%\", paddingLeft: \"5px\" }}>\r\n                                        {selectedType === \"object\" ? <>\r\n                                            <div style={{ display: \"flex\", width: \"100%\", justifyContent: \"center\" }}>\r\n                                                <div onClick={() => setActiveSubSchemaButton(\"subschema\")} style={{ paddingRight: \"5px\", width: \"100%\" }}><Button fullWidth={true} size=\"small\" color=\"primary\" variant=\"outlined\" {...getRootProps()}> <input {...getInputProps()} />Browse a subschema</Button></div>\r\n                                                <Button fullWidth={true} size=\"small\" color=\"primary\" variant=\"outlined\" {...getRootProps()}> <input {...getInputProps()} />Browse schema properties</Button>\r\n                                            </div>\r\n                                            {subSchemaValidity ? <div style={{ color: \"green\", fontSize: \"9pt\", paddingLeft: \"13px\", paddingTop: \"5px\", paddingBottom: \"5px\" }}>{subSchemaFilename} is valid.</div> : null}\r\n                                            <div style={{ fontSize: \"9pt\", paddingLeft: \"13px\", paddingTop: \"5px\", paddingBottom: \"5px\" }}>Browse and add a subschema or schema properties for this object by clicking on the corresponding button above.</div>\r\n                                        </> : null}\r\n                                        </div>\r\n                                        </div>\r\n                                        {selectedType === \"object\" ? <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" /> : null}\r\n                                        {selectedType !== \"object\" & selectedType !== \"array\" & selectedType !== \"boolean\" ?\r\n                                            <>\r\n                                                <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                                <div style={{ paddingTop: \"15px\", paddingBottom: \"0px\" }}>\r\n                                                    <FormControl component=\"misc-keywords\">\r\n                                                        <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Misc.:</FormLabel>\r\n                                                    </FormControl>\r\n                                                </div>\r\n                                                {selectedType === \"fileupload (string)\" ? null : <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"defaultValue\")} style={{ marginTop: \"10px\" }} value={defValue} variant=\"outlined\" fullWidth={true} label={\"Field Default Value\"} helperText=\"Initial value of the field.\" />}\r\n                                            </>\r\n                                            : null}\r\n                                        {selectedType === \"boolean\" ?\r\n                                            <>\r\n                                                <div style={{ paddingTop: \"15px\", paddingBottom: \"0px\" }}>\r\n                                                    <FormControl component=\"misc-keywords\">\r\n                                                        <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Misc.:</FormLabel>\r\n                                                    </FormControl>\r\n                                                </div>\r\n                                                <TextField\r\n                                                    margin='normal'\r\n                                                    onChange={event => handleChangeUISchema(event, \"defaultValue\")}\r\n                                                    style={{ marginTop: \"10px\" }}\r\n                                                    defaultValue={defaultValue !== undefined ? defaultValue : \"\"}\r\n                                                    select\r\n                                                    fullWidth={true}\r\n                                                    id={field_key}\r\n                                                    label={\"Boolean Field Default Value\"}\r\n                                                    variant=\"outlined\"\r\n                                                    SelectProps={{\r\n                                                        native: true,\r\n                                                    }}\r\n                                                >\r\n                                                    {[\"\", \"true\", \"false\"].map((content, index) => (\r\n                                                        <option key={index} value={content}>\r\n                                                            {content}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </TextField>\r\n                                            </>\r\n                                            : null}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                            {editOrAdd === \"add\" ? \"Add\" : \"Save\"}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditElement;","import getValue from \"./getValue\";\r\n\r\n// delete key and value given path\r\nconst deleteKey = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const elementValue = getValue(jsonData, newPath);\r\n\r\n    if (Array.isArray(elementValue)) {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        elementValue.splice(parseInt(deleteIndex), 1)\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    } else {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        delete elementValue[deleteIndex]\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    }\r\n\r\n};\r\n\r\nexport default deleteKey;","import React, { useContext, useEffect, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\nimport { FileIcon, defaultStyles } from 'react-file-icon';\r\nimport mimeTypesExt from '../../assets/mime-types-extensions-swapped.json'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst StringType = ({ adamant_field_error, adamant_error_description, minLength, maxLength, withinObject, field_uri, dataInputItems, setDataInputItems, withinArray, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate, defaultValue, value }) => {\r\n\r\n\r\n    //const [descriptionText, setDescriptionText] = useState(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\");\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [inputError, setInputError] = useState(adamant_field_error !== undefined ? adamant_field_error : false);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput, SEMSelectedDevice, setSEMSelectedDevice } = useContext(FormContext);\r\n    const [fieldValue, setFieldValue] = useState(defaultValue !== undefined ? defaultValue : value !== undefined ? value : \"\")\r\n    const [fieldEnumerate, setFieldEnumerate] = useState()\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    const handleOnChange = (event) => {\r\n        setFieldValue(event.target.value)\r\n\r\n        // this is for SEM form only!\r\n        if (field_key === \"semDevice\") {\r\n            setSEMSelectedDevice(event.target.value)\r\n        }\r\n    }\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n    // set stuff back to normal onFocus\r\n    const handleOnFocus = () => {\r\n        if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n            set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n            set(convertedSchema, path + \".adamant_field_error\", false)\r\n            setInputError(false)\r\n            setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n        }\r\n    }\r\n\r\n    // for SEM only - currently hardcoded\r\n    useEffect(() => {\r\n        if (field_key === \"semOperator\") {\r\n            if (SEMSelectedDevice === \"\") {\r\n                setFieldEnumerate(field_enumerate)\r\n                setFieldValue(\"\")\r\n            } else {\r\n                try {\r\n                    let semOperatorDeviceList = require(\"../../assets/sem-operator-device-list.json\")\r\n                    setFieldValue(\"\")\r\n                    setFieldEnumerate(semOperatorDeviceList[SEMSelectedDevice])\r\n                }\r\n                catch (error) {\r\n                    console.log(error)\r\n                    setFieldValue(\"\")\r\n                    setFieldEnumerate(field_enumerate)\r\n                }\r\n            }\r\n        }\r\n\r\n    }, [SEMSelectedDevice, field_enumerate, field_key])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"string\",\r\n        \"minLength\": minLength,\r\n        \"maxLength\": maxLength,\r\n        \"value\": value,\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle on blur\r\n    const handleOnBlur = (event, pathFormData, type) => {\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_key] = event.target.value;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let value = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            // conv. schema data\r\n            handleConvertedDataInput(value, newPath + \".value\", \"string\")\r\n\r\n            // update field value\r\n            setFieldValue(event.target.value)\r\n        } else {\r\n            // conv. schema data\r\n            handleConvertedDataInput(event, path + \".value\", \"string\")\r\n            // update field value\r\n            setFieldValue(event.target.value)\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            if (val === \"\") {\r\n                setFieldValue(\"\")\r\n            } else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setFieldValue(val)\r\n                }\r\n                else {\r\n                    setDataInputItems(items);\r\n\r\n                    // store to the main form data\r\n                    let event = {\r\n                        \"target\": {\r\n                            \"value\":\r\n                                items\r\n                        }\r\n                    }\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(event, newPath + \".value\", \"string\")\r\n                    // update field value\r\n                    setFieldValue(val)\r\n                }\r\n            }\r\n        } else {\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        val\r\n                }\r\n            }\r\n\r\n            if (val === \"\") {\r\n                setFieldValue(val)\r\n            } else {\r\n                // conv. schema data\r\n                handleConvertedDataInput(event, path + \".value\", \"string\")\r\n                // update field value\r\n                setFieldValue(val)\r\n            }\r\n        }\r\n\r\n    }, [value])\r\n\r\n    if (fieldEnumerate !== undefined) {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    < TextField\r\n                        onFocus={() => { handleOnFocus() }}\r\n                        error={inputError}\r\n                        onBlur={(event) => handleOnBlur(event, pathFormData, \"string\")}\r\n                        onChange={event => handleOnChange(event)}\r\n                        required={required}\r\n                        select\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_key}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }\r\n                        }\r\n                        helperText={descriptionText}\r\n                        value={fieldValue === undefined ? defaultValue : fieldValue}\r\n                    >\r\n                        {\r\n                            fieldEnumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField >\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div >\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} enumerated={true} defaultValue={defaultValue} field_enumerate={fieldEnumerate} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        if (field_enumerate === undefined) {\r\n            return (\r\n                <>\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <TextField\r\n                            size='small'\r\n                            onFocus={() => { handleOnFocus() }}\r\n                            error={inputError}\r\n                            multiline\r\n                            disabled={[\"filetype\", \"fileName\", \"hash\", \"hashAlgorithm\"].includes(field_key) ? true : false }\r\n                            onKeyDown={(e) => {\r\n                                if (e.key === \"Enter\" && !(e.shiftKey)) {\r\n                                    e.preventDefault();\r\n                                    //setFieldValue(e.target.value);\r\n                                }\r\n                            }}\r\n                            onBlur={(event) => handleOnBlur(event, pathFormData, \"string\")} required={required} helperText={descriptionText} onChange={(event) => { handleOnChange(event) }} value={fieldValue} fullWidth={true} className={classes.heading} id={field_key} label={field_label} variant=\"outlined\" />\r\n                        {field_key === \"filetype\" && mimeTypesExt[fieldValue] !== undefined ? <div style={{ \"width\": \"50px\", \"paddingLeft\": \"5px\" }}><FileIcon extension={mimeTypesExt[fieldValue].substring(1)} {...defaultStyles[mimeTypesExt[fieldValue].substring(1)]} /></div> : null}\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                                <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                    <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                                <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                    <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div>\r\n                    {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} defaultValue={defaultValue} enumerated={enumerated} field_enumerate={field_enumerate} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <>\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <TextField\r\n                            size='small'\r\n                            onFocus={() => { handleOnFocus() }}\r\n                            error={inputError}\r\n                            onBlur={(event) => handleOnBlur(event, pathFormData, \"string\")}\r\n                            onChange={event => handleOnChange(event)}\r\n                            required={required}\r\n                            select\r\n                            fullWidth={true}\r\n                            className={classes.heading}\r\n                            id={field_key}\r\n                            label={field_label}\r\n                            variant=\"outlined\"\r\n                            SelectProps={{\r\n                                native: true,\r\n                            }\r\n                            }\r\n                            helperText={descriptionText}\r\n                            value={fieldValue === undefined ? defaultValue : fieldValue}\r\n                        >\r\n                            {\r\n                                field_enumerate.map((content, index) => (\r\n                                    <option key={index} value={content}>\r\n                                        {content}\r\n                                    </option>\r\n                                ))\r\n                            }\r\n                        </TextField >\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                                <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                    <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                                <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                    <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div >\r\n                    {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} enumerated={enumerated} defaultValue={defaultValue} field_enumerate={field_enumerate} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n};\r\n\r\nexport default StringType;\r\n","const getUnit = (field_label) => {\r\n\r\n    if (field_label === undefined) {\r\n        return \"\"\r\n    }\r\n\r\n    let addorn = field_label.match(/[^[\\]]+(?=])/g)\r\n    if (addorn === null) {\r\n        return \"\"\r\n    } else {\r\n        return addorn\r\n    }\r\n}\r\n\r\nexport default getUnit;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { InputAdornment } from '@material-ui/core';\r\nimport getUnit from '../utils/getUnit';\r\nimport { MathComponent } from 'mathjax-react'\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst NumberType = ({ adamant_error_description, adamant_field_error, minimum, maximum, field_uri, value, dataInputItems, setDataInputItems, withinArray, withinObject, path, pathFormData, defaultValue, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue !== undefined & value === undefined ? defaultValue : value === undefined ? \"\" : value)//useState(defaultValue !== undefined ? defaultValue : value)\r\n    const [inputError, setInputError] = useState(false)\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"number\",\r\n        \"value\": value,\r\n        \"minimum\": minimum,\r\n        \"maximum\": maximum\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        setInputError(false)\r\n        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n\r\n        setInputError(false)\r\n        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_key] = value;\r\n                setDataInputItems(items);\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, newPath + \".value\", \"number\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // conv. schema data\r\n                handleConvertedDataInput(parseFloat(inputValue), path + \".value\", \"number\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"number\") {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setInputValue(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    // store to the main form data\r\n                    /*let event = {\r\n                        \"target\": {\r\n                            \"value\":\r\n                                items\r\n                        }\r\n                    }*/\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(val, newPath + \".value\", \"number\")\r\n                    // update field value\r\n                    setInputValue(val)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n\r\n            // check if input is of type number\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"number\") {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            } else {\r\n                // conv. schema data\r\n                handleConvertedDataInput(val, path + \".value\", \"number\")\r\n                // update field value\r\n                setInputValue(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField size='small' onFocus={() => {\r\n                        if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                            set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                            set(convertedSchema, path + \".adamant_field_error\", false)\r\n                            setInputError(false)\r\n                            setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                        }\r\n\r\n                        if (inputError === true) {\r\n                            setInputValue(\"\")\r\n                            // then delete the value the convertedSchema\r\n                            let value = { ...convertedSchema }\r\n                            if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                value = deleteKey(value, path + \".value\")\r\n                                updateParent(value)\r\n                            } else {\r\n                                let newPath = path.split(\".\")\r\n                                newPath.pop()\r\n                                newPath = newPath.join(\".\")\r\n                                value = deleteKey(value, newPath + \".value\")\r\n                                updateParent(value)\r\n                            }\r\n                        }\r\n                    }} error={inputError} onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} fullWidth={true} className={classes.heading} id={field_key} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                    }} helperText={descriptionText} />\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div onMouseEnter={() => {\r\n                    if (inputValue !== undefined & inputValue !== \"\") {\r\n                        setInputError(false)\r\n                        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                    }\r\n                }} style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField size='small'\r\n                        onFocus={() => {\r\n                            if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                                set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                                set(convertedSchema, path + \".adamant_field_error\", false)\r\n                                setInputError(false)\r\n                                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                            }\r\n                            if (inputError === true) {\r\n                                setInputValue(\"\")\r\n                                // then delete the value the convertedSchema\r\n                                let value = { ...convertedSchema }\r\n                                if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                    value = deleteKey(value, path + \".value\")\r\n                                    updateParent(value)\r\n                                } else {\r\n                                    let newPath = path.split(\".\")\r\n                                    newPath.pop()\r\n                                    newPath = newPath.join(\".\")\r\n                                    value = deleteKey(value, newPath + \".value\")\r\n                                    updateParent(value)\r\n                                }\r\n                            }\r\n                        }}\r\n                        error={inputError}\r\n                        helperText={descriptionText}\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_key}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default NumberType;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"../ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\n//import Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport getValue from \"../utils/getValue\";\r\nimport set from \"set-value\";\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport getValueInSchemaFullPath from \"../utils/getValueInSchemaFullPath\";\r\nimport getFileIndex from \"../utils/getFileIndex\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst Accordion = withStyles({\r\n    root: {\r\n        border: '1px solid rgba(232, 244, 253, 1)',\r\n        '&:not(:last-child)': {\r\n            borderBottom: 0,\r\n        },\r\n        boxShadow: \"none\",\r\n        '&:before': {\r\n            display: 'none',\r\n        },\r\n        '&$expanded': {\r\n            margin: 'auto',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordion);\r\n\r\nconst AccordionSummary = withStyles({\r\n    root: {\r\n        backgroundColor: 'rgba(232, 244, 253, 1)',\r\n        borderBottom: '1px solid rgba(0, 0, 0, .0)',\r\n        marginBottom: -1,\r\n        minHeight: 56,\r\n        '&$expanded': {\r\n            minHeight: 56,\r\n        },\r\n    },\r\n    content: {\r\n        '&$expanded': {\r\n            margin: '12px 0',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst ObjectType = ({ adamant_error_description, adamant_field_error, dataInputItems, setDataInputItems, withinArray, withinObject, field_uri, path, pathSchema, pathFormData, field_required, object_is_required, field_key, field_index, edit, field_label, field_description, field_properties }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [expand, setExpand] = useState(true)// set to \"true\" for normally open accordion\r\n    const { handleRemoveFile, loadedFiles, updateParent, convertedSchema, handleDataDelete } = useContext(FormContext);\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\")\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [inputError, setInputError] = useState(false)\r\n\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    var required\r\n    if (object_is_required === undefined) {\r\n        required = false;\r\n    } else if (object_is_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(field_properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        const set = require(\"set-value\");\r\n        let value = { ...convertedSchema }\r\n        set(convertedSchema, path + \".properties\", items)\r\n        updateParent(value);\r\n    }\r\n\r\n    const getAllFileMetadata = (object, arr) => {\r\n        let arrai = arr\r\n        Object.keys(object).forEach((key) => {\r\n            if (typeof object[key] === \"object\") {\r\n                getAllFileMetadata(object[key], arrai)\r\n            }\r\n            if (typeof object[key] === \"string\") {\r\n                if (object[key].includes(\"fileupload:\") && object[key].split(\";\").length === 3) {\r\n                    arr.push(object[key])\r\n                }\r\n            }\r\n        })\r\n        return arrai\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        // remove the file in loadedFiles\r\n        let metmet = getValueInSchemaFullPath(convertedSchema, path + \".properties\")\r\n        const fileMetadata = getAllFileMetadata(metmet, [])\r\n        if (fileMetadata.length > 0) {\r\n            for (let i = 0; i < fileMetadata.length; i++) {\r\n                const fileIndex = getFileIndex(loadedFiles, fileMetadata[i])\r\n                handleRemoveFile(fileIndex)\r\n            }\r\n        }\r\n\r\n\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"required\": field_required,\r\n        \"properties\": field_properties,\r\n        \"$id\": field_uri,\r\n        \"type\": \"object\"\r\n    }\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <div onClick={() => {\r\n            if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                set(convertedSchema, path + \".adamant_field_error\", false)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                updateParent(convertedSchema)\r\n            }\r\n        }}\r\n            style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} style={inputError ? {\r\n                border: `1px solid #ff7961`,\r\n                '&:not(:lastChild)': {\r\n                    borderBottom: 0,\r\n                }\r\n            } :\r\n                {\r\n                    border: `1px solid rgba(232, 244, 253, 1)`,\r\n                    '&:not(:lastChild)': {\r\n                        borderBottom: 0,\r\n                    }\r\n                }}>\r\n                <AccordionSummary\r\n                    style={inputError ? { backgroundColor: \"white\", borderRadius: \"4px\", borderBottom: '1px solid  #ff7961', height: `${expand ? \"auto\" : \"10px\"}` } : { backgroundColor: \"rgba(232, 244, 253, 1)\", borderBottom: '1px solid  rgba(0, 0, 0, .0)', height: `${expand ? \"auto\" : \"10px\"}` }}\r\n                    expandIcon={\r\n                        <Tooltip placement=\"top\" title={`Collapse/Expand this container`}>\r\n                            <ExpandMoreIcon />\r\n                        </Tooltip>}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography style={inputError ? { color: \"#ff7961\", fontSize: \"13pt\", lineHeight: `${expand ? \"\" : \"40px\"}` } : { fontSize: \"13pt\", lineHeight: `${expand ? \"\" : \"40px\"}` }} className={classes.heading}>{field_label + (required ? \"*\" : \"\")}</Typography>\r\n                            {expand ? <div style={inputError ? { color: \"#ff7961\", fontSize: \"10pt\" } : { color: \"gray\", fontSize: \"10pt\" }}>\r\n                                {descriptionText}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit \"${field_label}\"`}>\r\n                                <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove \"${field_label}\"`}>\r\n                                <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(field_properties).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={!edit} key={field_properties[item][\"fieldKey\"]} draggableId={field_properties[item][\"fieldKey\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <Tooltip placement=\"top\" title={`Drag & drop to adjust the order of this field`}>\r\n                                                                    <DragHandleIcon fontSize=\"small\" />\r\n                                                                </Tooltip>\r\n                                                            </div> : null}\r\n                                                            <ElementRenderer withinArray={withinArray} withinObject={withinObject} path={path + \".properties\"} pathSchema={pathSchema + \".properties\"} pathFormData={pathFormData} fieldkey={field_properties[item][\"fieldKey\"]} fieldIndex={item} elementRequired={field_required} edit={edit} field={field_properties[item]} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <Tooltip placement=\"top\" title={`Add a new field to \"${field_label}\"`}>\r\n                                            <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                                        </Tooltip>\r\n                                    </div> : null}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} field_label={field_label} /> : null}\r\n        {openDialogAddElement ? <EditElement editOrAdd={\"add\"} openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} path={path} defaultSchema={defaultSchema} field_label={field_label} /> : null}\r\n    </>);\r\n};\r\n\r\nexport default ObjectType;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport getUnit from '../utils/getUnit';\r\nimport { InputAdornment } from '@material-ui/core';\r\nimport { MathComponent } from 'mathjax-react'\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst IntegerType = ({ adamant_error_description, adamant_field_error, minimum, maximum, field_uri, value, dataInputItems, setDataInputItems, withinArray, withinObject, defaultValue, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue !== undefined & value === undefined ? defaultValue : value === undefined ? \"\" : value)// useState(defaultValue !== undefined ? defaultValue : value);\r\n    const [inputError, setInputError] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"integer\",\r\n        \"minimum\": minimum,\r\n        \"maximum\": maximum,\r\n        \"value\": value\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        setInputError(false)\r\n        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_key] = value;\r\n                setDataInputItems(items);\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, newPath + \".value\", \"integer\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // conv. schema data\r\n                handleConvertedDataInput(parseInt(inputValue), path + \".value\", \"integer\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (!Number.isInteger(val)) {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setInputValue(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    // store to the main form data\r\n                    /*let event = {\r\n                        \"target\": {\r\n                            \"value\":\r\n                                items\r\n                        }\r\n                    }*/\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(val, newPath + \".value\", \"integer\")\r\n                    // update field value\r\n                    setInputValue(val)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n\r\n            // check if input is of type number\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (!Number.isInteger(val)) {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            } else {\r\n                // conv. schema data\r\n                handleConvertedDataInput(val, path + \".value\", \"integer\")\r\n                // update field value\r\n                setInputValue(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField size='small' onFocus={() => {\r\n                        if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                            set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                            set(convertedSchema, path + \".adamant_field_error\", false)\r\n                            setInputError(false)\r\n                            setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                        }\r\n                        if (inputError === true) {\r\n                            setInputValue(\"\")\r\n                            // then delete the value the convertedSchema\r\n                            let value = { ...convertedSchema }\r\n                            if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                value = deleteKey(value, path + \".value\")\r\n                                updateParent(value)\r\n                            } else {\r\n                                let newPath = path.split(\".\")\r\n                                newPath.pop()\r\n                                newPath = newPath.join(\".\")\r\n                                value = deleteKey(value, newPath + \".value\")\r\n                                updateParent(value)\r\n                            }\r\n                        }\r\n                    }} error={inputError} onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} fullWidth={true} className={classes.heading} id={field_key} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                    }} helperText={descriptionText} />\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField\r\n                        size='small'\r\n                        onFocus={() => {\r\n                            if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                                set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                                set(convertedSchema, path + \".adamant_field_error\", false)\r\n                                setInputError(false)\r\n                                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                            }\r\n                            if (inputError === true) {\r\n                                setInputValue(\"\")\r\n                                // then delete the value the convertedSchema\r\n                                let value = { ...convertedSchema }\r\n                                if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                    value = deleteKey(value, path + \".value\")\r\n                                    updateParent(value)\r\n                                } else {\r\n                                    let newPath = path.split(\".\")\r\n                                    newPath.pop()\r\n                                    newPath = newPath.join(\".\")\r\n                                    value = deleteKey(value, newPath + \".value\")\r\n                                    updateParent(value)\r\n                                }\r\n                            }\r\n                        }}\r\n                        error={inputError}\r\n                        helperText={descriptionText}\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_key}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default IntegerType;\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport { Checkbox, FormLabel, FormHelperText, FormControl } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\n\r\nconst BooleanType = ({ field_uri, withinArray, withinObject, value, dataInputItems, setDataInputItems, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, defaultValue }) => {\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(value !== undefined ? value : typeof (defaultValue) === \"boolean\" ? defaultValue : false);\r\n    const [inputError, setInputError] = useState(false)\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"boolean\",\r\n        \"value\": value\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for checkbox (boolean type: checked is true unchecked is false)\r\n    const handleInputOnChange = () => {\r\n        let value = inputValue\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_key] = !value;\r\n            setDataInputItems(items);\r\n\r\n            setInputValue(!value)\r\n            handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n\r\n        } else {\r\n            setInputValue(!value)\r\n            handleConvertedDataInput(!value, path + \".value\", \"boolean\")\r\n        }\r\n    }\r\n\r\n    // handle input on change for checkbox (boolean type: checked is true unchecked is false)\r\n    const handleInputWhenInvalid = (value) => {\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_key] = value;\r\n            setDataInputItems(items);\r\n\r\n            setInputValue(value)\r\n            handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n\r\n        } else {\r\n            setInputValue(value)\r\n            handleConvertedDataInput(value, path + \".value\", \"boolean\")\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            //if (Array.isArray(latestVal)) { latestVal = latestVal[field_key] }\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(false)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"boolean\") {\r\n                setInputValue(false)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a boolean type.\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setInputValue(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    setInputValue(val)\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(false)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"boolean\") {\r\n                setInputValue(false)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a boolean type.\")\r\n            }\r\n            else {\r\n                setInputValue(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                handleConvertedDataInput(val, path + \".value\", \"boolean\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div onClick={() => {\r\n                if (inputError === true) {\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    // then set inputValue to default value or false\r\n                    handleInputWhenInvalid(typeof (defaultValue) === \"boolean\" ? defaultValue : false)\r\n                }\r\n            }} style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', alignItems: \"center\", width: '100%' }}>\r\n                <div style={{ paddingLeft: \"15px\", width: \"100%\" }}>\r\n                    <FormControl >\r\n                        <FormLabel style={{ color: `${inputError ? \"red\" : \"\"}` }}>{field_label === undefined ? \"\" : field_label + \":\"}</FormLabel>\r\n                        <div style={{ textAlign: \"center\", width: \"100%\" }}>\r\n                            <Checkbox onChange={() => handleInputOnChange()} checked={inputValue} />\r\n                        </div>\r\n                        <FormHelperText style={{ color: `${inputError ? \"red\" : \"\"}` }}>{descriptionText}</FormHelperText>\r\n                    </FormControl>\r\n                </div>\r\n                {edit ? <>\r\n                    <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                        <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                            <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                            <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </> : null}\r\n            </div>\r\n            {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default BooleanType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\nimport getUnit from '../../utils/getUnit';\r\nimport { MathComponent } from 'mathjax-react'\r\nimport { InputAdornment } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst ItemIntegerType = ({ field_label, oDataInputItems, oSetDataInputItems, arrayFieldKey, withinObject, value, path, pathFormData, dataInputItems, setDataInputItems, edit, index, field_key, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    //const [inputValue, setInputValue] = useState(value === undefined ? \"\" : value[index] === undefined ? \"\" : value[index]);\r\n    const { handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(dataInputItems[index])\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        if (withinObject !== undefined & withinObject === true) {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n\r\n                let arr = dataInputItems;\r\n                let arr2 = oDataInputItems\r\n                let items = Array.from(arr);\r\n                let items2 = Array.from(arr2);\r\n\r\n                let prevIndex = parseInt(path.split(\".\").pop())\r\n                items[index] = value;\r\n                items2[prevIndex][arrayFieldKey] = items\r\n                oSetDataInputItems(items2);\r\n\r\n                setInputValue(value)\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n            }\r\n\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n\r\n                // store it to input data array\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[index] = value;\r\n                setDataInputItems(items);\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, path + \".value\", \"array\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField size='small' onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_key} variant=\"outlined\" InputProps={{\r\n                    endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                }} />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemIntegerType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\nimport getUnit from '../../utils/getUnit';\r\nimport { MathComponent } from 'mathjax-react'\r\nimport { InputAdornment } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst ItemNumberType = ({ oDataInputItems, oSetDataInputItems, arrayFieldKey, withinObject, value, pathFormData, dataInputItems, setDataInputItems, path, field_label, edit, index, field_key, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    //const [inputValue, setInputValue] = useState(value === undefined ? \"\" : value[index] === undefined ? \"\" : value[index]);\r\n    const { handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(dataInputItems[index])\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        if (withinObject !== undefined & withinObject === true) {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n\r\n                let arr = dataInputItems;\r\n                let arr2 = oDataInputItems\r\n                let items = Array.from(arr);\r\n                let items2 = Array.from(arr2);\r\n\r\n                let prevIndex = parseInt(path.split(\".\").pop())\r\n                items[index] = value;\r\n                items2[prevIndex][arrayFieldKey] = items\r\n                oSetDataInputItems(items2);\r\n\r\n                setInputValue(value)\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n            }\r\n\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n\r\n                // store it to input data array\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[index] = value;\r\n                setDataInputItems(items);\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, path + \".value\", \"array\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField size='small' onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_key} variant=\"outlined\" InputProps={{\r\n                    endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                }} />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemNumberType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst ItemStringType = ({ oDataInputItems, oSetDataInputItems, arrayFieldKey, withinObject, value, pathFormData, dataInputItems, setDataInputItems, path, edit, index, field_key, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const { handleConvertedDataInput } = useContext(FormContext)\r\n    //const [fieldValue, setFieldValue] = useState(value === undefined ? undefined : value[index])\r\n    const [fieldValue, setFieldValue] = useState(dataInputItems[index])\r\n\r\n\r\n    // handle input field on blur\r\n    const handleOnBlur = (event, index) => {\r\n        if (withinObject !== undefined & withinObject === true) {\r\n            let arr = dataInputItems;\r\n            let arr2 = oDataInputItems\r\n            let items = Array.from(arr);\r\n            let items2 = Array.from(arr2);\r\n\r\n            let prevIndex = parseInt(path.split(\".\").pop())\r\n            items[index] = event.target.value;\r\n            items2[prevIndex][arrayFieldKey] = items\r\n            console.log(items2)\r\n            oSetDataInputItems(items2);\r\n\r\n            setFieldValue(event.target.value)\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n\r\n        } else {\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[index] = event.target.value;\r\n            setDataInputItems(items);\r\n            setFieldValue(event.target.value)\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items, path + \".value\", \"array\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField size='small' onBlur={(event) => handleOnBlur(event, index)} id={field_key} fullWidth={true} className={classes.heading} variant=\"outlined\" defaultValue={fieldValue} />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default ItemStringType;","export default __webpack_public_path__ + \"static/media/file-icon.047a88c0.svg\";","import React, { useEffect, useState, useContext } from 'react'\r\nimport { FormContext } from \"../../../FormContext\";\r\nimport ElementRenderer from \"../../ElementRenderer\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\r\nimport CheckBoxBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\r\nimport FileIconx from \"../../../assets/file-icon.svg\"\r\nimport { FileIcon, defaultStyles } from 'react-file-icon'\r\nimport FileExtensionList from \"../../../assets/mime-types-extensions-swapped.json\"\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Tooltip } from \"@material-ui/core\";\r\n\r\nconst ItemObjectType = ({ path, dataInputItems, setDataInputItems, field_label, pathFormData, field_required, field_items, field_type, edit, index, field_key, handleDeleteArrayItem, isResource }) => {\r\n    const [expand, setExpand] = useState(dataInputItems[index][\"adamant-ui-specific-expand\"] === undefined ? true : dataInputItems[index][\"adamant-ui-specific-expand\"]); // set to \"true\" for normally open accordion\r\n    const [useIcon, setUseIcon] = useState(false);\r\n    const [mimeType, setMimeType] = useState(\"\");\r\n    const [fileName, setFileName] = useState(\"\")\r\n    const [extension, setExtension] = useState(\"\")\r\n    const {loadedFiles } = useContext(FormContext)\r\n    let objectIndex = index;\r\n    let field_properties = field_items[\"properties\"]\r\n    let withinArray = true;\r\n    let withinObject = true;\r\n\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n\r\n        let newVal = [...dataInputItems]\r\n        newVal[index][\"adamant-ui-specific-expand\"] = !value\r\n\r\n        setDataInputItems(newVal)\r\n    };\r\n\r\n    // Check if file keyword has some file there\r\n    useEffect(() => {\r\n        if (field_properties[\"file\"] !== undefined) {\r\n            if (field_properties[\"file\"][\"value\"] !== undefined) {\r\n                if (field_properties[\"file\"][\"value\"] !== \"\") {\r\n                    setUseIcon(true);\r\n                    let something = field_properties[\"file\"][\"value\"].split(\";\");\r\n                    setFileName(something[1])\r\n                    setMimeType(something[0].replace(\"fileupload:\", \"\"))//.replace(\"data:\", \"\"));\r\n                    let ext = something[1].split(\".\")\r\n                    setExtension(ext.slice(-1)[0])\r\n                }\r\n            }\r\n        }\r\n    }, [field_items])\r\n\r\n\r\n    //const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    style={{ verticalAlign: \"middle\", height: \"10px\" }}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\", display:\"flex\", verticalAlign:\"middle\", lineHeight:\"50px\" }}>\r\n                            <strong>{field_label + \" #\" + parseInt(index + 1)}</strong> {isResource && loadedFiles[objectIndex] !== undefined ? <Tooltip placement=\"top\" title={`File is assigned`}><CheckBoxIcon style={{ marginLeft: \"10px\", height: \"100%\" }} color=\"success\" /></Tooltip> :  isResource && loadedFiles[objectIndex] === undefined ? <Tooltip placement=\"top\" title={`No file is assigned to this metadata`}><CheckBoxBlankIcon style={{ marginLeft: \"10px\", height: \"100%\" }} color=\"action\" /></Tooltip> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <>\r\n                            <Button onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button>\r\n                        </> : null}\r\n                    </div>   \r\n                {/*\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ lineHeight: \"40px\", height: \"40px\", width: \"100%\", verticalAlign: \"middle\" }} >\r\n                            <strong>{field_label + \" #\" + parseInt(index + 1)}</strong>\r\n                        </div>\r\n                        {useIcon && !expand ? <div style={{ display: \"flex\", lineHeight: \"40px\", height: \"40px\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            <div style={{ display: \"inline-flex\", lineHeight: \"40px\", height: \"40px\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                                <div style={{ display: \"flex\", lineHeight: \"40px\", height: \"40px\", width: \"10%\" }}>\r\n                                    <FileIcon size={48} extension={extension} {...defaultStyles[extension]} />\r\n                                </div>\r\n                                <div style={{ width: \"50%\", whiteSpace: \"nowrap\", textOverflow: \"ellipsis\", overflow: \"hidden\", }}>\r\n                                    {fileName.slice(0, 20) + \" | \" + mimeType}\r\n                                </div>\r\n                            </div>\r\n                        </div> : <div style={{ width: \"100%\" }}> </div>}\r\n                        {edit ? <Button onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button> : null}\r\n                    </div>\r\n                    */}\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div style={{ width: \"100%\" }}>\r\n                        {Object.keys(field_properties).map((item, index) => {\r\n                            let tempField = JSON.parse(JSON.stringify(field_properties[item]));\r\n                            if (tempField[\"enum\"]) {\r\n                                tempField[\"enumerate\"] = tempField[\"enum\"]\r\n                            }\r\n                            if (tempField[\"default\"]) {\r\n                                tempField[\"defaultValue\"] = tempField[\"default\"]\r\n                            }\r\n                            return (\r\n                                <div key={item} style={{ display: \"flex\" }}>\r\n                                    <ElementRenderer withinObject={withinObject} path={path} pathFormData={pathFormData} withinArray={withinArray} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} fieldkey={item} fieldIndex={objectIndex} elementRequired={field_items[\"required\"]} edit={false} field={tempField} />\r\n                                </div>\r\n                            )\r\n                        })\r\n                        }\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div >\r\n    </>);\r\n\r\n};\r\n\r\nexport default ItemObjectType;\r\n","import React from 'react';\r\nimport ItemIntegerType from './array_items/ItemIntegerType';\r\nimport ItemNumberType from './array_items/ItemNumberType';\r\nimport ItemStringType from \"./array_items/ItemStringType\";\r\nimport ItemObjectType from \"./array_items/ItemObjectType\";\r\n\r\n\r\nconst ArrayItemRenderer = ({ oSetDataInputItems, oDataInputItems, arrayFieldKey, withinObject, value, pathSchema, pathFormData, dataInputItems, setDataInputItems, field_label, field_items, path, type, edit, fieldIndex, fieldkey, enumerate, handleDeleteArrayItem, properties, isResource }) => {\r\n    switch (type) {\r\n        case 'string':\r\n            return (<ItemStringType\r\n                field_label={field_label}\r\n                value={value}\r\n                withinObject={withinObject}\r\n                arrayFieldKey={arrayFieldKey}\r\n                oSetDataInputItems={oSetDataInputItems}\r\n                oDataInputItems={oDataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                dataInputItems={dataInputItems}\r\n                path={path}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'number':\r\n            return (<ItemNumberType\r\n                field_label={field_label}\r\n                value={value}\r\n                path={path}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                withinObject={withinObject}\r\n                arrayFieldKey={arrayFieldKey}\r\n                oSetDataInputItems={oSetDataInputItems}\r\n                oDataInputItems={oDataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'integer':\r\n            return (<ItemIntegerType\r\n                field_label={field_label}\r\n                value={value}\r\n                path={path}\r\n                pathFormData={pathFormData}\r\n                withinObject={withinObject}\r\n                arrayFieldKey={arrayFieldKey}\r\n                oSetDataInputItems={oSetDataInputItems}\r\n                oDataInputItems={oDataInputItems}\r\n                pathSchema={pathSchema + \".value\"}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'object':\r\n            return (<ItemObjectType\r\n                field_label={field_label}\r\n                value={value}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                path={path}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n                field_items={field_items}\r\n                isResource = {isResource}\r\n            />)\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ArrayItemRenderer;\r\n","const generateUID = () => {\r\n    // I generate the UID from two parts here \r\n    // to ensure the random number provide enough bits.\r\n    var firstPart = (Math.random() * 46656) | 0;\r\n    var secondPart = (Math.random() * 46656) | 0;\r\n    firstPart = (\"000\" + firstPart.toString(36)).slice(-3);\r\n    secondPart = (\"000\" + secondPart.toString(36)).slice(-3);\r\n    return firstPart + secondPart;\r\n}\r\n\r\nexport default generateUID;","import React, { useState, useContext, useEffect, useCallback } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { AccordionDetails } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ArrayItemRenderer from \"./ArrayItemRenderer\";\r\nimport generateUniqueID from \"../utils/generateUniqueID\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport getValue from \"../utils/getValue\";\r\nimport set from \"set-value\";\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport { toast } from \"react-toastify\";\r\nimport getValueInSchemaFullPath from \"../utils/getValueInSchemaFullPath\";\r\nimport getFileIndex from \"../utils/getFileIndex\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst Accordion = withStyles({\r\n    root: {\r\n        border: `1px solid rgba(232, 244, 253, 1)`,\r\n        '&:not(:last-child)': {\r\n            borderBottom: 0,\r\n        },\r\n        boxShadow: \"none\",\r\n        '&:before': {\r\n            display: 'none',\r\n        },\r\n        '&$expanded': {\r\n            margin: 'auto',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordion);\r\n\r\nconst AccordionSummary = withStyles({\r\n    root: {\r\n        backgroundColor: \"rgba(232, 244, 253, 1)\",\r\n        borderBottom: '1px solid rgba(0, 0, 0, .0)',\r\n        marginBottom: -1,\r\n        minHeight: 56,\r\n        '&$expanded': {\r\n            minHeight: 56,\r\n        },\r\n    },\r\n    content: {\r\n        '&$expanded': {\r\n            margin: '12px 0',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst ArrayType = ({ adamant_field_error, adamant_error_description, maxItems, minItems, uniqueItems, oSetDataInputItems, oDataInputItems, withinObject, withinArray, field_uri, value, pathFormData, path, pathSchema, field_required, field_key, field_index, edit, field_label, field_description, field_items, field_prefixItems }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [expand, setExpand] = useState(true);\r\n    const { handleLoadedFiles, handleRemoveFile, loadedFiles, setLoadedFiles, updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput, openDatasetSubmissionDialog } = useContext(FormContext);\r\n    const [inputItems, setInputItems] = useState([]);\r\n    const [dataInputItems, setDataInputItems] = useState([]);\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\")\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [inputError, setInputError] = useState(false)\r\n    const [currentFiles, setCurrentFiles] = useState([])\r\n\r\n    useEffect(()=>{\r\n        if (field_items[\"type\"] === \"object\") {\r\n            setDataInputItems([{}])\r\n        }\r\n\r\n        if (value !== undefined) {\r\n            if (value.length !== 0 && loadedFiles.length === 0){\r\n                setLoadedFiles(Array(value.length))\r\n            }\r\n        }\r\n\r\n    },[field_items, value])\r\n\r\n    useEffect(() => {\r\n        //console.log(\"currentFiles length:\", currentFiles.length)\r\n        if (currentFiles.length > 0) {\r\n            // check if current array still has not reached maximum item\r\n            if (maxItems !== undefined) {\r\n                if (maxItems === (dataInputItems.length)) {\r\n                    toast.warning(\r\n                        `Can not add more item. Maximum number (${maxItems}) of items has been reached.`,\r\n                        {\r\n                            toastId: \"maxNumberWarning\"\r\n                        }\r\n                    );\r\n\r\n                    return\r\n                }\r\n            }\r\n            let stuff = currentFiles\r\n            let acceptedFile = stuff.slice(-1)[0]\r\n            // only works for resource schema first!!! THIS IS ONLY FOR TESTING\r\n            let desiredValues = {}\r\n            let inputItemIndex = undefined\r\n\r\n            // check if the existing dataInputs already have metadata but not the files yet\r\n            //console.log(\"dataInputItems:\", dataInputItems)\r\n            for (let i = 0; i < dataInputItems.length; i++) {\r\n                if (acceptedFile[\"name\"] === dataInputItems[i][\"fileName\"]) {\r\n                    inputItemIndex = i\r\n                }\r\n            }\r\n            // after that insert the files\r\n            if (inputItemIndex !== undefined) {\r\n                desiredValues = {\r\n                    //\"file\": `fileupload:${acceptedFile[\"type\"]};${acceptedFile[\"name\"]};${acceptedFile[\"size\"]}`,\r\n                    \"fileName\": acceptedFile[\"name\"],\r\n                    \"filetype\": acceptedFile[\"type\"]\r\n                }\r\n                let fileAlreadyExist = handleLoadedFiles(acceptedFile, value)\r\n                //console.log(\"does the file already exist?\", fileAlreadyExist)\r\n                if (!fileAlreadyExist) {\r\n                    handleAddArrayItem(desiredValues, inputItemIndex)\r\n                    let val = currentFiles\r\n                    val.pop()\r\n                    setCurrentFiles(val)\r\n                } else {\r\n                    console.log(\"Not adding this array item.\")\r\n                    let arr = dataInputItems;\r\n                    const items = Array.from(arr);\r\n                    setDataInputItems(items)\r\n                    let val = currentFiles\r\n                    val.pop()\r\n                    setCurrentFiles(val)\r\n                    // insert the newly inserted data to convertedSchema\r\n                    let newConvertedSchema = convertedSchema\r\n                    set(newConvertedSchema, path + \".value\", items)\r\n                    updateParent(newConvertedSchema)\r\n                }\r\n\r\n            } else {\r\n                //console.log(\"field items:\", field_items)\r\n                if (field_items[\"properties\"][\"file\"] === undefined) {\r\n                    desiredValues = {\r\n                        \"fileName\": acceptedFile[\"name\"],\r\n                        \"filetype\": acceptedFile[\"type\"]\r\n                    }\r\n                } else {\r\n                    desiredValues = {\r\n                        \"file\": `fileupload:${acceptedFile[\"type\"]};${acceptedFile[\"name\"]};${acceptedFile[\"size\"]}`,\r\n                        \"fileName\": acceptedFile[\"name\"],\r\n                        \"filetype\": acceptedFile[\"type\"]\r\n                    }\r\n                }\r\n                let fileAlreadyExist = handleLoadedFiles(acceptedFile, value)\r\n                if (!fileAlreadyExist) {\r\n                    handleAddArrayItem(desiredValues)\r\n                    let val = currentFiles\r\n                    val.pop()\r\n                    setCurrentFiles(val)\r\n                } else {\r\n                    console.log(\"Not adding this array item.\")\r\n                    let arr = dataInputItems;\r\n                    const items = Array.from(arr);\r\n                    setDataInputItems(items)\r\n                    let val = currentFiles\r\n                    val.pop()\r\n                    setCurrentFiles(val)\r\n                    // insert the newly inserted data to convertedSchema\r\n                    let newConvertedSchema = convertedSchema\r\n                    set(newConvertedSchema, path + \".value\", items)\r\n                    updateParent(newConvertedSchema)\r\n                }\r\n            }\r\n        } else {\r\n            //setOpenReadingFilesDialogForArrayType(false)\r\n        }\r\n    }, [currentFiles, dataInputItems])\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    // also create new items based on the uploaded files if applicable (only for resource array!)\r\n    useEffect(() => {\r\n\r\n\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists\r\n    /*\r\n    useEffect(() => {\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (value === undefined) {\r\n                console.log(\"do nothing\")\r\n            } else {\r\n                // use existing schema if items is not empty\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(newFieldItems);\r\n                setInputItems(items);\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    setDataInputItems(items2)\r\n\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push({});\r\n                    setDataInputItems(items2)\r\n\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                }\r\n            }\r\n        }\r\n    }, [value])\r\n    */\r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            value = oDataInputItems[field_index][field_key]\r\n\r\n            if (value !== undefined) {\r\n                if (field_prefixItems === undefined & field_items !== undefined) {\r\n                    if (field_items[\"type\"] !== \"object\") {\r\n                        if (Object.keys(field_items).length === 0) {\r\n                            // create field_items if items is empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                field_items = { type: \"string\", field_key: `${generateUniqueID()}` }\r\n                                items.push(field_items);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        } else {\r\n                            // use existing schema if items is not empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (value !== undefined) {\r\n                if (field_prefixItems === undefined & field_items !== undefined) {\r\n                    if (field_items[\"type\"] !== \"object\") {\r\n                        if (Object.keys(field_items).length === 0) {\r\n                            // create field_items if items is empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                field_items = { type: \"string\", field_key: `${generateUniqueID()}` }\r\n                                items.push(field_items);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n\r\n                            // conv. schema data\r\n                            handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                        } else {\r\n                            // use existing schema if items is not empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n\r\n                            // conv. schema data\r\n                            handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                        }\r\n                    }\r\n                    else {\r\n                        // use existing schema if items is not empty\r\n                        let items = [];\r\n                        if (dataInputItems.length === 0) {\r\n                            let arr = value;\r\n                            arr = Array.from(arr);\r\n                            let currentInputItems = [...inputItems]\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = (currentInputItems[i] !== undefined & currentInputItems.length !== 0 ? currentInputItems[i] : {})\r\n                                if (Object.keys(newFieldItems).length === 0) {\r\n                                    newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                    newFieldItems[\"type\"] = \"object\"\r\n                                    newFieldItems[\"properties\"] = JSON.parse(JSON.stringify(field_items[\"properties\"]))\r\n                                    newFieldItems[\"required\"] = field_items[\"required\"]\r\n                                    Object.keys(newFieldItems[\"properties\"]).forEach((element) => {\r\n                                        newFieldItems[\"properties\"][element][\"value\"] = arr[i][element]\r\n                                    })\r\n                                }\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        } else {\r\n                            let arr = value;\r\n                            arr = Array.from(arr);\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = {}\r\n                                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                newFieldItems[\"type\"] = \"object\"\r\n                                newFieldItems[\"properties\"] = JSON.parse(JSON.stringify(field_items[\"properties\"]))\r\n                                newFieldItems[\"required\"] = field_items[\"required\"]\r\n                                Object.keys(newFieldItems[\"properties\"]).forEach((element) => {\r\n                                    newFieldItems[\"properties\"][element][\"value\"] = arr[i][element]\r\n                                })\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                setInputItems([]);\r\n                setDataInputItems([])\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (result === null) return;\r\n\r\n        if (!result.destination) return;\r\n\r\n        if (withinObject & withinArray) {\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            const [reorderedItem] = items.splice(result.source.index, 1);\r\n            items.splice(result.destination.index, 0, reorderedItem);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems\r\n            const items2 = Array.from(arr2);\r\n            const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n            items2.splice(result.destination.index, 0, reorderedItem2);\r\n            setDataInputItems(items2)\r\n\r\n            // for loadedFiles\r\n            let files = loadedFiles\r\n            const items3 = Array.from(files)\r\n            const [reorderedItem3] = items3.splice(result.source.index, 1)\r\n            items3.splice(result.destination.index, 0, reorderedItem3)\r\n            setLoadedFiles(items3)\r\n\r\n            /*\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n            */\r\n        }\r\n        else {\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            const [reorderedItem] = items.splice(result.source.index, 1);\r\n            items.splice(result.destination.index, 0, reorderedItem);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems\r\n            const items2 = Array.from(arr2);\r\n            const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n            items2.splice(result.destination.index, 0, reorderedItem2);\r\n            setDataInputItems(items2)\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n\r\n            // for loadedFiles\r\n            let files = loadedFiles\r\n            const items3 = Array.from(files)\r\n            const [reorderedItem3] = items3.splice(result.source.index,1)\r\n            items3.splice(result.destination.index, 0, reorderedItem3)\r\n            setLoadedFiles(items3)\r\n            console.log(items3)\r\n        }\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        /*\r\n        // remove the file in loadedFiles\r\n        let metmet = getValueInSchemaFullPath(convertedSchema, path + \".properties\")\r\n        const fileMetadata = getAllFileMetadata(metmet, [])\r\n        if (fileMetadata.length > 0) {\r\n            for (let i = 0; i < fileMetadata.length; i++) {\r\n                const fileIndex = getFileIndex(loadedFiles, fileMetadata[i])\r\n                handleRemoveFile(fileIndex)\r\n            }\r\n        }*/\r\n        // remove the file in loadedFiles\r\n        const fileMetadata = getValue(convertedSchema, path + `.value`)\r\n        //console.log(\"fileMetadata:\", fileMetadata)\r\n        if (fileMetadata !== undefined) {\r\n            let keywords = []\r\n            if (Array.isArray(fileMetadata)) {\r\n                if (fileMetadata.length > 0) {\r\n                    for (let i = 0; i < fileMetadata.length; i++) {\r\n                        if (typeof fileMetadata[i] === \"object\") {\r\n                            Object.keys(fileMetadata[i]).forEach((key) => {\r\n                                if (typeof fileMetadata[i][key] === \"string\") {\r\n                                    if (fileMetadata[i][key].includes(\"fileupload:\") && fileMetadata[i][key].split(\";\").length === 3) {\r\n                                        keywords.push(fileMetadata[i][key])\r\n                                    }\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //console.log(\"keywords found:\", keywords)\r\n            if (keywords.length > 0) {\r\n                for (let i = 0; i < keywords.length; i++) {\r\n                    const fileIndex = getFileIndex(loadedFiles, keywords[i])\r\n                    handleRemoveFile(fileIndex)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"$id\": field_uri,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"items\": field_items,\r\n        \"minItems\": minItems,\r\n        \"maxItems\": maxItems,\r\n        \"uniqueItems\": uniqueItems,\r\n        \"type\": \"array\",\r\n        \"value\": value\r\n    }\r\n\r\n    // handle add array item\r\n    const handleAddArrayItem = (desiredValues, inputItemIndex) => {\r\n        // check if current array still has not reached maximum item\r\n        if (maxItems !== undefined) {\r\n            if (maxItems === (dataInputItems.length)) {\r\n                toast.warning(\r\n                    `Can not add more item. Maximum number (${maxItems}) of items has been reached.`,\r\n                    {\r\n                        toastId: \"maxNumberWarning\"\r\n                    }\r\n                );\r\n\r\n                return\r\n            }\r\n        }\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (Object.keys(field_items).length === 0) {\r\n                // create field_items if items is empty\r\n                field_items = { type: \"string\", field_key: `${generateUniqueID()}` }\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(field_items);\r\n                setInputItems(items);\r\n\r\n                // push a new item for the data\r\n                let arr2 = dataInputItems;\r\n                const items2 = Array.from(arr2);\r\n                items2.push(\"\");\r\n                setDataInputItems(items2)\r\n                console.log(\"Item added.\")\r\n            } else {\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                if (inputItemIndex === undefined) {\r\n                    // use existing schema if items is not empty\r\n                    newFieldItems[\"field_key\"] = generateUniqueID();\r\n                    let arr = inputItems;\r\n                    const items = Array.from(arr);\r\n                    items.push(newFieldItems);\r\n                    setInputItems(items);\r\n                }\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    //console.log(items2)\r\n                    console.log(items2)\r\n                    setDataInputItems(items2)\r\n                    console.log(\"Item added.\")\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    if (desiredValues !== undefined) {\r\n                        if (inputItemIndex !== undefined) {\r\n                            // for now only works with resource schema!!!!!!!\r\n                            let arr2 = dataInputItems;\r\n                            const items2 = Array.from(arr2);\r\n                            items2[inputItemIndex][\"file\"] = desiredValues[\"file\"]\r\n                            items2[inputItemIndex][\"fileName\"] = desiredValues[\"fileName\"]\r\n                            items2[inputItemIndex][\"fileType\"] = desiredValues[\"fileType\"]\r\n                            setDataInputItems(items2)\r\n                            console.log(\"Item added.\")\r\n                            console.log(\"Finished adding array item.\")\r\n                            // insert the newly inserted data to convertedSchema\r\n                            let newConvertedSchema = convertedSchema\r\n                            set(newConvertedSchema, path + \".value\", items2)\r\n                            updateParent(newConvertedSchema)\r\n\r\n                        } else {\r\n                            // for now only works with resource schema!!!!!!!\r\n                            let arr2 = dataInputItems;\r\n                            const items2 = Array.from(arr2);\r\n                            items2.push(desiredValues)\r\n                            setDataInputItems(items2)\r\n                            console.log(\"Item added.\")\r\n                            console.log(\"Finished adding array item.\")\r\n                            // insert the newly inserted data to convertedSchema\r\n                            let newConvertedSchema = convertedSchema\r\n                            set(newConvertedSchema, path + \".value\", items2)\r\n                            updateParent(newConvertedSchema)\r\n                        }\r\n                    }\r\n                    else {\r\n                        let arr2 = dataInputItems;\r\n                        const items2 = Array.from(arr2);\r\n                        items2.push({});\r\n                        setDataInputItems(items2)\r\n                        console.log(\"Item added.\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle delete item\r\n    const handleDeleteArrayItem = (index) => {\r\n        console.log(edit)\r\n\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            console.log(path)\r\n            let modPath = path.split('.')\r\n            let lastKey = path.slice(-1)[0]\r\n            console.log(modPath)\r\n            modPath.pop()\r\n            modPath = modPath.join('.')\r\n\r\n            let newPath = modPath + '.value' + `.${lastKey}`+`.${field_key}`\r\n            console.log(\"new path:\",newPath)\r\n            // remove the file in loadedFiles\r\n            if (getValue(convertedSchema, newPath) !== undefined) { // which means there is no value yet\r\n                const fileMetadata = getValue(convertedSchema, newPath + `.${index}`)\r\n                if (fileMetadata !== undefined) {\r\n                    let keyword = undefined\r\n                    if (typeof fileMetadata === \"object\") {\r\n                        Object.keys(fileMetadata).forEach((key) => {\r\n                            if (typeof fileMetadata[key] === \"string\") {\r\n                                if (fileMetadata[key].includes(\"fileupload:\") && fileMetadata[key].split(\";\").length === 3) {\r\n                                    keyword = fileMetadata[key]\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    if (keyword !== undefined) {\r\n                        const fileIndex = getFileIndex(loadedFiles, keyword)\r\n                        handleRemoveFile(fileIndex)\r\n                    }\r\n                }\r\n            }\r\n\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            items.splice(index, 1);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems;\r\n            const items2 = Array.from(arr2);\r\n            items2.splice(index, 1);\r\n            setDataInputItems(items2)\r\n\r\n            // conv. schema data\r\n            console.log(items2)\r\n            handleConvertedDataInput(items2, newPath, \"array\")\r\n        } else {\r\n            // remove the file in loadedFiles\r\n            if (getValue(convertedSchema, path + `.value`) !== undefined) { // which means there is no value yet\r\n                const fileMetadata = getValue(convertedSchema, path + `.value.${index}`)\r\n                if (fileMetadata !== undefined) {\r\n                    let keyword = undefined\r\n                    if (typeof fileMetadata === \"object\") {\r\n                        Object.keys(fileMetadata).forEach((key) => {\r\n                            if (typeof fileMetadata[key] === \"string\") {\r\n                                if (fileMetadata[key].includes(\"fileupload:\") && fileMetadata[key].split(\";\").length === 3) {\r\n                                    keyword = fileMetadata[key]\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    if (keyword !== undefined) {\r\n                        const fileIndex = getFileIndex(loadedFiles, keyword)\r\n                        handleRemoveFile(fileIndex)\r\n                    } else {\r\n                        handleRemoveFile(index)\r\n                    }\r\n                }\r\n            }\r\n\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            items.splice(index, 1);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems;\r\n            const items2 = Array.from(arr2);\r\n            items2.splice(index, 1);\r\n            setDataInputItems(items2)\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n        }\r\n    }\r\n\r\n\r\n    // handle read data files, to load a selection of files and to integrate their metadata\r\n    const onDrop = useCallback(\r\n        (acceptedFile) => {\r\n            setCurrentFiles(acceptedFile)\r\n        },\r\n        [setCurrentFiles])\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        multiple: true,\r\n    });\r\n\r\n    return (<>\r\n        <div onClick={() => {\r\n            if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                set(convertedSchema, path + \".adamant_field_error\", false)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                updateParent(convertedSchema)\r\n            }\r\n        }} style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} style={inputError ? {\r\n                border: `1px solid #ff7961`,\r\n                '&:not(:lastChild)': {\r\n                    borderBottom: 0,\r\n                }\r\n            } :\r\n                {\r\n                    border: `1px solid rgba(232, 244, 253, 1)`,\r\n                    '&:not(:lastChild)': {\r\n                        borderBottom: 0,\r\n                    }\r\n                }} >\r\n                <AccordionSummary\r\n                    style={inputError ? { backgroundColor: \"white\", borderRadius: \"4px\", borderBottom: '1px solid  #ff7961', height: `${expand ? \"auto\" : \"10px\"}` } : { backgroundColor: \"rgba(232, 244, 253, 1)\", borderBottom: '1px solid  rgba(0, 0, 0, .0)', height: `${expand ? \"auto\" : \"10px\"}` }}\r\n                    expandIcon={/*withinObject ? null : */\r\n                        <Tooltip placement=\"top\" title={`Collapse/Expand this container`}>\r\n                            <ExpandMoreIcon />\r\n                        </Tooltip>}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography style={inputError ? { color: \"#ff7961\", width: \"100%\", fontSize: \"13pt\", lineHeight: `${expand ? \"\" : \"40px\"}` } : { width: \"100%\", fontSize: \"13pt\", lineHeight: `${expand ? \"\": \"40px\"}` }} className={classes.heading}>{field_label + (required ? \"*\" : \"\")} {dataInputItems.length > 0 ? `| ${dataInputItems.length} item(s)` : null} </Typography>\r\n                            {expand ? <div style={inputError ? { color: \"#ff7961\", fontSize:\"10pt\" } : { color: \"gray\", fontSize:\"10pt\" }}>\r\n                                {descriptionText}\r\n                            </div> : null}\r\n                        </div>\r\n                        {field_key === \"resource\" ? <Button style={{ width: \"200px\" }} {...getRootProps()} ><input {...getInputProps()} />Read Resources</Button> : null}\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit \"${field_label}\"`}>\r\n                                <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove \"${field_label}\"`}>\r\n                                <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <div style={{ paddingTop: \"2px\" }}></div>\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(inputItems).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={false} key={inputItems[index][\"field_key\"]} draggableId={inputItems[index][\"field_key\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <Tooltip placement=\"top\" title={`Drag & drop to adjust the order of this item`}>\r\n                                                                    <DragHandleIcon fontSize=\"small\" />\r\n                                                                </Tooltip>\r\n                                                            </div>\r\n                                                            <ArrayItemRenderer arrayFieldKey={field_key} withinObject={withinObject} value={value} pathSchema={pathSchema} pathFormData={pathFormData} dataInputItems={dataInputItems} oDataInputItems={oDataInputItems} oSetDataInputItems={oSetDataInputItems} setDataInputItems={setDataInputItems} field_label={field_label} field_items={inputItems.length !== 0 ? inputItems[index] : field_items} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path} fieldIndex={index} fieldkey={inputItems[index][\"field_key\"]} type={inputItems[index][\"type\"]} isResource = {field_key === 'resource'? true : false} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    {field_key !== \"resource\" ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <Button onClick={() => { handleAddArrayItem() }} style={{ fontSize: \"12px\", marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><AddIcon style={{ paddingRight: \"5px\" }} fontSize=\"small\" color=\"primary\" /> Add Item</Button>\r\n                                    </div> : null}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default ArrayType;","import React, { useState, useContext } from \"react\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport getValue from \"../utils/getValue\";\r\nimport set from \"set-value\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport { FormControl } from \"@material-ui/core\";\r\nimport { FormLabel } from \"@material-ui/core\";\r\nimport { FormHelperText } from \"@material-ui/core\";\r\nimport { IconButton } from \"@material-ui/core\";\r\n\r\nconst AnyOfKeywordPlaceHolder = ({ pathFormData, path, field_required, field_uri, field_key, field_index, edit, field_label, field_description, field_prefixItems, anyOf_list }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete } = useContext(FormContext);\r\n\r\n    let field_items = {}\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"items\": field_items,\r\n        \"type\": \"anyOf\",\r\n    }\r\n\r\n    return (<>\r\n        <div style={{ paddingTop: \"10px\", paddingLeft: \"15px\", width: \"100%\" }}>\r\n            <FormControl style={{ display: \"inline-flex\", width: \"100%\" }}>\r\n                <FormLabel style={{ display: \"inline-flex\", width: \"100%\" }}>{field_label === undefined ? \"\" : field_label + \":\"}</FormLabel>\r\n                <div style={{ display: \"inline-flex\", width: \"100%\" }}>\r\n                    <div style={{ paddingTop: \"15px\", textAlign: \"left\", width: \"100%\" }}>\r\n                        \"AnyOf\" keyword is not yet implemented.\r\n                    </div>\r\n                    <div style={{ display: \"inline-flex\", width: \"100%\", justifyContent: \"right\" }}>\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit \"${field_label}\"`}>\r\n                                <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><EditIcon fontSize=\"small\" color=\"primary\" /></IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove \"${field_label}\"`}>\r\n                                <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div>\r\n                </div>\r\n                <FormHelperText>{field_description}</FormHelperText>\r\n            </FormControl>\r\n        </div>\r\n        {openDialog ? <EditElement field_uri={field_uri} anyOf_list={anyOf_list} pathFormData={pathFormData} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default AnyOfKeywordPlaceHolder;","import React, { useContext, useEffect, useState, useCallback } from 'react'\r\nimport { FormLabel, FormHelperText, FormControl } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton, Button } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport NotRenderable from \"../../assets/not-renderable.png\"\r\nimport FileIcon from \"../../assets/file-icon.svg\"\r\n\r\nconst getAcceptedTypes = (field_description) => {\r\n    let matches = field_description.match(/\\[(.*?)\\]/);\r\n\r\n    if (matches) {\r\n        let submatch = matches[1];\r\n        submatch = submatch.replaceAll(\"\\\"\", \"\")\r\n        submatch = submatch.replaceAll(\" \", \"\")\r\n        submatch = submatch.split(\",\")\r\n        return submatch\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\n\r\nconst validateAcceptedFile = (fileType, acceptedTypes) => {\r\n    fileType = fileType.split(\".\")\r\n    fileType = fileType.pop()\r\n    fileType = \".\" + fileType\r\n\r\n    if (acceptedTypes.includes(fileType)) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\n\r\nconst FileUpload = ({ adamant_field_error, adamant_error_description, contentEncoding, withinObject, field_uri, dataInputItems, setDataInputItems, withinArray, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate, defaultValue, value }) => {\r\n\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputError, setInputError] = useState(false)\r\n    //const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [descriptionText, setDescriptionText] = useState()\r\n    const [dataUrl, setDataUrl] = useState(defaultValue !== undefined ? defaultValue : value !== undefined ? value : \"\")\r\n    const [renderingInProgress, setRenderingInProgress] = useState(false)\r\n    const [mediaFileType, setMediaFileType] = useState(value !== undefined ? value.split(\";\")[0].replace(\"data:\", \"\") : \"\")\r\n    const [fileSize, setFileSize] = useState();\r\n    //const [required, setRequired] = useState(false)\r\n\r\n    // update description text state as soon as new field description is obtained\r\n    useEffect(() => {\r\n        if (adamant_error_description !== undefined) {\r\n            setDescriptionText(adamant_error_description)\r\n        }\r\n        else if (field_description !== undefined) {\r\n            setDescriptionText(field_description)\r\n        }\r\n        else {\r\n            setDescriptionText(\"\")\r\n        }\r\n\r\n    }, [field_description])\r\n\r\n    // max. allowed fileupload size\r\n    let allowedFileSize = 500000\r\n\r\n    // for visual feedback on the field after validation\r\n    useEffect(() => {\r\n        setInputError(adamant_field_error !== undefined ? adamant_field_error : false)\r\n        setDescriptionText(adamant_error_description !== undefined ? adamant_error_description : field_description !== undefined ? field_description : \"\")\r\n    }, [adamant_error_description, adamant_field_error])\r\n\r\n    // define a list of renderable media file types\r\n    let renderableMediaFileTypes = [\"image/jpeg\", \"image/png\", \"image/bmp\", \"image/tiff\", \"image/svg+xml\"]\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // visualize that the field is required\r\n    let fieldLabel = field_label;\r\n    if (required === true) {\r\n        fieldLabel += \"*\"\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // browse or drag&drop file\r\n    const onDrop = useCallback(\r\n        (acceptedFile) => {\r\n            let acceptedTypes = getAcceptedTypes(field_description);\r\n            let valid = true\r\n            if (acceptedTypes.length === 0) {\r\n                valid = true\r\n            } else {\r\n                valid = validateAcceptedFile(acceptedFile[0][\"name\"], acceptedTypes)\r\n                if (!valid) {\r\n                    setDescriptionText(\"Seems like you've given a file with an unaccepted file type?\")\r\n                }\r\n            }\r\n            // only accept file lower than allowedFileSize\r\n            //if (acceptedFile[0][\"size\"] > allowedFileSize) {\r\n            //    valid = false;\r\n            //    setDescriptionText(`File size is too big. The file size should not exceed ${allowedFileSize / 1000} KB.`)\r\n            //}\r\n            if (valid) {\r\n                setRenderingInProgress(true)\r\n                setFileSize(acceptedFile[0][\"size\"])\r\n                // process the schema, validation etc\r\n                // read file and update receivedData\r\n                const reader = new FileReader();\r\n                reader.onabort = () => console.log(\"file reading was aborted\");\r\n                reader.onerror = () => console.log(\"file reading has failed\");\r\n                reader.onload = () => {\r\n                    const binaryStr = reader.result;\r\n                    setDataUrl(binaryStr)\r\n                    setMediaFileType(acceptedFile[0][\"type\"])\r\n                    if (withinArray !== undefined & withinArray) {\r\n                        let newPathFormData = pathFormData.split(\".\");\r\n                        newPathFormData.pop()\r\n                        newPathFormData = newPathFormData.join(\".\")\r\n\r\n                        let newPath = path.split(\".\")\r\n                        newPath.pop()\r\n                        newPath = newPath.join(\".\")\r\n\r\n                        let arr = dataInputItems;\r\n                        const items = Array.from(arr);\r\n                        items[field_index][field_key] = binaryStr;\r\n                        setDataInputItems(items);\r\n                        handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n\r\n                        setRenderingInProgress(false)\r\n                    } else {\r\n                        handleConvertedDataInput(binaryStr, path + \".value\", \"boolean\")\r\n\r\n                        setRenderingInProgress(false)\r\n                    }\r\n                }\r\n                reader.readAsDataURL(acceptedFile[0]);\r\n            } else {\r\n                setRenderingInProgress(false)\r\n                setInputError(true)\r\n                setDataUrl(\"\")\r\n                setMediaFileType(\"\")\r\n            }\r\n        },\r\n        []\r\n    );\r\n    //\r\n\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            //if (Array.isArray(latestVal)) { latestVal = latestVal[field_key] }\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : \"\")\r\n            if (val === \"\") {\r\n                setDataUrl(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setDataUrl(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    setDataUrl(val)\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : \"\")\r\n            if (val === \"\") {\r\n                setDataUrl(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else {\r\n                setDataUrl(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                handleConvertedDataInput(val, path + \".value\", \"boolean\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"fileupload (string)\",\r\n        \"value\": value,\r\n    }\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        multiple: false,\r\n    });\r\n\r\n    const handleOnClickedClear = () => {\r\n        setMediaFileType(\"\")\r\n        setDataUrl(\"\")\r\n        setFileSize()\r\n        // then delete in the form convdata\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_key] = undefined;\r\n            setDataInputItems(items);\r\n            handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n        } else {\r\n            handleConvertedDataInput(\"\", path + \".value\", \"boolean\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div onClick={() => {\r\n                if (adamant_error_description !== undefined && adamant_field_error !== undefined) {\r\n                    set(convertedSchema, path + \".adamant_error_description\", (field_description !== undefined ? field_description : \"\"))\r\n                    set(convertedSchema, path + \".adamant_field_error\", false)\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    updateParent(convertedSchema)\r\n                }\r\n                if (inputError === true) {\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    // then delete the value the convertedSchema\r\n                }\r\n            }} style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', alignItems: \"center\", width: '100%' }}>\r\n                <div style={{ paddingLeft: \"15px\", width: \"100%\" }}>\r\n                    <FormControl >\r\n                        <FormLabel style={{ paddingBottom: \"10px\", color: `${inputError ? \"red\" : \"\"}` }}>{fieldLabel === undefined ? + \"\" : fieldLabel + \":\"}</FormLabel>\r\n                        {renderingInProgress ? <Box sx={{ width: '225px' }}>\r\n                            <LinearProgress />\r\n                        </Box> : null}\r\n                        <div style={{ width: \"225px\", display: \"flex\", justifyContent: \"center\" }}>\r\n                            {dataUrl !== \"\" ? <img alt='fileUpload' src={renderableMediaFileTypes.includes(mediaFileType) ? dataUrl : FileIcon} width={renderableMediaFileTypes.includes(mediaFileType) ? \"225\" : \"64\"} /> : \"\"}\r\n                        </div>\r\n                        <div style={{ width: \"225px\", fontSize: \"10px\", color: \"grey\", paddingTop: \"5px\", whiteSpace: \"nowrap\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>\r\n                            {dataUrl}\r\n                        </div>\r\n                        <div style={{ width: \"225px\", fontSize: \"10px\", color: \"grey\", paddingTop: \"5px\", whiteSpace: \"nowrap\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>\r\n                            {fileSize !== undefined ? `size: ${fileSize / 1000} KB` : null}\r\n                        </div>\r\n                        <div style={{ paddingTop: \"5px\", textAlign: \"left\", width: \"100%\" }} >\r\n                            <Button color={inputError ? \"secondary\" : \"default\"} variant=\"outlined\" {...getRootProps()} ><input {...getInputProps()} />Upload a file</Button>\r\n                            {dataUrl !== \"\" ? <Button onClick={() => { handleOnClickedClear() }} style={{ marginLeft: \"5px\" }} variant=\"outlined\" color=\"secondary\">Clear</Button> : null}\r\n                        </div>\r\n                        <FormHelperText style={{ color: `${inputError ? \"red\" : \"\"}` }}>{descriptionText}</FormHelperText>\r\n                    </FormControl>\r\n                </div>\r\n                {\r\n                    edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null\r\n                }\r\n            </div >\r\n            {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default FileUpload;\r\n","import React from 'react';\r\nimport StringType from \"./elements/StringType\";\r\nimport NumberType from \"./elements/NumberType\";\r\nimport ObjectType from './elements/ObjectType';\r\nimport IntegerType from './elements/IntegerType';\r\nimport BooleanType from './elements/BooleanType';\r\nimport ArrayType from './elements/ArrayType';\r\nimport AnyOfKeywordPlaceHolder from './elements/AnyOfKeywordPlaceHolder';\r\nimport FileUpload from './elements/FileUpload';\r\n\r\n\r\nconst ElementRenderer = ({withinObject, dataInputItems, setDataInputItems, withinArray, path, pathSchema, pathFormData, elementRequired, fieldkey, fieldIndex, edit, field: { minItems, maxItems, uniqueItems, minimum, maximum, minLength, maxLength, type, $id, id, title, contentEncoding, description, properties, required, enumerate, items, defaultValue, value, anyOf, adamant_field_error, adamant_error_description } }) => {\r\n\r\n    switch (type) {\r\n        case 'string':\r\n            if (contentEncoding !== undefined) {\r\n                return (<FileUpload\r\n                    adamant_field_error={adamant_field_error}\r\n                    adamant_error_description={adamant_error_description}\r\n                    contentEncoding={contentEncoding}\r\n                    value={value}\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    dataInputItems={dataInputItems}\r\n                    setDataInputItems={setDataInputItems}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_index={fieldIndex}\r\n                    field_label={title}\r\n                    field_uri={$id !== undefined ? $id : id}\r\n                    field_description={description}\r\n                    field_required={elementRequired}\r\n                    defaultValue={defaultValue}\r\n                    edit={edit}\r\n                />)\r\n            } else {\r\n                return (<StringType\r\n                    adamant_field_error={adamant_field_error}\r\n                    adamant_error_description={adamant_error_description}\r\n                    value={value}\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    dataInputItems={dataInputItems}\r\n                    setDataInputItems={setDataInputItems}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_index={fieldIndex}\r\n                    field_label={title}\r\n                    field_uri={$id !== undefined ? $id : id}\r\n                    field_description={description}\r\n                    field_required={elementRequired}\r\n                    field_enumerate={enumerate}\r\n                    defaultValue={defaultValue}\r\n                    edit={edit}\r\n                    minLength={minLength}\r\n                    maxLength={maxLength}\r\n                />)\r\n            }\r\n        case 'number':\r\n            return (<NumberType\r\n                adamant_field_error={adamant_field_error}\r\n                adamant_error_description={adamant_error_description}\r\n                minimum={minimum}\r\n                maximum={maximum}\r\n                value={value}\r\n                withinArray={withinArray}\r\n                withinObject={withinObject}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldkey}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                field_key={fieldkey}\r\n                field_uri={$id !== undefined ? $id : id}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'integer':\r\n            return (<IntegerType\r\n                adamant_field_error={adamant_field_error}\r\n                adamant_error_description={adamant_error_description}\r\n                minimum={minimum}\r\n                maximum={maximum}\r\n                value={value}\r\n                withinArray={withinArray}\r\n                withinObject={withinObject}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldkey}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                field_key={fieldkey}\r\n                field_uri={$id !== undefined ? $id : id}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'boolean':\r\n            return (<BooleanType\r\n                adamant_field_error={adamant_field_error}\r\n                adamant_error_description={adamant_error_description}\r\n                value={value}\r\n                withinArray={withinArray}\r\n                withinObject={withinObject}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldkey}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                field_key={fieldkey}\r\n                field_uri={$id !== undefined ? $id : id}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'array':\r\n            if (fieldkey === \"resource\") {\r\n                return (<ArrayType\r\n                    adamant_field_error={adamant_field_error}\r\n                    adamant_error_description={adamant_error_description}\r\n                    value={value}\r\n                    maxItems={maxItems}\r\n                    minItems={minItems}\r\n                    uniqueItems={uniqueItems}\r\n                    oDataInputItems={dataInputItems}\r\n                    oSetDataInputItems={setDataInputItems}\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_index={fieldIndex}\r\n                    field_uri={$id !== undefined ? $id : id}\r\n                    field_label={title}\r\n                    field_description={description}\r\n                    field_required={elementRequired}\r\n                    field_items={items}\r\n                    edit={edit}\r\n                />)\r\n            }\r\n            else {\r\n                return (<ArrayType\r\n                    adamant_field_error={adamant_field_error}\r\n                    adamant_error_description={adamant_error_description}\r\n                    value={value}\r\n                    maxItems={maxItems}\r\n                    minItems={minItems}\r\n                    uniqueItems={uniqueItems}\r\n                    oDataInputItems={dataInputItems}\r\n                    oSetDataInputItems={setDataInputItems}\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_index={fieldIndex}\r\n                    field_uri={$id !== undefined ? $id : id}\r\n                    field_label={title}\r\n                    field_description={description}\r\n                    field_required={elementRequired}\r\n                    field_items={items}\r\n                    edit={edit}\r\n                />)\r\n            }\r\n        case 'object':\r\n            if (anyOf !== undefined) {\r\n                return (\r\n                    <AnyOfKeywordPlaceHolder\r\n                        adamant_field_error={adamant_field_error}\r\n                        adamant_error_description={adamant_error_description}\r\n                        pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                        withinArray={withinArray}\r\n                        withinObject={withinObject}\r\n                        dataInputItems={dataInputItems}\r\n                        setDataInputItems={setDataInputItems}\r\n                        path={path + \".\" + fieldIndex}\r\n                        field_index={fieldIndex}\r\n                        field_key={fieldkey}\r\n                        field_uri={$id !== undefined ? $id : id}\r\n                        field_label={title}\r\n                        field_description={description}\r\n                        field_required={elementRequired}\r\n                        anyOf_list={anyOf}\r\n                        edit={edit}\r\n                    />\r\n                )\r\n            } else {\r\n                return (<ObjectType\r\n                    adamant_field_error={adamant_field_error}\r\n                    adamant_error_description={adamant_error_description}\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_uri={$id !== undefined ? $id : id}\r\n                    field_label={title}\r\n                    field_description={description}\r\n                    field_required={required}\r\n                    object_is_required={elementRequired}\r\n                    field_properties={properties}\r\n                    edit={edit}\r\n                />)\r\n            }\r\n        case undefined:\r\n            if (anyOf) {\r\n                return (\r\n                    <AnyOfKeywordPlaceHolder\r\n                        adamant_field_error={adamant_field_error}\r\n                        adamant_error_description={adamant_error_description}\r\n                        pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                        withinArray={withinArray}\r\n                        withinObject={withinObject}\r\n                        path={path + \".\" + fieldIndex}\r\n                        field_index={fieldIndex}\r\n                        field_key={fieldkey}\r\n                        field_uri={$id !== undefined ? $id : id}\r\n                        field_label={title}\r\n                        field_description={description}\r\n                        field_required={elementRequired}\r\n                        anyOf_list={anyOf}\r\n                        edit={edit}\r\n                    />\r\n                )\r\n            } else {\r\n                return null\r\n            }\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ElementRenderer;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst changeKeywords = (convertedSchema, oldKey, desiredNewKey) => {\r\n    if (typeof convertedSchema === 'object' && !Array.isArray(convertedSchema) && convertedSchema !== null) {\r\n        Object.keys(convertedSchema).forEach(keyword => {\r\n            if (keyword === oldKey) {\r\n                let tempValue = convertedSchema[keyword]\r\n                delete convertedSchema[keyword]\r\n                convertedSchema[desiredNewKey] = tempValue\r\n            } else {\r\n                // to maintain the order\r\n                let tempValue = convertedSchema[keyword]\r\n                delete convertedSchema[keyword]\r\n                convertedSchema[keyword] = tempValue\r\n                //\r\n            }\r\n            if (typeof convertedSchema[keyword] === 'object' && !Array.isArray(convertedSchema[keyword]) && convertedSchema[keyword] !== null) {\r\n                changeKeywords(convertedSchema[keyword], oldKey, desiredNewKey)\r\n            }\r\n            else if (Array.isArray(convertedSchema[keyword]) && convertedSchema[keyword] !== null) {\r\n                convertedSchema[keyword].forEach(item => {\r\n                    changeKeywords(item, oldKey, desiredNewKey)\r\n                })\r\n            }\r\n        })\r\n    }\r\n    else if (Array.isArray(convertedSchema) && convertedSchema !== null) {\r\n        convertedSchema.forEach(item => {\r\n            changeKeywords(item, oldKey, desiredNewKey)\r\n        })\r\n    }\r\n}\r\n\r\nconst EditSchemaHeader = ({ schemaVersion, title, description, schemaID, openDialog, setOpenDialog }) => {\r\n\r\n    const [_schemaVersion, _setSchemaVersion] = useState(schemaVersion);\r\n    const [_title, _setTitle] = useState(title);\r\n    const [_description, _setDescription] = useState(description);\r\n    const [_schemaID, _setSchemaID] = useState(schemaID);\r\n    const { updateParent, convertedSchema, setSchemaSpecification } = useContext(FormContext);\r\n\r\n\r\n    const allowedSchemaDrafts = [\"http://json-schema.org/draft-04/schema#\", \"http://json-schema.org/draft-07/schema#\"]\r\n\r\n\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        setSchemaSpecification(_schemaVersion)\r\n\r\n        if (_schemaVersion === undefined) {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else if (_schemaVersion.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else {\r\n            convertedSchema[\"$schema\"] = _schemaVersion\r\n        };\r\n\r\n        if (_schemaID === undefined) {\r\n            delete convertedSchema[\"id\"]\r\n            delete convertedSchema[\"$id\"]\r\n        } else if (_schemaID.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"id\"]\r\n            delete convertedSchema[\"$id\"]\r\n        } else {\r\n            if (_schemaVersion === \"http://json-schema.org/draft-04/schema#\") {\r\n                Object.keys(convertedSchema).forEach(keyword => {\r\n                    if (keyword === \"$id\" & convertedSchema[\"$id\"] !== undefined) {\r\n                        delete convertedSchema[\"$id\"]\r\n                        convertedSchema[\"id\"] = _schemaID\r\n                    }\r\n                    else if (keyword === \"id\" & convertedSchema[\"id\"] !== undefined) {\r\n                        delete convertedSchema[\"id\"]\r\n                        convertedSchema[\"$id\"] = _schemaID\r\n                    }\r\n                    else if (convertedSchema[\"$id\"] === undefined) {\r\n                        convertedSchema[\"id\"] = _schemaID\r\n                    }  \r\n                    else {\r\n                        // to maintain the order\r\n                        let tempValue = convertedSchema[keyword]\r\n                        delete convertedSchema[keyword]\r\n                        convertedSchema[keyword] = tempValue\r\n                        //\r\n                    }\r\n                })\r\n            } else {\r\n                Object.keys(convertedSchema).forEach(keyword => {\r\n                    if (keyword === \"id\" & convertedSchema[\"id\"] !== undefined) {\r\n                        delete convertedSchema[\"id\"]\r\n                        convertedSchema[\"$id\"] = _schemaID\r\n                    }\r\n                    else if (keyword === \"$id\" & convertedSchema[\"$id\"] !== undefined) {\r\n                        delete convertedSchema[\"$id\"]\r\n                        convertedSchema[\"id\"] = _schemaID\r\n                    }\r\n                    else if (convertedSchema[\"id\"] === undefined) {\r\n                        convertedSchema[\"$id\"] = _schemaID\r\n                    }\r\n                    else {\r\n                        // to maintain the order\r\n                        let tempValue = convertedSchema[keyword]\r\n                        delete convertedSchema[keyword]\r\n                        convertedSchema[keyword] = tempValue\r\n                        //\r\n                    }\r\n                })\r\n            }\r\n        };\r\n\r\n        // change id/$id according to the selected schema version \r\n        if (_schemaVersion !== \"http://json-schema.org/draft-04/schema#\") {\r\n            // change all id's to $id\r\n            changeKeywords(convertedSchema[\"properties\"], \"id\", \"$id\")\r\n        } else {\r\n            //change all $id's to id\r\n            changeKeywords(convertedSchema[\"properties\"], \"$id\", \"id\")\r\n        }\r\n\r\n        if (_title === undefined) {\r\n            delete convertedSchema[\"title\"]\r\n        } else if (_title.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"title\"]\r\n        } else {\r\n            convertedSchema[\"title\"] = _title\r\n        };\r\n\r\n        if (_description === undefined) {\r\n            delete convertedSchema[\"description\"]\r\n        } else if (_description.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"description\"]\r\n        } else {\r\n            convertedSchema[\"description\"] = _description\r\n        };\r\n\r\n        // better ordering\r\n        let emptyObject = {}\r\n        let emptyArray = []\r\n        Object.keys(convertedSchema).forEach(keyword=>{\r\n            emptyArray.push(keyword)\r\n        })\r\n        if (emptyArray.includes(\"$schema\")) {\r\n             emptyObject[\"$schema\"] = convertedSchema[\"$schema\"]\r\n             emptyArray = emptyArray.filter(function(f) {return f !== \"$schema\"})\r\n        }\r\n        if (emptyArray.includes(\"$id\")) {\r\n            emptyObject[\"$id\"] = convertedSchema[\"$id\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"$id\"})\r\n        }\r\n        if (emptyArray.includes(\"id\")) {\r\n            emptyObject[\"id\"] = convertedSchema[\"id\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"id\"})\r\n        }\r\n        if (emptyArray.includes(\"title\")) {\r\n            emptyObject[\"title\"] = convertedSchema[\"title\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"title\"})\r\n        }\r\n        if (emptyArray.includes(\"description\")) {\r\n            emptyObject[\"description\"] = convertedSchema[\"description\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"description\"})\r\n        }\r\n        if (emptyArray.includes(\"type\")) {\r\n            emptyObject[\"type\"] = convertedSchema[\"type\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"type\"})\r\n        }\r\n        if (emptyArray.includes(\"properties\")){\r\n            emptyObject[\"properties\"] = convertedSchema[\"properties\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"properties\"})\r\n        }\r\n        if (emptyArray.includes(\"required\")){\r\n            emptyObject[\"required\"] = convertedSchema[\"required\"]\r\n            emptyArray = emptyArray.filter(function(f) {return f !== \"required\"})\r\n        }\r\n\r\n        if (emptyArray.length !== 0) {\r\n            for (let i = 0; i<emptyArray.length; i++){\r\n                emptyObject[emptyArray[i]] = convertedSchema[emptyArray[i]]\r\n            }\r\n        }\r\n\r\n\r\n        updateParent(emptyObject)\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'title':\r\n                return _setTitle(event.target.value)\r\n            case 'description':\r\n                return _setDescription(event.target.value)\r\n            case 'version':\r\n                return _setSchemaVersion(event.target.value)\r\n            case 'id':\r\n                return _setSchemaID(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        _setDescription(description);\r\n        _setSchemaVersion(schemaVersion);\r\n        _setSchemaID(schemaID);\r\n        _setTitle(title);\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Edit schema \"{title}\"\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                            <TextField select helperText={\"Specification version for this schema. The latest available version is recommended.\"} margin='normal' onChange={event => handleChangeUISchema(event, \"version\")} style={{ marginTop: \"20px\" }} defaultValue={schemaVersion} variant=\"outlined\" fullWidth={true} label={\"$schema\"} SelectProps={{\r\n                                native: true,\r\n                            }}> {\r\n                                    allowedSchemaDrafts.map((content, index) => (\r\n                                        <option key={index} value={content}>\r\n                                            {content}\r\n                                        </option>\r\n                                    ))\r\n                                }\r\n                            </TextField>\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"id\")} style={{ marginTop: \"10px\" }} defaultValue={schemaID} variant=\"outlined\" fullWidth={true} label={\"Schema ID\"} helperText={\"ID or URI for this schema if available.\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={title} variant=\"outlined\" fullWidth={true} label={\"Schema Title\"} helperText={\"Title of the schema.\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={description} variant=\"outlined\" fullWidth={true} label={\"Schema Description\"} multiline rows={3} helperText=\"Description of the schema. Be more descriptive won't hurt.\" />\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditSchemaHeader;","import React from \"react\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { TextField } from '@material-ui/core';\r\nimport { IconButton } from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst JSONSchemaViewerDialog = ({ openSchemaViewer, setOpenSchemaViewer, jsonschema }) => {\r\n\r\n    return (<>\r\n        <Dialog\r\n            onClose={() => setOpenSchemaViewer(false)}\r\n            maxWidth=\"md\"\r\n            fullWidth={true}\r\n            open={openSchemaViewer}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ fontSize: \"30px\", width: \"100%\", alignSelf: \"center\" }}>\r\n                        JSON Schema viewer\r\n                    </div>\r\n                    <IconButton onClick={() => setOpenSchemaViewer(false)}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <TextField\r\n                    disabled\r\n                    fullWidth={true}\r\n                    variant=\"filled\"\r\n                    multiline\r\n                    defaultValue={JSON.stringify(jsonschema, null, 2)}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n            </DialogActions>\r\n        </Dialog>\r\n\r\n        {/*\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div>\r\n                            <Typography className={classes.heading}>JSON Schema Viewer</Typography>\r\n                        </div>\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div >\r\n                        <pre style={{ overflowX: \"auto\", whiteSpace: \"pre-wrap\", wordWrap: \"break-word\" }}>\r\n                            {JSON.stringify(jsonschema, null, 2)}\r\n                        </pre>\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n                */}\r\n    </>);\r\n};\r\n\r\nexport default JSONSchemaViewerDialog;","const fillForm = (schemaProp, data) => {\r\n    schemaProp.forEach(element => {\r\n        if (element[\"type\"] === \"object\") {\r\n            // early exist\r\n            if (data === undefined) {\r\n                return\r\n            } //\r\n            fillForm(element[\"properties\"], data[element[\"fieldKey\"]])\r\n        } else {\r\n            // early exist\r\n            if (data === undefined) {\r\n                return\r\n            } //\r\n            if (data[element[\"fieldKey\"]] !== undefined) {\r\n                const type = element[\"type\"]\r\n\r\n                element[\"value\"] = data[element[\"fieldKey\"]]\r\n\r\n                // validate input data before filling\r\n                switch (type) {\r\n                    case 'number':\r\n                        if (typeof (data[element[\"fieldKey\"]]) === \"number\") {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'integer':\r\n                        if (Number.isInteger(data[element[\"fieldKey\"]])) {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'boolean':\r\n                        if (typeof (data[element[\"fieldKey\"]]) === \"boolean\") {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'array':\r\n                        if (Array.isArray(data[element[\"fieldKey\"]])) {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'string':\r\n                        return (element[\"prevValue\"] = JSON.parse(JSON.stringify(data[element[\"fieldKey\"]])).toString());\r\n                    default:\r\n                        return null;\r\n                }\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport default fillForm;","import React, { useContext, useState, useCallback, useEffect } from \"react\";\r\n//import { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"./ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from '../FormContext';\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport UploadDataIcon from '@mui/icons-material/UploadFile';\r\nimport { ReactComponent as JsonIcon } from '../assets/json-file-svgrepo-com.svg'\r\nimport RevertIvon from \"@material-ui/icons/History\";\r\nimport EditSchemaHeader from \"./EditSchemaHeader\";\r\nimport JSONSchemaViewerDialog from \"./JSONSchemaViewerDialog\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { toast } from \"react-toastify\";\r\nimport fillForm from \"./utils/fillForm\";\r\nimport EditElement from \"./EditElement\";\r\n\r\nconst checkFormDataValidity = (file) => {\r\n    let validity = false\r\n    let message = <><div><strong>INVALID TYPE!</strong></div><div> Form data must be of a json file type.</div></>\r\n    if (file[0].type === \"application/json\") {\r\n        validity = true;\r\n        message = \"Form data is of a valid file type.\"\r\n    }\r\n    return [validity, message]\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst FormRenderer = ({ setSchemaSpecification, revertAllChanges, schema, edit, setEditMode, originalSchema }) => {\r\n    const {setLoadedFiles, updateParent, convertedSchema } = useContext(FormContext);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [openSchemaViewer, setOpenSchemaViewer] = useState(false);\r\n    const [receivedData, setReceivedData] = useState()\r\n\r\n    const classes = useStyles();\r\n\r\n    //useEffect(()=>{\r\n    //    if (initialJSONData !== undefined){\r\n    //        setReceivedData(initialJSONData)\r\n    //    }\r\n    //}, [initialJSONData])\r\n\r\n    // browse or drag&drop schema file\r\n    const onDrop = useCallback(\r\n        (acceptedFile) => {\r\n            // process the schema, validation etc\r\n            let validity = checkFormDataValidity(acceptedFile);\r\n            if (validity[0] === false) {\r\n                toast.error(\r\n                    validity[1],\r\n                    {\r\n                        toastId: \"somethingInvalidError\"\r\n                    }\r\n                );\r\n            } else {\r\n                // read file and update receivedData\r\n                const reader = new FileReader();\r\n                reader.onabort = () => console.log(\"file reading was aborted\");\r\n                reader.onerror = () => console.log(\"file reading has failed\");\r\n                reader.onload = () => {\r\n                    const binaryStr = reader.result;\r\n                    const obj = JSON.parse(binaryStr);\r\n                    setReceivedData(obj)\r\n                }\r\n                reader.readAsText(acceptedFile[0]);\r\n            };\r\n        },\r\n        []\r\n    );\r\n    //\r\n\r\n    // basically fill the form with the recieved data everytime we receive the data\r\n    useEffect(() => {\r\n        if (receivedData !== undefined) {\r\n            let newValue = { ...convertedSchema };\r\n\r\n            //fills this converted schema with the received data\r\n            console.log(\"before filling:\\n\", JSON.parse(JSON.stringify(newValue)))\r\n            fillForm(newValue[\"properties\"], receivedData);\r\n            console.log(\"filled form:\\n\", newValue);\r\n\r\n            updateParent(newValue);\r\n            \r\n            // Cleanup loaded files\r\n            setLoadedFiles([])\r\n        }\r\n    }, [receivedData])\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        multiple: false,\r\n    });\r\n\r\n    // deconstruct\r\n    const { properties, title, description, required, $schema, id, $id } = schema ?? {}\r\n    useEffect(() => {\r\n        setSchemaSpecification($schema)\r\n    }, [])\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        let value = { ...convertedSchema };\r\n        value[\"properties\"] = items;\r\n        updateParent(value);\r\n    }\r\n\r\n    /*\r\n    console.log(\"converted:\", convertedSchema)\r\n    let deconvertedSchema = JSON.parse(JSON.stringify(convertedSchema))\r\n    deconvertedSchema[\"properties\"] = array2object(convertedSchema[\"properties\"])\r\n    console.log(\"deconverted:\", deconvertedSchema)\r\n    */\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <Typography className={classes.heading} style={{ width: \"100%\" }}>{title}</Typography>\r\n                <Tooltip placement=\"top\" title=\"Toggle form edit mode ON/OFF\">\r\n                    <Button onClick={() => { setEditMode(!edit) }} color={edit ? \"primary\" : \"secondary\"} variant=\"outlined\" style={{ width: \"150px\", marginLeft: \"5px\", fontSize: \"7pt\" }} size=\"small\">{edit ? \"Edit Mode: ON\": \"Edit Mode: OFF\"}</Button>\r\n                </Tooltip>\r\n                <Tooltip placement=\"top\" title=\"View JSON Schema for this form\">\r\n                    <Button onClick={() => setOpenSchemaViewer(true)} style={{ marginLeft: \"5px\" }}><JsonIcon style={{ height: \"22px\" }} /></Button>\r\n                </Tooltip>\r\n                <Tooltip placement=\"top\" title=\"Upload input data for this form\">\r\n                    <Button style={{ marginLeft: \"5px\" }}{...getRootProps()}>\r\n                        <input {...getInputProps()} />\r\n                        <UploadDataIcon />\r\n                    </Button>\r\n                </Tooltip>\r\n                {edit ? <>\r\n                    <Tooltip placement=\"top\" title=\"Edit json schema header\">\r\n                        <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}>\r\n                            <EditIcon color=\"primary\" />\r\n                        </Button>\r\n                    </Tooltip>\r\n                    <Tooltip placement=\"top\" title=\"Revert all changes made to this form\">\r\n                        <Button onClick={() => revertAllChanges()} style={{ marginLeft: \"5px\" }}>\r\n                            <RevertIvon color=\"primary\" />\r\n                        </Button>\r\n                    </Tooltip>\r\n                </> : null}\r\n            </div>\r\n            <Typography style={{ paddingBottom: \"10px\" }}>{description}</Typography>\r\n            <Divider />\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"forms\">\r\n                    {(provided) => (\r\n                        <form {...provided.droppableProps} ref={provided.innerRef}>\r\n                            {Object.keys(properties).map((item, index) => {\r\n                                return (\r\n                                    <Draggable isDragDisabled={!edit} key={properties[item][\"fieldKey\"]} draggableId={properties[item][\"fieldKey\"]} index={index}>\r\n                                        {(provided) => (\r\n                                            <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                <div style={{ display: \"flex\" }}>\r\n                                                    {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                        <Tooltip placement=\"top\" title={`Drag & drop to adjust the order of this field`}>\r\n                                                            <DragHandleIcon fontSize=\"small\" />\r\n                                                        </Tooltip>\r\n                                                    </div> : null}\r\n                                                    <ElementRenderer schema={schema} path={\"properties\"} pathSchema={\"properties\"} fieldkey={properties[item][\"fieldKey\"]} fieldIndex={item} elementRequired={required} edit={edit} field={properties[item]} />\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                );\r\n                            })}\r\n                            {provided.placeholder}\r\n                            {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                <Tooltip placement=\"top\" title={`Add a new element/field to this schema`}>\r\n                                    <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                                </Tooltip>\r\n                            </div> : null}\r\n                        </form>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n        {openDialogAddElement ? <EditElement editOrAdd={\"add\"} openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} defaultSchema={defaultSchema} schemaTitle={title} field_label={\"this schema\"} /> : null}\r\n        {openDialog ? <EditSchemaHeader schemaID={id !== undefined ? id : $id} title={title} description={description} schemaVersion={$schema} openDialog={openDialog} setOpenDialog={setOpenDialog} /> : null}\r\n        {openSchemaViewer ? <JSONSchemaViewerDialog\r\n            openSchemaViewer={openSchemaViewer}\r\n            setOpenSchemaViewer={setOpenSchemaViewer}\r\n            jsonschema={originalSchema}\r\n        /> : null}\r\n    </>);\r\n};\r\n\r\nexport default FormRenderer;","// convert iterable array to json schema properties\r\nconst array2object = (propert) => {\r\n    var someObject = {};\r\n    propert.forEach((item) => {\r\n        const tempKey = item[\"fieldKey\"];\r\n        delete item[\"fieldKey\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        Object.keys(tempElements).forEach((item) => {\r\n            // change \"enumerate\" to \"enum\"\r\n            if (item === \"enumerate\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"enumerate\"])\r\n                );\r\n                delete someObject[tempKey][\"enumerate\"];\r\n                someObject[tempKey][\"enum\"] = enumContent;\r\n            }\r\n            if (item === \"defaultValue\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"defaultValue\"])\r\n                );\r\n                delete someObject[tempKey][\"defaultValue\"];\r\n                someObject[tempKey][\"default\"] = enumContent;\r\n            }\r\n            if (item === \"properties\") {\r\n                // some recursion\r\n                someObject[tempKey][\"properties\"] = array2object(\r\n                    someObject[tempKey][\"properties\"]\r\n                );\r\n            }\r\n\r\n            // delete keywords that are not supposed to be in the schema\r\n            if (item === \"value\") {\r\n                delete someObject[tempKey][\"value\"]\r\n            }\r\n            if (item === \"prevValue\") {\r\n                delete someObject[tempKey][item]\r\n            }\r\n            if (item === \"adamant_field_error\") {\r\n                delete someObject[tempKey][item]\r\n            }\r\n            if (item === \"adamant_error_description\") {\r\n                delete someObject[tempKey][item]\r\n            }\r\n        });\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default array2object;","import getValue from \"./getValue\";\r\nimport set from \"set-value\";\r\n\r\n// delete key and value given path\r\nconst deleteKeySchema = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json));\r\n    let pathArray = path.split('.');\r\n\r\n    if (pathArray.length === 1) {\r\n        delete jsonData[pathArray[0]];\r\n    } else {\r\n        let tobeDeleted = pathArray.pop();\r\n        pathArray = pathArray.join(\".\");\r\n        let value = getValue(jsonData, pathArray);\r\n        delete value[tobeDeleted]\r\n        set(jsonData, pathArray, value);\r\n    }\r\n\r\n    return jsonData;\r\n\r\n\r\n};\r\n\r\nexport default deleteKeySchema;","// validate form data against its schema using the Ajv package\r\n\r\n//\r\n// TO DO: since AJV does not really check the nested schemas easily, we must then implement a recursion to check every object type that has subschemas\r\n//      : for both formData and schema\r\n\r\nimport Ajv from \"ajv\";\r\nimport Ajv04 from \"ajv-draft-04\";\r\nimport deleteKeySchema from \"./deleteKeySchema\";\r\nimport getValueInSchemaFullPath from \"./getValueInSchemaFullPath\";\r\n\r\nconst messageLookUpTable = (field_label, field_type, keyword, message) => {\r\n    switch (keyword) {\r\n        case 'required':\r\n            return `${field_type === \"object\" ? `One or more fields in '${field_label}' container must be filled.` : `'${field_label}' field must be filled (required)`}`\r\n        default:\r\n            if (keyword === \"uniqueItems\") {\r\n                message = message.split(\"\")\r\n                let newMessage = []\r\n                message.forEach(s => {\r\n                    if (!Number.isNaN(parseInt(s))) {\r\n                        newMessage.push(parseInt(s) + 1)\r\n                    } else {\r\n                        newMessage.push(s)\r\n                    }\r\n                })\r\n                newMessage = newMessage.join(\"\")\r\n                return (`Input for '${field_label}' field ` + newMessage.replace(\"##\", \"no.\"))\r\n            } else {\r\n                return (`Input for '${field_label}' field ` + message)\r\n            }\r\n    }\r\n}\r\n\r\nconst createBetterValidationMessages = (validate, schema) => {\r\n    let errors = validate.errors\r\n    if (errors === null) {\r\n        return []\r\n    }\r\n    let messages = []\r\n\r\n    errors.forEach(error => {\r\n        // get real path\r\n        let path = error.schemaPath\r\n        path = path.substring(2)\r\n        path = path.split(\"/\")\r\n        path.pop()\r\n        if (error.keyword === \"required\") {\r\n            path.push(\"properties\")\r\n            path.push(error.params.missingProperty)\r\n        }\r\n        path = path.join(\".\")\r\n        console.log(path)\r\n\r\n        let field = getValueInSchemaFullPath(schema, path)\r\n        console.log(field)\r\n        let field_label = field[\"title\"]\r\n        let field_type = field[\"type\"]\r\n\r\n        let errorMessage = messageLookUpTable(field_label, field_type, error.keyword, error.message)\r\n        messages.push(\r\n            { \"path\": path, \"field_label\": field_label, \"message\": errorMessage }\r\n        )\r\n\r\n    })\r\n\r\n    return messages\r\n}\r\n\r\nconst validateAgainstSchema = (formData, schema) => {\r\n\r\n    if (schema[\"$schema\"] !== undefined) {\r\n        if (schema[\"$schema\"].includes(\"draft-04\")) {\r\n            console.log(\"draft-04 is detected\")\r\n            const ajv = new Ajv04({ schemaId: \"id\", allErrors: true });\r\n\r\n            const validate = ajv.compile(schema);\r\n            const valid = validate(formData)\r\n\r\n            let messages = createBetterValidationMessages(validate, schema)\r\n            return [valid, messages];\r\n        } else {\r\n            const ajv = new Ajv({ allErrors: true });\r\n\r\n            const validate = ajv.compile(schema);\r\n            const valid = validate(formData)\r\n\r\n            let messages = createBetterValidationMessages(validate, schema)\r\n            return [valid, messages];\r\n        }\r\n    } else if (schema[\"schema\"] !== undefined) {\r\n        const ajv = new Ajv({ allErrors: true });\r\n        const validate = ajv.compile(schema);\r\n        const valid = validate(formData)\r\n\r\n        let messages = createBetterValidationMessages(validate, schema)\r\n        return [valid, messages];\r\n    } else {\r\n        const ajv = new Ajv({ allErrors: true });\r\n        if (schema[\"$schema\"] !== undefined) {\r\n            schema = deleteKeySchema(schema, \"$schema\")\r\n        }\r\n        if (schema[\"id\"] !== undefined) {\r\n            schema = deleteKeySchema(schema, \"id\")\r\n        }\r\n\r\n\r\n        const validate = ajv.compile(schema);\r\n        const valid = validate(formData)\r\n\r\n        let messages = createBetterValidationMessages(validate, schema)\r\n        return [valid, messages];\r\n    }\r\n}\r\n\r\nexport default validateAgainstSchema;","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { Autocomplete } from '@material-ui/lab';\r\n\r\n\r\nconst CreateELabFTWExperimentDialog = ({ getTagsELabFTW, eLabURL, setELabURL, setTags, tags, setRetrievedTags, retrievedTags, setExperimentTitle, setToken, token, setOpenCreateElabFTWExperimentDialog, openCreateElabFTWExperimentDialog, createExperimentELabFTW }) => {\r\n\r\n    const onTagsChange = (event, values) => {\r\n        setTags(values);\r\n    };\r\n\r\n    // cancel submit\r\n    const handleCancelEdit = () => {\r\n        setOpenCreateElabFTWExperimentDialog(false)\r\n        setRetrievedTags([])\r\n        setTags([])\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openCreateElabFTWExperimentDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ fontSize: \"30px\", width: \"100%\", alignSelf: \"center\" }}>\r\n                        Create eLabFTW Experiment\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">eLabFTW</FormLabel>\r\n                            <TextField required value={eLabURL} margin='normal' onChange={event => setELabURL(event.target.value)} style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Your eLabFTW main URL\"} />\r\n                            <TextField required margin='normal' onChange={event => setToken(event.target.value)} style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Your eLabFTW token\"} value={token} />\r\n                            <TextField margin='normal' onBlur={event => setExperimentTitle(event.target.value)} style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Experiment title\"} />\r\n                            <div style={{ display: 'inline-flex', width: '100%' }}>\r\n                                <Autocomplete\r\n                                    style={{ width: \"100%\" }}\r\n                                    disabled={retrievedTags.length === 0 ? true : false}\r\n                                    multiple\r\n                                    freeSolo\r\n                                    options={retrievedTags}\r\n                                    getOptionLabel={option => option.tag || option}\r\n                                    onChange={onTagsChange}\r\n                                    renderInput={params => (\r\n                                        <TextField\r\n                                            {...params}\r\n                                            disabled={retrievedTags.length === 0 ? true : false}\r\n                                            variant=\"outlined\"\r\n                                            label=\"Tags\"\r\n                                            margin=\"normal\"\r\n                                            style={{ marginTop: \"10px\" }}\r\n                                            helperText='Press the \"GET TAGS\" button to retrieve available tags from your eLabFTW system.Note: you have to provide the eLabFTW main URL and token to enable the button.'\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                {/*<TextField disabled={retrievedTags.length === 0 ? true : false} margin='normal' style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Tags\"} helperText='Press the \"GET TAGS\" button to retrieve available tags from your eLabFTW system. Note: you have to provide the eLabFTW main URL and token to enable the button.' />*/}\r\n                                <Button onClick={() => getTagsELabFTW()} disabled={(token.trim() === \"\" | eLabURL.trim() === \"\") | (token === undefined | eLabURL === undefined) ? true : false} style={{ marginLeft: \"5px\", height: \"55px\", marginTop: \"11px\" }} variant=\"contained\" color=\"primary\">Get Tags</Button>\r\n                            </div>\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={(token.trim() === \"\" | eLabURL.trim() === \"\") | (token === undefined | eLabURL === undefined) ? true : false} onClick={() => createExperimentELabFTW()} color=\"primary\" autoFocus>\r\n                    Create Experiment\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default CreateELabFTWExperimentDialog;","const prepareDataForDescList = (convDataProp) => {\r\n    let someObject = {};\r\n    convDataProp.forEach((item) => {\r\n        const fieldkey = item[\"fieldKey\"];\r\n        const type = item[\"type\"];\r\n\r\n        if (type === \"object\") {\r\n            someObject[fieldkey] = prepareDataForDescList(item[\"properties\"])\r\n        } else {\r\n            if (item[\"value\"] !== undefined) {\r\n                // for now skip value that has object type in it\r\n                if (Array.isArray(item[\"value\"])) {\r\n                    if (typeof (item[\"value\"][0]) === \"object\") {\r\n                        console.log(\"prepareDataForDescList is skipped for this field:\", item[\"title\"])\r\n                    }\r\n                    else {\r\n                        someObject[fieldkey] = { value: item[\"value\"] }\r\n                        someObject[fieldkey][\"label\"] = item[\"title\"]\r\n                        someObject[fieldkey][\"key\"] = item[\"fieldKey\"]\r\n                        someObject[fieldkey][\"$id\"] = (item[\"$id\"] !== undefined ? item[\"$id\"] : item[\"id\"])\r\n                    }\r\n                } else {\r\n                    someObject[fieldkey] = { value: item[\"value\"] }\r\n                    someObject[fieldkey][\"label\"] = item[\"title\"]\r\n                    someObject[fieldkey][\"key\"] = item[\"fieldKey\"]\r\n                    someObject[fieldkey][\"$id\"] = (item[\"$id\"] !== undefined ? item[\"$id\"] : item[\"id\"])\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default prepareDataForDescList;","// convert iterable array to json schema properties\r\nconst array2objectAnyOf = (propert) => {\r\n    var someObject = {};\r\n    propert.forEach((item) => {\r\n        const tempKey = item[\"fieldKey\"];\r\n        delete item[\"fieldKey\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        Object.keys(tempElements).forEach((item) => {\r\n            // change \"enumerate\" to \"enum\"\r\n            if (item === \"enumerate\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"enumerate\"])\r\n                );\r\n                delete someObject[tempKey][\"enumerate\"];\r\n                someObject[tempKey][\"enum\"] = enumContent;\r\n            }\r\n            if (item === \"defaultValue\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"defaultValue\"])\r\n                );\r\n                delete someObject[tempKey][\"defaultValue\"];\r\n                someObject[tempKey][\"default\"] = enumContent;\r\n            }\r\n            if (item === \"properties\") {\r\n                if (someObject[tempKey][\"anyOf\"] !== undefined) {\r\n                    delete someObject[tempKey][\"properties\"]\r\n                    delete someObject[tempKey][\"type\"]\r\n                } else {\r\n                    // some recursion\r\n                    someObject[tempKey][\"properties\"] = array2objectAnyOf(\r\n                        someObject[tempKey][\"properties\"]\r\n                    );\r\n                }\r\n            }\r\n            if (item === \"value\") {\r\n                delete someObject[tempKey][\"value\"]\r\n            }\r\n            if (item === \"prevValue\") {\r\n                delete someObject[tempKey][item]\r\n            }\r\n        });\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default array2objectAnyOf;","const fillValueWithEmptyString = (jsonObjProp) => {\r\n\r\n    jsonObjProp.forEach(element => {\r\n        if (element[\"type\"] === \"object\") {\r\n            fillValueWithEmptyString(element[\"properties\"])\r\n        } else {\r\n            if (element[\"value\"] === undefined) {\r\n                element[\"value\"] = \"\"\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n}\r\n\r\nexport default fillValueWithEmptyString;","const convData2FormData = (convDataProp) => {\r\n    var someObject = {};\r\n    convDataProp.forEach((item) => {\r\n        const tempKey = item[\"fieldKey\"];\r\n        delete item[\"fieldKey\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        if (someObject[tempKey][\"value\"] === undefined & someObject[tempKey][\"type\"] !== \"object\") {\r\n            delete someObject[tempKey]\r\n        } else {\r\n            someObject[tempKey] = tempElements;\r\n            Object.keys(tempElements).forEach((item) => {\r\n                if (item === \"properties\") {\r\n                    // some recursion\r\n                    someObject[tempKey] = convData2FormData(\r\n                        someObject[tempKey][\"properties\"]\r\n                    );\r\n                }\r\n                if (item === \"value\") {\r\n                    if (Array.isArray(someObject[tempKey][\"value\"])) {\r\n                        if (typeof someObject[tempKey][\"value\"][0] === 'object') {\r\n                            someObject[tempKey][\"value\"].forEach((item, index) => {\r\n                                Object.keys(item).forEach(key => {\r\n                                    if (key === \"adamant-ui-specific-expand\") {\r\n                                        delete someObject[tempKey][\"value\"][index][\"adamant-ui-specific-expand\"]\r\n                                    }\r\n                                })\r\n                            })\r\n\r\n                            let value = someObject[tempKey][\"value\"]\r\n                            delete someObject[tempKey]\r\n                            someObject[tempKey] = value\r\n\r\n                        } else {\r\n                            let value = someObject[tempKey][\"value\"]\r\n                            delete someObject[tempKey]\r\n                            someObject[tempKey] = value\r\n                        }\r\n                    } else {\r\n                        let value = someObject[tempKey][\"value\"]\r\n                        delete someObject[tempKey]\r\n                        someObject[tempKey] = value\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default convData2FormData;","import React, { useState } from \"react\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { IconButton, Button } from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\n\r\n\r\nconst FormReviewBeforeSubmit = ({ onlineMode, openFormReviewDialog, setOpenFormReviewDialog, descriptionList, setOpenFunctions, submitFunctions, submitText, endPoint, loadedFiles }) => {\r\n\r\n    // for dropdown buttons\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    }; //\r\n\r\n    //createElabFTWButton disable when\r\n    endPoint = endPoint.split(\"/\").slice(-1)\r\n\r\n    const validateLoadedFiles = () => {\r\n        console.log(loadedFiles)\r\n        if (loadedFiles.includes(undefined)) {\r\n            alert(\"Some files are not assigned to the metadata. Please complete the process.\")\r\n            setOpenFormReviewDialog(false)\r\n        } else {\r\n            setOpenFunctions.setOpenDatasetSubmissionDialog(true);\r\n            setOpenFormReviewDialog(false);\r\n        }\r\n    }\r\n\r\n\r\n    return (<>\r\n        <Dialog\r\n            onClose={() => setOpenFormReviewDialog(false)}\r\n            maxWidth=\"md\"\r\n            fullWidth={true}\r\n            open={openFormReviewDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ fontSize: \"30px\", width: \"100%\", alignSelf: \"center\" }}>\r\n                        Form review and submission\r\n                    </div>\r\n                    <IconButton onClick={() => setOpenFormReviewDialog(false)}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContentText style={{ paddingLeft: \"25px\", paddingTop: \"10px\" }} id=\"alert-dialog-description\" component=\"span\">\r\n                Please review your filled form before submitting.\r\n            </DialogContentText>\r\n            <DialogContent>\r\n                <div dangerouslySetInnerHTML={{ __html: descriptionList }}></div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => setOpenFormReviewDialog(false)} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button\r\n                    style={{ float: \"right\", marginRight: \"5px\" }}\r\n                    id=\"demo-positioned-button\"\r\n                    aria-controls={open ? \"demo-positioned-menu\" : undefined}\r\n                    aria-haspopup=\"true\"\r\n                    aria-expanded={open ? \"true\" : undefined}\r\n                    onClick={handleClick}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >\r\n                    Submit\r\n                </Button>\r\n                <Menu\r\n                    id=\"demo-positioned-menu\"\r\n                    aria-labelledby=\"demo-positioned-button\"\r\n                    anchorEl={anchorEl}\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{\r\n                        vertical: \"top\",\r\n                        horizontal: \"left\",\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: \"top\",\r\n                        horizontal: \"left\",\r\n                    }}\r\n                >\r\n                    <MenuItem disabled={!onlineMode} onClick={() => {\r\n                        setOpenFunctions.setOpenCreateElabFTWExperimentDialog(true);\r\n                        setOpenFormReviewDialog(false);\r\n                    }} >\r\n                        Create eLabFTW Experiment\r\n                    </MenuItem>\r\n                    <MenuItem disabled={!onlineMode || endPoint.includes(\"process-request\")} onClick={() => {\r\n                        submitFunctions.submitJobRequest();\r\n                        setOpenFormReviewDialog(false);\r\n                    }} >\r\n                        {submitText}\r\n                    </MenuItem>\r\n                    <MenuItem disabled={!onlineMode} onClick={() => {\r\n                        validateLoadedFiles()\r\n                    }} >\r\n                        Submit Dataset\r\n                    </MenuItem>\r\n                </Menu>\r\n            </DialogActions>\r\n        </Dialog>\r\n    </>);\r\n};\r\n\r\nexport default FormReviewBeforeSubmit;","const changeKeywords = (convertedSchema, oldKey, desiredNewKey) => {\r\n    if (typeof convertedSchema === 'object' && !Array.isArray(convertedSchema) && convertedSchema !== null) {\r\n        Object.keys(convertedSchema).forEach(keyword => {\r\n            if (keyword === oldKey) {\r\n                let tempValue = convertedSchema[keyword]\r\n                delete convertedSchema[keyword]\r\n                convertedSchema[desiredNewKey] = tempValue\r\n            } else {\r\n                // to maintain the order\r\n                let tempValue = convertedSchema[keyword]\r\n                delete convertedSchema[keyword]\r\n                convertedSchema[keyword] = tempValue\r\n                //\r\n            }\r\n            if (typeof convertedSchema[keyword] === 'object' && !Array.isArray(convertedSchema[keyword]) && convertedSchema[keyword] !== null) {\r\n                changeKeywords(convertedSchema[keyword], oldKey, desiredNewKey)\r\n            }\r\n            else if (Array.isArray(convertedSchema[keyword]) && convertedSchema[keyword] !== null) {\r\n                convertedSchema[keyword].forEach(item => {\r\n                    changeKeywords(item, oldKey, desiredNewKey)\r\n                })\r\n            }\r\n        })\r\n    }\r\n    else if (Array.isArray(convertedSchema) && convertedSchema !== null) {\r\n        convertedSchema.forEach(item => {\r\n            changeKeywords(item, oldKey, desiredNewKey)\r\n        })\r\n    }\r\n}\r\n\r\nexport default changeKeywords","export default __webpack_public_path__ + \"static/media/adamant-header-5.e6d4be72.svg\";","const checkObjectExistance = (arr, path) => {\r\n    let loc = false\r\n    arr.forEach((element, index) => {\r\n        if (element[\"path\"] === path) {\r\n            loc = index\r\n        }\r\n    })\r\n    return loc;\r\n}\r\n\r\nconst nicelySort = (arr) => {\r\n    let sortedArr = []\r\n    arr.forEach(element => {\r\n        // check if an object with element[\"path\"] already exists\r\n        let loc = checkObjectExistance(sortedArr, element[\"path\"])\r\n\r\n        if (loc !== false) {\r\n            let fieldArr = sortedArr[loc][\"fields\"]\r\n            fieldArr.push({ key: element[\"key\"], label: element[\"label\"], value: element[\"value\"], $id: element[\"$id\"] })\r\n        } else {\r\n            // if not then create a new object\r\n            let newObj = {}\r\n            newObj[\"path\"] = element[\"path\"]\r\n            newObj[\"pathURIs\"] = element[\"pathURIs\"]\r\n            newObj[\"pathLabels\"] = element[\"pathLabels\"]\r\n            newObj[\"fields\"] = [{ key: element[\"key\"], label: element[\"label\"], value: element[\"value\"], $id: element[\"$id\"] }]\r\n            //console.log(newObj)\r\n            sortedArr.push(newObj)\r\n        }\r\n    });\r\n\r\n\r\n    return sortedArr;\r\n}\r\n\r\nexport default nicelySort;","const getPaths = (object, value) => {\r\n    return Object\r\n        .keys(object)\r\n        .reduce((r, k) => {\r\n            var kk = Array.isArray(object) ? `[${k}]` : `${k}`;\r\n            if (object[k] === value) {\r\n                r.push(kk);\r\n            }\r\n            if (object[k] && typeof object[k] === 'object') {\r\n                r.push(...getPaths(object[k], value).map(p => kk + (p[0] === '[' ? '' : '.') + p));\r\n            }\r\n            return r;\r\n        }, []);\r\n}\r\n\r\nexport default getPaths;","// get json value in schema given path\r\nconst getValueInSchema = (json, path) => {\r\n    if (path === undefined) {\r\n        return json[\"properties\"]\r\n    }\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    if (path[0] === \"\") {\r\n        return undefined;\r\n    }\r\n    let tempValue = jsonData[\"properties\"]\r\n    for (let i = 0; i < path.length; i++) {\r\n        if (tempValue[\"type\"] === \"object\") {\r\n            tempValue = tempValue[\"properties\"][path[i]]\r\n        } else {\r\n            tempValue = tempValue[path[i]]\r\n        }\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValueInSchema;","import getValueInSchema from \"./getValueInSchema\";\r\n\r\nconst getPathURIsAndLabels = (object, path) => {\r\n\r\n    let pathArr = path.split(\".\")\r\n    let newPath = []\r\n    let uris = []\r\n    let labels = []\r\n    for (let i = 0; i < pathArr.length; i++) {\r\n        newPath.push(pathArr[i])\r\n\r\n        let thePath = JSON.parse(JSON.stringify(newPath));\r\n        thePath = thePath.join(\".\")\r\n        let value = getValueInSchema(object, thePath)\r\n        if (typeof (value) === \"object\") {\r\n            if (value[\"$id\"] !== undefined) {\r\n                uris.push(value[\"$id\"])\r\n            }\r\n            else if (value[\"id\"] !== undefined) {\r\n                uris.push(value[\"id\"])\r\n            }\r\n            else {\r\n                uris.push(\"\")\r\n            }\r\n            if (value[\"title\"] !== undefined) {\r\n                labels.push(value[\"title\"])\r\n            } else {\r\n                labels.push(\"\")\r\n            }\r\n        } else {\r\n            uris.push(\"\")\r\n            labels.push(\"\")\r\n        }\r\n    }\r\n\r\n    return [uris, labels];\r\n\r\n}\r\n\r\nexport default getPathURIsAndLabels;","import getPaths from \"./getPaths\";\r\nimport getPathURIsAndLabels from \"./getPathURIsAndLabels\";\r\n\r\n/**\r\n * Get rid of the last two items of each path in pathArr\r\n * @param {*} pathArr \r\n * @returns processedArr\r\n */\r\nconst pathPreProcess = (pathArr) => {\r\n    let processedArr = []\r\n    pathArr.forEach((item) => {\r\n        item = item.split(\".\");\r\n        item.pop();\r\n        item.pop();\r\n        item = item.join(\".\");\r\n        processedArr.push(item)\r\n    })\r\n\r\n    return processedArr\r\n}\r\n\r\nconst preProcessB4DescList = (content, originalContent, originalSchema, arr) => {\r\n\r\n    Object.keys(content).forEach((item) => {\r\n        if (content[item][\"label\"] === undefined) {\r\n            preProcessB4DescList(content[item], originalContent, originalSchema, arr)\r\n        }\r\n        else {\r\n            if (content[item][\"value\"] !== undefined) {\r\n                /*\r\n                 a function to get a path of a given a key:attribute pair\r\n                */\r\n                let path_key = getPaths(originalContent, content[item][\"key\"])\r\n                path_key = pathPreProcess(path_key)\r\n                let path_label = getPaths(originalContent, content[item][\"label\"])\r\n                path_label = pathPreProcess(path_label)\r\n                let path = path_key.filter(value => path_label.includes(value));\r\n                let URIsAndLabels = getPathURIsAndLabels(originalSchema, path[0])\r\n\r\n                arr.push({\r\n                    \"path\": path[0],\r\n                    \"pathURIs\": URIsAndLabels[0],\r\n                    \"pathLabels\": URIsAndLabels[1],\r\n                    \"key\": content[item][\"key\"],\r\n                    \"label\": content[item][\"label\"],\r\n                    \"value\": content[item][\"value\"],\r\n                    \"$id\": content[item][\"$id\"]\r\n                })\r\n            }\r\n        }\r\n    })\r\n\r\n    return arr;\r\n};\r\n\r\nexport default preProcessB4DescList;","\r\nconst getTableCandidates = (convProp, container) => {\r\n\r\n    convProp.forEach(element => {\r\n        if (element[\"type\"] === \"object\") {\r\n            getTableCandidates(element[\"properties\"], container)\r\n        } else if (element[\"type\"] === \"array\") {\r\n            if (typeof (element[\"value\"][0]) === \"object\") {\r\n                container.push({\r\n                    \"fieldKey\": element[\"fieldKey\"],\r\n                    \"title\": element[\"title\"],\r\n                    \"schemaProperties\": element[\"items\"][\"properties\"],\r\n                    \"$id\": element[\"$id\"],\r\n                    \"id\": element[\"id\"],\r\n                    \"value\": element[\"value\"]\r\n                })\r\n            }\r\n        }\r\n    });\r\n\r\n    return container;\r\n}\r\n\r\nexport default getTableCandidates;","// curently only works with flat json structure\r\nimport listMimeTypes from \"../../assets/mime-types-extensions.json\"\r\n\r\nconst table2DescListTable = (table) => {\r\n\r\n    // create table definition (?)\r\n    //let descListTable = `<div>${table[\"title\"]}</div>\\n`\r\n    let descListTable = `<div style=\"background-color: #ffffff; border: 0px;\">`\r\n    descListTable += `<a style=\"color:#000000;\"><strong>${table[\"title\"]}</strong></a>`\r\n    descListTable += \"</div>\\n\"\r\n\r\n    descListTable += \"<div>\\n\"\r\n    descListTable += `<table style=\"border-collapse: collapse;\" border=\"1\">\\n`\r\n    descListTable += `<tbody>\\n`\r\n\r\n    // now create the table header\r\n    let keyTitleMapper = []\r\n    descListTable += `<tr>\\n`\r\n    descListTable += `<td style=\"text-align: left;\"><strong>No.</strong></td>\\n`\r\n    Object.keys(table[\"schemaProperties\"]).forEach((element, index) => {\r\n        //keyTitleMapper.push({ [element]: table[\"schemaProperties\"][element][\"title\"] })\r\n        keyTitleMapper.push(element)\r\n        descListTable += `<td style=\"text-align: center;\"><strong>${table[\"schemaProperties\"][element][\"title\"]}</strong></td>\\n`\r\n    })\r\n    descListTable += `</tr>\\n`\r\n\r\n    // now the table contents\r\n    table[\"value\"].forEach((element, index) => {\r\n        descListTable += `<tr>\\n`\r\n        descListTable += `<td style=\"text-align: center;\">${index + 1}</td>\\n`\r\n        keyTitleMapper.forEach(item => {\r\n            // check if value is of data url base64\r\n            if (table[\"value\"][index][item] === undefined) {\r\n                descListTable += `<td style=\"text-align: left;\">n/a</td>\\n`\r\n            } else {\r\n                if (typeof table[\"value\"][index][item] === \"string\"){\r\n                    if (table[\"value\"][index][item].startsWith(\"data:\") & table[\"value\"][index][item].includes(\"base64\")) {\r\n                        //console.log(table[\"fieldKey\"] + \"-\" + (index + 1))\r\n                        let extension = table[\"value\"][index][item].split(\";\")[0].replace(\"data:\", \"\")\r\n                        extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                        let fileName = table[\"fieldKey\"] + \"-\" + (index + 1) + extension\r\n                        console.log(fileName)\r\n                        descListTable += `<td style=\"text-align: left;\">See attachment (${fileName})</td>\\n`\r\n                    }\r\n                    else if (table[\"value\"][index][item].trim() === \"\") {\r\n                        descListTable += `<td style=\"text-align: left;\">n/a</td>\\n`\r\n                    }\r\n                    else {\r\n                        descListTable += `<td style=\"text-align: left;\">${table[\"value\"][index][item].trim()}</td>\\n`\r\n                    }\r\n                }\r\n                else {\r\n                    descListTable += `<td style=\"text-align: left;\">${table[\"value\"][index][item]}</td>\\n`\r\n                }\r\n            }\r\n        })\r\n        descListTable += `</tr>\\n`\r\n    });\r\n\r\n    descListTable += \"</tbody>\\n\"\r\n    descListTable += `</table>\\n`\r\n    descListTable += `</div>\\n`\r\n    descListTable += `<div>&nbsp;</div>\\n`\r\n\r\n\r\n    return descListTable\r\n}\r\n\r\n\r\nexport default table2DescListTable;","import listMimeTypes from \"../../assets/mime-types-extensions.json\"\r\n\r\nconst createDescriptionList = (data) => {\r\n    let descList = \"\";\r\n    const emptyString = (element) => element === \"\";\r\n\r\n    data.forEach(element => {\r\n        if (element[\"path\"] === \"\") {\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span style=\"color: #ffffff;\"><a style=\"color: #ffffff;\" title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                } else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n        } else {\r\n            let pathArr = element[\"path\"].split(\".\");\r\n            //let titleDiv = `<div style=\"background-color: #ffffff; border: 0px; height: 10px;\"></div>\\n`\r\n            let titleDiv = `</dl>`\r\n            titleDiv += `<div style=\"background-color: #ffffff; border: 0px;\">`\r\n            pathArr.forEach((item, index) => {\r\n                if (element[\"pathURIs\"] !== undefined & !element[\"pathURIs\"].some(emptyString)) {\r\n                    if (item !== \"\") {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a style=\"color:#29AEB9;\" title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a style=\"color:#29AEB9;\" title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}>${element[\"pathLabels\"][index]}</a><a style=\"color: #29aeb9;\">/</a>`\r\n                        }\r\n                    } else {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a style=\"color:#000000;\"><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a style=\"color:#000000;\">${element[\"pathLabels\"][index]}/</a>`\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (index === (pathArr.length - 1)) {\r\n                        titleDiv += `<a style=\"color:#000000;\"><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                    } else {\r\n                        titleDiv += `<a style=\"color:#000000;\">${element[\"pathLabels\"][index]}/</a>`\r\n                    }\r\n                }\r\n            })\r\n            titleDiv += \"</div>\\n\"\r\n            titleDiv += \"<dl>\"\r\n\r\n            descList += titleDiv\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span style=\"color: #ffffff;\"><a style=\"color: #ffffff;\" title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n                else if (item[\"$id\"] === undefined & item[\"id\"] !== undefined) {\r\n                    descList += `<dt><span style=\"color: #ffffff;\"><a style=\"color: #ffffff;\" title=${item[\"id\"]} href=${item[\"id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n\r\n                else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    return descList;\r\n}\r\n\r\nexport default createDescriptionList;","import listMimeTypes from \"../../assets/mime-types-extensions.json\"\r\n\r\nconst createDescriptionListWithoutStyling = (data) => {\r\n    let descList = \"\";\r\n    const emptyString = (element) => element === \"\";\r\n\r\n    data.forEach(element => {\r\n        if (element[\"path\"] === \"\") {\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                } else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n        } else {\r\n            let pathArr = element[\"path\"].split(\".\");\r\n            //let titleDiv = `<div></div>\\n`\r\n            let titleDiv = `</dl>`\r\n            titleDiv += `<div>`\r\n            pathArr.forEach((item, index) => {\r\n                if (element[\"pathURIs\"] !== undefined & !element[\"pathURIs\"].some(emptyString)) {\r\n                    if (item !== \"\") {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}>${element[\"pathLabels\"][index]}</a><a>/</a>`\r\n                        }\r\n                    } else {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a>${element[\"pathLabels\"][index]}/</a>`\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (index === (pathArr.length - 1)) {\r\n                        titleDiv += `<a><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                    } else {\r\n                        titleDiv += `<a>${element[\"pathLabels\"][index]}/</a>`\r\n                    }\r\n                }\r\n            })\r\n            titleDiv += \"</div>\\n\"\r\n            titleDiv += \"<dl>\"\r\n\r\n            descList += titleDiv\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span><a title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n                else if (item[\"$id\"] === undefined & item[\"id\"] !== undefined) {\r\n                    descList += `<dt><span><a title=${item[\"id\"]} href=${item[\"id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n\r\n                else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    if (typeof (item[\"value\"]) === \"string\") {\r\n                        if (item[\"value\"].startsWith(\"data:\") & item[\"value\"].includes(\"base64\")) {\r\n                            let extension = item[\"value\"].split(\";\")[0].replace(\"data:\", \"\")\r\n                            extension = Object.keys(listMimeTypes).find(key => listMimeTypes[key] === extension)\r\n                            let fileName = item[\"key\"] + extension\r\n                            descList += `<dd>See attachment (${fileName})</dd>\\n`\r\n                        }\r\n                        else {\r\n                            descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                        }\r\n                    }\r\n                    else {\r\n                        descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                    }\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    return descList;\r\n}\r\n\r\nexport default createDescriptionListWithoutStyling;","import nicelySort from \"./nicelySort\";\r\nimport preProcessB4DescList from \"./preProcessB4DescList\";\r\nimport getTableCandidates from \"./getTableCandidates\";\r\nimport table2DescListTable from \"./table2DescListTable\";\r\nimport createDescriptionList from \"./createDescriptionList\";\r\nimport createDescriptionListWithoutStyling from \"./createDescriptionListWithoutStyling\";\r\n\r\n\r\nconst createDescriptionListFromJSON = (cleanedJson, convertedSchema, convertedProperties, schema, footnote, styling) => {\r\n\r\n    let preProcessed = preProcessB4DescList(cleanedJson, cleanedJson, schema, []);\r\n    //console.log(preProcessed);\r\n    let nicelySorted = nicelySort(preProcessed);\r\n    // now check if there is array that contains object if there is then create a html table for this array\r\n    let tables = getTableCandidates(convertedProperties, []);\r\n    let descListTables = [];\r\n    if (tables.length !== 0) {\r\n        tables.forEach((table) =>\r\n            descListTables.push(table2DescListTable(table))\r\n        );\r\n    }\r\n    let descList;\r\n    if (styling) {\r\n        descList = `<dl>\\n${createDescriptionList(\r\n            nicelySorted\r\n        )}</dl>\\n`;\r\n    }\r\n    else {\r\n        descList = `<dl>\\n${createDescriptionListWithoutStyling(\r\n            nicelySorted\r\n        )}</dl>\\n`;\r\n    }\r\n    let descListHeading = `<h1><strong>${convertedSchema[\"title\"]}</strong></h1>\\n`;\r\n    descListHeading += descList;\r\n    // now insert desc list tables if applicable/available\r\n    if (descListTables.length !== 0) {\r\n        descListTables.forEach((item) => {\r\n            descListHeading += item;\r\n        });\r\n    }\r\n    descListHeading += footnote\r\n\r\n    return descListHeading;\r\n}\r\n\r\n\r\nexport default createDescriptionListFromJSON;","// check if id already exists in a schema\r\n\r\nconst checkIDexistence = (schema, id, result) => {\r\n    //alert(id)\r\n    Object.keys(schema).forEach(key=>{\r\n        if (typeof schema[key] !== \"object\"){\r\n            //alert(id+\" | \"+schema[key])\r\n            if (key === \"id\" || key === \"$id\") {\r\n                if (schema[key] === id){\r\n                    result = true\r\n                }\r\n            }\r\n        }\r\n        else if (typeof schema[key] === \"object\" ) {\r\n            result = checkIDexistence(schema[key], id, result)\r\n        }\r\n    })\r\n\r\n    if (result) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n\r\n}\r\n\r\nexport default checkIDexistence","export default __webpack_public_path__ + \"static/media/browse-edit-exp.c7489702.svg\";","export default __webpack_public_path__ + \"static/media/request_analysis.50557b42.svg\";","export default __webpack_public_path__ + \"static/media/process_request.415fa9f3.svg\";","import React from \"react\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Route } from 'react-router-dom'\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport AdamantHeader from \"../assets/adamant-header-5.svg\"\r\nimport BrowseEditLogo from \"../assets/browse-edit-exp.svg\"\r\nimport ReqAnalysisLogo from \"../assets/request_analysis.svg\"\r\nimport ProcRequestLogo from \"../assets/process_request.svg\"\r\n\r\nconst ChooseUseCasesDialog = ({ openUseCasesDialog, setOpenUseCasesDialog, firstName, loginState, setOpenLDAPLoginDialog, handleLogOut }) => {\r\n\r\n    //onClose={() => setOpenUseCasesDialog(false)}\r\n\r\n    return (<>\r\n        <Dialog\r\n            onClose={() => setOpenUseCasesDialog(false)}\r\n            maxWidth={false}\r\n            fullWidth={false}\r\n            open={openUseCasesDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            {/*\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ fontSize: \"30px\", width: \"100%\", alignSelf: \"center\" }}>\r\n                        What would you like to do?\r\n                    </div>\r\n                    <IconButton onClick={() => setOpenUseCasesDialog(false)}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            */}\r\n            <DialogContent>\r\n                <div style={{display: \"flex\"}}>\r\n                    <div style={{width:\"50%\", fontSize: \"20px\", padding: \"10px\" }}>\r\n                        What would you like to do?\r\n                    </div>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        width: \"50%\",\r\n                        height: \"100%\",\r\n                        paddingRight: \"10px\",\r\n                        justifyContent: \"right\",\r\n                        verticalAlign: \"top\",\r\n                    }}>\r\n                        {loginState === \"false\" ? (\r\n                            <Button\r\n                                color=\"primary\"\r\n                                onClick={() => setOpenLDAPLoginDialog(true)}\r\n                            >\r\n                                LOG IN\r\n                            </Button>\r\n                        ) : (\r\n                            <>\r\n                                <div\r\n                                    style={{\r\n                                        display: \"table-cell\",\r\n                                        height: \"100%\",\r\n                                        padding: \"10px\",\r\n                                    }}\r\n                                >\r\n                                    Hi, {firstName}!\r\n                                </div>\r\n                                    <div style={{ borderRight: \"1px solid #D3D3D3\" }}></div>\r\n                                <Button color=\"secondary\" onClick={() => handleLogOut()}>\r\n                                    LOG OUT\r\n                                </Button>\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div style={{ padding: \"10px\" }}>\r\n                    <Divider />\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        width: \"auto\",\r\n                        textAlign: \"center\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                        padding: \"10px 10px 0px 10px\",\r\n                    }}\r\n                >\r\n                    <div style={{ width: \"350px\" }}>\r\n                        <Tooltip\r\n                            placement=\"top\"\r\n                            title={<h2 style={{ color: \"lightblue\" }}>Basically closing this dialog if you click here and use Adamant as it is.</h2>}\r\n                        >\r\n                            <Button onClick={() => setOpenUseCasesDialog(false)} variant=\"contained\" style={{ height: \"165px\", width: \"340px\", marginBottom: \"5px\" }}>\r\n                                <div>\r\n                                    <img\r\n                                        style={{ width: \"300px\", borderRadius: \"5px\" }}\r\n                                        alt=\"header\"\r\n                                        src={AdamantHeader}\r\n                                    />\r\n                                </div>\r\n                            </Button>\r\n                        </Tooltip>\r\n                        <Route render={({ history }) => (\r\n                            <Tooltip\r\n                                placement=\"top\"\r\n                                title={<h2 style={{ color: \"lightblue\" }}>Click here if you'd like to request an analysis.</h2>}\r\n                            >\r\n                                <Button onClick={() => { history.push('/request-job') }} variant=\"contained\" style={{ fontWeight: \"normal\", height: \"165px\", width: \"340px\", marginTop: \"5px\" }}>\r\n                                    <div>\r\n                                        <img\r\n                                            style={{ height: \"80px\", borderRadius: \"5px\" }}\r\n                                            alt=\"ReqAnalysisLogo\"\r\n                                            src={ReqAnalysisLogo}\r\n                                        />\r\n                                    </div>\r\n                                </Button>\r\n                            </Tooltip>)} />\r\n                    </div>\r\n                    <div style={{ width: \"350px\" }}>\r\n                        <Route render={({ history }) => (\r\n                            <Tooltip\r\n                                placement=\"top\"\r\n                                title={<h2 style={{ color: \"lightblue\" }}>Browse and edit eLabFTW experiments with Adamant.</h2>}\r\n                            >\r\n                                <Button onClick={() => { history.push('/browse-experiment') }} variant=\"contained\" style={{ fontWeight: \"normal\", height: \"165px\", width: \"340px\", marginBottom: \"5px\" }}>\r\n                                    <div>\r\n                                        <img\r\n                                            style={{ height: \"120px\", borderRadius: \"5px\" }}\r\n                                            alt=\"BrowseEditLogo\"\r\n                                            src={BrowseEditLogo}\r\n                                        />\r\n                                    </div>\r\n                                </Button>\r\n                            </Tooltip>)} />\r\n                        <Route render={({ history }) => (\r\n                            <Tooltip\r\n                                placement=\"top\"\r\n                                title={<h2 style={{ color: \"lightblue\" }}>If you are an operator, click here to process a request.</h2>}\r\n                            >\r\n                                <Button onClick={() => { history.push('/process-request') }} variant=\"contained\" style={{ fontWeight: \"normal\", height: \"165px\", width: \"340px\", marginTop: \"5px\" }}>\r\n                                    <div>\r\n                                        <img\r\n                                            style={{ height: \"80px\", borderRadius: \"5px\" }}\r\n                                            alt=\"ProcRequestLogo\"\r\n                                            src={ProcRequestLogo}\r\n                                        />\r\n                                    </div>    \r\n                                </Button></Tooltip>)} />\r\n                    </div>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n            </DialogActions>\r\n        </Dialog>\r\n    </>);\r\n};\r\n\r\nexport default ChooseUseCasesDialog;","import React from \"react\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Route } from 'react-router-dom'\r\nimport { TextField, Tooltip } from \"@material-ui/core\";\r\nimport AdamantHeader from \"../assets/adamant-header-5.svg\"\r\n\r\nconst LDAPLoginDialog = ({ openLDAPLoginDialog, setOpenLDAPLoginDialog, setIntranetUsername, setUserPassword, token, setToken, email, setEmail, handleLogin }) => {\r\n\r\n    //onClose={() => setOpenUseCasesDialog(false)}\r\n\r\n    const handleKeypress = (event) => {      //it triggers by pressing the enter key\r\n        if (event.charCode === 13) { handleLogin();    }  \r\n    };\r\n\r\n    return (<>\r\n        <Dialog\r\n            onClose={() => setOpenLDAPLoginDialog(false)}\r\n            maxWidth=\"xs\"\r\n            fullWidth={false}\r\n            open={openLDAPLoginDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n            onKeyPress={(event) => handleKeypress(event)}\r\n        >\r\n            {/*\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ fontSize: \"30px\", width: \"100%\", alignSelf: \"center\" }}>\r\n                        What would you like to do?\r\n                    </div>\r\n                    <IconButton onClick={() => setOpenUseCasesDialog(false)}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            */}\r\n            <DialogContent>\r\n                <div style={{display: \"flex\"}}>\r\n                    <div style={{width:\"360px\", fontSize: \"20px\", padding: \"10px\" }}>\r\n                    Log in using your eLabFTW Token\r\n                    </div>\r\n                </div>\r\n                <div style={{ padding: \"10px\" }}>\r\n                    <Divider />\r\n                </div>\r\n                    {/*\r\n                    <div>\r\n                        <TextField fullWidth={true} margin=\"normal\" label=\"INTRANET Username\" onChange={(event)=> setIntranetUsername(event.target.value)}/>\r\n                    </div>\r\n                    <div>\r\n                    <TextField fullWidth={true} margin=\"normal\" label=\"Password\" type=\"password\" onChange={(event) => setUserPassword(event.target.value)} />\r\n                    </div>\r\n                    */}\r\n                <TextField fullWidth={true} margin=\"normal\" label=\"Email\" type=\"email\" autoComplete=\"email\" onChange={(event) => setEmail(event.target.value)} value={email} onKeyPress={(event) => handleKeypress(event)} />\r\n                <TextField fullWidth={true} margin=\"normal\" label=\"Token\" type=\"password\" autoComplete=\"current-password\" onChange={(event) => setToken(event.target.value)} value={token} onKeyPress={(event) => handleKeypress(event)} />\r\n                <div style={{ paddingBottom: \"20px\", color: \"gray\" }}>If you do not yet have an eLabFTW API token/key: first log in to your eLabFTW and generate the API key/token. <a href=\"https://doc.elabftw.net/api.html\" target=\"_blank\">More info</a>.</div>\r\n                    <div style={{\r\n                        display:\"flex\",\r\n                        justifyContent:\"right\",\r\n                    }}>\r\n                        <Button style={{margin:\"5px\"}} variant=\"outlined\" color=\"secondary\" onClick={()=>setOpenLDAPLoginDialog(false)}>Cancel</Button>\r\n                    <Button style={{ margin: \"5px\" }} variant=\"contained\" color=\"primary\" onClick={() => handleLogin()}>Continue</Button>\r\n                    </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n            </DialogActions>\r\n        </Dialog>\r\n    </>);\r\n};\r\n\r\nexport default LDAPLoginDialog;","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n//import { Autocomplete } from '@material-ui/lab';\r\n\r\n\r\nconst DatasetSubmissionDialog = ({ setOpenDatasetSubmissionDialog, openDatasetSubmissionDialog, submitDataset, handleCreateBundle, handleOnlyCertify }) => {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [pass, setPass] = useState(\"\")\r\n    const [disableButton, setDisableButton] = useState(true)\r\n\r\n    // cancel submit\r\n    const handleCancelEdit = () => {\r\n        setOpenDatasetSubmissionDialog(false)\r\n    }\r\n\r\n    // handle username and pass data\r\n    const handleUsernamePass = (field, event) =>{\r\n        switch (field) {\r\n            case \"username\":\r\n                setUsername(event.target.value)\r\n                if (event.target.value.length !== 0 && pass.length !== 0){\r\n                    setDisableButton(false)\r\n                } else {\r\n                    setDisableButton(true)\r\n                }\r\n                return\r\n            case \"password\":\r\n                setPass(event.target.value)\r\n                if (event.target.value.length !== 0 && username.length !== 0) {\r\n                    setDisableButton(false)\r\n                } else {\r\n                    setDisableButton(true)\r\n                }\r\n                return\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openDatasetSubmissionDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ fontSize: \"30px\", width: \"100%\", alignSelf: \"center\" }}>\r\n                        Dataset Submission\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Dataset submission to the INPTDAT platform. You must be a curator of the platform to be able to submit.</FormLabel>\r\n                            <TextField required margin='normal' style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Username\"} value={username} onChange={(event) => { handleUsernamePass(\"username\", event)}} />\r\n                            <TextField required type='password' margin='normal' style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Password\"} value={pass} onChange={(event) => { handleUsernamePass(\"password\", event) }} />\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <div>\r\n                    <div>\r\n                        <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button disabled={disableButton} onClick={() => submitDataset()} color=\"primary\" autoFocus>\r\n                            Submit\r\n                        </Button>\r\n                        <Button disabled={disableButton} onClick={() => submitDataset()} color=\"primary\" autoFocus>\r\n                            Submit and Certify\r\n                        </Button>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                        <Button onClick={() => handleOnlyCertify()} color=\"primary\" autoFocus>\r\n                        Only certify\r\n                        </Button> \r\n                        <Button onClick={() => handleCreateBundle()} color=\"primary\" autoFocus>\r\n                            Create a bundle\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default DatasetSubmissionDialog;","export default __webpack_public_path__ + \"static/media/fileloading.d5ee732d.gif\";","import React from \"react\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FileReadingGif from '../assets/fileloading.gif'\r\nimport { CircularProgress, LinearProgress } from \"@material-ui/core\";\r\n\r\n\r\nconst FilesDialog = ({ openFilesDialog, setOpenFilesDialog, content }) => {\r\n\r\n    return (<>\r\n        <Dialog\r\n            onClose={() => openFilesDialog}\r\n            open={openFilesDialog}\r\n            width=\"500px\"\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ fontSize: \"20px\", width: \"100%\", alignSelf: \"center\" }}>\r\n                        {content[0]}\r\n                    </div>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <div style={{ width: \"100%\", justifyContent: \"center\" }}>\r\n                    {/*<img\r\n                        style={{ width: \"300px\", borderRadius: \"5px\" }}\r\n                        alt=\"filereadingif\"\r\n                        src={FileReadingGif}\r\n                    />*/}\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                        <CircularProgress size={\"50pt\"} />\r\n                    </div>\r\n                    <div style={{ fontSize: \"15px\", width: \"100%\", textAlign: \"center\" }}>\r\n                        {content[1]}\r\n                    </div>\r\n                    <div style={{ fontSize: \"15px\", width: \"100%\", textAlign: \"center\" }}>\r\n                        {content[2]}\r\n                    </div>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n            </DialogActions>\r\n        </Dialog>\r\n    </>);\r\n};\r\n\r\nexport default FilesDialog;","import React, { useEffect } from \"react\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FileReadingGif from '../assets/fileloading.gif'\r\nimport { CircularProgress, LinearProgress, CircularProgressProps } from \"@material-ui/core\";\r\nimport { IconButton, Button } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\n\r\nfunction CircularProgressWithLabel(props) {\r\n    return (\r\n        <Box sx={{ position: 'relative', display: 'inline-flex' }}>\r\n            <CircularProgress variant=\"determinate\" {...props} />\r\n            <Box\r\n                sx={{\r\n                    top: 0,\r\n                    left: 0,\r\n                    bottom: 0,\r\n                    right: 0,\r\n                    position: 'absolute',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                }}\r\n            >\r\n                <Typography variant=\"caption\" component=\"div\" color=\"text.secondary\">\r\n                    {`${Math.round(props.value)}%`}\r\n                </Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nCircularProgressWithLabel.propTypes = {\r\n    /**\r\n     * The value of the progress indicator for the determinate variant.\r\n     * Value between 0 and 100.\r\n     * @default 0\r\n     */\r\n    value: PropTypes.number.isRequired,\r\n};\r\n\r\nconst ProgressDialog = ({ openProgressDialog, setOpenProgressDialog, title, messages, progress }) => {\r\n\r\n    //useEffect(()=>{\r\n    //},[progress])\r\n\r\n    return (<>\r\n        <Dialog\r\n            onClose={() => openProgressDialog}\r\n            open={openProgressDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ fontSize: \"20px\", width: \"100%\", alignSelf: \"center\" }}>\r\n                        {title}\r\n                    </div>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <div style={{ width: \"500px\", height:\"100%\", justifyContent: \"center\" }}>\r\n                    {/*<img\r\n                        style={{ width: \"300px\", borderRadius: \"5px\" }}\r\n                        alt=\"filereadingif\"\r\n                        src={FileReadingGif}\r\n                    />*/}\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                        <CircularProgressWithLabel value={progress} size={\"50pt\"} />\r\n                    </div>\r\n                    <div style={{padding:\"10px\", fontSize: \"15px\", width: \"100%\", height:\"50px\", textAlign: \"center\", verticalAlign: \"middle\", lineHeight: \"100%\" }}>\r\n                        {messages}\r\n                    </div>\r\n                    <div style={{display:\"flex\", justifyContent:\"right\"}}>\r\n                        <Button onClick={() => setOpenProgressDialog(false)} color=\"secondary\">Abort</Button>\r\n                    </div>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n            </DialogActions>\r\n        </Dialog>\r\n    </>);\r\n};\r\n\r\nexport default ProgressDialog;","import React, { useCallback, useState } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n//import QPTDATLogo from \"../assets/header-image.png\";\r\nimport FormRenderer from \"../components/FormRenderer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { FormContext } from \"../FormContext\";\r\nimport array2object from \"../components/utils/array2object\";\r\nimport object2array from \"../components/utils/object2array\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport DownloadIcon from \"@material-ui/icons/GetApp\";\r\nimport set from \"set-value\";\r\nimport getValue from \"../components/utils/getValue\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport deleteKeySchema from \"../components/utils/deleteKeySchema\";\r\nimport validateAgainstSchema from \"../components/utils/validateAgainstSchema\";\r\nimport CreateELabFTWExperimentDialog from \"../components/CreateELabFTWExperimentDialog\";\r\nimport { useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport prepareDataForDescList from \"../components/utils/prepareDataForDescList\";\r\nimport array2objectAnyOf from \"../components/utils/array2objectAnyOf\";\r\nimport SchemaOne from \"../schemas/all-types.json\";\r\nimport SchemaTwo from \"../schemas/demo-schema.json\";\r\nimport SchemaThree from \"../schemas/example-experiment-schema.json\";\r\nimport SchemaFour from \"../schemas/example-request-schema.json\";\r\nimport SchemaFive from \"../schemas/plasma-mds.json\";\r\nimport fillValueWithEmptyString from \"../components/utils/fillValueWithEmptyString\";\r\nimport convData2FormData from \"../components/utils/convData2FormData\";\r\nimport FormReviewBeforeSubmit from \"../components/FormReviewBeforeSubmit\";\r\nimport changeKeywords from \"../components/utils/changeKeywords\";\r\n//import QPTDATLogo from \"../assets/adamant-header-5.svg\";\r\nimport QPTDATLogo from \"../assets/adamant-header-5.svg\";\r\nimport createDescriptionListFromJSON from \"../components/utils/createDescriptionListFromJSON\";\r\nimport validateSchemaAgainstSpecification from \"../components/utils/validateSchemaAgainstSpecification\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport checkIDexistence from \"../components/utils/checkIDexistence\";\r\n\r\nimport ChooseUseCasesDialog from \"../components/ChooseUseCasesDialog\";\r\nimport LDAPLoginDialog from \"../components/LDAPLoginDialog\";\r\nimport DatasetSubmissionDialog from \"../components/DatasetSubmissionDialog\";\r\n\r\nimport AdamantVersion from \"../assets/adamant_version.json\";\r\nimport GeneralConfig from \"../general-conf.json\"\r\n\r\n// to create a bundle (download dataset+metadata as .zip)\r\nimport JSZip from \"jszip\";\r\nimport { saveAs } from \"file-saver\";\r\nimport FilesDialog from \"../components/FilesDialog\"\r\n\r\nimport ProgressDialog from \"../components/ProgressDialog\";\r\n\r\n\r\n\r\n// function that receive the schema and convert it to Form/json data blueprint\r\n// also to already put the default value to this blueprint\r\nconst createFormDataBlueprint = (schemaProperties) => {\r\n  let newObject = {};\r\n\r\n  Object.keys(schemaProperties).forEach((item) => {\r\n    if (schemaProperties[item][\"type\"] !== \"object\") {\r\n      if (schemaProperties[item][\"default\"] !== undefined) {\r\n        newObject[item] = schemaProperties[item][\"default\"];\r\n      } else if (\r\n        (schemaProperties[item][\"default\"] === undefined) &\r\n        (schemaProperties[item][\"enum\"] !== undefined)\r\n      ) {\r\n        newObject[item] = schemaProperties[item][\"enum\"][0];\r\n      } else if (\r\n        (schemaProperties[item][\"type\"] === \"boolean\") &\r\n        (schemaProperties[item][\"default\"] === undefined)\r\n      ) {\r\n        newObject[item] = false;\r\n      }\r\n    } else {\r\n      if (schemaProperties[item][\"properties\"] !== undefined) {\r\n        newObject[item] = createFormDataBlueprint(\r\n          schemaProperties[item][\"properties\"]\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return newObject;\r\n};\r\n\r\n// function to remove empty artributes\r\nconst removeEmpty = (obj) => {\r\n  Object.keys(obj).forEach((key) => {\r\n    if (obj[key] && typeof obj[key] === \"object\") {\r\n      const childObject = removeEmpty(obj[key]);\r\n      if (childObject === undefined) {\r\n        delete obj[key];\r\n      }\r\n    } else if (obj[key] === \"\" || obj[key] === null || obj[key] === undefined) {\r\n      delete obj[key];\r\n    }\r\n  });\r\n  return Object.keys(obj).length > 0 || obj instanceof Array ? obj : undefined;\r\n};\r\n\r\nconst AdamantMain = () => {\r\n  // state management\r\n  const [disable, setDisable] = useState(true);\r\n  const [schemaMessage, setSchemaMessage] = useState(null);\r\n  const [schemaValidity, setSchemaValidity] = useState(false);\r\n  const [schema, setSchema] = useState(null);\r\n  const [schemaIntermediate, setSchemaIntermediate] = useState(null);\r\n  const [renderReady, setRenderReady] = useState(false);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [schemaList, setSchemaList] = useState([]);\r\n  const [schemaNameList, setSchemaNameList] = useState([]);\r\n  const [selectedSchemaName, setSelectedSchemaName] = useState(\"\");\r\n  const [originalSchema, setOriginalSchema] = useState();\r\n  const [inputMode, setInputMode] = useState(false);\r\n  const [convertedSchema, setConvertedSchema] = useState(null);\r\n  const [createScratchMode, setCreateScratchMode] = useState(false);\r\n  const [jsonData, setJsonData] = useState({});\r\n  const [descriptionList, setDescriptionList] = useState(\"\");\r\n  const [schemaWithValues, setSchemaWithValues] = useState({});\r\n  const [schemaSpecification, setSchemaSpecification] = useState(\"\");\r\n  const [token, setToken] = useState(\"\");\r\n  const [eLabURL, setELabURL] = useState(\r\n    GeneralConfig[\"local-elab-url\"]\r\n  );\r\n  const [experimentTitle, setExperimentTitle] = useState(\"\");\r\n  const [onlineMode, setOnlineMode] = useState(false);\r\n  const [tags, setTags] = useState([]);\r\n  const [retrievedTags, setRetrievedTags] = useState([]);\r\n  const [SEMSelectedDevice, setSEMSelectedDevice] = useState(\"\");\r\n  const [HeaderImage, setHeaderImage] = useState(QPTDATLogo);\r\n  const [openFormReviewDialog, setOpenFormReviewDialog] = useState(false);\r\n  const [openJobRequestDialog, setOpenJobRequestDialog] = useState(false);\r\n  const [openDatasetSubmissionDialog, setOpenDatasetSubmissionDialog] =\r\n    useState(false);\r\n  const [jobRequestSchemas, setJobRequestSchemas] = useState([]);\r\n  const [submitTextList, setSubmitTextList] = useState([]);\r\n  const [submitText, setSubmitText] = useState(\"Submit Job Request\");\r\n  const [openUseCasesDialog, setOpenUseCasesDialog] = useState(true);\r\n  const [openLDAPLoginDialog, setOpenLDAPLoginDialog] = useState(false);\r\n  const [intranetUsername, setIntranetUsername] = useState();\r\n  const [userPassword, setUserPassword] = useState();\r\n  const [loginState, setLoginState] = useState(\"false\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  // for dropdown buttons\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [\r\n    openCreateElabFTWExperimentDialog,\r\n    setOpenCreateElabFTWExperimentDialog,\r\n  ] = useState(false);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  }; //\r\n\r\n  // loaded files object\r\n  const [loadedFiles, setLoadedFiles] = useState([]);\r\n\r\n  // FilesDialog\r\n  const [openFilesDialog, setOpenFilesDialog] = useState(false);\r\n  const [filesDialogContent, setFilesDialogContent] = useState([\"\", \"\", \"\"]);\r\n\r\n  // ProgressDialog\r\n  const [openProgressDialog, setOpenProgressDialog] = useState(false);\r\n  const [progressDialogMessages, setProgressDialogMessages] = useState([\r\n    \"\",\r\n    \"\",\r\n  ]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [progressDialogTitle, setProgressDialogTitle] = useState(\"\");\r\n\r\n  // blockchain\r\n  const [hashes, setHashes] = useState({});\r\n\r\n  //-------------------------- useEffects to save states between reloads ----------------------------\r\n\r\n  useEffect(() => {\r\n    setFirstName(\r\n      window.sessionStorage.getItem(\"firstName\") === null\r\n        ? \"\"\r\n        : window.sessionStorage.getItem(\"firstName\")\r\n    );\r\n    setToken(\r\n      window.sessionStorage.getItem(\"token\") === null\r\n        ? \"\"\r\n        : window.sessionStorage.getItem(\"token\")\r\n    );\r\n    setLoginState(\r\n      window.sessionStorage.getItem(\"loginState\") === null\r\n        ? \"false\"\r\n        : window.sessionStorage.getItem(\"loginState\")\r\n    );\r\n    setEmail(\r\n      window.sessionStorage.getItem(\"email\") === null\r\n        ? \"\"\r\n        : window.sessionStorage.getItem(\"email\")\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.sessionStorage.setItem(\"firstName\", firstName);\r\n    window.sessionStorage.setItem(\"token\", token);\r\n    window.sessionStorage.setItem(\"loginState\", loginState);\r\n    window.sessionStorage.setItem(\"email\", email);\r\n  }, [firstName, token, loginState, email]);\r\n  //-------------------------------------------------------------------------------------------------\r\n\r\n  let implementedFieldTypes = [\r\n    \"string\",\r\n    \"number\",\r\n    \"integer\",\r\n    \"array\",\r\n    \"boolean\",\r\n    \"object\",\r\n  ];\r\n\r\n  // check if the front-end is connected to backend at all\r\n  useEffect(() => {\r\n    let $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"GET\",\r\n      url: \"/api/check_mode\",\r\n      success: function (status) {\r\n        console.log(\"Connection to server is established. Online mode\");\r\n        setJobRequestSchemas(status[\"jobRequestSchemaList\"]);\r\n        console.log(status[\"jobRequestSchemaList\"]);\r\n        setSubmitTextList(status[\"submitButtonText\"]);\r\n        setOnlineMode(true);\r\n        toast.success(\r\n          <>\r\n            <div>\r\n              <strong>Connection to server is established.</strong>\r\n            </div>\r\n          </>,\r\n          {\r\n            toastId: \"connectionSuccess\",\r\n          }\r\n        );\r\n      },\r\n      error: function () {\r\n        console.log(\r\n          \"Unable to establish connection to server. Offline mode. Submit feature is disabled.\"\r\n        );\r\n        setOnlineMode(false);\r\n\r\n        // use available schema as a place holder\r\n        setSchemaNameList([\r\n          \"\",\r\n          \"all-types.json\",\r\n          \"demo-schema.json\",\r\n          \"example-experiment-schema.json\",\r\n          \"example-request-schema.json\",\r\n          \"plasma-mds.json\",\r\n        ]);\r\n        setSchemaList([\r\n          null,\r\n          SchemaOne,\r\n          SchemaTwo,\r\n          SchemaThree,\r\n          SchemaFour,\r\n          SchemaFive,\r\n        ]);\r\n\r\n        toast.warning(\r\n          <>\r\n            <div>\r\n              <strong>Unable to establish connection to server.</strong>\r\n            </div>\r\n            <div>Submit feature is disabled.</div>\r\n          </>,\r\n          {\r\n            toastId: \"connectionWarning\",\r\n          }\r\n        );\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // get schemas from server when onlinemode is true\r\n  useEffect(() => {\r\n    // if online mode then get available schemas from server\r\n    if (onlineMode === true) {\r\n      let $ = require(\"jquery\");\r\n      $.ajax({\r\n        type: \"GET\",\r\n        url: \"/api/get_schemas\",\r\n        success: function (status) {\r\n          console.log(\"SUCCESS\");\r\n\r\n          // do this to preserver the order\r\n          let sch = [];\r\n          status[\"schema\"].forEach((element) => {\r\n            sch.push(JSON.parse(element));\r\n          });\r\n\r\n          setSchemaList(sch);\r\n          setSchemaNameList(status[\"schemaName\"]);\r\n        },\r\n        error: function () {\r\n          console.log(\"ERROR\");\r\n          toast.warning(\r\n            \"Error while fetching the schemas. Using basic list of schemas.\",\r\n            {\r\n              toastId: \"fetchingSchemasError\",\r\n            }\r\n          );\r\n          // if unable to fetch the schemas then use the basic list of schemas\r\n          setSchemaNameList([\r\n            \"\",\r\n            \"all-types.json\",\r\n            \"demo-schema.json\",\r\n            \"example-experiment-schema.json\",\r\n            \"example-request-schema.json\",\r\n            \"plasma-mds.json\",\r\n          ]);\r\n          setSchemaList([\r\n            null,\r\n            SchemaOne,\r\n            SchemaTwo,\r\n            SchemaThree,\r\n            SchemaFour,\r\n            SchemaFive,\r\n          ]);\r\n        },\r\n      });\r\n    }\r\n  }, [onlineMode]);\r\n\r\n  // handle login\r\n  const handleLogin = () => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/login\",\r\n      dataType: \"json\",\r\n      data: {\r\n        email: email,\r\n        eLabToken: token,\r\n        elabUrl: GeneralConfig[\"local-elab-url\"]\r\n      },\r\n      success: function (status) {\r\n        if (status[\"status\"] === 400) {\r\n          console.log(\"Log in failed!\");\r\n          console.log(status);\r\n          toast.error(`Failed to log you in!\\nUser e-mail not found.`, {\r\n            toastId: \"loginFailed\",\r\n          });\r\n        } else {\r\n          console.log(\"Login sucessful!\");\r\n          setRetrievedTags(status);\r\n          toast.success(`Successfully logged in!`, {\r\n            toastId: \"loginSuccess\",\r\n          });\r\n          setOpenLDAPLoginDialog(false);\r\n          setLoginState(\"true\");\r\n          setFirstName(status[\"firstname\"]);\r\n        }\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Log in failed!\");\r\n        console.log(status);\r\n        toast.error(`Failed to log you in!\\nIs the server working properly? Or maybe wrong token?`, {\r\n          toastId: \"loginFailed\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleLogOut = () => {\r\n    setLoginState(\"false\");\r\n    setToken(\"\");\r\n    setFirstName(\"\");\r\n    setEmail(\"\");\r\n\r\n    window.sessionStorage.setItem(\"firstName\", \"\");\r\n    window.sessionStorage.setItem(\"token\", \"\");\r\n    window.sessionStorage.setItem(\"loginState\", \"false\");\r\n    window.sessionStorage.setItem(\"email\", \"\");\r\n  };\r\n\r\n  // handle select schema on change\r\n  const handleSelectSchemaOnChange = (schemaName) => {\r\n    if (schemaName === null) {\r\n      clearSchemaOnClick();\r\n\r\n      return;\r\n    }\r\n\r\n    //console.log(event)\r\n    // first reset states\r\n    setRenderReady(false);\r\n    setDisable(true);\r\n    setCreateScratchMode(false);\r\n    setJsonData({});\r\n    //\r\n\r\n    console.log(\"selected schema:\", schemaName);\r\n    setSelectedSchemaName(schemaName);\r\n\r\n    let selectedSchema = schemaList[schemaNameList.indexOf(schemaName)];\r\n\r\n    // reset everything when selectedSchema is empty\r\n    if (selectedSchema === null) {\r\n      setDisable(true);\r\n      setRenderReady(false);\r\n      setSchema(null);\r\n      setSchemaValidity(false);\r\n      setSchemaMessage();\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      return;\r\n    }\r\n\r\n    // convert selectedSchema schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n    try {\r\n      convertedSchema[\"properties\"] = object2array(\r\n        selectedSchema[\"properties\"]\r\n      );\r\n\r\n      // update states\r\n      setSchemaValidity(true);\r\n      setSchemaMessage(`${schemaName} is a valid schema`);\r\n      setSchema(selectedSchema);\r\n      let oriSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n      setOriginalSchema(oriSchema);\r\n      setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n      setConvertedSchema(convertedSchema);\r\n\r\n      if (jobRequestSchemas.includes(convertedSchema[\"title\"])) {\r\n        try {\r\n          //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n          //setHeaderImage(SEMlogo[\"default\"]);\r\n          setHeaderImage(QPTDATLogo);\r\n          setEditMode(false);\r\n          setSubmitText(\r\n            submitTextList[jobRequestSchemas.indexOf(convertedSchema[\"title\"])]\r\n          );\r\n        } catch (error) {\r\n          console.log(error);\r\n          setHeaderImage(QPTDATLogo);\r\n          setEditMode(false);\r\n        }\r\n      } else {\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(false);\r\n      }\r\n\r\n      // create form data\r\n      let formData = createFormDataBlueprint(selectedSchema[\"properties\"]);\r\n      setJsonData(formData);\r\n    } catch (error) {\r\n      console.log(error);\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${schemaName} is invalid`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // function to check if the file accepted is of json format and json schema valid\r\n  const checkSchemaValidity = (schemaFile) => {\r\n    // place holder\r\n    if (schemaFile[0][\"type\"] === \"application/json\") {\r\n      // read the file with FileReadr API\r\n      const reader = new FileReader();\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = () => {\r\n        const binaryStr = reader.result;\r\n        const obj = JSON.parse(binaryStr);\r\n\r\n        // convert obj schema to iterable array properties\r\n        let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n        try {\r\n          convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n          // update states\r\n          setSchemaValidity(true);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is a valid schema`);\r\n          setSchema(obj);\r\n          let oriSchema = JSON.parse(JSON.stringify(obj));\r\n          setOriginalSchema(oriSchema);\r\n          setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n          setConvertedSchema(convertedSchema);\r\n\r\n          if (jobRequestSchemas.includes(obj[\"title\"])) {\r\n            try {\r\n              //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n              //setHeaderImage(SEMlogo[\"default\"]);\r\n              setHeaderImage(QPTDATLogo);\r\n              setEditMode(true);\r\n              setSubmitText(\r\n                submitTextList[\r\n                  jobRequestSchemas.findIndex(convertedSchema[\"title\"])\r\n                ]\r\n              );\r\n            } catch (error) {\r\n              console.log(error);\r\n              setHeaderImage(QPTDATLogo);\r\n              setEditMode(false);\r\n            }\r\n          } else {\r\n            setHeaderImage(QPTDATLogo);\r\n            setEditMode(false);\r\n          }\r\n\r\n          // create form data\r\n          let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n          setJsonData(formData);\r\n        } catch (error) {\r\n          console.log(error);\r\n          // update states\r\n          setSchemaValidity(false);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is invalid`);\r\n          setSchema(null);\r\n        }\r\n      };\r\n      reader.readAsText(schemaFile[0]);\r\n    } else {\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${schemaFile[0][\"name\"]} is of incorrect file type`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // browse or drag&drop schema file\r\n  const onDrop = useCallback(\r\n    (acceptedFile) => {\r\n      // process the schema, validation etc\r\n      checkSchemaValidity(acceptedFile);\r\n\r\n      // store schema file in the state\r\n      // update states\r\n      setRenderReady(false);\r\n      setDisable(true);\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      setSelectedSchemaName(\"\");\r\n    },\r\n    [setRenderReady, jobRequestSchemas, submitTextList]\r\n  );\r\n  //\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    multiple: false,\r\n  });\r\n\r\n  // render on-click handle\r\n  const renderOnClick = () => {\r\n    //setFormRenderInProgress(true);\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // clear schema on-click handle\r\n  const clearSchemaOnClick = () => {\r\n    setHeaderImage(QPTDATLogo);\r\n    setDisable(true);\r\n    setRenderReady(false);\r\n    setSchema(null);\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setCreateScratchMode(false);\r\n    setSelectedSchemaName(\"\");\r\n  };\r\n\r\n  // create new schema from scratch\r\n  const createSchemaFromScratch = () => {\r\n    // update browse schema render states\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setJsonData({});\r\n    setSelectedSchemaName(\"\");\r\n\r\n    // always use newer schema specification\r\n    let schemaBlueprint = {\r\n      $schema: \"http://json-schema.org/draft-07/schema#\",\r\n      type: \"object\",\r\n      properties: {},\r\n    };\r\n    const obj = JSON.parse(JSON.stringify(schemaBlueprint));\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n    setJsonData(formData);\r\n\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n    convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n    // update states\r\n    setCreateScratchMode(true);\r\n    setSchema(obj);\r\n    let oriSchema = JSON.parse(JSON.stringify(obj));\r\n    setOriginalSchema(oriSchema);\r\n    setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n    setConvertedSchema(convertedSchema);\r\n\r\n    if (jobRequestSchemas.includes(obj[\"title\"])) {\r\n      try {\r\n        //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n        //setHeaderImage(SEMlogo[\"default\"]);\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(true);\r\n        setSubmitText(\r\n          submitTextList[jobRequestSchemas.findIndex(convertedSchema[\"title\"])]\r\n        );\r\n      } catch (error) {\r\n        console.log(error);\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(false);\r\n      }\r\n    } else {\r\n      setHeaderImage(QPTDATLogo);\r\n      setEditMode(false);\r\n    }\r\n\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n    setEditMode(true);\r\n  };\r\n\r\n  // compile on-click handle\r\n  const compileOnClick = () => {\r\n    let value = schema;\r\n\r\n    const [valid, message] = validateSchemaAgainstSpecification(\r\n      JSON.parse(JSON.stringify(schema)),\r\n      schemaSpecification\r\n    );\r\n    if (valid) {\r\n      setInputMode(true);\r\n      setSchema(value);\r\n      setEditMode(true);\r\n      setDisable(true);\r\n    } else {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Your schema is not valid.</strong>\r\n          </div>\r\n          {message}\r\n        </>,\r\n        {\r\n          toastId: \"schemaError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n  };\r\n\r\n  // return to edit mode handle\r\n  const toEditMode = () => {\r\n    let value = schema;\r\n    if (jobRequestSchemas.includes(schema[\"title\"])) {\r\n      setInputMode(false);\r\n      setSchema(value);\r\n      setEditMode(true);\r\n      setDisable(false);\r\n    } else {\r\n      setInputMode(false);\r\n      setSchema(value);\r\n      setEditMode(false);\r\n      setDisable(false);\r\n    }\r\n  };\r\n\r\n  // update parent (re-render everything)\r\n  const updateParent = (value) => {\r\n    let newValue = { ...value };\r\n\r\n    if (newValue[\"$schema\"] === \"http://json-schema.org/draft-04/schema#\") {\r\n      changeKeywords(newValue, \"$id\", \"id\");\r\n    } else {\r\n      changeKeywords(newValue, \"id\", \"$id\");\r\n    }\r\n\r\n    // update original schema\r\n    let updatedSchema = JSON.parse(JSON.stringify(newValue));\r\n    let tempSchema = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema[\"properties\"] = array2object(tempSchema[\"properties\"]);\r\n\r\n    setConvertedSchema(newValue);\r\n    setSchema(updatedSchema);\r\n\r\n    // update intermediate schema\r\n    let updatedSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    let tempSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema2[\"properties\"] = array2objectAnyOf(tempSchema2[\"properties\"]);\r\n    setSchemaIntermediate(updatedSchema2);\r\n  };\r\n\r\n  // update error stuff visually after validation (if some field(s) is are invalid)\r\n  const setErrorStuffUponValidation = (errorMessages) => {\r\n    let value = { ...convertedSchema };\r\n    errorMessages.forEach((message) => {\r\n      let path = message.path;\r\n      path = path.split(\".\");\r\n      let newPath = [];\r\n      let tempValue = JSON.parse(JSON.stringify(value));\r\n      for (let i = 0; i < path.length; ) {\r\n        if (path[i] === \"items\" && tempValue[path[i]][\"type\"] === \"object\") {\r\n          set(value, newPath.join(\".\") + \".adamant_field_error\", true);\r\n          set(\r\n            value,\r\n            newPath.join(\".\") + \".adamant_error_description\",\r\n            \"One or more fields in this array have invalid inputs. Please fix them.\"\r\n          );\r\n          return;\r\n        }\r\n        if (\r\n          path[i] === \"properties\" &&\r\n          Array.isArray(tempValue[\"properties\"])\r\n        ) {\r\n          newPath.push(path[i]);\r\n          i += 1;\r\n          let index = tempValue[\"properties\"].findIndex(\r\n            (val) => val.fieldKey === path[i]\r\n          );\r\n          newPath.push(index);\r\n          i += 1;\r\n          tempValue = tempValue[\"properties\"][index];\r\n        } else {\r\n          newPath.push(path[i]);\r\n          tempValue = tempValue[path[i]];\r\n          i += 1;\r\n        }\r\n      }\r\n      //console.log(newPath.join(\".\"));\r\n      set(value, newPath.join(\".\") + \".adamant_field_error\", true);\r\n      set(\r\n        value,\r\n        newPath.join(\".\") + \".adamant_error_description\",\r\n        message.message\r\n      );\r\n    });\r\n\r\n    updateParent(value);\r\n  };\r\n\r\n  // revert all changes to the schema\r\n  const revertAllChanges = () => {\r\n    let value = { ...originalSchema };\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(value));\r\n    convertedSchema[\"properties\"] = object2array(value[\"properties\"]);\r\n    console.log(convertedSchema);\r\n    setConvertedSchema(convertedSchema);\r\n    setSchema(value);\r\n    setSchemaWithValues(value);\r\n    setDescriptionList(\"\");\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(value[\"properties\"]);\r\n    setJsonData(formData);\r\n  };\r\n\r\n  /*/ handle data input on blur\r\n  const handleDataInput = (event, path, type) => {\r\n    let jData = { ...jsonData };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(jData, path, value);\r\n    //console.log(\"Current form data    (jData):\", jData);\r\n    setJsonData(jData);\r\n  };\r\n  /*/\r\n\r\n  // handle data input on blur to convertedSchema\r\n  const handleConvertedDataInput = (event, path, type) => {\r\n    let convSchemaData = { ...convertedSchema };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(convSchemaData, path, value);\r\n    setConvertedSchema(convSchemaData);\r\n    console.log(convSchemaData);\r\n\r\n    let data = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    setJsonData(data);\r\n\r\n    // convert to form data\r\n    console.log(\"Current form data (convData):\", data);\r\n\r\n    // unconverted\r\n    //console.log(\"Current form data (unconverted convData):\", convSchemaData);\r\n  };\r\n\r\n  // delete data in jsonData when the field in schema is deleted\r\n  const handleDataDelete = (path) => {\r\n    console.log(\"path\", path);\r\n    console.log(jsonData);\r\n    let jData = { ...jsonData };\r\n    let value = deleteKeySchema(jData, path);\r\n    setJsonData(value);\r\n    console.log(\"Current form data:\", value);\r\n  };\r\n\r\n  // handle check if id already exists in the schema\r\n  const handleCheckIDexistence = (id) => {\r\n    let result = false;\r\n    result = checkIDexistence(schema, id, result);\r\n    return result;\r\n  };\r\n\r\n  // update form data id if a fieldkey changes, simply delete key value pair of the oldfieldid from jsonData\r\n  const updateFormDataId = (\r\n    oldFieldId,\r\n    newFieldId,\r\n    pathFormData,\r\n    defaultValue\r\n  ) => {\r\n    if (oldFieldId === newFieldId) {\r\n      return;\r\n    }\r\n    if (defaultValue === undefined) {\r\n      let jData = { ...jsonData };\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    } else {\r\n      let newPathFormData = pathFormData.split(\".\");\r\n      newPathFormData.pop();\r\n      newPathFormData.push(newFieldId);\r\n\r\n      let jData = { ...jsonData };\r\n      let value = getValue(jData, pathFormData);\r\n      set(jData, newPathFormData, value);\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    }\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadJsonSchema = () => {\r\n    let content = { ...schema };\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `jsonschema-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadFormData = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `formdata-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadDescriptionList = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = prepareDataForDescList(convProp); // skip keyword that has value of array with objects as its elements\r\n    //let cleaned = removeEmpty(prepareDataForDescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to download. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // create description list\r\n    let footnote = `<div> This template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>${AdamantVersion[\"adamant_version\"]}</a></span> </div>`;\r\n    let descList = `<div><span><a title=https://github.com/csihda/adamant href=${eLabURL}$/browse-experiment>Edit experiment on Adamant</a></span> </div>`;\r\n    descList += createDescriptionListFromJSON(\r\n      cleaned,\r\n      convSch,\r\n      convProp,\r\n      schema,\r\n      footnote,\r\n      true\r\n    ); // false means without styling\r\n\r\n    setDescriptionList(descList);\r\n\r\n    let sha256_hash = CryptoJS.SHA256(descList);\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([descList], {\r\n      type: \"text/html\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `desclist-${sha256_hash}.tpl`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // get available tags from elabftw\r\n  const getTagsELabFTW = () => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/get_tags\",\r\n      dataType: \"json\",\r\n      data: {\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n      },\r\n      success: function (status) {\r\n        console.log(\"Tags retrieved successfully\");\r\n        //let arr = [];\r\n        //for (let i = 0; i < status.length; i++) {\r\n        //  arr.push(status[i][\"tag\"]);\r\n        //}\r\n        setRetrievedTags(status);\r\n        toast.success(`Successfully retrieved the tags!`, {\r\n          toastId: \"fetchingTagsSuccess\",\r\n        });\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Failed to retrieve tags\");\r\n        console.log(status);\r\n        toast.error(`Failed to get the tags!\\nMaybe wrong url or token?`, {\r\n          toastId: \"fetchingTagsError\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // create an experiment in elabftw based on the schema and data\r\n  const createExperimentELabFTW = () => {\r\n    // validate the data first using ajv\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    console.log(\"content\", content);\r\n    //console.log(\"loadedFiles\", loadedFiles)\r\n\r\n    /*\r\n    // get the paths where the uploaded files are from content\r\n    let fileEntries = []\r\n    for (let i=0; i<loadedFiles.length; i++) {\r\n      let file = loadedFiles[i]\r\n      let fileName = file[\"name\"]\r\n      let fileType = file[\"type\"]\r\n      let fileSize = file[\"size\"]\r\n      //console.log(file[\"name\"])\r\n      fileEntries.push(`fileupload:${fileType};${fileName};${fileSize}`)\r\n    }\r\n    //console.log(fileEntries)\r\n    let paths = []\r\n    for (let i=0; i<fileEntries.length; i++) {\r\n      let path = getPaths(content, fileEntries[i])\r\n      paths.push(path)\r\n    }\r\n    console.log(paths)\r\n\r\n    // read files from loadedFiles then insert it to the content\r\n    */\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(\r\n      content,\r\n      JSON.parse(JSON.stringify(contentSchema))\r\n    );\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      // clear states\r\n      //setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    }\r\n    // call create experiment api\r\n    console.log(\"tags:\", tags);\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/create_experiment\",\r\n      async: false,\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n        title: experimentTitle,\r\n        body: descriptionList,\r\n        tags: JSON.stringify(tags),\r\n      },\r\n      success: function (status) {\r\n        console.log(\"SUCCESS\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenCreateElabFTWExperimentDialog(false);\r\n        toast.success(\r\n          `Successfully created an experiment with id: ${status[\"experimentId\"]}!`,\r\n          {\r\n            toastId: \"createExperimentSuccess\",\r\n          }\r\n        );\r\n\r\n        // clear states\r\n        // setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenCreateElabFTWExperimentDialog(false);\r\n        toast.error(\r\n          `Failed to create an experiment!\\nMaybe wrong url or token?`,\r\n          {\r\n            toastId: \"createExperimentError\",\r\n          }\r\n        );\r\n        // clear states\r\n        //setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n    });\r\n  };\r\n\r\n  // submit sem job request\r\n  const submitJobRequest = () => {\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/submit_job_request\",\r\n      async: false,\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        body: descriptionList,\r\n      },\r\n      success: function (status) {\r\n        if (status[\"response\"] === 200) {\r\n          console.log(\"SUCCESS\");\r\n          console.log(status);\r\n\r\n          // close submit dialog\r\n          setOpenJobRequestDialog(false);\r\n          toast.success(`${status.responseText}`, {\r\n            toastId: \"jobRequestSubmitSuccess\",\r\n          });\r\n        } else {\r\n          console.log(\"ERROR\");\r\n          console.log(status);\r\n\r\n          // close submit dialog\r\n          setOpenJobRequestDialog(false);\r\n          toast.error(`${status.responseText}`, {\r\n            toastId: \"jobRequestSubmitError\",\r\n          });\r\n        }\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenJobRequestDialog(false);\r\n        toast.error(`${status.responseText}`, {\r\n          toastId: \"jobRequestSubmitError\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // submit dataset to INPTDAT\r\n  const submitDataset = () => {\r\n    // TO DO\r\n    alert(\"to do\");\r\n  };\r\n\r\n  // download bundled dataset as .zip\r\n  const handleCreateBundle = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    // Zipping process\r\n    const zip = new JSZip();\r\n    // Zip the metadata\r\n    zip.file(\"metadata.json\", JSON.stringify(content));\r\n    zip.file(\"schema.json\", JSON.stringify(contentSchema));\r\n\r\n    const fileDir = zip.folder(\"resources\");\r\n    //img.file(\"smile.gif\", AdamantLogo, { base64: true });\r\n\r\n    // read loaded files\r\n    if (loadedFiles.length > 0) {\r\n      setOpenFilesDialog(true);\r\n      setFilesDialogContent([\r\n        \"Zipping the files...\",\r\n        \"The files are being zipped / bundled. Please wait.\",\r\n        \"\",\r\n      ]);\r\n      for (let i = 0; i < loadedFiles.length; i++) {\r\n        fileDir.file(loadedFiles[i][\"name\"], loadedFiles[i], { binary: true });\r\n      }\r\n    }\r\n\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      setOpenFilesDialog(false);\r\n      setFilesDialogContent([\"\", \"\", \"\"]);\r\n      saveAs(content, \"dataset.zip\");\r\n    });\r\n  };\r\n\r\n  // --------------------------------------- Dataset certification feature ------------------------------------\r\n  const readAndHash = (file) => {\r\n    return new Promise((resolve) => {\r\n      let reader = new FileReader();\r\n      // hash the file\r\n      reader.onloadend = function () {\r\n        let file_result = this.result;\r\n        let file_wordArr = CryptoJS.lib.WordArray.create(file_result);\r\n        let sha256_hash = CryptoJS.SHA256(file_wordArr);\r\n        // console.log(`finished hashing \"${file[\"name\"]}\"`);\r\n        resolve([file[\"name\"], sha256_hash.toString()]);\r\n      };\r\n      reader.readAsArrayBuffer(file);\r\n    });\r\n  };\r\n\r\n  const certifyOnBloxberg = (hashes, metadata) => {\r\n    let crid = [];\r\n    let file_names = [];\r\n\r\n    for (const [key, value] of Object.entries(hashes)) {\r\n      file_names.push(key);\r\n      crid.push(value);\r\n    }\r\n\r\n    // console.log(\"crid:\", crid);\r\n    // console.log(\"file names:\", file_names);\r\n\r\n    var $ = require(\"jquery\");\r\n    return $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/certify\",\r\n      async: true,\r\n      dataType: \"json\",\r\n      data: {\r\n        crid: JSON.stringify(crid),\r\n        metadata: JSON.stringify(metadata),\r\n        file_names: JSON.stringify(file_names),\r\n        hashes_dict: JSON.stringify(hashes),\r\n      },\r\n      success: function (status) {\r\n        //console.log(status);\r\n        console.log(\"Certification succeeded\");\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Certification failed\");\r\n      },\r\n    });\r\n  };\r\n\r\n  async function handleOnlyCertify() {\r\n    // Prepare metadata\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    //// get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    // Prepare schema\r\n    let contentSchema = { ...schema };\r\n\r\n    setOpenProgressDialog(true);\r\n    setProgressDialogTitle(\"Processing...\");\r\n    setProgressDialogMessages(\"Starting...\");\r\n    setProgress(0);\r\n    let hashDict = {};\r\n    const increment = 100 / (loadedFiles.length + 1 + 1 + 1 + 1); // num of files plus one certification process plus one zipping process\r\n                                                                 // plus one metadata plus one schema\r\n    // find the index of resource key\r\n    let resourceKeyIndex = 0;\r\n    for (let i = 0; i < convSchemaData[\"properties\"].length; i++) {\r\n      if (convSchemaData[\"properties\"][i][\"fieldKey\"] === \"resource\") {\r\n        resourceKeyIndex = i;\r\n      }\r\n    }\r\n\r\n    // hashing: to do: change the order of the hashing, hash the files first and add the hash into the json data, then hash the json data\r\n    for (let i = 0; i < loadedFiles.length + 2; i++) {\r\n      if (i < loadedFiles.length) {\r\n        setProgressDialogMessages(`Hashing \"${loadedFiles[i][\"name\"]}\"...`);\r\n        const result = await readAndHash(loadedFiles[i]);\r\n        setProgress((i + 1) * increment);\r\n        hashDict[result[0]] = result[1];\r\n        content[\"resource\"][\"hash\"] = result[1];\r\n        content[\"resource\"][\"hashAlgorithm\"] = \"SHA-256\";\r\n        convSchemaData[\"properties\"][resourceKeyIndex][\"value\"][i][\"hash\"] = result[1];\r\n        convSchemaData[\"properties\"][resourceKeyIndex][\"value\"][i][\"hashAlgorithm\"] = \"SHA-256\";\r\n      } else if (i === loadedFiles.length) {\r\n        setProgressDialogMessages(`Hashing \"metadata.json\"...`);\r\n        let content_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n        setProgress((i + 1) * increment);\r\n        hashDict[\"metadata.json\"] = content_hash.toString();\r\n      } else if (i === loadedFiles.length + 1) {\r\n        setProgressDialogMessages(`Hashing \"schema.json\"...`);\r\n        let content_hash = CryptoJS.SHA256(JSON.stringify(contentSchema));\r\n        setProgress((i + 1) * increment);\r\n        hashDict[\"schema.json\"] = content_hash.toString();\r\n      }\r\n    }\r\n    setProgressDialogMessages(`Finished hashing all files.`);\r\n    //console.log(\"finished:\", hashDict);\r\n    setHashes(hashDict);\r\n    // certifying\r\n    setProgressDialogMessages(`Certifying all files...`);\r\n    const result = await certifyOnBloxberg(hashDict, {});\r\n    //console.log(\"result:\", result);\r\n    setProgress((loadedFiles.length + 3) * increment);\r\n\r\n    // zip the results together\r\n    if (result[\"status_code\"] === 200) {\r\n      setProgressDialogMessages(`Zipping certificates...`);\r\n      const zip = new JSZip();\r\n      for (const [file_name, content] of Object.entries(result[\"data\"])) {\r\n        zip.file(file_name, content, { base64: true });\r\n      }\r\n\r\n      zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n        saveAs(content, \"certificates.zip\");\r\n      });\r\n      setProgress(100);\r\n      setProgressDialogTitle(\"Process complete\");\r\n      setProgressDialogMessages(`Finished everything.`);\r\n      setOpenProgressDialog(false);\r\n      //setConvertedSchema(convSchemaData);\r\n      updateParent(convSchemaData);\r\n    } else {\r\n      setProgress(0);\r\n      setProgressDialogTitle(\"ERROR\");\r\n      setProgressDialogMessages(`ERROR`);\r\n    }\r\n  }\r\n  // -------------------------------------------------------------------------------------------------------\r\n\r\n  const handleOnClickProceedButton = () => {\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = prepareDataForDescList(convProp);\r\n    //let cleaned = removeEmpty(prepareDataForDescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to proceed. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // create description list\r\n    let footnote = `<div> This template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>${AdamantVersion[\"adamant_version\"]}</a></span> </div>`;\r\n    let descList = `<div><span><a title=https://github.com/csihda/adamant href=${eLabURL}$/browse-experiment>Edit experiment on Adamant</a></span> </div>`;\r\n    descList += createDescriptionListFromJSON(\r\n      cleaned,\r\n      convSch,\r\n      convProp,\r\n      schema,\r\n      footnote,\r\n      true\r\n    ); // false means without styling\r\n\r\n    setDescriptionList(descList);\r\n\r\n    // validate the data first using ajv\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n    let contentSchema = { ...schema };\r\n\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    //console.log(content);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      // clear states\r\n      //setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    } else {\r\n      //setOpenSubmitDialog(true);\r\n      setOpenFormReviewDialog(true);\r\n    }\r\n  };\r\n\r\n  // gather all loaded files in one object\r\n  const handleLoadedFiles = (file, value) => {\r\n    let files = loadedFiles;\r\n    //console.log(files);\r\n\r\n    // check if file already exists\r\n    let isFileAlreadyExist = false;\r\n    for (let i = 0; i < files.length; i++) {\r\n      if (files[i] !== undefined) {\r\n        if (files[i][\"name\"] === file[\"name\"]) {\r\n          isFileAlreadyExist = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check if file metadata already exists in value\r\n    let isFileMetadataAlreadyExist = false;\r\n    let whichIndex = 0;\r\n    if (value !== undefined) {\r\n      if (value.length !== 0) {\r\n        for (let i = 0; i < value.length; i++) {\r\n          if (typeof value[i] === \"object\") {\r\n            if (Object.values(value[i]).includes(file[\"name\"])) {\r\n              isFileMetadataAlreadyExist = true;\r\n              whichIndex = i;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isFileAlreadyExist) {\r\n      console.log(\"File already exists. Skipping it.\");\r\n      toast.warning(\r\n        <>\r\n          <div>\r\n            <strong>File already loaded: {`${file[\"name\"]}`}.</strong>\r\n          </div>\r\n        </>,\r\n        {\r\n          toastId: \"fileAlreadyLoaded\" + file[\"name\"],\r\n        }\r\n      );\r\n      //console.log(\"loaded files:\", files);\r\n      return true;\r\n    } else if (!isFileAlreadyExist && isFileMetadataAlreadyExist) {\r\n      console.log(\r\n        \"File not exist yet but the metadata exists. Replace the undefined element in loadedFiles with this current file.\"\r\n      );\r\n      files[whichIndex] = file;\r\n      setLoadedFiles(files);\r\n      console.log(\"loaded files:\", files);\r\n    } else {\r\n      console.log(\"File not exist yet. Pushing it.\");\r\n      files.push(file);\r\n      //console.log(\"loaded files:\", files);\r\n      setLoadedFiles(files);\r\n      console.log(\"File added. Current files:\", loadedFiles);\r\n      toast.success(\r\n        <>\r\n          <div>\r\n            <strong>File successfully loaded:</strong>\r\n            {` ${file[\"name\"]}`}.\r\n          </div>\r\n        </>,\r\n        {\r\n          toastId: \"fileLoadedSuccessfully\" + file[\"name\"],\r\n        }\r\n      );\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // remove file from loadedFiles based on its index\r\n  const handleRemoveFile = (fileIndex) => {\r\n    let files = loadedFiles;\r\n    if (fileIndex > -1) {\r\n      files.splice(fileIndex, 1);\r\n      setLoadedFiles(files);\r\n      console.log(\"File removed. Current files:\", loadedFiles);\r\n    } else {\r\n      console.log(\"No file needs to be removed. Current files:\", loadedFiles);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormContext.Provider\r\n        value={{\r\n          loadedFiles,\r\n          setLoadedFiles,\r\n          handleRemoveFile,\r\n          handleLoadedFiles,\r\n          updateParent,\r\n          convertedSchema,\r\n          updateFormDataId,\r\n          handleDataDelete,\r\n          handleConvertedDataInput,\r\n          SEMSelectedDevice,\r\n          schemaSpecification,\r\n          setSchemaSpecification,\r\n          setSEMSelectedDevice,\r\n          implementedFieldTypes,\r\n          handleCheckIDexistence,\r\n          openDatasetSubmissionDialog,\r\n        }}\r\n      >\r\n        <div style={{ paddingBottom: \"5px\" }}>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            <img\r\n              style={{\r\n                paddingLeft: \"10px\",\r\n                height: \"100px\",\r\n                borderRadius: \"5px\",\r\n              }}\r\n              alt=\"header\"\r\n              src={HeaderImage !== undefined ? HeaderImage : QPTDATLogo}\r\n            />\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                paddingRight: \"10px\",\r\n                justifyContent: \"right\",\r\n                verticalAlign: \"top\",\r\n              }}\r\n            >\r\n              <Button\r\n                onClick={() => {\r\n                  window.location.reload();\r\n                }}\r\n              >\r\n                Home\r\n              </Button>\r\n              <div style={{ borderRight: \"1px solid #D3D3D3\" }}></div>\r\n              {loginState === \"false\" ? (\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => setOpenLDAPLoginDialog(true)}\r\n                >\r\n                  LOG IN\r\n                </Button>\r\n              ) : (\r\n                <>\r\n                  <div\r\n                    style={{\r\n                      display: \"table-cell\",\r\n                      height: \"100%\",\r\n                      padding: \"10px\",\r\n                    }}\r\n                  >\r\n                    Hi, {firstName}!\r\n                  </div>\r\n                  <div style={{ borderRight: \"1px solid #D3D3D3\" }}></div>\r\n                  <Button color=\"secondary\" onClick={() => handleLogOut()}>\r\n                    LOG OUT\r\n                  </Button>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n          {!inputMode ? (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                textAlign: \"left\",\r\n                padding: \"10px 10px 0px 10px\",\r\n              }}\r\n            >\r\n              <form autoComplete=\"off\"\r\n                style={{\r\n                  display: \"flex\",\r\n                  width: \"100%\"\r\n                }}>\r\n              <Autocomplete\r\n                disablePortal\r\n                value={selectedSchemaName}\r\n                onChange={(event, newValue) =>\r\n                  handleSelectSchemaOnChange(newValue)\r\n                }\r\n                id=\"select-available-schema\"\r\n                options={schemaNameList}\r\n                style={{ width: \"120%\" }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    {...params}\r\n                    label=\"Select existing schema\"\r\n                  />\r\n                )}\r\n              />\r\n              </form>\r\n              {/* <TextField\r\n                onChange={(event) => handleSelectSchemaOnChange(event)}\r\n                style={{ width: \"100%\" }}\r\n                fullWidth={false}\r\n                value={selectedSchemaName}\r\n                select\r\n                id={\"select-schema\"}\r\n                label={\"Select existing schema\"}\r\n                variant=\"outlined\"\r\n                SelectProps={{ native: true }}\r\n              >\r\n                {schemaNameList.map((content, index) => (\r\n                  <option key={index} value={content}>\r\n                    {content}\r\n                  </option>\r\n                ))}\r\n              </TextField>\r\n              */}\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <Button\r\n                style={{ width: \"100%\", marginLeft: \"10px\" }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                {...getRootProps()}\r\n              >\r\n                <input {...getInputProps()} />\r\n                {isDragActive ? \"Drop here\" : \"Browse Schema\"}\r\n              </Button>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <Button\r\n                onClick={() => createSchemaFromScratch()}\r\n                style={{\r\n                  width: \"100%\",\r\n                  marginLeft: \"10px\",\r\n                  marginRight: \"10px\",\r\n                }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                CREATE FROM SCRATCH\r\n              </Button>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  width: \"100%\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"right\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                {/* <Tooltip\r\n                  placement=\"top\"\r\n                  title=\"Wondering how to use this tool?\"\r\n                >\r\n                  <Button\r\n                    onClick={() => {\r\n                      window.open(\r\n                        \"https://github.com/csihda/adamant\",\r\n                        \"_blank\" // <- This is what makes it open in a new window.\r\n                      );\r\n                    }}\r\n                  >\r\n                    <HelpIcon />\r\n                  </Button>\r\n                  </Tooltip>*/}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        {!inputMode ? (\r\n          <div\r\n            style={{\r\n              paddingLeft: \"10px\",\r\n              display: \"flex\",\r\n              width: \"100%\",\r\n              textAlign: \"left\",\r\n            }}\r\n          >\r\n            {schemaValidity === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"left\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}. You can now render the form.\r\n                </div>\r\n                <Button\r\n                  style={{ marginRight: \"5px\" }}\r\n                  onClick={() => renderOnClick()}\r\n                  variant=\"outlined\"\r\n                >\r\n                  Render\r\n                </Button>\r\n                <Button\r\n                  style={{ marginRight: \"10px\" }}\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    paddingTop: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"red\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}\r\n                </div>\r\n              </>\r\n            )}\r\n            {createScratchMode === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  Create from scratch mode. You can now start editing.\r\n                </div>\r\n                <Button\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : null}\r\n          </div>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        {renderReady === true ? (\r\n          <FormRenderer\r\n            revertAllChanges={revertAllChanges}\r\n            schema={convertedSchema}\r\n            setSchemaSpecification={setSchemaSpecification}\r\n            originalSchema={schema}\r\n            edit={editMode}\r\n            setEditMode={setEditMode}\r\n          />\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        <div\r\n          style={{\r\n            padding: \"10px 10px\",\r\n            display: \"flex\",\r\n            justifyContent: \"right\",\r\n          }}\r\n        >\r\n          <div style={{ width: \"100%\", display: \"inline-block\" }}>\r\n            <Button\r\n              onClick={() => handleOnClickProceedButton()}\r\n              style={{ float: \"right\" }}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={!renderReady}\r\n            >\r\n              Proceed\r\n            </Button>\r\n            <Button\r\n              style={{ float: \"right\", marginRight: \"5px\" }}\r\n              id=\"demo-positioned-button\"\r\n              aria-controls={open ? \"demo-positioned-menu\" : undefined}\r\n              aria-haspopup=\"true\"\r\n              aria-expanded={open ? \"true\" : undefined}\r\n              onClick={handleClick}\r\n              disabled={!renderReady}\r\n            >\r\n              <DownloadIcon /> Download Schema/Data\r\n            </Button>\r\n            <Menu\r\n              id=\"demo-positioned-menu\"\r\n              aria-labelledby=\"demo-positioned-button\"\r\n              anchorEl={anchorEl}\r\n              open={open}\r\n              onClose={handleClose}\r\n              anchorOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"left\",\r\n              }}\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"left\",\r\n              }}\r\n            >\r\n              <MenuItem onClick={handleDownloadJsonSchema}>\r\n                Download JSON Schema\r\n              </MenuItem>\r\n              <MenuItem onClick={handleDownloadFormData}>\r\n                Download JSON Data\r\n              </MenuItem>\r\n              <MenuItem onClick={handleDownloadDescriptionList}>\r\n                Download Description List\r\n              </MenuItem>\r\n            </Menu>\r\n          </div>\r\n        </div>\r\n        <div style={{ padding: \"10px\", color: \"grey\" }}>\r\n          {AdamantVersion[\"adamant_version\"]}\r\n        </div>\r\n      </FormContext.Provider>\r\n      <CreateELabFTWExperimentDialog\r\n        setTags={setTags}\r\n        tags={tags}\r\n        setRetrievedTags={setRetrievedTags}\r\n        retrievedTags={retrievedTags}\r\n        setExperimentTitle={setExperimentTitle}\r\n        createExperimentELabFTW={createExperimentELabFTW}\r\n        setToken={setToken}\r\n        token={token}\r\n        setELabURL={setELabURL}\r\n        eLabURL={eLabURL}\r\n        setOpenCreateElabFTWExperimentDialog={\r\n          setOpenCreateElabFTWExperimentDialog\r\n        }\r\n        openCreateElabFTWExperimentDialog={openCreateElabFTWExperimentDialog}\r\n        getTagsELabFTW={getTagsELabFTW}\r\n      />\r\n      <DatasetSubmissionDialog\r\n        setOpenDatasetSubmissionDialog={setOpenDatasetSubmissionDialog}\r\n        openDatasetSubmissionDialog={openDatasetSubmissionDialog}\r\n        submitDataset={submitDataset}\r\n        handleCreateBundle={handleCreateBundle}\r\n        handleOnlyCertify={handleOnlyCertify}\r\n      />\r\n      {openFormReviewDialog ? (\r\n        <FormReviewBeforeSubmit\r\n          onlineMode={onlineMode}\r\n          openFormReviewDialog={openFormReviewDialog}\r\n          setOpenFormReviewDialog={setOpenFormReviewDialog}\r\n          descriptionList={descriptionList}\r\n          setOpenFunctions={{\r\n            setOpenCreateElabFTWExperimentDialog,\r\n            setOpenJobRequestDialog,\r\n            setOpenDatasetSubmissionDialog,\r\n          }}\r\n          submitFunctions={{ submitJobRequest }}\r\n          submitText={submitText}\r\n          endPoint={window.location.href}\r\n          loadedFiles={loadedFiles}\r\n        />\r\n      ) : null}\r\n      {GeneralConfig[\"usecase-dialog\"] ? <ChooseUseCasesDialog\r\n        openUseCasesDialog={openUseCasesDialog}\r\n        setOpenUseCasesDialog={setOpenUseCasesDialog}\r\n        firstName={firstName}\r\n        loginState={loginState}\r\n        setOpenLDAPLoginDialog={setOpenLDAPLoginDialog}\r\n        handleLogOut={handleLogOut}\r\n      /> : null}\r\n      <LDAPLoginDialog\r\n        openLDAPLoginDialog={openLDAPLoginDialog}\r\n        setOpenLDAPLoginDialog={setOpenLDAPLoginDialog}\r\n        setIntranetUsername={setIntranetUsername}\r\n        setUserPassword={setUserPassword}\r\n        token={token}\r\n        setToken={setToken}\r\n        email={email}\r\n        setEmail={setEmail}\r\n        handleLogin={handleLogin}\r\n      />\r\n      <FilesDialog\r\n        openFilesDialog={openFilesDialog}\r\n        setOpenFilesDialog={setFilesDialogContent}\r\n        content={filesDialogContent}\r\n      />\r\n      <ProgressDialog\r\n        openProgressDialog={openProgressDialog}\r\n        setOpenProgressDialog={setOpenProgressDialog}\r\n        title={progressDialogTitle}\r\n        progress={progress}\r\n        messages={progressDialogMessages}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdamantMain;\r\n","import React, { useCallback, useState } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n//import QPTDATLogo from \"../assets/header-image.png\";\r\nimport FormRenderer from \"../components/FormRenderer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { IconButton, TextField } from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { FormContext } from \"../FormContext\";\r\nimport array2object from \"../components/utils/array2object\";\r\nimport object2array from \"../components/utils/object2array\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport DownloadIcon from \"@material-ui/icons/GetApp\";\r\nimport set from \"set-value\";\r\nimport getValue from \"../components/utils/getValue\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport deleteKeySchema from \"../components/utils/deleteKeySchema\";\r\nimport validateAgainstSchema from \"../components/utils/validateAgainstSchema\";\r\nimport CreateELabFTWExperimentDialog from \"../components/CreateELabFTWExperimentDialog\";\r\nimport { useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport prepareDataForDescList from \"../components/utils/prepareDataForDescList\";\r\nimport array2objectAnyOf from \"../components/utils/array2objectAnyOf\";\r\nimport SchemaOne from \"../schemas/all-types.json\";\r\nimport SchemaTwo from \"../schemas/demo-schema.json\";\r\nimport SchemaThree from \"../schemas/example-experiment-schema.json\";\r\nimport SchemaFour from \"../schemas/example-request-schema.json\";\r\nimport SchemaFive from \"../schemas/plasma-mds.json\";\r\nimport fillValueWithEmptyString from \"../components/utils/fillValueWithEmptyString\";\r\nimport convData2FormData from \"../components/utils/convData2FormData\";\r\nimport FormReviewBeforeSubmit from \"../components/FormReviewBeforeSubmit\";\r\nimport changeKeywords from \"../components/utils/changeKeywords\";\r\nimport QPTDATLogo from \"../assets/adamant-header-5.svg\";\r\nimport createDescriptionListFromJSON from \"../components/utils/createDescriptionListFromJSON\";\r\nimport HelpIcon from \"@material-ui/icons/HelpOutlineRounded\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport validateSchemaAgainstSpecification from \"../components/utils/validateSchemaAgainstSpecification\";\r\nimport LDAPLoginDialog from \"../components/LDAPLoginDialog\";\r\nimport DatasetSubmissionDialog from \"../components/DatasetSubmissionDialog\";\r\n\r\nimport AdamantVersion from \"../assets/adamant_version.json\";\r\nimport GeneralConfig from \"../general-conf.json\"\r\n\r\n// to create a bundle (download dataset+metadata as .zip)\r\nimport JSZip from \"jszip\";\r\nimport { saveAs } from \"file-saver\";\r\nimport FilesDialog from \"../components/FilesDialog\"\r\n\r\n// function that receive the schema and convert it to Form/json data blueprint\r\n// also to already put the default value to this blueprint\r\nconst createFormDataBlueprint = (schemaProperties) => {\r\n  let newObject = {};\r\n\r\n  Object.keys(schemaProperties).forEach((item) => {\r\n    if (schemaProperties[item][\"type\"] !== \"object\") {\r\n      if (schemaProperties[item][\"default\"] !== undefined) {\r\n        newObject[item] = schemaProperties[item][\"default\"];\r\n      } else if (\r\n        (schemaProperties[item][\"default\"] === undefined) &\r\n        (schemaProperties[item][\"enum\"] !== undefined)\r\n      ) {\r\n        newObject[item] = schemaProperties[item][\"enum\"][0];\r\n      } else if (\r\n        (schemaProperties[item][\"type\"] === \"boolean\") &\r\n        (schemaProperties[item][\"default\"] === undefined)\r\n      ) {\r\n        newObject[item] = false;\r\n      }\r\n    } else {\r\n      if (schemaProperties[item][\"properties\"] !== undefined) {\r\n        newObject[item] = createFormDataBlueprint(\r\n          schemaProperties[item][\"properties\"]\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return newObject;\r\n};\r\n\r\n// function to remove empty artributes\r\nconst removeEmpty = (obj) => {\r\n  Object.keys(obj).forEach((key) => {\r\n    if (obj[key] && typeof obj[key] === \"object\") {\r\n      const childObject = removeEmpty(obj[key]);\r\n      if (childObject === undefined) {\r\n        delete obj[key];\r\n      }\r\n    } else if (obj[key] === \"\" || obj[key] === null || obj[key] === undefined) {\r\n      delete obj[key];\r\n    }\r\n  });\r\n  return Object.keys(obj).length > 0 || obj instanceof Array ? obj : undefined;\r\n};\r\n\r\n// initialize color states for request selection buttons\r\nconst createButtonColorStatesFromConfigs = (config) => {\r\n  let buttonStates = [];\r\n  for (let i = 0; i < config.length; i++) {\r\n    let states = {\r\n      variant: \"contained\",\r\n      color: \"primary\",\r\n    };\r\n    buttonStates.push(states);\r\n  }\r\n  return buttonStates;\r\n};\r\n\r\n// initialize color states for schema selection buttons\r\nconst createSchemaButtonColorStates = (availableSchemas) => {\r\n  let buttonStates = [];\r\n  for (let i = 0; i < availableSchemas.length; i++) {\r\n    let states = {\r\n      variant: \"outlined\",\r\n      color: \"default\",\r\n    };\r\n    buttonStates.push(states);\r\n  }\r\n  return buttonStates;\r\n};\r\n\r\nconst AdamantRequest = () => {\r\n  // state management\r\n  const [disable, setDisable] = useState(true);\r\n  const [schemaMessage, setSchemaMessage] = useState(null);\r\n  const [schemaValidity, setSchemaValidity] = useState(false);\r\n  const [schema, setSchema] = useState(null);\r\n  const [schemaIntermediate, setSchemaIntermediate] = useState(null);\r\n  const [renderReady, setRenderReady] = useState(false);\r\n  const [editMode, setEditMode] = useState(true);\r\n  const [schemaList, setSchemaList] = useState([]);\r\n  const [schemaNameList, setSchemaNameList] = useState([]);\r\n  const [selectedSchemaName, setSelectedSchemaName] = useState(\"\");\r\n  const [originalSchema, setOriginalSchema] = useState();\r\n  const [inputMode, setInputMode] = useState(false);\r\n  const [convertedSchema, setConvertedSchema] = useState(null);\r\n  const [createScratchMode, setCreateScratchMode] = useState(false);\r\n  const [jsonData, setJsonData] = useState({});\r\n  const [descriptionList, setDescriptionList] = useState(\"\");\r\n  const [schemaWithValues, setSchemaWithValues] = useState({});\r\n  const [schemaSpecification, setSchemaSpecification] = useState(\"\");\r\n  const [token, setToken] = useState(\"\");\r\n  const [eLabURL, setELabURL] = useState(\r\n    GeneralConfig[\"local-elab-url\"]\r\n  );\r\n  const [experimentTitle, setExperimentTitle] = useState(\"\");\r\n  const [onlineMode, setOnlineMode] = useState(false);\r\n  const [tags, setTags] = useState([]);\r\n  const [retrievedTags, setRetrievedTags] = useState([]);\r\n  const [SEMSelectedDevice, setSEMSelectedDevice] = useState(\"\");\r\n  const [HeaderImage, setHeaderImage] = useState(QPTDATLogo);\r\n  const [openFormReviewDialog, setOpenFormReviewDialog] = useState(false);\r\n  const [openJobRequestDialog, setOpenJobRequestDialog] = useState(false);\r\n  const [openDatasetSubmissionDialog, setOpenDatasetSubmissionDialog] =\r\n    useState(false);\r\n  const [jobRequestSchemas, setJobRequestSchemas] = useState([]);\r\n  const [submitTextList, setSubmitTextList] = useState([]);\r\n  const [jobRequestConfList, setJobRequestConfList] = useState([]);\r\n  const [submitText, setSubmitText] = useState(\"Submit Job Request\");\r\n  const [availableRequestSchemas, setAvailableRequestSchemas] = useState([]);\r\n  const [availableExpSchemas, setAvailableExpSchemas] = useState([]);\r\n  const [renderAvailableSchemas, setRenderAvailableSchemas] = useState(false);\r\n  const [buttonColorStates, setButtonColorStates] = useState([]);\r\n  const [schemaSelectionButtonColors, setSchemaSelectionButtonColors] =\r\n    useState([]);\r\n  // for dropdown buttons\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [\r\n    openCreateElabFTWExperimentDialog,\r\n    setOpenCreateElabFTWExperimentDialog,\r\n  ] = useState(false);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  }; //\r\n\r\n  const [intranetUsername, setIntranetUsername] = useState();\r\n  const [userPassword, setUserPassword] = useState();\r\n  const [openLDAPLoginDialog, setOpenLDAPLoginDialog] = useState(false);\r\n  const [loginState, setLoginState] = useState(\"false\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n\r\n  // loaded files object\r\n  const [loadedFiles, setLoadedFiles] = useState([]);\r\n\r\n  // FilesDialog\r\n  const [openFilesDialog, setOpenFilesDialog] = useState(false);\r\n  const [filesDialogContent, setFilesDialogContent] = useState([\"\", \"\", \"\"]);\r\n\r\n  //-------------------------- useEffects to save states between reloads ----------------------------\r\n  useEffect(() => {\r\n    setFirstName(\r\n      window.sessionStorage.getItem(\"firstName\") === null\r\n        ? \"\"\r\n        : window.sessionStorage.getItem(\"firstName\")\r\n    );\r\n    setToken(\r\n      window.sessionStorage.getItem(\"token\") === null\r\n        ? \"\"\r\n        : window.sessionStorage.getItem(\"token\")\r\n    );\r\n    setLoginState(\r\n      window.sessionStorage.getItem(\"loginState\") === null\r\n        ? \"false\"\r\n        : window.sessionStorage.getItem(\"loginState\")\r\n    );\r\n    setEmail(\r\n      window.sessionStorage.getItem(\"email\") === null\r\n        ? \"\"\r\n        : window.sessionStorage.getItem(\"email\")\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.sessionStorage.setItem(\"firstName\", firstName);\r\n    window.sessionStorage.setItem(\"token\", token);\r\n    window.sessionStorage.setItem(\"loginState\", loginState);\r\n    window.sessionStorage.setItem(\"email\", email);\r\n  }, [firstName, token, loginState, email]);\r\n  //-------------------------------------------------------------------------------------------------\r\n\r\n  let implementedFieldTypes = [\r\n    \"string\",\r\n    \"number\",\r\n    \"integer\",\r\n    \"array\",\r\n    \"boolean\",\r\n    \"object\",\r\n  ];\r\n\r\n  // check if the front-end is connected to backend at all\r\n  useEffect(() => {\r\n    let $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"GET\",\r\n      url: \"/api/check_mode\",\r\n      success: function (status) {\r\n        console.log(\"Connection to server is established. Online mode\");\r\n        setJobRequestSchemas(status[\"jobRequestSchemaList\"]);\r\n        setSubmitTextList(status[\"submitButtonText\"]);\r\n        setJobRequestConfList(status[\"configs\"]);\r\n        setButtonColorStates(\r\n          createButtonColorStatesFromConfigs(status[\"configs\"])\r\n        );\r\n        console.log(\r\n          \"states:\",\r\n          createButtonColorStatesFromConfigs(status[\"configs\"])\r\n        );\r\n        setOnlineMode(true);\r\n        toast.success(\r\n          <>\r\n            <div>\r\n              <strong>Connection to server is established.</strong>\r\n            </div>\r\n          </>,\r\n          {\r\n            toastId: \"connectionSuccess\",\r\n          }\r\n        );\r\n      },\r\n      error: function () {\r\n        console.log(\r\n          \"Unable to establish connection to server. Offline mode. Submit feature is disabled.\"\r\n        );\r\n        setOnlineMode(false);\r\n\r\n        // use available schema as a place holder\r\n        setSchemaNameList([\r\n          \"\",\r\n          \"all-types.json\",\r\n          \"demo-schema.json\",\r\n          \"example-experiment-schema.json\",\r\n          \"example-request-schema.json\",\r\n          \"plasma-mds.json\",\r\n        ]);\r\n        setSchemaList([\r\n          null,\r\n          SchemaOne,\r\n          SchemaTwo,\r\n          SchemaThree,\r\n          SchemaFour,\r\n          SchemaFive,\r\n        ]);\r\n\r\n        toast.warning(\r\n          <>\r\n            <div>\r\n              <strong>Unable to establish connection to server.</strong>\r\n            </div>\r\n            <div>Submit feature is disabled.</div>\r\n          </>,\r\n          {\r\n            toastId: \"connectionWarning\",\r\n          }\r\n        );\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // get schemas from server when onlinemode is true\r\n  useEffect(() => {\r\n    // if online mode then get available schemas from server\r\n    if (onlineMode === true) {\r\n      let $ = require(\"jquery\");\r\n      $.ajax({\r\n        type: \"GET\",\r\n        url: \"/api/get_schemas\",\r\n        success: function (status) {\r\n          console.log(\"SUCCESS\");\r\n\r\n          // do this to preserver the order\r\n          let sch = [];\r\n          status[\"schema\"].forEach((element) => {\r\n            sch.push(JSON.parse(element));\r\n          });\r\n\r\n          setSchemaList(sch);\r\n          setSchemaNameList(status[\"schemaName\"]);\r\n        },\r\n        error: function () {\r\n          console.log(\"ERROR\");\r\n          toast.warning(\r\n            \"Error while fetching the schemas. Using basic list of schemas.\",\r\n            {\r\n              toastId: \"fetchingSchemasError\",\r\n            }\r\n          );\r\n          // if unable to fetch the schemas then use the basic list of schemas\r\n          setSchemaNameList([\r\n            \"\",\r\n            \"all-types.json\",\r\n            \"demo-schema.json\",\r\n            \"example-experiment-schema.json\",\r\n            \"example-request-schema.json\",\r\n            \"plasma-mds.json\",\r\n          ]);\r\n          setSchemaList([\r\n            null,\r\n            SchemaOne,\r\n            SchemaTwo,\r\n            SchemaThree,\r\n            SchemaFour,\r\n            SchemaFive,\r\n          ]);\r\n        },\r\n      });\r\n    }\r\n  }, [onlineMode]);\r\n\r\n  // handle login\r\n  const handleLogin = () => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/login\",\r\n      dataType: \"json\",\r\n      data: {\r\n        email: email,\r\n        eLabToken: token,\r\n        elabUrl: GeneralConfig[\"local-elab-url\"]\r\n      },\r\n      success: function (status) {\r\n        if (status[\"status\"] === 400) {\r\n          console.log(\"Log in failed!\");\r\n          console.log(status);\r\n          toast.error(`Failed to log you in!\\nUser e-mail not found.`, {\r\n            toastId: \"loginFailed\",\r\n          });\r\n        } else {\r\n          console.log(\"Login sucessful!\");\r\n          //let arr = [];\r\n          //for (let i = 0; i < status.length; i++) {\r\n          //  arr.push(status[i][\"tag\"]);\r\n          //}\r\n          setRetrievedTags(status);\r\n          toast.success(`Successfully logged in!`, {\r\n            toastId: \"loginSuccess\",\r\n          });\r\n          setOpenLDAPLoginDialog(false);\r\n          setLoginState(\"true\");\r\n          setFirstName(status[\"firstname\"]);\r\n        }\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Log in failed!\");\r\n        console.log(status);\r\n        toast.error(`Failed to log you in!\\nIs the server working properly? Or maybe wrong token?`, {\r\n          toastId: \"loginFailed\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleLogOut = () => {\r\n    setLoginState(\"false\");\r\n    setToken(\"\");\r\n    setFirstName(\"\");\r\n    setEmail(\"\");\r\n\r\n    window.sessionStorage.setItem(\"firstName\", \"\");\r\n    window.sessionStorage.setItem(\"token\", \"\");\r\n    window.sessionStorage.setItem(\"loginState\", \"false\");\r\n    window.sessionStorage.setItem(\"email\", \"\");\r\n  };\r\n\r\n  // handle select schema on change\r\n  const handleSelectSchemaOnChange = (event) => {\r\n    // first reset states\r\n    setRenderReady(false);\r\n    setDisable(true);\r\n    setCreateScratchMode(false);\r\n    setJsonData({});\r\n    //\r\n\r\n    console.log(\"selected schema:\", event.target.value);\r\n    setSelectedSchemaName(event.target.value);\r\n\r\n    let selectedSchema = schemaList[schemaNameList.indexOf(event.target.value)];\r\n\r\n    // reset everything when selectedSchema is empty\r\n    if (selectedSchema === null) {\r\n      setDisable(true);\r\n      setRenderReady(false);\r\n      setSchema(null);\r\n      setSchemaValidity(false);\r\n      setSchemaMessage();\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      return;\r\n    }\r\n\r\n    // convert selectedSchema schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n    try {\r\n      convertedSchema[\"properties\"] = object2array(\r\n        selectedSchema[\"properties\"]\r\n      );\r\n\r\n      // update states\r\n      setSchemaValidity(true);\r\n      setSchemaMessage(`${event.target.value} is a valid schema`);\r\n      setSchema(selectedSchema);\r\n      let oriSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n      setOriginalSchema(oriSchema);\r\n      setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n      setConvertedSchema(convertedSchema);\r\n\r\n      if (jobRequestSchemas.includes(convertedSchema[\"title\"])) {\r\n        try {\r\n          //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n          //setHeaderImage(SEMlogo[\"default\"]);\r\n          setHeaderImage(QPTDATLogo);\r\n          setEditMode(true);\r\n        } catch (error) {\r\n          console.log(error);\r\n          setHeaderImage(QPTDATLogo);\r\n          setEditMode(true);\r\n        }\r\n      } else {\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(true);\r\n      }\r\n\r\n      // create form data\r\n      let formData = createFormDataBlueprint(selectedSchema[\"properties\"]);\r\n      setJsonData(formData);\r\n    } catch (error) {\r\n      console.log(error);\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${event.target.value} is invalid`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // function to check if the file accepted is of json format and json schema valid\r\n  const checkSchemaValidity = (schemaFile) => {\r\n    // place holder\r\n    if (schemaFile[0][\"type\"] === \"application/json\") {\r\n      // read the file with FileReadr API\r\n      const reader = new FileReader();\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = () => {\r\n        const binaryStr = reader.result;\r\n        const obj = JSON.parse(binaryStr);\r\n\r\n        // convert obj schema to iterable array properties\r\n        let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n        try {\r\n          convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n          // update states\r\n          setSchemaValidity(true);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is a valid schema`);\r\n          setSchema(obj);\r\n          let oriSchema = JSON.parse(JSON.stringify(obj));\r\n          setOriginalSchema(oriSchema);\r\n          setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n          setConvertedSchema(convertedSchema);\r\n\r\n          if (jobRequestSchemas.includes(obj[\"title\"])) {\r\n            try {\r\n              //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n              //setHeaderImage(SEMlogo[\"default\"]);\r\n              setHeaderImage(QPTDATLogo);\r\n              setEditMode(true);\r\n            } catch (error) {\r\n              console.log(error);\r\n              setHeaderImage(QPTDATLogo);\r\n              setEditMode(true);\r\n            }\r\n          } else {\r\n            setHeaderImage(QPTDATLogo);\r\n            setEditMode(true);\r\n          }\r\n\r\n          // create form data\r\n          let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n          setJsonData(formData);\r\n        } catch (error) {\r\n          console.log(error);\r\n          // update states\r\n          setSchemaValidity(false);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is invalid`);\r\n          setSchema(null);\r\n        }\r\n      };\r\n      reader.readAsText(schemaFile[0]);\r\n    } else {\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${schemaFile[0][\"name\"]} is of incorrect file type`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // browse or drag&drop schema file\r\n  const onDrop = useCallback(\r\n    (acceptedFile) => {\r\n      // process the schema, validation etc\r\n      checkSchemaValidity(acceptedFile);\r\n\r\n      // store schema file in the state\r\n      // update states\r\n      setRenderReady(false);\r\n      setDisable(true);\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      setSelectedSchemaName(\"\");\r\n    },\r\n    [setRenderReady, jobRequestSchemas, submitTextList]\r\n  );\r\n  //\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    multiple: false,\r\n  });\r\n\r\n  // render on-click handle\r\n  const renderOnClick = () => {\r\n    //setFormRenderInProgress(true);\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // clear schema on-click handle\r\n  const clearSchemaOnClick = () => {\r\n    setHeaderImage(QPTDATLogo);\r\n    setDisable(true);\r\n    setRenderReady(false);\r\n    setSchema(null);\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setCreateScratchMode(false);\r\n    setSelectedSchemaName(\"\");\r\n  };\r\n\r\n  // create new schema from scratch\r\n  const createSchemaFromScratch = () => {\r\n    // update browse schema render states\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setJsonData({});\r\n    setSelectedSchemaName(\"\");\r\n\r\n    // always use newer schema specification\r\n    let schemaBlueprint = {\r\n      $schema: \"http://json-schema.org/draft-07/schema#\",\r\n      type: \"object\",\r\n      properties: {},\r\n    };\r\n    const obj = JSON.parse(JSON.stringify(schemaBlueprint));\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n    setJsonData(formData);\r\n\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n    convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n    // update states\r\n    setCreateScratchMode(true);\r\n    setSchema(obj);\r\n    let oriSchema = JSON.parse(JSON.stringify(obj));\r\n    setOriginalSchema(oriSchema);\r\n    setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n    setConvertedSchema(convertedSchema);\r\n\r\n    if (jobRequestSchemas.includes(obj[\"title\"])) {\r\n      try {\r\n        //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n        //setHeaderImage(SEMlogo[\"default\"]);\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(true);\r\n      } catch (error) {\r\n        console.log(error);\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(true);\r\n      }\r\n    } else {\r\n      setHeaderImage(QPTDATLogo);\r\n      setEditMode(true);\r\n    }\r\n\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // compile on-click handle\r\n  const compileOnClick = () => {\r\n    let value = schema;\r\n\r\n    const [valid, message] = validateSchemaAgainstSpecification(\r\n      JSON.parse(JSON.stringify(schema)),\r\n      schemaSpecification\r\n    );\r\n    if (valid) {\r\n      setInputMode(true);\r\n      setSchema(value);\r\n      setEditMode(false);\r\n      setDisable(true);\r\n    } else {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Your schema is not valid.</strong>\r\n          </div>\r\n          {message}\r\n        </>,\r\n        {\r\n          toastId: \"schemaError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n  };\r\n\r\n  // return to edit mode handle\r\n  const toEditMode = () => {\r\n    let value = schema;\r\n    if (jobRequestSchemas.includes(schema[\"title\"])) {\r\n      setInputMode(false);\r\n      setSchema(value);\r\n      setEditMode(true);\r\n      setDisable(false);\r\n    } else {\r\n      setInputMode(false);\r\n      setSchema(value);\r\n      setEditMode(true);\r\n      setDisable(false);\r\n    }\r\n  };\r\n\r\n  // update parent (re-render everything)\r\n  const updateParent = (value) => {\r\n    let newValue = { ...value };\r\n\r\n    if (newValue[\"$schema\"] === \"http://json-schema.org/draft-04/schema#\") {\r\n      changeKeywords(newValue, \"$id\", \"id\");\r\n    } else {\r\n      changeKeywords(newValue, \"id\", \"$id\");\r\n    }\r\n\r\n    // update original schema\r\n    let updatedSchema = JSON.parse(JSON.stringify(newValue));\r\n    let tempSchema = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema[\"properties\"] = array2object(tempSchema[\"properties\"]);\r\n\r\n    setConvertedSchema(newValue);\r\n    setSchema(updatedSchema);\r\n\r\n    // update intermediate schema\r\n    let updatedSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    let tempSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema2[\"properties\"] = array2objectAnyOf(tempSchema2[\"properties\"]);\r\n    setSchemaIntermediate(updatedSchema2);\r\n  };\r\n\r\n  // update error stuff visually after validation (if some field(s) is are invalid)\r\n  const setErrorStuffUponValidation = (errorMessages) => {\r\n    let value = { ...convertedSchema };\r\n    errorMessages.forEach((message) => {\r\n      let path = message.path;\r\n      path = path.split(\".\");\r\n      let newPath = [];\r\n      let tempValue = JSON.parse(JSON.stringify(value));\r\n      for (let i = 0; i < path.length; ) {\r\n        if (path[i] === \"items\" && tempValue[path[i]][\"type\"] === \"object\") {\r\n          set(value, newPath.join(\".\") + \".adamant_field_error\", true);\r\n          set(\r\n            value,\r\n            newPath.join(\".\") + \".adamant_error_description\",\r\n            \"One or more fields in this array have invalid inputs. Please fix them.\"\r\n          );\r\n          return;\r\n        }\r\n        if (\r\n          path[i] === \"properties\" &&\r\n          Array.isArray(tempValue[\"properties\"])\r\n        ) {\r\n          newPath.push(path[i]);\r\n          i += 1;\r\n          let index = tempValue[\"properties\"].findIndex(\r\n            (val) => val.fieldKey === path[i]\r\n          );\r\n          newPath.push(index);\r\n          i += 1;\r\n          tempValue = tempValue[\"properties\"][index];\r\n        } else {\r\n          newPath.push(path[i]);\r\n          tempValue = tempValue[path[i]];\r\n          i += 1;\r\n        }\r\n      }\r\n      //console.log(newPath.join(\".\"));\r\n      set(value, newPath.join(\".\") + \".adamant_field_error\", true);\r\n      set(\r\n        value,\r\n        newPath.join(\".\") + \".adamant_error_description\",\r\n        message.message\r\n      );\r\n    });\r\n\r\n    updateParent(value);\r\n  };\r\n\r\n  // revert all changes to the schema\r\n  const revertAllChanges = () => {\r\n    let value = { ...originalSchema };\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(value));\r\n    convertedSchema[\"properties\"] = object2array(value[\"properties\"]);\r\n    console.log(convertedSchema);\r\n    setConvertedSchema(convertedSchema);\r\n    setSchema(value);\r\n    setSchemaWithValues(value);\r\n    setDescriptionList(\"\");\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(value[\"properties\"]);\r\n    setJsonData(formData);\r\n  };\r\n\r\n  /*/ handle data input on blur\r\n  const handleDataInput = (event, path, type) => {\r\n    let jData = { ...jsonData };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(jData, path, value);\r\n    //console.log(\"Current form data    (jData):\", jData);\r\n    setJsonData(jData);\r\n  };\r\n  /*/\r\n\r\n  // handle data input on blur to convertedSchema\r\n  const handleConvertedDataInput = (event, path, type) => {\r\n    let convSchemaData = { ...convertedSchema };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(convSchemaData, path, value);\r\n    setConvertedSchema(convSchemaData);\r\n    //console.log(convSchemaData);\r\n\r\n    let data = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    setJsonData(data);\r\n\r\n    // convert to form data\r\n    console.log(\"Current form data (convData):\", data);\r\n\r\n    // unconverted\r\n    //console.log(\"Current form data (unconverted convData):\", convSchemaData);\r\n  };\r\n\r\n  // delete data in jsonData when the field in schema is deleted\r\n  const handleDataDelete = (path) => {\r\n    let jData = { ...jsonData };\r\n    let value = deleteKeySchema(jData, path);\r\n    setJsonData(value);\r\n    console.log(\"Current form data:\", value);\r\n  };\r\n\r\n  // update form data id if a fieldkey changes, simply delete key value pair of the oldfieldid from jsonData\r\n  const updateFormDataId = (\r\n    oldFieldId,\r\n    newFieldId,\r\n    pathFormData,\r\n    defaultValue\r\n  ) => {\r\n    if (oldFieldId === newFieldId) {\r\n      return;\r\n    }\r\n    if (defaultValue === undefined) {\r\n      let jData = { ...jsonData };\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    } else {\r\n      let newPathFormData = pathFormData.split(\".\");\r\n      newPathFormData.pop();\r\n      newPathFormData.push(newFieldId);\r\n\r\n      let jData = { ...jsonData };\r\n      let value = getValue(jData, pathFormData);\r\n      set(jData, newPathFormData, value);\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    }\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadJsonSchema = () => {\r\n    let content = { ...schema };\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `jsonschema-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadFormData = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `formdata-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadDescriptionList = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = prepareDataForDescList(convProp); // skip keyword that has value of array with objects as its elements\r\n    //let cleaned = removeEmpty(prepareDataForDescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to download. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // create description list\r\n    let footnote = `<div> This template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>${AdamantVersion[\"adamant_version\"]}</a></span> </div>`;\r\n    let descList = createDescriptionListFromJSON(\r\n      cleaned,\r\n      convSch,\r\n      convProp,\r\n      schema,\r\n      footnote,\r\n      false\r\n    ); // false means without styling\r\n\r\n    setDescriptionList(descList);\r\n\r\n    let sha256_hash = CryptoJS.SHA256(descList);\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([descList], {\r\n      type: \"text/html\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `desclist-${sha256_hash}.tpl`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // get available tags from elabftw\r\n  const getTagsELabFTW = () => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/get_tags\",\r\n      dataType: \"json\",\r\n      data: {\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n      },\r\n      success: function (status) {\r\n        console.log(\"Tags retrieved successfully\");\r\n        //let arr = [];\r\n        //for (let i = 0; i < status.length; i++) {\r\n        //  arr.push(status[i][\"tag\"]);\r\n        //}\r\n        setRetrievedTags(status);\r\n        toast.success(`Successfully retrieved the tags!`, {\r\n          toastId: \"fetchingTagsSuccess\",\r\n        });\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Failed to retrieve tags\");\r\n        console.log(status);\r\n        toast.error(`Failed to get the tags!\\nMaybe wrong url or token?`, {\r\n          toastId: \"fetchingTagsError\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // create an experiment in elabftw based on the schema and data\r\n  const createExperimentELabFTW = () => {\r\n    // validate the data first using ajv\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(\r\n      content,\r\n      JSON.parse(JSON.stringify(contentSchema))\r\n    );\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      // clear states\r\n      //setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    }\r\n\r\n    // call create experiment api\r\n    console.log(\"tags:\", tags);\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/create_experiment\",\r\n      async: false,\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n        title: experimentTitle,\r\n        body: descriptionList,\r\n        tags: JSON.stringify(tags),\r\n      },\r\n      success: function (status) {\r\n        console.log(\"SUCCESS\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenCreateElabFTWExperimentDialog(false);\r\n        toast.success(\r\n          `Successfully created an experiment with id: ${status[\"experimentId\"]}!`,\r\n          {\r\n            toastId: \"createExperimentSuccess\",\r\n          }\r\n        );\r\n\r\n        // clear states\r\n        //setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenCreateElabFTWExperimentDialog(false);\r\n        toast.error(\r\n          `Failed to create an experiment!\\nMaybe wrong url or token?`,\r\n          {\r\n            toastId: \"createExperimentError\",\r\n          }\r\n        );\r\n        // clear states\r\n        //setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n    });\r\n  };\r\n\r\n  // submit sem job request\r\n  const submitJobRequest = () => {\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/submit_job_request\",\r\n      async: false,\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        body: descriptionList,\r\n      },\r\n      success: function (status) {\r\n        if (status[\"response\"] === 200) {\r\n          console.log(\"SUCCESS\");\r\n          console.log(status);\r\n\r\n          // close submit dialog\r\n          setOpenJobRequestDialog(false);\r\n          toast.success(`${status.responseText}`, {\r\n            toastId: \"jobRequestSubmitSuccess\",\r\n          });\r\n        } else {\r\n          console.log(\"ERROR\");\r\n          console.log(status);\r\n\r\n          // close submit dialog\r\n          setOpenJobRequestDialog(false);\r\n          toast.error(`${status.responseText}`, {\r\n            toastId: \"jobRequestSubmitError\",\r\n          });\r\n        }\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenJobRequestDialog(false);\r\n        toast.error(`${status.responseText}`, {\r\n          toastId: \"jobRequestSubmitError\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // submit dataset to INPTDAT\r\n  const submitDataset = () => {\r\n    // TO DO\r\n    alert(\"to do\");\r\n  };\r\n\r\n  // download bundled dataset as .zip\r\n  const handleCreateBundle = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    // Zipping process\r\n    const zip = new JSZip();\r\n    // Zip the metadata\r\n    zip.file(\"metadata.json\", JSON.stringify(content));\r\n    zip.file(\"schema.json\", JSON.stringify(contentSchema));\r\n\r\n    const fileDir = zip.folder(\"resources\");\r\n    //img.file(\"smile.gif\", AdamantLogo, { base64: true });\r\n\r\n    // read loaded files\r\n    if (loadedFiles.length > 0) {\r\n      setOpenFilesDialog(true);\r\n      setFilesDialogContent([\r\n        \"Zipping the files...\",\r\n        \"The files are being zipped / bundled. Please wait.\",\r\n        \"\",\r\n      ]);\r\n      for (let i = 0; i < loadedFiles.length; i++) {\r\n        fileDir.file(loadedFiles[i][\"name\"], loadedFiles[i], { binary: true });\r\n      }\r\n    }\r\n\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      setOpenFilesDialog(false);\r\n      setFilesDialogContent([\"\", \"\", \"\"]);\r\n      saveAs(content, \"dataset.zip\");\r\n    });\r\n  };\r\n\r\n  const handleOnClickProceedButton = () => {\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = prepareDataForDescList(convProp);\r\n    //let cleaned = removeEmpty(prepareDataForDescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to proceed. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // create description list\r\n    let footnote = `<div> This template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>${AdamantVersion[\"adamant_version\"]}</a></span> </div>`;\r\n    let descList = createDescriptionListFromJSON(\r\n      cleaned,\r\n      convSch,\r\n      convProp,\r\n      schema,\r\n      footnote,\r\n      true\r\n    );\r\n\r\n    setDescriptionList(descList);\r\n\r\n    // validate the data first using ajv\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n    let contentSchema = { ...schema };\r\n\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    //console.log(content);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      // clear states\r\n      //setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    } else {\r\n      //setOpenSubmitDialog(true);\r\n      setOpenFormReviewDialog(true);\r\n    }\r\n  };\r\n\r\n  const handleJobRequestButton = (content, index) => {\r\n    // set submit button text\r\n    setSubmitText(content[\"submitButtonText\"]);\r\n\r\n    // clean loaded files\r\n    setLoadedFiles([]);\r\n    // reset the button color\r\n    if (jobRequestConfList.length !== 0) {\r\n      let btnStates = buttonColorStates;\r\n      for (let i = 0; i < jobRequestConfList.length; i++) {\r\n        btnStates[i][\"color\"] = \"primary\";\r\n      }\r\n      setButtonColorStates(btnStates);\r\n    }\r\n\r\n    // clear rendered schema first\r\n    clearSchemaOnClick();\r\n    // and continue\r\n    let availableSchemas = [];\r\n    for (let i = 0; i < content[\"requestSchemas\"].length; i++) {\r\n      availableSchemas.push({\r\n        schema: content.requestSchemas[i],\r\n        schemaTitle: content.requestSchemasTitle[i],\r\n      });\r\n    }\r\n    if (availableSchemas.length !== 0) {\r\n      setRenderAvailableSchemas(true);\r\n      setAvailableRequestSchemas(availableSchemas);\r\n\r\n      // create default button color states for schema selection buttons\r\n      setSchemaSelectionButtonColors(\r\n        createSchemaButtonColorStates(availableSchemas)\r\n      );\r\n    } else {\r\n      setRenderAvailableSchemas(false);\r\n      setAvailableRequestSchemas([]);\r\n    }\r\n\r\n    // change the button color\r\n    if (buttonColorStates.length !== 0) {\r\n      let btnStates = buttonColorStates;\r\n      btnStates[index][\"color\"] = \"secondary\";\r\n      setButtonColorStates(btnStates);\r\n    }\r\n  };\r\n\r\n  const handleSelectSchema = (content, index) => {\r\n    // reset the button color\r\n    if (availableRequestSchemas.length !== 0) {\r\n      let btnStates = schemaSelectionButtonColors;\r\n      for (let i = 0; i < availableRequestSchemas.length; i++) {\r\n        btnStates[i][\"color\"] = \"default\";\r\n      }\r\n      setSchemaSelectionButtonColors(btnStates);\r\n    }\r\n\r\n    // get the index\r\n    let indx = schemaNameList.indexOf(content[\"schema\"]);\r\n    let obj = schemaList[indx];\r\n    let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n    convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n    setSchema(obj);\r\n    let oriSchema = JSON.parse(JSON.stringify(obj));\r\n    setOriginalSchema(oriSchema);\r\n    setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n    setConvertedSchema(convertedSchema);\r\n\r\n    // render the schema\r\n    renderOnClick();\r\n\r\n    // change the button color\r\n    if (schemaSelectionButtonColors.length !== 0) {\r\n      let btnStates = schemaSelectionButtonColors;\r\n      btnStates[index][\"color\"] = \"secondary\";\r\n      setSchemaSelectionButtonColors(btnStates);\r\n    }\r\n  };\r\n\r\n  // gather all loaded files in one object\r\n  const handleLoadedFiles = (file, value) => {\r\n    let files = loadedFiles;\r\n    //console.log(files);\r\n\r\n    // check if file already exists\r\n    let isFileAlreadyExist = false;\r\n    for (let i = 0; i < files.length; i++) {\r\n      if (files[i] !== undefined) {\r\n        if (files[i][\"name\"] === file[\"name\"]) {\r\n          isFileAlreadyExist = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check if file metadata already exists in value\r\n    let isFileMetadataAlreadyExist = false;\r\n    let whichIndex = 0;\r\n    if (value !== undefined) {\r\n      if (value.length !== 0) {\r\n        for (let i = 0; i < value.length; i++) {\r\n          if (typeof value[i] === \"object\") {\r\n            if (Object.values(value[i]).includes(file[\"name\"])) {\r\n              isFileMetadataAlreadyExist = true;\r\n              whichIndex = i;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isFileAlreadyExist) {\r\n      console.log(\"File already exists. Skipping it.\");\r\n      toast.warning(\r\n        <>\r\n          <div>\r\n            <strong>File already loaded: {`${file[\"name\"]}`}.</strong>\r\n          </div>\r\n        </>,\r\n        {\r\n          toastId: \"fileAlreadyLoaded\" + file[\"name\"],\r\n        }\r\n      );\r\n      //console.log(\"loaded files:\", files);\r\n      return true;\r\n    } else if (!isFileAlreadyExist && isFileMetadataAlreadyExist) {\r\n      console.log(\r\n        \"File not exist yet but the metadata exists. Replace the undefined element in loadedFiles with this current file.\"\r\n      );\r\n      files[whichIndex] = file;\r\n      setLoadedFiles(files);\r\n      console.log(\"loaded files:\", files);\r\n    } else {\r\n      console.log(\"File not exist yet. Pushing it.\");\r\n      files.push(file);\r\n      //console.log(\"loaded files:\", files);\r\n      setLoadedFiles(files);\r\n      console.log(\"File added. Current files:\", loadedFiles);\r\n      toast.success(\r\n        <>\r\n          <div>\r\n            <strong>File successfully loaded:</strong>\r\n            {` ${file[\"name\"]}`}.\r\n          </div>\r\n        </>,\r\n        {\r\n          toastId: \"fileLoadedSuccessfully\" + file[\"name\"],\r\n        }\r\n      );\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // remove file from loadedFiles based on its index\r\n  const handleRemoveFile = (fileIndex) => {\r\n    let files = loadedFiles;\r\n    if (fileIndex > -1) {\r\n      files.splice(fileIndex, 1);\r\n      setLoadedFiles(files);\r\n      console.log(\"File removed. Current files:\", loadedFiles);\r\n    } else {\r\n      console.log(\"No file needs to be removed. Current files:\", loadedFiles);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormContext.Provider\r\n        value={{\r\n          updateParent,\r\n          convertedSchema,\r\n          setLoadedFiles,\r\n          loadedFiles,\r\n          handleRemoveFile,\r\n          handleLoadedFiles,\r\n          updateFormDataId,\r\n          handleDataDelete,\r\n          handleConvertedDataInput,\r\n          SEMSelectedDevice,\r\n          schemaSpecification,\r\n          setSchemaSpecification,\r\n          setSEMSelectedDevice,\r\n          implementedFieldTypes,\r\n        }}\r\n      >\r\n        <div style={{ paddingBottom: \"5px\" }}>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            <img\r\n              style={{\r\n                paddingLeft: \"10px\",\r\n                height: \"100px\",\r\n                borderRadius: \"5px\",\r\n              }}\r\n              alt=\"header\"\r\n              src={HeaderImage !== undefined ? HeaderImage : QPTDATLogo}\r\n            />\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                paddingRight: \"10px\",\r\n                justifyContent: \"right\",\r\n                verticalAlign: \"top\",\r\n              }}\r\n            >\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Button\r\n                    onClick={() => {\r\n                      history.push(\"/\");\r\n                    }}\r\n                  >\r\n                    Home\r\n                  </Button>\r\n                )}\r\n              />\r\n              <div style={{ borderRight: \"1px solid #D3D3D3\" }}></div>\r\n              {loginState === \"false\" ? (\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => setOpenLDAPLoginDialog(true)}\r\n                >\r\n                  LOG IN\r\n                </Button>\r\n              ) : (\r\n                <>\r\n                  <div\r\n                    style={{\r\n                      display: \"table-cell\",\r\n                      height: \"100%\",\r\n                      padding: \"10px\",\r\n                    }}\r\n                  >\r\n                    Hi, {firstName}!\r\n                  </div>\r\n                  <div style={{ borderRight: \"1px solid #D3D3D3\" }}></div>\r\n                  <Button color=\"secondary\" onClick={() => handleLogOut()}>\r\n                    LOG OUT\r\n                  </Button>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style={{ fontSize: \"20px\", padding: \"10px 10px 0px 10px\" }}>\r\n          Please select a workflow:\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            textAlign: \"left\",\r\n            padding: \"10px 10px 0px 10px\",\r\n          }}\r\n        >\r\n          {jobRequestConfList.length !== 0 && buttonColorStates.length !== 0\r\n            ? jobRequestConfList.map((content, index) => {\r\n                return (\r\n                  <Button\r\n                    onClick={() => handleJobRequestButton(content, index)}\r\n                    key={index}\r\n                    style={{\r\n                      fontSize: \"auto\",\r\n                      height: \"50px\",\r\n                      width: \"auto\",\r\n                      marginRight: \"5px\",\r\n                    }}\r\n                    color={buttonColorStates[index][\"color\"]}\r\n                    variant={buttonColorStates[index][\"variant\"]}\r\n                  >\r\n                    {content[\"title\"]}\r\n                  </Button>\r\n                );\r\n              })\r\n            : \"No job-request config found.\"}\r\n        </div>\r\n        {renderAvailableSchemas ? (\r\n          <>\r\n            <div style={{ fontSize: \"20px\", padding: \"10px 10px 0px 10px\" }}>\r\n              Please select a schema:\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                textAlign: \"left\",\r\n                padding: \"10px 10px 0px 10px\",\r\n              }}\r\n            >\r\n              {availableRequestSchemas.length !== 0\r\n                ? availableRequestSchemas.map((content, index) => {\r\n                    return (\r\n                      <Button\r\n                        onClick={() => handleSelectSchema(content, index)}\r\n                        key={index}\r\n                        style={{\r\n                          fontSize: \"12px\",\r\n                          height: \"30px\",\r\n                          width: \"auto\",\r\n                          marginRight: \"5px\",\r\n                        }}\r\n                        color={schemaSelectionButtonColors[index][\"color\"]}\r\n                        variant={schemaSelectionButtonColors[index][\"variant\"]}\r\n                      >\r\n                        {content[\"schemaTitle\"]}\r\n                      </Button>\r\n                    );\r\n                  })\r\n                : \"No job-request config found.\"}\r\n            </div>\r\n          </>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        {renderReady === true ? (\r\n          <>\r\n            <FormRenderer\r\n              revertAllChanges={revertAllChanges}\r\n              schema={convertedSchema}\r\n              setSchemaSpecification={setSchemaSpecification}\r\n              originalSchema={schema}\r\n              edit={false}\r\n              setEditMode={setEditMode}\r\n            />\r\n          </>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        {renderReady === true ? (\r\n          <div\r\n            style={{\r\n              padding: \"10px 10px\",\r\n              width: \"100%\",\r\n              display: \"inline-block\",\r\n            }}\r\n          >\r\n            <Button\r\n              onClick={() => handleOnClickProceedButton()}\r\n              style={{ float: \"right\" }}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Proceed\r\n            </Button>\r\n            <Button\r\n              style={{ float: \"right\", marginRight: \"5px\" }}\r\n              id=\"demo-positioned-button\"\r\n              aria-controls={open ? \"demo-positioned-menu\" : undefined}\r\n              aria-haspopup=\"true\"\r\n              aria-expanded={open ? \"true\" : undefined}\r\n              onClick={handleClick}\r\n            >\r\n              <DownloadIcon /> Download Schema/Data\r\n            </Button>\r\n            <Menu\r\n              id=\"demo-positioned-menu\"\r\n              aria-labelledby=\"demo-positioned-button\"\r\n              anchorEl={anchorEl}\r\n              open={open}\r\n              onClose={handleClose}\r\n              anchorOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"left\",\r\n              }}\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"left\",\r\n              }}\r\n            >\r\n              <MenuItem onClick={handleDownloadJsonSchema}>\r\n                Download JSON Schema\r\n              </MenuItem>\r\n              <MenuItem onClick={handleDownloadFormData}>\r\n                Download JSON Data\r\n              </MenuItem>\r\n              <MenuItem onClick={handleDownloadDescriptionList}>\r\n                Download Description List\r\n              </MenuItem>\r\n            </Menu>\r\n          </div>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\", color: \"grey\" }}>\r\n          {AdamantVersion[\"adamant_version\"]}\r\n        </div>\r\n      </FormContext.Provider>\r\n      <CreateELabFTWExperimentDialog\r\n        setTags={setTags}\r\n        tags={tags}\r\n        setRetrievedTags={setRetrievedTags}\r\n        retrievedTags={retrievedTags}\r\n        setExperimentTitle={setExperimentTitle}\r\n        createExperimentELabFTW={createExperimentELabFTW}\r\n        setToken={setToken}\r\n        token={token}\r\n        setELabURL={setELabURL}\r\n        eLabURL={eLabURL}\r\n        setOpenCreateElabFTWExperimentDialog={\r\n          setOpenCreateElabFTWExperimentDialog\r\n        }\r\n        openCreateElabFTWExperimentDialog={openCreateElabFTWExperimentDialog}\r\n        getTagsELabFTW={getTagsELabFTW}\r\n      />\r\n      <DatasetSubmissionDialog\r\n        setOpenDatasetSubmissionDialog={setOpenDatasetSubmissionDialog}\r\n        openDatasetSubmissionDialog={openDatasetSubmissionDialog}\r\n        submitDataset={submitDataset}\r\n        handleCreateBundle={handleCreateBundle}\r\n      />\r\n      {openFormReviewDialog ? (\r\n        <FormReviewBeforeSubmit\r\n          onlineMode={onlineMode}\r\n          openFormReviewDialog={openFormReviewDialog}\r\n          setOpenFormReviewDialog={setOpenFormReviewDialog}\r\n          descriptionList={descriptionList}\r\n          setOpenFunctions={{\r\n            setOpenCreateElabFTWExperimentDialog,\r\n            setOpenJobRequestDialog,\r\n            setOpenDatasetSubmissionDialog,\r\n          }}\r\n          submitFunctions={{ submitJobRequest }}\r\n          submitText={submitText}\r\n          endPoint={window.location.href}\r\n          loadedFiles={loadedFiles}\r\n        />\r\n      ) : null}\r\n      <LDAPLoginDialog\r\n        openLDAPLoginDialog={openLDAPLoginDialog}\r\n        setOpenLDAPLoginDialog={setOpenLDAPLoginDialog}\r\n        setIntranetUsername={setIntranetUsername}\r\n        setUserPassword={setUserPassword}\r\n        token={token}\r\n        setToken={setToken}\r\n        email={email}\r\n        setEmail={setEmail}\r\n        handleLogin={handleLogin}\r\n      />\r\n      <FilesDialog\r\n        openFilesDialog={openFilesDialog}\r\n        setOpenFilesDialog={setFilesDialogContent}\r\n        content={filesDialogContent}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdamantRequest;\r\n","/*\r\nNote on developing this .jsx file:\r\nBasically, it is the same as AdamantRequest.jsx\r\nJust replace availableRequestSchemas    -> availableExpSchemas\r\n             setAvailableRequestSchemas -> setAvailableExpSchemas\r\n             AdamantRequest             -> AdamantProcess\r\n             requestSchemas             -> experimentSchemas\r\n             requestSchemasTitle        -> experimentSchemasTitle\r\n*/\r\n\r\nimport React, { useCallback, useState } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n//import QPTDATLogo from \"../assets/header-image.png\";\r\nimport FormRenderer from \"../components/FormRenderer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { IconButton, TextField } from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { FormContext } from \"../FormContext\";\r\nimport array2object from \"../components/utils/array2object\";\r\nimport object2array from \"../components/utils/object2array\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport DownloadIcon from \"@material-ui/icons/GetApp\";\r\nimport set from \"set-value\";\r\nimport getValue from \"../components/utils/getValue\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport deleteKeySchema from \"../components/utils/deleteKeySchema\";\r\nimport validateAgainstSchema from \"../components/utils/validateAgainstSchema\";\r\nimport CreateELabFTWExperimentDialog from \"../components/CreateELabFTWExperimentDialog\";\r\nimport { useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport prepareDataForDescList from \"../components/utils/prepareDataForDescList\";\r\nimport array2objectAnyOf from \"../components/utils/array2objectAnyOf\";\r\nimport SchemaOne from \"../schemas/all-types.json\";\r\nimport SchemaTwo from \"../schemas/demo-schema.json\";\r\nimport SchemaThree from \"../schemas/example-experiment-schema.json\";\r\nimport SchemaFour from \"../schemas/example-request-schema.json\";\r\nimport SchemaFive from \"../schemas/plasma-mds.json\";\r\nimport fillValueWithEmptyString from \"../components/utils/fillValueWithEmptyString\";\r\nimport convData2FormData from \"../components/utils/convData2FormData\";\r\nimport FormReviewBeforeSubmit from \"../components/FormReviewBeforeSubmit\";\r\nimport changeKeywords from \"../components/utils/changeKeywords\";\r\nimport QPTDATLogo from \"../assets/adamant-header-5.svg\";\r\nimport createDescriptionListFromJSON from \"../components/utils/createDescriptionListFromJSON\";\r\nimport HelpIcon from \"@material-ui/icons/HelpOutlineRounded\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport validateSchemaAgainstSpecification from \"../components/utils/validateSchemaAgainstSpecification\";\r\nimport LDAPLoginDialog from \"../components/LDAPLoginDialog\";\r\nimport DatasetSubmissionDialog from \"../components/DatasetSubmissionDialog\";\r\n\r\nimport AdamantVersion from \"../assets/adamant_version.json\";\r\nimport GeneralConfig from \"../general-conf.json\";\r\n\r\n// to create a bundle (download dataset+metadata as .zip)\r\nimport JSZip from \"jszip\";\r\nimport { saveAs } from \"file-saver\";\r\nimport FilesDialog from \"../components/FilesDialog\"\r\n\r\n// function that receive the schema and convert it to Form/json data blueprint\r\n// also to already put the default value to this blueprint\r\nconst createFormDataBlueprint = (schemaProperties) => {\r\n  let newObject = {};\r\n\r\n  Object.keys(schemaProperties).forEach((item) => {\r\n    if (schemaProperties[item][\"type\"] !== \"object\") {\r\n      if (schemaProperties[item][\"default\"] !== undefined) {\r\n        newObject[item] = schemaProperties[item][\"default\"];\r\n      } else if (\r\n        (schemaProperties[item][\"default\"] === undefined) &\r\n        (schemaProperties[item][\"enum\"] !== undefined)\r\n      ) {\r\n        newObject[item] = schemaProperties[item][\"enum\"][0];\r\n      } else if (\r\n        (schemaProperties[item][\"type\"] === \"boolean\") &\r\n        (schemaProperties[item][\"default\"] === undefined)\r\n      ) {\r\n        newObject[item] = false;\r\n      }\r\n    } else {\r\n      if (schemaProperties[item][\"properties\"] !== undefined) {\r\n        newObject[item] = createFormDataBlueprint(\r\n          schemaProperties[item][\"properties\"]\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return newObject;\r\n};\r\n\r\n// function to remove empty artributes\r\nconst removeEmpty = (obj) => {\r\n  Object.keys(obj).forEach((key) => {\r\n    if (obj[key] && typeof obj[key] === \"object\") {\r\n      const childObject = removeEmpty(obj[key]);\r\n      if (childObject === undefined) {\r\n        delete obj[key];\r\n      }\r\n    } else if (obj[key] === \"\" || obj[key] === null || obj[key] === undefined) {\r\n      delete obj[key];\r\n    }\r\n  });\r\n  return Object.keys(obj).length > 0 || obj instanceof Array ? obj : undefined;\r\n};\r\n\r\n// initialize color states for request selection buttons\r\nconst createButtonColorStatesFromConfigs = (config) => {\r\n  let buttonStates = [];\r\n  for (let i = 0; i < config.length; i++) {\r\n    let states = {\r\n      variant: \"contained\",\r\n      color: \"primary\",\r\n    };\r\n    buttonStates.push(states);\r\n  }\r\n  return buttonStates;\r\n};\r\n\r\n// initialize color states for schema selection buttons\r\nconst createSchemaButtonColorStates = (availableSchemas) => {\r\n  let buttonStates = [];\r\n  for (let i = 0; i < availableSchemas.length; i++) {\r\n    let states = {\r\n      variant: \"outlined\",\r\n      color: \"default\",\r\n    };\r\n    buttonStates.push(states);\r\n  }\r\n  return buttonStates;\r\n};\r\n\r\nconst AdamantProcess = () => {\r\n  // state management\r\n  const [disable, setDisable] = useState(true);\r\n  const [schemaMessage, setSchemaMessage] = useState(null);\r\n  const [schemaValidity, setSchemaValidity] = useState(false);\r\n  const [schema, setSchema] = useState(null);\r\n  const [schemaIntermediate, setSchemaIntermediate] = useState(null);\r\n  const [renderReady, setRenderReady] = useState(false);\r\n  const [editMode, setEditMode] = useState(true);\r\n  const [schemaList, setSchemaList] = useState([]);\r\n  const [schemaNameList, setSchemaNameList] = useState([]);\r\n  const [selectedSchemaName, setSelectedSchemaName] = useState(\"\");\r\n  const [originalSchema, setOriginalSchema] = useState();\r\n  const [inputMode, setInputMode] = useState(false);\r\n  const [convertedSchema, setConvertedSchema] = useState(null);\r\n  const [createScratchMode, setCreateScratchMode] = useState(false);\r\n  const [jsonData, setJsonData] = useState({});\r\n  const [descriptionList, setDescriptionList] = useState(\"\");\r\n  const [schemaWithValues, setSchemaWithValues] = useState({});\r\n  const [schemaSpecification, setSchemaSpecification] = useState(\"\");\r\n  const [token, setToken] = useState(\"\");\r\n  const [eLabURL, setELabURL] = useState(\r\n    GeneralConfig[\"local-elab-url\"]\r\n  );\r\n  const [experimentTitle, setExperimentTitle] = useState(\"\");\r\n  const [onlineMode, setOnlineMode] = useState(false);\r\n  const [tags, setTags] = useState([]);\r\n  const [retrievedTags, setRetrievedTags] = useState([]);\r\n  const [SEMSelectedDevice, setSEMSelectedDevice] = useState(\"\");\r\n  const [HeaderImage, setHeaderImage] = useState(QPTDATLogo);\r\n  const [openFormReviewDialog, setOpenFormReviewDialog] = useState(false);\r\n  const [openJobRequestDialog, setOpenJobRequestDialog] = useState(false);\r\n  const [openDatasetSubmissionDialog, setOpenDatasetSubmissionDialog] =\r\n    useState(false);\r\n  const [jobRequestSchemas, setJobRequestSchemas] = useState([]);\r\n  const [submitTextList, setSubmitTextList] = useState([]);\r\n  const [jobRequestConfList, setJobRequestConfList] = useState([]);\r\n  const [submitText, setSubmitText] = useState(\"Submit Job Request\");\r\n  const [availableRequestSchemas, setAvailableRequestSchemas] = useState([]);\r\n  const [availableExpSchemas, setAvailableExpSchemas] = useState([]);\r\n  const [renderAvailableSchemas, setRenderAvailableSchemas] = useState(false);\r\n  const [buttonColorStates, setButtonColorStates] = useState([]);\r\n  const [schemaSelectionButtonColors, setSchemaSelectionButtonColors] =\r\n    useState([]);\r\n  // for dropdown buttons\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [\r\n    openCreateElabFTWExperimentDialog,\r\n    setOpenCreateElabFTWExperimentDialog,\r\n  ] = useState(false);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  }; //\r\n\r\n  const [intranetUsername, setIntranetUsername] = useState();\r\n  const [userPassword, setUserPassword] = useState();\r\n  const [openLDAPLoginDialog, setOpenLDAPLoginDialog] = useState(false);\r\n  const [loginState, setLoginState] = useState(\"false\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n\r\n  // loaded files object\r\n  const [loadedFiles, setLoadedFiles] = useState([]);\r\n\r\n  // FilesDialog\r\n  const [openFilesDialog, setOpenFilesDialog] = useState(false);\r\n  const [filesDialogContent, setFilesDialogContent] = useState([\"\", \"\", \"\"]);\r\n\r\n  //-------------------------- useEffects to save states between reloads ----------------------------\r\n  useEffect(() => {\r\n    setFirstName(\r\n      window.sessionStorage.getItem(\"firstName\") === null\r\n        ? \"\"\r\n        : window.sessionStorage.getItem(\"firstName\")\r\n    );\r\n    setToken(\r\n      window.sessionStorage.getItem(\"token\") === null\r\n        ? \"\"\r\n        : window.sessionStorage.getItem(\"token\")\r\n    );\r\n    setLoginState(\r\n      window.sessionStorage.getItem(\"loginState\") === null\r\n        ? \"false\"\r\n        : window.sessionStorage.getItem(\"loginState\")\r\n    );\r\n    setEmail(\r\n      window.sessionStorage.getItem(\"email\") === null\r\n        ? \"\"\r\n        : window.sessionStorage.getItem(\"email\")\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.sessionStorage.setItem(\"firstName\", firstName);\r\n    window.sessionStorage.setItem(\"token\", token);\r\n    window.sessionStorage.setItem(\"loginState\", loginState);\r\n    window.sessionStorage.setItem(\"email\", email);\r\n  }, [firstName, token, loginState, email]);\r\n  //-------------------------------------------------------------------------------------------------\r\n\r\n  let implementedFieldTypes = [\r\n    \"string\",\r\n    \"number\",\r\n    \"integer\",\r\n    \"array\",\r\n    \"boolean\",\r\n    \"object\",\r\n  ];\r\n\r\n  // check if the front-end is connected to backend at all\r\n  useEffect(() => {\r\n    let $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"GET\",\r\n      url: \"/api/check_mode\",\r\n      success: function (status) {\r\n        console.log(\"Connection to server is established. Online mode\");\r\n        setJobRequestSchemas(status[\"jobRequestSchemaList\"]);\r\n        setSubmitTextList(status[\"submitButtonText\"]);\r\n        setJobRequestConfList(status[\"configs\"]);\r\n        setButtonColorStates(\r\n          createButtonColorStatesFromConfigs(status[\"configs\"])\r\n        );\r\n        console.log(\r\n          \"states:\",\r\n          createButtonColorStatesFromConfigs(status[\"configs\"])\r\n        );\r\n        setOnlineMode(true);\r\n        toast.success(\r\n          <>\r\n            <div>\r\n              <strong>Connection to server is established.</strong>\r\n            </div>\r\n          </>,\r\n          {\r\n            toastId: \"connectionSuccess\",\r\n          }\r\n        );\r\n      },\r\n      error: function () {\r\n        console.log(\r\n          \"Unable to establish connection to server. Offline mode. Submit feature is disabled.\"\r\n        );\r\n        setOnlineMode(false);\r\n\r\n        // use available schema as a place holder\r\n        setSchemaNameList([\r\n          \"\",\r\n          \"all-types.json\",\r\n          \"demo-schema.json\",\r\n          \"example-experiment-schema.json\",\r\n          \"example-request-schema.json\",\r\n          \"plasma-mds.json\",\r\n        ]);\r\n        setSchemaList([\r\n          null,\r\n          SchemaOne,\r\n          SchemaTwo,\r\n          SchemaThree,\r\n          SchemaFour,\r\n          SchemaFive,\r\n        ]);\r\n\r\n        toast.warning(\r\n          <>\r\n            <div>\r\n              <strong>Unable to establish connection to server.</strong>\r\n            </div>\r\n            <div>Submit feature is disabled.</div>\r\n          </>,\r\n          {\r\n            toastId: \"connectionWarning\",\r\n          }\r\n        );\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // get schemas from server when onlinemode is true\r\n  useEffect(() => {\r\n    // if online mode then get available schemas from server\r\n    if (onlineMode === true) {\r\n      let $ = require(\"jquery\");\r\n      $.ajax({\r\n        type: \"GET\",\r\n        url: \"/api/get_schemas\",\r\n        success: function (status) {\r\n          console.log(\"SUCCESS\");\r\n\r\n          // do this to preserver the order\r\n          let sch = [];\r\n          status[\"schema\"].forEach((element) => {\r\n            sch.push(JSON.parse(element));\r\n          });\r\n\r\n          setSchemaList(sch);\r\n          setSchemaNameList(status[\"schemaName\"]);\r\n        },\r\n        error: function () {\r\n          console.log(\"ERROR\");\r\n          toast.warning(\r\n            \"Error while fetching the schemas. Using basic list of schemas.\",\r\n            {\r\n              toastId: \"fetchingSchemasError\",\r\n            }\r\n          );\r\n          // if unable to fetch the schemas then use the basic list of schemas\r\n          setSchemaNameList([\r\n            \"\",\r\n            \"all-types.json\",\r\n            \"demo-schema.json\",\r\n            \"example-experiment-schema.json\",\r\n            \"example-request-schema.json\",\r\n            \"plasma-mds.json\",\r\n          ]);\r\n          setSchemaList([\r\n            null,\r\n            SchemaOne,\r\n            SchemaTwo,\r\n            SchemaThree,\r\n            SchemaFour,\r\n            SchemaFive,\r\n          ]);\r\n        },\r\n      });\r\n    }\r\n  }, [onlineMode]);\r\n\r\n  // handle login\r\n  const handleLogin = () => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/login\",\r\n      dataType: \"json\",\r\n      data: {\r\n        email: email,\r\n        eLabToken: token,\r\n        elabUrl: GeneralConfig[\"local-elab-url\"]\r\n      },\r\n      success: function (status) {\r\n        if (status[\"status\"] === 400) {\r\n          console.log(\"Log in failed!\");\r\n          console.log(status);\r\n          toast.error(`Failed to log you in!\\nUser e-mail not found.`, {\r\n            toastId: \"loginFailed\",\r\n          });\r\n        } else {\r\n          console.log(\"Login sucessful!\");\r\n          //let arr = [];\r\n          //for (let i = 0; i < status.length; i++) {\r\n          //  arr.push(status[i][\"tag\"]);\r\n          //}\r\n          setRetrievedTags(status);\r\n          toast.success(`Successfully logged in!`, {\r\n            toastId: \"loginSuccess\",\r\n          });\r\n          setOpenLDAPLoginDialog(false);\r\n          setLoginState(\"true\");\r\n          setFirstName(status[\"firstname\"]);\r\n        }\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Log in failed!\");\r\n        console.log(status);\r\n        toast.error(`Failed to log you in!\\nIs the server working properly? Or maybe wrong token?`, {\r\n          toastId: \"loginFailed\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleLogOut = () => {\r\n    setLoginState(\"false\");\r\n    setToken(\"\");\r\n    setFirstName(\"\");\r\n    setEmail(\"\");\r\n\r\n    window.sessionStorage.setItem(\"firstName\", \"\");\r\n    window.sessionStorage.setItem(\"token\", \"\");\r\n    window.sessionStorage.setItem(\"loginState\", \"false\");\r\n    window.sessionStorage.setItem(\"email\", \"\");\r\n  };\r\n\r\n  // handle select schema on change\r\n  const handleSelectSchemaOnChange = (event) => {\r\n    // first reset states\r\n    setRenderReady(false);\r\n    setDisable(true);\r\n    setCreateScratchMode(false);\r\n    setJsonData({});\r\n    //\r\n\r\n    console.log(\"selected schema:\", event.target.value);\r\n    setSelectedSchemaName(event.target.value);\r\n\r\n    let selectedSchema = schemaList[schemaNameList.indexOf(event.target.value)];\r\n\r\n    // reset everything when selectedSchema is empty\r\n    if (selectedSchema === null) {\r\n      setDisable(true);\r\n      setRenderReady(false);\r\n      setSchema(null);\r\n      setSchemaValidity(false);\r\n      setSchemaMessage();\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      return;\r\n    }\r\n\r\n    // convert selectedSchema schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n    try {\r\n      convertedSchema[\"properties\"] = object2array(\r\n        selectedSchema[\"properties\"]\r\n      );\r\n\r\n      // update states\r\n      setSchemaValidity(true);\r\n      setSchemaMessage(`${event.target.value} is a valid schema`);\r\n      setSchema(selectedSchema);\r\n      let oriSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n      setOriginalSchema(oriSchema);\r\n      setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n      setConvertedSchema(convertedSchema);\r\n\r\n      if (jobRequestSchemas.includes(convertedSchema[\"title\"])) {\r\n        try {\r\n          //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n          //setHeaderImage(SEMlogo[\"default\"]);\r\n          setHeaderImage(QPTDATLogo);\r\n          setEditMode(true);\r\n        } catch (error) {\r\n          console.log(error);\r\n          setHeaderImage(QPTDATLogo);\r\n          setEditMode(true);\r\n        }\r\n      } else {\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(true);\r\n      }\r\n\r\n      // create form data\r\n      let formData = createFormDataBlueprint(selectedSchema[\"properties\"]);\r\n      setJsonData(formData);\r\n    } catch (error) {\r\n      console.log(error);\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${event.target.value} is invalid`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // function to check if the file accepted is of json format and json schema valid\r\n  const checkSchemaValidity = (schemaFile) => {\r\n    // place holder\r\n    if (schemaFile[0][\"type\"] === \"application/json\") {\r\n      // read the file with FileReadr API\r\n      const reader = new FileReader();\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = () => {\r\n        const binaryStr = reader.result;\r\n        const obj = JSON.parse(binaryStr);\r\n\r\n        // convert obj schema to iterable array properties\r\n        let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n        try {\r\n          convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n          // update states\r\n          setSchemaValidity(true);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is a valid schema`);\r\n          setSchema(obj);\r\n          let oriSchema = JSON.parse(JSON.stringify(obj));\r\n          setOriginalSchema(oriSchema);\r\n          setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n          setConvertedSchema(convertedSchema);\r\n\r\n          if (jobRequestSchemas.includes(obj[\"title\"])) {\r\n            try {\r\n              //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n              //setHeaderImage(SEMlogo[\"default\"]);\r\n              setHeaderImage(QPTDATLogo);\r\n              setEditMode(true);\r\n            } catch (error) {\r\n              console.log(error);\r\n              setHeaderImage(QPTDATLogo);\r\n              setEditMode(true);\r\n            }\r\n          } else {\r\n            setHeaderImage(QPTDATLogo);\r\n            setEditMode(true);\r\n          }\r\n\r\n          // create form data\r\n          let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n          setJsonData(formData);\r\n        } catch (error) {\r\n          console.log(error);\r\n          // update states\r\n          setSchemaValidity(false);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is invalid`);\r\n          setSchema(null);\r\n        }\r\n      };\r\n      reader.readAsText(schemaFile[0]);\r\n    } else {\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${schemaFile[0][\"name\"]} is of incorrect file type`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // browse or drag&drop schema file\r\n  const onDrop = useCallback(\r\n    (acceptedFile) => {\r\n      // process the schema, validation etc\r\n      checkSchemaValidity(acceptedFile);\r\n\r\n      // store schema file in the state\r\n      // update states\r\n      setRenderReady(false);\r\n      setDisable(true);\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      setSelectedSchemaName(\"\");\r\n    },\r\n    [setRenderReady, jobRequestSchemas, submitTextList]\r\n  );\r\n  //\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    multiple: false,\r\n  });\r\n\r\n  // render on-click handle\r\n  const renderOnClick = () => {\r\n    //setFormRenderInProgress(true);\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // clear schema on-click handle\r\n  const clearSchemaOnClick = () => {\r\n    setHeaderImage(QPTDATLogo);\r\n    setDisable(true);\r\n    setRenderReady(false);\r\n    setSchema(null);\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setCreateScratchMode(false);\r\n    setSelectedSchemaName(\"\");\r\n  };\r\n\r\n  // create new schema from scratch\r\n  const createSchemaFromScratch = () => {\r\n    // update browse schema render states\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setJsonData({});\r\n    setSelectedSchemaName(\"\");\r\n\r\n    // always use newer schema specification\r\n    let schemaBlueprint = {\r\n      $schema: \"http://json-schema.org/draft-07/schema#\",\r\n      type: \"object\",\r\n      properties: {},\r\n    };\r\n    const obj = JSON.parse(JSON.stringify(schemaBlueprint));\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n    setJsonData(formData);\r\n\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n    convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n    // update states\r\n    setCreateScratchMode(true);\r\n    setSchema(obj);\r\n    let oriSchema = JSON.parse(JSON.stringify(obj));\r\n    setOriginalSchema(oriSchema);\r\n    setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n    setConvertedSchema(convertedSchema);\r\n\r\n    if (jobRequestSchemas.includes(obj[\"title\"])) {\r\n      try {\r\n        //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n        //setHeaderImage(SEMlogo[\"default\"]);\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(true);\r\n      } catch (error) {\r\n        console.log(error);\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(true);\r\n      }\r\n    } else {\r\n      setHeaderImage(QPTDATLogo);\r\n      setEditMode(true);\r\n    }\r\n\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // compile on-click handle\r\n  const compileOnClick = () => {\r\n    let value = schema;\r\n\r\n    const [valid, message] = validateSchemaAgainstSpecification(\r\n      JSON.parse(JSON.stringify(schema)),\r\n      schemaSpecification\r\n    );\r\n    if (valid) {\r\n      setInputMode(true);\r\n      setSchema(value);\r\n      setEditMode(false);\r\n      setDisable(true);\r\n    } else {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Your schema is not valid.</strong>\r\n          </div>\r\n          {message}\r\n        </>,\r\n        {\r\n          toastId: \"schemaError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n  };\r\n\r\n  // return to edit mode handle\r\n  const toEditMode = () => {\r\n    let value = schema;\r\n    if (jobRequestSchemas.includes(schema[\"title\"])) {\r\n      setInputMode(false);\r\n      setSchema(value);\r\n      setEditMode(true);\r\n      setDisable(false);\r\n    } else {\r\n      setInputMode(false);\r\n      setSchema(value);\r\n      setEditMode(true);\r\n      setDisable(false);\r\n    }\r\n  };\r\n\r\n  // update parent (re-render everything)\r\n  const updateParent = (value) => {\r\n    let newValue = { ...value };\r\n\r\n    if (newValue[\"$schema\"] === \"http://json-schema.org/draft-04/schema#\") {\r\n      changeKeywords(newValue, \"$id\", \"id\");\r\n    } else {\r\n      changeKeywords(newValue, \"id\", \"$id\");\r\n    }\r\n\r\n    // update original schema\r\n    let updatedSchema = JSON.parse(JSON.stringify(newValue));\r\n    let tempSchema = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema[\"properties\"] = array2object(tempSchema[\"properties\"]);\r\n\r\n    setConvertedSchema(newValue);\r\n    setSchema(updatedSchema);\r\n\r\n    // update intermediate schema\r\n    let updatedSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    let tempSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema2[\"properties\"] = array2objectAnyOf(tempSchema2[\"properties\"]);\r\n    setSchemaIntermediate(updatedSchema2);\r\n  };\r\n\r\n  // update error stuff visually after validation (if some field(s) is are invalid)\r\n  const setErrorStuffUponValidation = (errorMessages) => {\r\n    let value = { ...convertedSchema };\r\n    errorMessages.forEach((message) => {\r\n      let path = message.path;\r\n      path = path.split(\".\");\r\n      let newPath = [];\r\n      let tempValue = JSON.parse(JSON.stringify(value));\r\n      for (let i = 0; i < path.length; ) {\r\n        if (path[i] === \"items\" && tempValue[path[i]][\"type\"] === \"object\") {\r\n          set(value, newPath.join(\".\") + \".adamant_field_error\", true);\r\n          set(\r\n            value,\r\n            newPath.join(\".\") + \".adamant_error_description\",\r\n            \"One or more fields in this array have invalid inputs. Please fix them.\"\r\n          );\r\n          return;\r\n        }\r\n        if (\r\n          path[i] === \"properties\" &&\r\n          Array.isArray(tempValue[\"properties\"])\r\n        ) {\r\n          newPath.push(path[i]);\r\n          i += 1;\r\n          let index = tempValue[\"properties\"].findIndex(\r\n            (val) => val.fieldKey === path[i]\r\n          );\r\n          newPath.push(index);\r\n          i += 1;\r\n          tempValue = tempValue[\"properties\"][index];\r\n        } else {\r\n          newPath.push(path[i]);\r\n          tempValue = tempValue[path[i]];\r\n          i += 1;\r\n        }\r\n      }\r\n      //console.log(newPath.join(\".\"));\r\n      set(value, newPath.join(\".\") + \".adamant_field_error\", true);\r\n      set(\r\n        value,\r\n        newPath.join(\".\") + \".adamant_error_description\",\r\n        message.message\r\n      );\r\n    });\r\n\r\n    updateParent(value);\r\n  };\r\n\r\n  // revert all changes to the schema\r\n  const revertAllChanges = () => {\r\n    let value = { ...originalSchema };\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(value));\r\n    convertedSchema[\"properties\"] = object2array(value[\"properties\"]);\r\n    console.log(convertedSchema);\r\n    setConvertedSchema(convertedSchema);\r\n    setSchema(value);\r\n    setSchemaWithValues(value);\r\n    setDescriptionList(\"\");\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(value[\"properties\"]);\r\n    setJsonData(formData);\r\n  };\r\n\r\n  /*/ handle data input on blur\r\n  const handleDataInput = (event, path, type) => {\r\n    let jData = { ...jsonData };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(jData, path, value);\r\n    //console.log(\"Current form data    (jData):\", jData);\r\n    setJsonData(jData);\r\n  };\r\n  /*/\r\n\r\n  // handle data input on blur to convertedSchema\r\n  const handleConvertedDataInput = (event, path, type) => {\r\n    let convSchemaData = { ...convertedSchema };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(convSchemaData, path, value);\r\n    setConvertedSchema(convSchemaData);\r\n    //console.log(convSchemaData);\r\n\r\n    let data = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    setJsonData(data);\r\n\r\n    // convert to form data\r\n    console.log(\"Current form data (convData):\", data);\r\n\r\n    // unconverted\r\n    //console.log(\"Current form data (unconverted convData):\", convSchemaData);\r\n  };\r\n\r\n  // delete data in jsonData when the field in schema is deleted\r\n  const handleDataDelete = (path) => {\r\n    let jData = { ...jsonData };\r\n    let value = deleteKeySchema(jData, path);\r\n    setJsonData(value);\r\n    console.log(\"Current form data:\", value);\r\n  };\r\n\r\n  // update form data id if a fieldkey changes, simply delete key value pair of the oldfieldid from jsonData\r\n  const updateFormDataId = (\r\n    oldFieldId,\r\n    newFieldId,\r\n    pathFormData,\r\n    defaultValue\r\n  ) => {\r\n    if (oldFieldId === newFieldId) {\r\n      return;\r\n    }\r\n    if (defaultValue === undefined) {\r\n      let jData = { ...jsonData };\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    } else {\r\n      let newPathFormData = pathFormData.split(\".\");\r\n      newPathFormData.pop();\r\n      newPathFormData.push(newFieldId);\r\n\r\n      let jData = { ...jsonData };\r\n      let value = getValue(jData, pathFormData);\r\n      set(jData, newPathFormData, value);\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    }\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadJsonSchema = () => {\r\n    let content = { ...schema };\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `jsonschema-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadFormData = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `formdata-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadDescriptionList = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = prepareDataForDescList(convProp); // skip keyword that has value of array with objects as its elements\r\n    //let cleaned = removeEmpty(prepareDataForDescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to download. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // create description list\r\n    let footnote = `<div> This template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>${AdamantVersion[\"adamant_version\"]}</a></span> </div>`;\r\n    let descList = createDescriptionListFromJSON(\r\n      cleaned,\r\n      convSch,\r\n      convProp,\r\n      schema,\r\n      footnote,\r\n      false\r\n    ); // false means without styling\r\n\r\n    setDescriptionList(descList);\r\n\r\n    let sha256_hash = CryptoJS.SHA256(descList);\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([descList], {\r\n      type: \"text/html\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `desclist-${sha256_hash}.tpl`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // get available tags from elabftw\r\n  const getTagsELabFTW = () => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/get_tags\",\r\n      dataType: \"json\",\r\n      data: {\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n      },\r\n      success: function (status) {\r\n        console.log(\"Tags retrieved successfully\");\r\n        //let arr = [];\r\n        //for (let i = 0; i < status.length; i++) {\r\n        //  arr.push(status[i][\"tag\"]);\r\n        //}\r\n        setRetrievedTags(status);\r\n        toast.success(`Successfully retrieved the tags!`, {\r\n          toastId: \"fetchingTagsSuccess\",\r\n        });\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Failed to retrieve tags\");\r\n        console.log(status);\r\n        toast.error(`Failed to get the tags!\\nMaybe wrong url or token?`, {\r\n          toastId: \"fetchingTagsError\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // create an experiment in elabftw based on the schema and data\r\n  const createExperimentELabFTW = () => {\r\n    // validate the data first using ajv\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(\r\n      content,\r\n      JSON.parse(JSON.stringify(contentSchema))\r\n    );\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      // clear states\r\n      //setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    }\r\n\r\n    // call create experiment api\r\n    console.log(\"tags:\", tags);\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/create_experiment\",\r\n      async: false,\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n        title: experimentTitle,\r\n        body: descriptionList,\r\n        tags: JSON.stringify(tags),\r\n      },\r\n      success: function (status) {\r\n        console.log(\"SUCCESS\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenCreateElabFTWExperimentDialog(false);\r\n        toast.success(\r\n          `Successfully created an experiment with id: ${status[\"experimentId\"]}!`,\r\n          {\r\n            toastId: \"createExperimentSuccess\",\r\n          }\r\n        );\r\n\r\n        // clear states\r\n        //setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenCreateElabFTWExperimentDialog(false);\r\n        toast.error(\r\n          `Failed to create an experiment!\\nMaybe wrong url or token?`,\r\n          {\r\n            toastId: \"createExperimentError\",\r\n          }\r\n        );\r\n        // clear states\r\n        //setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n    });\r\n  };\r\n\r\n  // submit sem job request\r\n  const submitJobRequest = () => {\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/submit_job_request\",\r\n      async: false,\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        body: descriptionList,\r\n      },\r\n      success: function (status) {\r\n        if (status[\"response\"] === 200) {\r\n          console.log(\"SUCCESS\");\r\n          console.log(status);\r\n\r\n          // close submit dialog\r\n          setOpenJobRequestDialog(false);\r\n          toast.success(`${status.responseText}`, {\r\n            toastId: \"jobRequestSubmitSuccess\",\r\n          });\r\n        } else {\r\n          console.log(\"ERROR\");\r\n          console.log(status);\r\n\r\n          // close submit dialog\r\n          setOpenJobRequestDialog(false);\r\n          toast.error(`${status.responseText}`, {\r\n            toastId: \"jobRequestSubmitError\",\r\n          });\r\n        }\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenJobRequestDialog(false);\r\n        toast.error(`${status.responseText}`, {\r\n          toastId: \"jobRequestSubmitError\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // submit dataset to INPTDAT\r\n  const submitDataset = () => {\r\n    // TO DO\r\n    alert(\"to do\");\r\n  };\r\n\r\n  // download bundled dataset as .zip\r\n  const handleCreateBundle = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    // Zipping process\r\n    const zip = new JSZip();\r\n    // Zip the metadata\r\n    zip.file(\"metadata.json\", JSON.stringify(content));\r\n    zip.file(\"schema.json\", JSON.stringify(contentSchema));\r\n\r\n    const fileDir = zip.folder(\"resources\");\r\n    //img.file(\"smile.gif\", AdamantLogo, { base64: true });\r\n\r\n    // read loaded files\r\n    if (loadedFiles.length > 0) {\r\n      setOpenFilesDialog(true);\r\n      setFilesDialogContent([\r\n        \"Zipping the files...\",\r\n        \"The files are being zipped / bundled. Please wait.\",\r\n        \"\",\r\n      ]);\r\n      for (let i = 0; i < loadedFiles.length; i++) {\r\n        fileDir.file(loadedFiles[i][\"name\"], loadedFiles[i], { binary: true });\r\n      }\r\n    }\r\n\r\n    zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n      // see FileSaver.js\r\n      setOpenFilesDialog(false);\r\n      setFilesDialogContent([\"\", \"\", \"\"]);\r\n      saveAs(content, \"dataset.zip\");\r\n    });\r\n  };\r\n\r\n  const handleOnClickProceedButton = () => {\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = prepareDataForDescList(convProp);\r\n    //let cleaned = removeEmpty(prepareDataForDescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to proceed. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // create description list\r\n    let footnote = `<div> This template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>${AdamantVersion[\"adamant_version\"]}</a></span> </div>`;\r\n    let descList = createDescriptionListFromJSON(\r\n      cleaned,\r\n      convSch,\r\n      convProp,\r\n      schema,\r\n      footnote,\r\n      true\r\n    );\r\n\r\n    setDescriptionList(descList);\r\n\r\n    // validate the data first using ajv\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n    let contentSchema = { ...schema };\r\n\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    //console.log(content);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      // clear states\r\n      //setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    } else {\r\n      //setOpenSubmitDialog(true);\r\n      setOpenFormReviewDialog(true);\r\n    }\r\n  };\r\n\r\n  const handleJobRequestButton = (content, index) => {\r\n    // set submit button text\r\n    setSubmitText(content[\"submitButtonText\"]);\r\n\r\n    // clean loaded files\r\n    setLoadedFiles([]);\r\n    // reset the button color\r\n    if (jobRequestConfList.length !== 0) {\r\n      let btnStates = buttonColorStates;\r\n      for (let i = 0; i < jobRequestConfList.length; i++) {\r\n        btnStates[i][\"color\"] = \"primary\";\r\n      }\r\n      setButtonColorStates(btnStates);\r\n    }\r\n\r\n    // clear rendered schema first\r\n    clearSchemaOnClick();\r\n    // and continue\r\n    let availableSchemas = [];\r\n    for (let i = 0; i < content[\"experimentSchemas\"].length; i++) {\r\n      availableSchemas.push({\r\n        schema: content.experimentSchemas[i],\r\n        schemaTitle: content.experimentSchemasTitle[i],\r\n      });\r\n    }\r\n    if (availableSchemas.length !== 0) {\r\n      setRenderAvailableSchemas(true);\r\n      setAvailableExpSchemas(availableSchemas);\r\n\r\n      // create default button color states for schema selection buttons\r\n      setSchemaSelectionButtonColors(\r\n        createSchemaButtonColorStates(availableSchemas)\r\n      );\r\n    } else {\r\n      setRenderAvailableSchemas(false);\r\n      setAvailableExpSchemas([]);\r\n    }\r\n\r\n    // change the button color\r\n    if (buttonColorStates.length !== 0) {\r\n      let btnStates = buttonColorStates;\r\n      btnStates[index][\"color\"] = \"secondary\";\r\n      setButtonColorStates(btnStates);\r\n    }\r\n  };\r\n\r\n  const handleSelectSchema = (content, index) => {\r\n    // reset the button color\r\n    if (availableExpSchemas.length !== 0) {\r\n      let btnStates = schemaSelectionButtonColors;\r\n      for (let i = 0; i < availableExpSchemas.length; i++) {\r\n        btnStates[i][\"color\"] = \"default\";\r\n      }\r\n      setSchemaSelectionButtonColors(btnStates);\r\n    }\r\n\r\n    // get the index\r\n    let indx = schemaNameList.indexOf(content[\"schema\"]);\r\n    let obj = schemaList[indx];\r\n    let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n    convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n    setSchema(obj);\r\n    let oriSchema = JSON.parse(JSON.stringify(obj));\r\n    setOriginalSchema(oriSchema);\r\n    setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n    setConvertedSchema(convertedSchema);\r\n\r\n    // render the schema\r\n    renderOnClick();\r\n\r\n    // change the button color\r\n    if (schemaSelectionButtonColors.length !== 0) {\r\n      let btnStates = schemaSelectionButtonColors;\r\n      btnStates[index][\"color\"] = \"secondary\";\r\n      setSchemaSelectionButtonColors(btnStates);\r\n    }\r\n  };\r\n\r\n  // gather all loaded files in one object\r\n  const handleLoadedFiles = (file, value) => {\r\n    let files = loadedFiles;\r\n    //console.log(files);\r\n\r\n    // check if file already exists\r\n    let isFileAlreadyExist = false;\r\n    for (let i = 0; i < files.length; i++) {\r\n      if (files[i] !== undefined) {\r\n        if (files[i][\"name\"] === file[\"name\"]) {\r\n          isFileAlreadyExist = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check if file metadata already exists in value\r\n    let isFileMetadataAlreadyExist = false;\r\n    let whichIndex = 0;\r\n    if (value !== undefined) {\r\n      if (value.length !== 0) {\r\n        for (let i = 0; i < value.length; i++) {\r\n          if (typeof value[i] === \"object\") {\r\n            if (Object.values(value[i]).includes(file[\"name\"])) {\r\n              isFileMetadataAlreadyExist = true;\r\n              whichIndex = i;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isFileAlreadyExist) {\r\n      console.log(\"File already exists. Skipping it.\");\r\n      toast.warning(\r\n        <>\r\n          <div>\r\n            <strong>File already loaded: {`${file[\"name\"]}`}.</strong>\r\n          </div>\r\n        </>,\r\n        {\r\n          toastId: \"fileAlreadyLoaded\" + file[\"name\"],\r\n        }\r\n      );\r\n      //console.log(\"loaded files:\", files);\r\n      return true;\r\n    } else if (!isFileAlreadyExist && isFileMetadataAlreadyExist) {\r\n      console.log(\r\n        \"File not exist yet but the metadata exists. Replace the undefined element in loadedFiles with this current file.\"\r\n      );\r\n      files[whichIndex] = file;\r\n      setLoadedFiles(files);\r\n      console.log(\"loaded files:\", files);\r\n    } else {\r\n      console.log(\"File not exist yet. Pushing it.\");\r\n      files.push(file);\r\n      //console.log(\"loaded files:\", files);\r\n      setLoadedFiles(files);\r\n      console.log(\"File added. Current files:\", loadedFiles);\r\n      toast.success(\r\n        <>\r\n          <div>\r\n            <strong>File successfully loaded:</strong>\r\n            {` ${file[\"name\"]}`}.\r\n          </div>\r\n        </>,\r\n        {\r\n          toastId: \"fileLoadedSuccessfully\" + file[\"name\"],\r\n        }\r\n      );\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // remove file from loadedFiles based on its index\r\n  const handleRemoveFile = (fileIndex) => {\r\n    let files = loadedFiles;\r\n    if (fileIndex > -1) {\r\n      files.splice(fileIndex, 1);\r\n      setLoadedFiles(files);\r\n      console.log(\"File removed. Current files:\", loadedFiles);\r\n    } else {\r\n      console.log(\"No file needs to be removed. Current files:\", loadedFiles);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormContext.Provider\r\n        value={{\r\n          updateParent,\r\n          convertedSchema,\r\n          setLoadedFiles,\r\n          loadedFiles,\r\n          handleRemoveFile,\r\n          handleLoadedFiles,\r\n          updateFormDataId,\r\n          handleDataDelete,\r\n          handleConvertedDataInput,\r\n          SEMSelectedDevice,\r\n          schemaSpecification,\r\n          setSchemaSpecification,\r\n          setSEMSelectedDevice,\r\n          implementedFieldTypes,\r\n        }}\r\n      >\r\n        <div style={{ paddingBottom: \"5px\" }}>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            <img\r\n              style={{\r\n                paddingLeft: \"10px\",\r\n                height: \"100px\",\r\n                borderRadius: \"5px\",\r\n              }}\r\n              alt=\"header\"\r\n              src={HeaderImage !== undefined ? HeaderImage : QPTDATLogo}\r\n            />\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                paddingRight: \"10px\",\r\n                justifyContent: \"right\",\r\n                verticalAlign: \"top\",\r\n              }}\r\n            >\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Button\r\n                    onClick={() => {\r\n                      history.push(\"/\");\r\n                    }}\r\n                  >\r\n                    Home\r\n                  </Button>\r\n                )}\r\n              />\r\n              <div style={{ borderRight: \"1px solid #D3D3D3\" }}></div>\r\n              {loginState === \"false\" ? (\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => setOpenLDAPLoginDialog(true)}\r\n                >\r\n                  LOG IN\r\n                </Button>\r\n              ) : (\r\n                <>\r\n                  <div\r\n                    style={{\r\n                      display: \"table-cell\",\r\n                      height: \"100%\",\r\n                      padding: \"10px\",\r\n                    }}\r\n                  >\r\n                    Hi, {firstName}!\r\n                  </div>\r\n                  <div style={{ borderRight: \"1px solid #D3D3D3\" }}></div>\r\n                  <Button color=\"secondary\" onClick={() => handleLogOut()}>\r\n                    LOG OUT\r\n                  </Button>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style={{ fontSize: \"20px\", padding: \"10px 10px 0px 10px\" }}>\r\n          Please select a workflow:\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            textAlign: \"left\",\r\n            padding: \"10px 10px 0px 10px\",\r\n          }}\r\n        >\r\n          {jobRequestConfList.length !== 0 && buttonColorStates.length !== 0\r\n            ? jobRequestConfList.map((content, index) => {\r\n                return (\r\n                  <Button\r\n                    onClick={() => handleJobRequestButton(content, index)}\r\n                    key={index}\r\n                    style={{\r\n                      fontSize: \"auto\",\r\n                      height: \"50px\",\r\n                      width: \"auto\",\r\n                      marginRight: \"5px\",\r\n                    }}\r\n                    color={buttonColorStates[index][\"color\"]}\r\n                    variant={buttonColorStates[index][\"variant\"]}\r\n                  >\r\n                    {content[\"title\"]}\r\n                  </Button>\r\n                );\r\n              })\r\n            : \"No job-request config found.\"}\r\n        </div>\r\n        {renderAvailableSchemas ? (\r\n          <>\r\n            <div style={{ fontSize: \"20px\", padding: \"10px 10px 0px 10px\" }}>\r\n              Please select a device:\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                textAlign: \"left\",\r\n                padding: \"10px 10px 0px 10px\",\r\n              }}\r\n            >\r\n              {availableExpSchemas.length !== 0\r\n                ? availableExpSchemas.map((content, index) => {\r\n                    return (\r\n                      <Button\r\n                        onClick={() => handleSelectSchema(content, index)}\r\n                        key={index}\r\n                        style={{\r\n                          fontSize: \"12px\",\r\n                          height: \"30px\",\r\n                          width: \"auto\",\r\n                          marginRight: \"5px\",\r\n                        }}\r\n                        color={schemaSelectionButtonColors[index][\"color\"]}\r\n                        variant={schemaSelectionButtonColors[index][\"variant\"]}\r\n                      >\r\n                        {content[\"schemaTitle\"]}\r\n                      </Button>\r\n                    );\r\n                  })\r\n                : \"No job-request config found.\"}\r\n            </div>\r\n          </>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        {renderReady === true ? (\r\n          <>\r\n            <FormRenderer\r\n              revertAllChanges={revertAllChanges}\r\n              schema={convertedSchema}\r\n              setSchemaSpecification={setSchemaSpecification}\r\n              originalSchema={schema}\r\n              edit={false}\r\n              setEditMode={setEditMode}\r\n            />\r\n          </>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        {renderReady === true ? (\r\n          <div\r\n            style={{\r\n              padding: \"10px 10px\",\r\n              width: \"100%\",\r\n              display: \"inline-block\",\r\n            }}\r\n          >\r\n            <Button\r\n              onClick={() => handleOnClickProceedButton()}\r\n              style={{ float: \"right\" }}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Proceed\r\n            </Button>\r\n            <Button\r\n              style={{ float: \"right\", marginRight: \"5px\" }}\r\n              id=\"demo-positioned-button\"\r\n              aria-controls={open ? \"demo-positioned-menu\" : undefined}\r\n              aria-haspopup=\"true\"\r\n              aria-expanded={open ? \"true\" : undefined}\r\n              onClick={handleClick}\r\n            >\r\n              <DownloadIcon /> Download Schema/Data\r\n            </Button>\r\n            <Menu\r\n              id=\"demo-positioned-menu\"\r\n              aria-labelledby=\"demo-positioned-button\"\r\n              anchorEl={anchorEl}\r\n              open={open}\r\n              onClose={handleClose}\r\n              anchorOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"left\",\r\n              }}\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"left\",\r\n              }}\r\n            >\r\n              <MenuItem onClick={handleDownloadJsonSchema}>\r\n                Download JSON Schema\r\n              </MenuItem>\r\n              <MenuItem onClick={handleDownloadFormData}>\r\n                Download JSON Data\r\n              </MenuItem>\r\n              <MenuItem onClick={handleDownloadDescriptionList}>\r\n                Download Description List\r\n              </MenuItem>\r\n            </Menu>\r\n          </div>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\", color: \"grey\" }}>\r\n          {AdamantVersion[\"adamant_version\"]}\r\n        </div>\r\n      </FormContext.Provider>\r\n      <CreateELabFTWExperimentDialog\r\n        setTags={setTags}\r\n        tags={tags}\r\n        setRetrievedTags={setRetrievedTags}\r\n        retrievedTags={retrievedTags}\r\n        setExperimentTitle={setExperimentTitle}\r\n        createExperimentELabFTW={createExperimentELabFTW}\r\n        setToken={setToken}\r\n        token={token}\r\n        setELabURL={setELabURL}\r\n        eLabURL={eLabURL}\r\n        setOpenCreateElabFTWExperimentDialog={\r\n          setOpenCreateElabFTWExperimentDialog\r\n        }\r\n        openCreateElabFTWExperimentDialog={openCreateElabFTWExperimentDialog}\r\n        getTagsELabFTW={getTagsELabFTW}\r\n      />\r\n      <DatasetSubmissionDialog\r\n        setOpenDatasetSubmissionDialog={setOpenDatasetSubmissionDialog}\r\n        openDatasetSubmissionDialog={openDatasetSubmissionDialog}\r\n        submitDataset={submitDataset}\r\n        handleCreateBundle={handleCreateBundle}\r\n      />\r\n      {openFormReviewDialog ? (\r\n        <FormReviewBeforeSubmit\r\n          onlineMode={onlineMode}\r\n          openFormReviewDialog={openFormReviewDialog}\r\n          setOpenFormReviewDialog={setOpenFormReviewDialog}\r\n          descriptionList={descriptionList}\r\n          setOpenFunctions={{\r\n            setOpenCreateElabFTWExperimentDialog,\r\n            setOpenJobRequestDialog,\r\n            setOpenDatasetSubmissionDialog,\r\n          }}\r\n          submitFunctions={{ submitJobRequest }}\r\n          submitText={submitText}\r\n          endPoint={window.location.href}\r\n          loadedFiles={loadedFiles}\r\n        />\r\n      ) : null}\r\n      <LDAPLoginDialog\r\n        openLDAPLoginDialog={openLDAPLoginDialog}\r\n        setOpenLDAPLoginDialog={setOpenLDAPLoginDialog}\r\n        setIntranetUsername={setIntranetUsername}\r\n        setUserPassword={setUserPassword}\r\n        token={token}\r\n        setToken={setToken}\r\n        email={email}\r\n        setEmail={setEmail}\r\n        handleLogin={handleLogin}\r\n      />\r\n      <FilesDialog\r\n        openFilesDialog={openFilesDialog}\r\n        setOpenFilesDialog={setFilesDialogContent}\r\n        content={filesDialogContent}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdamantProcess;\r\n","export default __webpack_public_path__ + \"static/media/adamant-new-logo.6062d472.ico\";","import Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from '@mui/material/Typography';\r\nimport CalendarToday from \"@material-ui/icons/CalendarToday\";\r\nimport AttachmentIcon from \"@material-ui/icons/Attachment\";\r\nimport { Divider } from '@material-ui/core';\r\nimport AdamantIcon from '../assets/adamant-new-logo.ico'\r\nimport { Tooltip } from \"@material-ui/core\";\r\n\r\nconst RenderExperimentCard = ({ experiments, readExperimentELabFTW }) => {\r\n    console.log(experiments)\r\n\r\n    let colorList = {\r\n        \"Success\": \"#07BC0C\",\r\n        \"Running\": \"turquoise\",\r\n        \"Fail\": \"red\",\r\n        \"Need to be redone\": \"gray\"\r\n    }\r\n\r\n    const handleEditExperiment = (experimentID) => {\r\n        readExperimentELabFTW(experimentID)\r\n    }\r\n\r\n    if (experiments.length === 0) {\r\n        return null\r\n    } else {\r\n        return (\r\n            <>\r\n            <div style={{paddingLeft:\"10px\"}}>\r\n                    <h3>{experiments.length} experiments retrieved: </h3>\r\n            </div>\r\n            <div style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\", width: \"100%\", padding:\"10px\" }}>\r\n            {Object.keys(experiments).map((index) => {\r\n                return (<>\r\n                    <Card style={{ marginBottom: \"5px\", marginRight: \"2px\", marginLeft: \"2px\", width: \"32.8%\", height:\"100%\", overflowY:\"auto\"}}>\r\n                        <div style={{display:\"flex\"}}>\r\n                            <div style={{ padding: \"4px\", backgroundColor: `#${experiments[index][\"status_color\"]}`, height: \"auto\", overflowY: \"auto\" }}></div>\r\n                            <div style={{width:\"100%\", height:\"100%\"}}>\r\n                                <CardContent>\r\n                                    <Typography gutterBottom variant=\"auto\" component=\"div\">\r\n                                        <strong>{experiments[index][\"title\"]}</strong>\r\n                                        {experiments[index]['tags'] !== null && experiments[index]['tags'].includes('Adamant') ? \r\n                                        <Tooltip placement=\"top\" title=\"Experiment created with Adamant\">\r\n                                        <img\r\n                                            style={{\r\n                                                marginTop: \"-20px\",\r\n                                                marginBottom: \"-5px\",\r\n                                                height: \"20px\",\r\n                                                borderRadius: \"5px\",\r\n                                            }}\r\n                                            alt=\"header\"\r\n                                            src={AdamantIcon}\r\n                                        />\r\n                                            </Tooltip> : null}\r\n                                    </Typography>\r\n                                <div style={{paddingBottom:\"5px\"}}><Divider /> </div>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\" style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\"}}>\r\n                                    <div><font color={\"#\"+experiments[index][\"status_color\"]}><strong>{experiments[index][\"status_title\"]}</strong></font></div>\r\n                                    <div style={{paddingLeft:\"3px\", paddingRight:\"3px\"}}></div>\r\n                                    <div style={{display:\"flex\"}}><CalendarToday style={{height:\"20px\"}}/> {experiments[index][\"date\"]}</div>\r\n                                    <div style={{ paddingLeft: \"3px\", paddingRight: \"3px\" }}></div>\r\n                                    {experiments[index][\"has_attachment\"] === 1 ? <AttachmentIcon style={{height:\"20px\"}}/> : null}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                    <div style={{display:\"flex\", justifyContent:\"right\", width:\"100%\"}}>\r\n                                    <Button size=\"small\" color='primary' onClick={() => handleEditExperiment(experiments[index][\"id\"])}>Edit</Button>\r\n                                    {/*<Button size=\"small\" color='secondary'>Remove</Button>*/}\r\n                                    </div>\r\n                                </CardActions>\r\n                            </div>\r\n                        </div>\r\n                        </Card>\r\n\r\n                </>)\r\n            })}\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default RenderExperimentCard;","import React, { useCallback, useState } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { Route } from \"react-router-dom\";\r\n//import QPTDATLogo from \"../assets/header-image.png\";\r\nimport FormRenderer from \"../components/FormRenderer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { IconButton, TextField } from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { FormContext } from \"../FormContext\";\r\nimport array2object from \"../components/utils/array2object\";\r\nimport object2array from \"../components/utils/object2array\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport DownloadIcon from \"@material-ui/icons/GetApp\";\r\nimport set from \"set-value\";\r\nimport getValue from \"../components/utils/getValue\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport deleteKeySchema from \"../components/utils/deleteKeySchema\";\r\nimport validateAgainstSchema from \"../components/utils/validateAgainstSchema\";\r\nimport CreateELabFTWExperimentDialog from \"../components/CreateELabFTWExperimentDialog\";\r\nimport { useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport prepareDataForDescList from \"../components/utils/prepareDataForDescList\";\r\nimport array2objectAnyOf from \"../components/utils/array2objectAnyOf\";\r\nimport SchemaOne from \"../schemas/all-types.json\";\r\nimport SchemaTwo from \"../schemas/demo-schema.json\";\r\nimport SchemaThree from \"../schemas/example-experiment-schema.json\";\r\nimport SchemaFour from \"../schemas/example-request-schema.json\";\r\nimport SchemaFive from \"../schemas/plasma-mds.json\";\r\nimport fillValueWithEmptyString from \"../components/utils/fillValueWithEmptyString\";\r\nimport convData2FormData from \"../components/utils/convData2FormData\";\r\nimport FormReviewBeforeSubmit from \"../components/FormReviewBeforeSubmit\";\r\nimport changeKeywords from \"../components/utils/changeKeywords\";\r\n//import QPTDATLogo from \"../assets/adamant-header-5.svg\";\r\nimport QPTDATLogo from \"../assets/adamant-header-5.svg\";\r\nimport createDescriptionListFromJSON from \"../components/utils/createDescriptionListFromJSON\";\r\nimport HelpIcon from \"@material-ui/icons/HelpOutlineRounded\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport validateSchemaAgainstSpecification from \"../components/utils/validateSchemaAgainstSpecification\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport getPaths from \"../components/utils/getPaths\";\r\nimport checkIDexistence from \"../components/utils/checkIDexistence\";\r\n\r\nimport ChooseUseCasesDialog from \"../components/ChooseUseCasesDialog\";\r\nimport LDAPLoginDialog from \"../components/LDAPLoginDialog\";\r\nimport RenderExperimentCard from \"../components/RenderExperimentCard\";\r\n\r\nimport EditExperiment from \"../components/EditExperiment\";\r\nimport fillForm from \"../components/utils/fillForm\";\r\n\r\nimport AdamantVersion from \"../assets/adamant_version.json\"\r\nimport GeneralConfig from \"../general-conf.json\"\r\n\r\n// function that receive the schema and convert it to Form/json data blueprint\r\n// also to already put the default value to this blueprint\r\nconst createFormDataBlueprint = (schemaProperties) => {\r\n  let newObject = {};\r\n\r\n  Object.keys(schemaProperties).forEach((item) => {\r\n    if (schemaProperties[item][\"type\"] !== \"object\") {\r\n      if (schemaProperties[item][\"default\"] !== undefined) {\r\n        newObject[item] = schemaProperties[item][\"default\"];\r\n      } else if (\r\n        (schemaProperties[item][\"default\"] === undefined) &\r\n        (schemaProperties[item][\"enum\"] !== undefined)\r\n      ) {\r\n        newObject[item] = schemaProperties[item][\"enum\"][0];\r\n      } else if (\r\n        (schemaProperties[item][\"type\"] === \"boolean\") &\r\n        (schemaProperties[item][\"default\"] === undefined)\r\n      ) {\r\n        newObject[item] = false;\r\n      }\r\n    } else {\r\n      if (schemaProperties[item][\"properties\"] !== undefined) {\r\n        newObject[item] = createFormDataBlueprint(\r\n          schemaProperties[item][\"properties\"]\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return newObject;\r\n};\r\n\r\n// function to remove empty artributes\r\nconst removeEmpty = (obj) => {\r\n  Object.keys(obj).forEach((key) => {\r\n    if (obj[key] && typeof obj[key] === \"object\") {\r\n      const childObject = removeEmpty(obj[key]);\r\n      if (childObject === undefined) {\r\n        delete obj[key];\r\n      }\r\n    } else if (obj[key] === \"\" || obj[key] === null || obj[key] === undefined) {\r\n      delete obj[key];\r\n    }\r\n  });\r\n  return Object.keys(obj).length > 0 || obj instanceof Array ? obj : undefined;\r\n};\r\n\r\nconst AdamantBrowseExp = () => {\r\n  // state management\r\n  const [disable, setDisable] = useState(true);\r\n  const [schemaMessage, setSchemaMessage] = useState(null);\r\n  const [schemaValidity, setSchemaValidity] = useState(false);\r\n  const [schema, setSchema] = useState(null);\r\n  const [schemaIntermediate, setSchemaIntermediate] = useState(null);\r\n  const [renderReady, setRenderReady] = useState(false);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [schemaList, setSchemaList] = useState([]);\r\n  const [schemaNameList, setSchemaNameList] = useState([]);\r\n  const [selectedSchemaName, setSelectedSchemaName] = useState(\"\");\r\n  const [originalSchema, setOriginalSchema] = useState();\r\n  const [inputMode, setInputMode] = useState(false);\r\n  const [convertedSchema, setConvertedSchema] = useState(null);\r\n  const [createScratchMode, setCreateScratchMode] = useState(false);\r\n  const [jsonData, setJsonData] = useState({});\r\n  const [descriptionList, setDescriptionList] = useState(\"\");\r\n  const [schemaWithValues, setSchemaWithValues] = useState({});\r\n  const [schemaSpecification, setSchemaSpecification] = useState(\"\");\r\n  const [token, setToken] = useState(\"\");\r\n  const [eLabURL, setELabURL] = useState(\r\n    GeneralConfig[\"local-elab-url\"]\r\n  );\r\n  const [experimentTitle, setExperimentTitle] = useState(\"\");\r\n  const [onlineMode, setOnlineMode] = useState(false);\r\n  const [tags, setTags] = useState([]);\r\n  const [retrievedTags, setRetrievedTags] = useState([]);\r\n  const [SEMSelectedDevice, setSEMSelectedDevice] = useState(\"\");\r\n  const [HeaderImage, setHeaderImage] = useState(QPTDATLogo);\r\n  const [openFormReviewDialog, setOpenFormReviewDialog] = useState(false);\r\n  const [openJobRequestDialog, setOpenJobRequestDialog] = useState(false);\r\n  const [jobRequestSchemas, setJobRequestSchemas] = useState([]);\r\n  const [submitTextList, setSubmitTextList] = useState([]);\r\n  const [submitText, setSubmitText] = useState(\"Submit Job Request\");\r\n  const [openUseCasesDialog, setOpenUseCasesDialog] = useState(true);\r\n  const [openLDAPLoginDialog, setOpenLDAPLoginDialog] = useState(false);\r\n  const [intranetUsername, setIntranetUsername] = useState();\r\n  const [userPassword, setUserPassword] = useState();\r\n  const [loginState, setLoginState] = useState(\"false\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  // for dropdown buttons\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [\r\n    openCreateElabFTWExperimentDialog,\r\n    setOpenCreateElabFTWExperimentDialog,\r\n  ] = useState(false);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  }; //\r\n\r\n  // loaded files object\r\n  const [loadedFiles, setLoadedFiles] = useState([]);\r\n\r\n  // FilesDialog\r\n  const [openFilesDialog, setOpenFilesDialog] = useState(false);\r\n  const [filesDialogContent, setFilesDialogContent] = useState([\"\", \"\", \"\"]);\r\n\r\n  // experiments from eLabFTW\r\n  const [experiments, setExperiments] = useState([]);\r\n  const [experimentData, setExperimentData] = useState({});\r\n\r\n  const [retrievedJSONSchema, setRetrievedJSONSchema] = useState();\r\n  const [retrievedJSONData, setRetrievedJSONData] = useState();\r\n\r\n  const [toggleJSONForm, setToggleJSONForm] = useState(true);\r\n\r\n  //-------------------------- useEffects to save states between reloads ----------------------------\r\n  useEffect(() => {\r\n    setFirstName(\r\n      window.sessionStorage.getItem(\"firstName\") === null\r\n        ? \"\"\r\n        : window.sessionStorage.getItem(\"firstName\")\r\n    );\r\n    setToken(\r\n      window.sessionStorage.getItem(\"token\") === null\r\n        ? \"\"\r\n        : window.sessionStorage.getItem(\"token\")\r\n    );\r\n    setLoginState(\r\n      window.sessionStorage.getItem(\"loginState\") === null\r\n        ? \"false\"\r\n        : window.sessionStorage.getItem(\"loginState\")\r\n    );\r\n    setEmail(\r\n      window.sessionStorage.getItem(\"email\") === null\r\n        ? \"\"\r\n        : window.sessionStorage.getItem(\"email\")\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.sessionStorage.setItem(\"firstName\", firstName);\r\n    window.sessionStorage.setItem(\"token\", token);\r\n    window.sessionStorage.setItem(\"loginState\", loginState);\r\n    window.sessionStorage.setItem(\"email\", email);\r\n  }, [firstName, token, loginState, email]);\r\n  //-------------------------------------------------------------------------------------------------\r\n\r\n  let implementedFieldTypes = [\r\n    \"string\",\r\n    \"number\",\r\n    \"integer\",\r\n    \"array\",\r\n    \"boolean\",\r\n    \"object\",\r\n  ];\r\n\r\n  // check if the front-end is connected to backend at all\r\n  useEffect(() => {\r\n    let $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"GET\",\r\n      url: \"/api/check_mode\",\r\n      success: function (status) {\r\n        console.log(\"Connection to server is established. Online mode\");\r\n        setJobRequestSchemas(status[\"jobRequestSchemaList\"]);\r\n        console.log(status[\"jobRequestSchemaList\"]);\r\n        setSubmitTextList(status[\"submitButtonText\"]);\r\n        setOnlineMode(true);\r\n        toast.success(\r\n          <>\r\n            <div>\r\n              <strong>Connection to server is established.</strong>\r\n            </div>\r\n          </>,\r\n          {\r\n            toastId: \"connectionSuccess\",\r\n          }\r\n        );\r\n      },\r\n      error: function () {\r\n        console.log(\r\n          \"Unable to establish connection to server. Offline mode. Submit feature is disabled.\"\r\n        );\r\n        setOnlineMode(false);\r\n\r\n        // use available schema as a place holder\r\n        setSchemaNameList([\r\n          \"\",\r\n          \"all-types.json\",\r\n          \"demo-schema.json\",\r\n          \"example-experiment-schema.json\",\r\n          \"example-request-schema.json\",\r\n          \"plasma-mds.json\",\r\n        ]);\r\n        setSchemaList([\r\n          null,\r\n          SchemaOne,\r\n          SchemaTwo,\r\n          SchemaThree,\r\n          SchemaFour,\r\n          SchemaFive,\r\n        ]);\r\n\r\n        toast.warning(\r\n          <>\r\n            <div>\r\n              <strong>Unable to establish connection to server.</strong>\r\n            </div>\r\n            <div>Submit feature is disabled.</div>\r\n          </>,\r\n          {\r\n            toastId: \"connectionWarning\",\r\n          }\r\n        );\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // get schemas from server when onlinemode is true\r\n  useEffect(() => {\r\n    // if online mode then get available schemas from server\r\n    if (onlineMode === true) {\r\n      let $ = require(\"jquery\");\r\n      $.ajax({\r\n        type: \"GET\",\r\n        url: \"/api/get_schemas\",\r\n        success: function (status) {\r\n          console.log(\"SUCCESS\");\r\n\r\n          // do this to preserver the order\r\n          let sch = [];\r\n          status[\"schema\"].forEach((element) => {\r\n            sch.push(JSON.parse(element));\r\n          });\r\n\r\n          setSchemaList(sch);\r\n          setSchemaNameList(status[\"schemaName\"]);\r\n        },\r\n        error: function () {\r\n          console.log(\"ERROR\");\r\n          toast.warning(\r\n            \"Error while fetching the schemas. Using basic list of schemas.\",\r\n            {\r\n              toastId: \"fetchingSchemasError\",\r\n            }\r\n          );\r\n          // if unable to fetch the schemas then use the basic list of schemas\r\n          setSchemaNameList([\r\n            \"\",\r\n            \"all-types.json\",\r\n            \"demo-schema.json\",\r\n            \"example-experiment-schema.json\",\r\n            \"example-request-schema.json\",\r\n            \"plasma-mds.json\",\r\n          ]);\r\n          setSchemaList([\r\n            null,\r\n            SchemaOne,\r\n            SchemaTwo,\r\n            SchemaThree,\r\n            SchemaFour,\r\n            SchemaFive,\r\n          ]);\r\n        },\r\n      });\r\n    }\r\n  }, [onlineMode]);\r\n\r\n  // handle login\r\n  const handleLogin = () => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/login\",\r\n      dataType: \"json\",\r\n      data: {\r\n        email: email,\r\n        eLabToken: token,\r\n        elabUrl: GeneralConfig[\"local-elab-url\"]\r\n      },\r\n      success: function (status) {\r\n        if (status[\"status\"] === 400) {\r\n          console.log(\"Log in failed!\");\r\n          console.log(status);\r\n          toast.error(`Failed to log you in!\\nUser e-mail not found.`, {\r\n            toastId: \"loginFailed\",\r\n          });\r\n        } else {\r\n          console.log(\"Login sucessful!\");\r\n          //let arr = [];\r\n          //for (let i = 0; i < status.length; i++) {\r\n          //  arr.push(status[i][\"tag\"]);\r\n          //}\r\n          setRetrievedTags(status);\r\n          toast.success(`Successfully logged in!`, {\r\n            toastId: \"loginSuccess\",\r\n          });\r\n          setOpenLDAPLoginDialog(false);\r\n          setLoginState(\"true\");\r\n          setFirstName(status[\"firstname\"]);\r\n        }\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Log in failed!\");\r\n        console.log(status);\r\n        toast.error(`Failed to log you in!\\nIs the server working properly? Or maybe wrong token?`, {\r\n          toastId: \"loginFailed\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleLogOut = () => {\r\n    setLoginState(\"false\");\r\n    setToken(\"\");\r\n    setFirstName(\"\");\r\n    setEmail(\"\");\r\n    setExperiments([]);\r\n    setExperimentData({});\r\n\r\n    window.sessionStorage.setItem(\"firstName\", \"\");\r\n    window.sessionStorage.setItem(\"token\", \"\");\r\n    window.sessionStorage.setItem(\"loginState\", \"false\");\r\n    window.sessionStorage.setItem(\"email\", \"\");\r\n  };\r\n\r\n  const handleBack2Browse = () => {\r\n    setExperimentData({});\r\n    setSchema(undefined);\r\n    setRetrievedJSONData(undefined);\r\n    setRetrievedJSONSchema(undefined);\r\n    setToggleJSONForm(true)\r\n  };\r\n\r\n  // handle select schema on change\r\n  const handleSelectSchemaOnChange = (schemaName) => {\r\n    if (schemaName === null) {\r\n      clearSchemaOnClick();\r\n\r\n      return;\r\n    }\r\n\r\n    //console.log(event)\r\n    // first reset states\r\n    setRenderReady(false);\r\n    setDisable(true);\r\n    setCreateScratchMode(false);\r\n    setJsonData({});\r\n    //\r\n\r\n    console.log(\"selected schema:\", schemaName);\r\n    setSelectedSchemaName(schemaName);\r\n\r\n    let selectedSchema = schemaList[schemaNameList.indexOf(schemaName)];\r\n\r\n    // reset everything when selectedSchema is empty\r\n    if (selectedSchema === null) {\r\n      setDisable(true);\r\n      setRenderReady(false);\r\n      setSchema(null);\r\n      setSchemaValidity(false);\r\n      setSchemaMessage();\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      return;\r\n    }\r\n\r\n    // convert selectedSchema schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n    try {\r\n      convertedSchema[\"properties\"] = object2array(\r\n        selectedSchema[\"properties\"]\r\n      );\r\n\r\n      // update states\r\n      setSchemaValidity(true);\r\n      setSchemaMessage(`${schemaName} is a valid schema`);\r\n      setSchema(selectedSchema);\r\n      let oriSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n      setOriginalSchema(oriSchema);\r\n      setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n      setConvertedSchema(convertedSchema);\r\n\r\n      if (jobRequestSchemas.includes(convertedSchema[\"title\"])) {\r\n        try {\r\n          //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n          //setHeaderImage(SEMlogo[\"default\"]);\r\n          setHeaderImage(QPTDATLogo);\r\n          setEditMode(true);\r\n          setSubmitText(\r\n            submitTextList[jobRequestSchemas.indexOf(convertedSchema[\"title\"])]\r\n          );\r\n        } catch (error) {\r\n          console.log(error);\r\n          setHeaderImage(QPTDATLogo);\r\n          setEditMode(false);\r\n        }\r\n      } else {\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(false);\r\n      }\r\n\r\n      // create form data\r\n      let formData = createFormDataBlueprint(selectedSchema[\"properties\"]);\r\n      setJsonData(formData);\r\n    } catch (error) {\r\n      console.log(error);\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${schemaName} is invalid`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // function to check if the file accepted is of json format and json schema valid\r\n  const checkSchemaValidity = (schemaFile, initialData) => {\r\n    console.log(\"schema:\", schemaFile);\r\n    // place holder\r\n    let convertedSchema = JSON.parse(JSON.stringify(schemaFile));\r\n    try {\r\n      convertedSchema[\"properties\"] = object2array(schemaFile[\"properties\"]);\r\n\r\n      // update states\r\n      setSchemaValidity(true);\r\n      setSchema(schemaFile);\r\n      let oriSchema = JSON.parse(JSON.stringify(schemaFile));\r\n      setOriginalSchema(oriSchema);\r\n      setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n      fillForm(convertedSchema[\"properties\"], initialData);\r\n      setConvertedSchema(convertedSchema);\r\n\r\n      if (jobRequestSchemas.includes(schemaFile[\"title\"])) {\r\n        try {\r\n          //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n          //setHeaderImage(SEMlogo[\"default\"]);\r\n          setHeaderImage(QPTDATLogo);\r\n          setEditMode(true);\r\n          setSubmitText(\r\n            submitTextList[\r\n              jobRequestSchemas.findIndex(convertedSchema[\"title\"])\r\n            ]\r\n          );\r\n        } catch (error) {\r\n          console.log(error);\r\n          setHeaderImage(QPTDATLogo);\r\n          setEditMode(false);\r\n        }\r\n      } else {\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(false);\r\n      }\r\n\r\n      // create form data\r\n      let formData = createFormDataBlueprint(schemaFile[\"properties\"]);\r\n      setJsonData(formData);\r\n    } catch (error) {\r\n      console.log(error);\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // clear schema on-click handle\r\n  const clearSchemaOnClick = () => {\r\n    setHeaderImage(QPTDATLogo);\r\n    setDisable(true);\r\n    setRenderReady(false);\r\n    setSchema(null);\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setCreateScratchMode(false);\r\n    setSelectedSchemaName(\"\");\r\n  };\r\n\r\n  // create new schema from scratch\r\n  const createSchemaFromScratch = () => {\r\n    // update browse schema render states\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setJsonData({});\r\n    setSelectedSchemaName(\"\");\r\n\r\n    // always use newer schema specification\r\n    let schemaBlueprint = {\r\n      $schema: \"http://json-schema.org/draft-07/schema#\",\r\n      type: \"object\",\r\n      properties: {},\r\n    };\r\n    const obj = JSON.parse(JSON.stringify(schemaBlueprint));\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n    setJsonData(formData);\r\n\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n    convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n    // update states\r\n    setCreateScratchMode(true);\r\n    setSchema(obj);\r\n    let oriSchema = JSON.parse(JSON.stringify(obj));\r\n    setOriginalSchema(oriSchema);\r\n    setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n    setConvertedSchema(convertedSchema);\r\n\r\n    if (jobRequestSchemas.includes(obj[\"title\"])) {\r\n      try {\r\n        //let SEMlogo = require(\"../assets/sem-header-picture.png\");\r\n        //setHeaderImage(SEMlogo[\"default\"]);\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(true);\r\n        setSubmitText(\r\n          submitTextList[jobRequestSchemas.findIndex(convertedSchema[\"title\"])]\r\n        );\r\n      } catch (error) {\r\n        console.log(error);\r\n        setHeaderImage(QPTDATLogo);\r\n        setEditMode(false);\r\n      }\r\n    } else {\r\n      setHeaderImage(QPTDATLogo);\r\n      setEditMode(false);\r\n    }\r\n\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // compile on-click handle\r\n  const compileOnClick = () => {\r\n    let value = schema;\r\n\r\n    const [valid, message] = validateSchemaAgainstSpecification(\r\n      JSON.parse(JSON.stringify(schema)),\r\n      schemaSpecification\r\n    );\r\n    if (valid) {\r\n      setInputMode(true);\r\n      setSchema(value);\r\n      setEditMode(true);\r\n      setDisable(true);\r\n    } else {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Your schema is not valid.</strong>\r\n          </div>\r\n          {message}\r\n        </>,\r\n        {\r\n          toastId: \"schemaError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n  };\r\n\r\n  // return to edit mode handle\r\n  const toEditMode = () => {\r\n    let value = schema;\r\n    if (jobRequestSchemas.includes(schema[\"title\"])) {\r\n      setInputMode(false);\r\n      setSchema(value);\r\n      setEditMode(true);\r\n      setDisable(false);\r\n    } else {\r\n      setInputMode(false);\r\n      setSchema(value);\r\n      setEditMode(false);\r\n      setDisable(false);\r\n    }\r\n  };\r\n\r\n  // update parent (re-render everything)\r\n  const updateParent = (value) => {\r\n    let newValue = { ...value };\r\n\r\n    if (newValue[\"$schema\"] === \"http://json-schema.org/draft-04/schema#\") {\r\n      changeKeywords(newValue, \"$id\", \"id\");\r\n    } else {\r\n      changeKeywords(newValue, \"id\", \"$id\");\r\n    }\r\n\r\n    // update original schema\r\n    let updatedSchema = JSON.parse(JSON.stringify(newValue));\r\n    let tempSchema = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema[\"properties\"] = array2object(tempSchema[\"properties\"]);\r\n\r\n    setConvertedSchema(newValue);\r\n    setSchema(updatedSchema);\r\n\r\n    // update intermediate schema\r\n    let updatedSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    let tempSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema2[\"properties\"] = array2objectAnyOf(tempSchema2[\"properties\"]);\r\n    setSchemaIntermediate(updatedSchema2);\r\n  };\r\n\r\n  // update error stuff visually after validation (if some field(s) is are invalid)\r\n  const setErrorStuffUponValidation = (errorMessages) => {\r\n    let value = { ...convertedSchema };\r\n    errorMessages.forEach((message) => {\r\n      let path = message.path;\r\n      path = path.split(\".\");\r\n      let newPath = [];\r\n      let tempValue = JSON.parse(JSON.stringify(value));\r\n      for (let i = 0; i < path.length; ) {\r\n        if (path[i] === \"items\" && tempValue[path[i]][\"type\"] === \"object\") {\r\n          set(value, newPath.join(\".\") + \".adamant_field_error\", true);\r\n          set(\r\n            value,\r\n            newPath.join(\".\") + \".adamant_error_description\",\r\n            \"One or more fields in this array have invalid inputs. Please fix them.\"\r\n          );\r\n          return;\r\n        }\r\n        if (\r\n          path[i] === \"properties\" &&\r\n          Array.isArray(tempValue[\"properties\"])\r\n        ) {\r\n          newPath.push(path[i]);\r\n          i += 1;\r\n          let index = tempValue[\"properties\"].findIndex(\r\n            (val) => val.fieldKey === path[i]\r\n          );\r\n          newPath.push(index);\r\n          i += 1;\r\n          tempValue = tempValue[\"properties\"][index];\r\n        } else {\r\n          newPath.push(path[i]);\r\n          tempValue = tempValue[path[i]];\r\n          i += 1;\r\n        }\r\n      }\r\n      //console.log(newPath.join(\".\"));\r\n      set(value, newPath.join(\".\") + \".adamant_field_error\", true);\r\n      set(\r\n        value,\r\n        newPath.join(\".\") + \".adamant_error_description\",\r\n        message.message\r\n      );\r\n    });\r\n\r\n    updateParent(value);\r\n  };\r\n\r\n  // revert all changes to the schema\r\n  const revertAllChanges = () => {\r\n    let value = { ...originalSchema };\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(value));\r\n    convertedSchema[\"properties\"] = object2array(value[\"properties\"]);\r\n    console.log(convertedSchema);\r\n    setConvertedSchema(convertedSchema);\r\n    setSchema(value);\r\n    setSchemaWithValues(value);\r\n    setDescriptionList(\"\");\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(value[\"properties\"]);\r\n    setJsonData(formData);\r\n  };\r\n\r\n  /*/ handle data input on blur\r\n  const handleDataInput = (event, path, type) => {\r\n    let jData = { ...jsonData };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(jData, path, value);\r\n    //console.log(\"Current form data    (jData):\", jData);\r\n    setJsonData(jData);\r\n  };\r\n  /*/\r\n\r\n  // handle data input on blur to convertedSchema\r\n  const handleConvertedDataInput = (event, path, type) => {\r\n    let convSchemaData = { ...convertedSchema };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(convSchemaData, path, value);\r\n    setConvertedSchema(convSchemaData);\r\n    console.log(convSchemaData);\r\n\r\n    let data = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    setJsonData(data);\r\n\r\n    // convert to form data\r\n    console.log(\"Current form data (convData):\", data);\r\n\r\n    // unconverted\r\n    //console.log(\"Current form data (unconverted convData):\", convSchemaData);\r\n  };\r\n\r\n  // delete data in jsonData when the field in schema is deleted\r\n  const handleDataDelete = (path) => {\r\n    console.log(\"path\", path);\r\n    console.log(jsonData);\r\n    let jData = { ...jsonData };\r\n    let value = deleteKeySchema(jData, path);\r\n    setJsonData(value);\r\n    console.log(\"Current form data:\", value);\r\n  };\r\n\r\n  // handle check if id already exists in the schema\r\n  const handleCheckIDexistence = (id) => {\r\n    let result = false;\r\n    result = checkIDexistence(schema, id, result);\r\n    return result;\r\n  };\r\n\r\n  // update form data id if a fieldkey changes, simply delete key value pair of the oldfieldid from jsonData\r\n  const updateFormDataId = (\r\n    oldFieldId,\r\n    newFieldId,\r\n    pathFormData,\r\n    defaultValue\r\n  ) => {\r\n    if (oldFieldId === newFieldId) {\r\n      return;\r\n    }\r\n    if (defaultValue === undefined) {\r\n      let jData = { ...jsonData };\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    } else {\r\n      let newPathFormData = pathFormData.split(\".\");\r\n      newPathFormData.pop();\r\n      newPathFormData.push(newFieldId);\r\n\r\n      let jData = { ...jsonData };\r\n      let value = getValue(jData, pathFormData);\r\n      set(jData, newPathFormData, value);\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    }\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadJsonSchema = () => {\r\n    let content = { ...schema };\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `jsonschema-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadFormData = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `formdata-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download description list\r\n  const handleDownloadDescriptionList = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = prepareDataForDescList(convProp); // skip keyword that has value of array with objects as its elements\r\n    //let cleaned = removeEmpty(prepareDataForDescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to download. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // create description list\r\n    let footnote = `<div> This template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>${AdamantVersion[\"adamant_version\"]}</a></span> </div>`;\r\n    let descList = ``;\r\n    descList += createDescriptionListFromJSON(\r\n      cleaned,\r\n      convSch,\r\n      convProp,\r\n      schema,\r\n      footnote,\r\n      true\r\n    ); // false means without styling\r\n\r\n    setDescriptionList(descList);\r\n\r\n    let sha256_hash = CryptoJS.SHA256(descList);\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([descList], {\r\n      type: \"text/html\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `desclist-${sha256_hash}.tpl`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download description list\r\n  const handlePrepareDescList = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = prepareDataForDescList(convProp); // skip keyword that has value of array with objects as its elements\r\n    // create description list\r\n    let footnote = `<div> This template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>${AdamantVersion[\"adamant_version\"]}</a></span> </div>`;\r\n    let descList = ``;\r\n    descList += createDescriptionListFromJSON(\r\n      cleaned,\r\n      convSch,\r\n      convProp,\r\n      schema,\r\n      footnote,\r\n      true\r\n    ); // false means without styling\r\n\r\n    setDescriptionList(descList);\r\n    setToggleJSONForm(false);\r\n  };\r\n\r\n  // get available tags from elabftw\r\n  const getTagsELabFTW = () => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/get_tags\",\r\n      dataType: \"json\",\r\n      data: {\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n      },\r\n      success: function (status) {\r\n        console.log(\"Tags retrieved successfully\");\r\n        //let arr = [];\r\n        //for (let i = 0; i < status.length; i++) {\r\n        //  arr.push(status[i][\"tag\"]);\r\n        //}\r\n        setRetrievedTags(status);\r\n        toast.success(`Successfully retrieved the tags!`, {\r\n          toastId: \"fetchingTagsSuccess\",\r\n        });\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Failed to retrieve tags\");\r\n        console.log(status);\r\n        toast.error(`Failed to get the tags!\\nMaybe wrong url or token?`, {\r\n          toastId: \"fetchingTagsError\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // get available tags from elabftw\r\n  const getExperimentsELabFTW = () => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/get_experiments\",\r\n      dataType: \"json\",\r\n      data: {\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n      },\r\n      success: function (status) {\r\n        console.log(\"Experiments retrieved successfully\");\r\n        //let arr = [];\r\n        //for (let i = 0; i < status.length; i++) {\r\n        //  arr.push(status[i][\"tag\"]);\r\n        //}\r\n        setExperiments(status);\r\n        /*\r\n        toast.success(`Successfully retrieved the experiments!`, {\r\n          toastId: \"fetchingExperimentsSuccess\",\r\n        });*/\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Failed to retrieve experiments\");\r\n        console.log(status);\r\n        toast.error(`Failed to get the experiments!\\n Not sure why...`, {\r\n          toastId: \"fetchingExperimentsError\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // get available tags from elabftw\r\n  const readExperimentELabFTW = (experimentID) => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/read_experiment\",\r\n      dataType: \"json\",\r\n      data: {\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n        experiment_id: experimentID,\r\n      },\r\n      success: function (status) {\r\n        console.log(\"Experiment read successfully\");\r\n        //let arr = [];\r\n        //for (let i = 0; i < status.length; i++) {\r\n        //  arr.push(status[i][\"tag\"]);\r\n        //}\r\n        if (status[\"status\"] === 200) {\r\n          setExperimentData(status);\r\n          console.log(status);\r\n          setRetrievedJSONData(status[\"json_data\"]);\r\n          setRetrievedJSONSchema(status[\"json_schema\"]);\r\n\r\n          checkSchemaValidity(status[\"json_schema\"], status[\"json_data\"]);\r\n          /*\r\n          toast.success(`Successfully read the experiment!`, {\r\n            toastId: \"readingExperimentSuccess\",\r\n          });*/\r\n        } else {\r\n          console.log(\"Failed to read the experiment\");\r\n          console.log(status);\r\n          toast.error(\r\n            `Failed to get the experiments!\\n No JSON files were found.`,\r\n            {\r\n              toastId: \"readingExperimentError\",\r\n            }\r\n          );\r\n        }\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Failed to read the experiment\");\r\n        console.log(status);\r\n        toast.error(`Failed to get the experiments!\\n Not sure why...`, {\r\n          toastId: \"readingExperimentError\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // get available tags from elabftw\r\n  const updateExperimentELabFTW = (experimentID) => {\r\n    // json schema is schema\r\n    console.log(\"uploading schema:\", schema);\r\n    // -------------------------------------------------------------------------------------------------------\r\n\r\n    // json data\r\n    let convSchemaData = { ...convertedSchema };\r\n    let json_data = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    // get rid of empty values in json_data\r\n    json_data = removeEmpty(json_data);\r\n    if (json_data === undefined) {\r\n      json_data = {};\r\n    }\r\n    console.log(\"uploading json_data\", json_data);\r\n    // -------------------------------------------------------------------------------------------------------\r\n\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = prepareDataForDescList(convProp); // skip keyword that has value of array with objects as its elements\r\n    //let cleaned = removeEmpty(prepareDataForDescList(convSch[\"properties\"]));\r\n    // create description list\r\n    let footnote = `<div> This template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>${AdamantVersion[\"adamant_version\"]}</a></span> </div>`;\r\n    let descList = ``;\r\n    descList += createDescriptionListFromJSON(\r\n      cleaned,\r\n      convSch,\r\n      convProp,\r\n      schema,\r\n      footnote,\r\n      true\r\n    ); // false means without styling\r\n    console.log(\"uploading description list:\", descList);\r\n    // -------------------------------------------------------------------------------------------------------\r\n\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/update_experiment\",\r\n      dataType: \"json\",\r\n      data: {\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n        experiment_id: experimentID,\r\n        desc_list: descList,\r\n        new_schema: JSON.stringify(schema),\r\n        new_data: JSON.stringify(json_data),\r\n      },\r\n      success: function (status) {\r\n        console.log(\"Experiment updated successfully\");\r\n        toast.success(`Updated.`, {\r\n          toastId: \"updateSuccess\",\r\n          autoClose: 1000,\r\n        });\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Failed to update the experiment.\");\r\n        toast.error(`Failed to update the experiment.`, {\r\n          toastId: \"updateFailed\",\r\n          autoClose: 1000,\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // create an experiment in elabftw based on the schema and data\r\n  const createExperimentELabFTW = () => {\r\n    // validate the data first using ajv\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    console.log(\"content\", content);\r\n    //console.log(\"loadedFiles\", loadedFiles)\r\n\r\n    /*\r\n    // get the paths where the uploaded files are from content\r\n    let fileEntries = []\r\n    for (let i=0; i<loadedFiles.length; i++) {\r\n      let file = loadedFiles[i]\r\n      let fileName = file[\"name\"]\r\n      let fileType = file[\"type\"]\r\n      let fileSize = file[\"size\"]\r\n      //console.log(file[\"name\"])\r\n      fileEntries.push(`fileupload:${fileType};${fileName};${fileSize}`)\r\n    }\r\n    //console.log(fileEntries)\r\n    let paths = []\r\n    for (let i=0; i<fileEntries.length; i++) {\r\n      let path = getPaths(content, fileEntries[i])\r\n      paths.push(path)\r\n    }\r\n    console.log(paths)\r\n\r\n    // read files from loadedFiles then insert it to the content\r\n    */\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(\r\n      content,\r\n      JSON.parse(JSON.stringify(contentSchema))\r\n    );\r\n    setErrorStuffUponValidation(messages);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      // clear states\r\n      //setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    }\r\n    // call create experiment api\r\n    console.log(\"tags:\", tags);\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/create_experiment\",\r\n      async: false,\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n        title: experimentTitle,\r\n        body: descriptionList,\r\n        tags: JSON.stringify(tags),\r\n      },\r\n      success: function (status) {\r\n        console.log(\"SUCCESS\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenCreateElabFTWExperimentDialog(false);\r\n        toast.success(\r\n          `Successfully created an experiment with id: ${status[\"experimentId\"]}!`,\r\n          {\r\n            toastId: \"createExperimentSuccess\",\r\n          }\r\n        );\r\n\r\n        // clear states\r\n        //setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenCreateElabFTWExperimentDialog(false);\r\n        toast.error(\r\n          `Failed to create an experiment!\\nMaybe wrong url or token?`,\r\n          {\r\n            toastId: \"createExperimentError\",\r\n          }\r\n        );\r\n        // clear states\r\n        //setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n    });\r\n  };\r\n\r\n  // submit sem job request\r\n  const submitJobRequest = () => {\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/submit_job_request\",\r\n      async: false,\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        body: descriptionList,\r\n      },\r\n      success: function (status) {\r\n        if (status[\"response\"] === 200) {\r\n          console.log(\"SUCCESS\");\r\n          console.log(status);\r\n\r\n          // close submit dialog\r\n          setOpenJobRequestDialog(false);\r\n          toast.success(`${status.responseText}`, {\r\n            toastId: \"jobRequestSubmitSuccess\",\r\n          });\r\n        } else {\r\n          console.log(\"ERROR\");\r\n          console.log(status);\r\n\r\n          // close submit dialog\r\n          setOpenJobRequestDialog(false);\r\n          toast.error(`${status.responseText}`, {\r\n            toastId: \"jobRequestSubmitError\",\r\n          });\r\n        }\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenJobRequestDialog(false);\r\n        toast.error(`${status.responseText}`, {\r\n          toastId: \"jobRequestSubmitError\",\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleOnClickProceedButton = () => {\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = prepareDataForDescList(convProp);\r\n    //let cleaned = removeEmpty(prepareDataForDescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to proceed. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // create description list\r\n    let footnote = `<div> This template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>${AdamantVersion[\"adamant_version\"]}</a></span> </div>`;\r\n    let descList = ``;\r\n    descList += createDescriptionListFromJSON(\r\n      cleaned,\r\n      convSch,\r\n      convProp,\r\n      schema,\r\n      footnote,\r\n      true\r\n    );\r\n\r\n    setDescriptionList(descList);\r\n\r\n    // validate the data first using ajv\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n    let contentSchema = { ...schema };\r\n\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, messages] = validateAgainstSchema(content, contentSchema);\r\n    setErrorStuffUponValidation(messages);\r\n    //console.log(content);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {messages.map((item, index) => {\r\n            return <div key={index}>{index + 1 + \". \" + item.message}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          autoClose: 10000,\r\n          toastId: \"formDataError\",\r\n        }\r\n      );\r\n      // clear states\r\n      //setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    } else {\r\n      //setOpenSubmitDialog(true);\r\n      setOpenFormReviewDialog(true);\r\n    }\r\n  };\r\n\r\n  // gather all loaded files in one object\r\n  const handleLoadedFiles = (file) => {\r\n    let files = loadedFiles;\r\n    //console.log(files);\r\n\r\n    // check if file already exists\r\n    let isFileAlreadyExist = false;\r\n    for (let i = 0; i < files.length; i++) {\r\n      if (files[i][\"name\"] === file[\"name\"]) {\r\n        isFileAlreadyExist = true;\r\n      }\r\n    }\r\n\r\n    if (isFileAlreadyExist) {\r\n      console.log(\"File already exists. Skipping it.\");\r\n      toast.warning(\r\n        <>\r\n          <div>\r\n            <strong>File already loaded: {`${file[\"name\"]}`}.</strong>\r\n          </div>\r\n        </>,\r\n        {\r\n          toastId: \"fileAlreadyLoaded\" + file[\"name\"],\r\n        }\r\n      );\r\n      //console.log(\"loaded files:\", files);\r\n      return true;\r\n    } else {\r\n      console.log(\"File not exist yet. Pushing it.\");\r\n      files.push(file);\r\n      //console.log(\"loaded files:\", files);\r\n      setLoadedFiles(files);\r\n      console.log(\"File added. Current files:\", loadedFiles);\r\n      toast.success(\r\n        <>\r\n          <div>\r\n            <strong>File successfully loaded:</strong>\r\n            {` ${file[\"name\"]}`}.\r\n          </div>\r\n        </>,\r\n        {\r\n          toastId: \"fileLoadedSuccessfully\" + file[\"name\"],\r\n        }\r\n      );\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // remove file from loadedFiles based on its index\r\n  const handleRemoveFile = (fileIndex) => {\r\n    let files = loadedFiles;\r\n    if (fileIndex > -1) {\r\n      files.splice(fileIndex, 1);\r\n      setLoadedFiles(files);\r\n      console.log(\"File removed. Current files:\", loadedFiles);\r\n    } else {\r\n      console.log(\"No file needs to be removed. Current files:\", loadedFiles);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormContext.Provider\r\n        value={{\r\n          loadedFiles,\r\n          handleRemoveFile,\r\n          handleLoadedFiles,\r\n          updateParent,\r\n          convertedSchema,\r\n          updateFormDataId,\r\n          handleDataDelete,\r\n          handleConvertedDataInput,\r\n          SEMSelectedDevice,\r\n          schemaSpecification,\r\n          setSchemaSpecification,\r\n          setSEMSelectedDevice,\r\n          implementedFieldTypes,\r\n          handleCheckIDexistence,\r\n        }}\r\n      >\r\n        <div style={{ paddingBottom: \"5px\" }}>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            <img\r\n              style={{\r\n                paddingLeft: \"10px\",\r\n                height: \"100px\",\r\n                borderRadius: \"5px\",\r\n              }}\r\n              alt=\"header\"\r\n              src={HeaderImage !== undefined ? HeaderImage : QPTDATLogo}\r\n            />\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                paddingRight: \"10px\",\r\n                justifyContent: \"right\",\r\n                verticalAlign: \"top\",\r\n              }}\r\n            >\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Button\r\n                    onClick={() => {\r\n                      history.push(\"/\");\r\n                    }}\r\n                  >\r\n                    Home\r\n                  </Button>\r\n                )}\r\n              />\r\n              <div style={{ borderRight: \"1px solid #D3D3D3\" }}></div>\r\n              {loginState === \"false\" ? (\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => setOpenLDAPLoginDialog(true)}\r\n                >\r\n                  LOG IN\r\n                </Button>\r\n              ) : (\r\n                <>\r\n                  <div\r\n                    style={{\r\n                      display: \"table-cell\",\r\n                      height: \"100%\",\r\n                      padding: \"10px\",\r\n                    }}\r\n                  >\r\n                    Hi, {firstName}!\r\n                  </div>\r\n                  <div style={{ borderRight: \"1px solid #D3D3D3\" }}></div>\r\n                  <Button color=\"secondary\" onClick={() => handleLogOut()}>\r\n                    LOG OUT\r\n                  </Button>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {Object.keys(experimentData).length === 0 ? (\r\n          <>\r\n            <div style={{ fontSize: \"20px\", padding: \"10px 10px 0px 10px\" }}>\r\n              Make sure you are <strong>logged in</strong>!\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                textAlign: \"left\",\r\n                padding: \"10px 10px 0px 10px\",\r\n              }}\r\n            >\r\n              <Button\r\n                style={{\r\n                  fontSize: \"auto\",\r\n                  height: \"50px\",\r\n                  width: \"auto\",\r\n                  marginRight: \"5px\",\r\n                }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={loginState === \"false\" ? true : false}\r\n                onClick={() => getExperimentsELabFTW()}\r\n              >\r\n                Browse experiments\r\n              </Button>\r\n            </div>{\" \"}\r\n          </>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n\r\n        {Object.keys(experimentData).length === 0 ? (\r\n          <RenderExperimentCard\r\n            experiments={experiments}\r\n            readExperimentELabFTW={readExperimentELabFTW}\r\n          />\r\n        ) : /*\r\n          <EditExperiment\r\n            retrievedJSONSchema ={retrievedJSONSchema}\r\n            retrievedJSONData = {retrievedJSONData}\r\n            experimentData={experimentData}\r\n        />*/\r\n        convertedSchema !== null ? (\r\n          <>\r\n            <div\r\n              style={{\r\n                paddingLeft: \"10px\",\r\n                marginTop: \"-8px\",\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n              }}\r\n            >\r\n              <Button\r\n                color={toggleJSONForm ? \"default\" : \"default\"}\r\n                onClick={() => setToggleJSONForm(true)}\r\n                variant={!toggleJSONForm ? \"contained\" : \"default\"}\r\n              >\r\n                JSON FORM\r\n              </Button>\r\n              {/*<div style={{ borderRight: \"1px solid #D3D3D3\" }}></div>*/}\r\n              <Button\r\n                color={!toggleJSONForm ? \"default\" : \"default\"}\r\n                onClick={() => handlePrepareDescList()}\r\n                variant={toggleJSONForm ? \"contained\" : \"default\"}\r\n              >\r\n                HTML FORM\r\n              </Button>\r\n            </div>\r\n            {toggleJSONForm ? (\r\n              <FormRenderer\r\n                revertAllChanges={revertAllChanges}\r\n                schema={convertedSchema}\r\n                setSchemaSpecification={setSchemaSpecification}\r\n                originalSchema={schema}\r\n                edit={editMode}\r\n                setEditMode={setEditMode}\r\n              />\r\n            ) : (\r\n              <div\r\n                style={{ padding: \"10px\" }}\r\n                dangerouslySetInnerHTML={{ __html: descriptionList }}\r\n              ></div>\r\n            )}\r\n          </>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        {Object.keys(experimentData).length !== 0 ? (\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              display: \"flex\",\r\n              padding: \"10px 10px\",\r\n            }}\r\n          >\r\n            <div style={{ width: \"50%\" }}>\r\n              <Button\r\n                onClick={() => handleBack2Browse()}\r\n                style={{ float: \"left\", marginRight: \"5px\" }}\r\n                variant=\"outlined\"\r\n              >\r\n                Back to Browse\r\n              </Button>\r\n            </div>\r\n            <div style={{ width: \"50%\" }}>\r\n              <Button\r\n                style={{ float: \"right\", marginRight: \"5px\" }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() =>\r\n                  updateExperimentELabFTW(experimentData[\"experiment_id\"])\r\n                }\r\n              >\r\n                Update Experiment\r\n              </Button>\r\n              <Button\r\n                style={{ float: \"right\", marginRight: \"5px\" }}\r\n                id=\"demo-positioned-button\"\r\n                aria-controls={open ? \"demo-positioned-menu\" : undefined}\r\n                aria-haspopup=\"true\"\r\n                aria-expanded={open ? \"true\" : undefined}\r\n                onClick={handleClick}\r\n              >\r\n                <DownloadIcon /> Download Schema/Data\r\n              </Button>\r\n              <Menu\r\n                id=\"demo-positioned-menu\"\r\n                aria-labelledby=\"demo-positioned-button\"\r\n                anchorEl={anchorEl}\r\n                open={open}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n                transformOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n              >\r\n                <MenuItem onClick={handleDownloadJsonSchema}>\r\n                  Download JSON Schema\r\n                </MenuItem>\r\n                <MenuItem onClick={handleDownloadFormData}>\r\n                  Download JSON Data\r\n                </MenuItem>\r\n                <MenuItem onClick={handleDownloadDescriptionList}>\r\n                  Download Description List\r\n                </MenuItem>\r\n              </Menu>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\", color: \"grey\" }}>\r\n          {AdamantVersion[\"adamant_version\"]}\r\n        </div>\r\n      </FormContext.Provider>\r\n      <CreateELabFTWExperimentDialog\r\n        setTags={setTags}\r\n        tags={tags}\r\n        setRetrievedTags={setRetrievedTags}\r\n        retrievedTags={retrievedTags}\r\n        setExperimentTitle={setExperimentTitle}\r\n        createExperimentELabFTW={createExperimentELabFTW}\r\n        setToken={setToken}\r\n        token={token}\r\n        setELabURL={setELabURL}\r\n        eLabURL={eLabURL}\r\n        setOpenCreateElabFTWExperimentDialog={\r\n          setOpenCreateElabFTWExperimentDialog\r\n        }\r\n        openCreateElabFTWExperimentDialog={openCreateElabFTWExperimentDialog}\r\n        getTagsELabFTW={getTagsELabFTW}\r\n      />\r\n      {openFormReviewDialog ? (\r\n        <FormReviewBeforeSubmit\r\n          onlineMode={onlineMode}\r\n          openFormReviewDialog={openFormReviewDialog}\r\n          setOpenFormReviewDialog={setOpenFormReviewDialog}\r\n          descriptionList={descriptionList}\r\n          setOpenFunctions={{\r\n            setOpenCreateElabFTWExperimentDialog,\r\n            setOpenJobRequestDialog,\r\n          }}\r\n          submitFunctions={{ submitJobRequest }}\r\n          submitText={submitText}\r\n        />\r\n      ) : null}\r\n      <LDAPLoginDialog\r\n        openLDAPLoginDialog={openLDAPLoginDialog}\r\n        setOpenLDAPLoginDialog={setOpenLDAPLoginDialog}\r\n        setIntranetUsername={setIntranetUsername}\r\n        setUserPassword={setUserPassword}\r\n        token={token}\r\n        setToken={setToken}\r\n        email={email}\r\n        setEmail={setEmail}\r\n        handleLogin={handleLogin}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdamantBrowseExp;\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { IconButton, Button } from \"@material-ui/core\";\r\nimport ProgressDialog from \"../components/ProgressDialog\";\r\nimport CryptoJS from \"crypto-js\";\r\n\r\n// to create a bundle (download dataset+metadata as .zip)\r\nimport JSZip from \"jszip\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nconst AsyncTestPage = () => {\r\n  // ProgressDialog\r\n  const [openProgressDialog, setOpenProgressDialog] = useState(false);\r\n  const [progressDialogMessages, setProgressDialogMessages] = useState([\r\n    \"\",\r\n    \"\",\r\n  ]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [progressDialogTitle, setProgressDialogTitle] = useState(\"\");\r\n\r\n  const [hashes, setHashes] = useState({});\r\n\r\n  const [loadedFiles, setLoadedFiles] = useState([]);\r\n\r\n  useEffect(() => {\r\n    //console.log(hashes);\r\n  }, [hashes, progress, hashAllFiles]);\r\n\r\n  function resolveAfter2Seconds() {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(\"resolved\");\r\n      }, 2000);\r\n    });\r\n  }\r\n\r\n  function resolveAfterOneSecond() {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(\"resolved\");\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  async function asyncCall() {\r\n    console.log(\"calling\");\r\n    setOpenProgressDialog(true);\r\n    setProgressDialogTitle(\"Progressing...\");\r\n    setProgressDialogMessages(\"Doing stuff.\");\r\n    setProgress(0);\r\n    for (let i = 0; i < 10; i++) {\r\n      const result = await resolveAfter2Seconds();\r\n      setProgress((i + 1) * 10);\r\n      console.log(result);\r\n    }\r\n    // Expected output: \"resolved\"\r\n  }\r\n\r\n  // --------------------------------------- Dataset certification feature ------------------------------------\r\n  const readAndHash = (file) => {\r\n    return new Promise((resolve) => {\r\n      let reader = new FileReader();\r\n      // hash the file\r\n      reader.onloadend = function () {\r\n        let file_result = this.result;\r\n        let file_wordArr = CryptoJS.lib.WordArray.create(file_result);\r\n        let sha256_hash = CryptoJS.SHA256(file_wordArr);\r\n        console.log(`finished hashing \"${file[\"name\"]}\"`);\r\n        resolve([file[\"name\"], sha256_hash.toString()]);\r\n      };\r\n      reader.readAsArrayBuffer(file);\r\n    });\r\n  };\r\n\r\n  const certifyOnBloxberg = (hashes, metadata) => {\r\n    let crid = [];\r\n    let file_names = [];\r\n\r\n    for (const [key, value] of Object.entries(hashes)) {\r\n      file_names.push(key);\r\n      crid.push(value);\r\n    }\r\n\r\n    console.log(\"crid:\", crid);\r\n    console.log(\"file names:\", file_names);\r\n\r\n    var $ = require(\"jquery\");\r\n    return $.ajax({\r\n      type: \"POST\",\r\n      url: \"/api/certify\",\r\n      async: true,\r\n      dataType: \"json\",\r\n      data: {\r\n        crid: JSON.stringify(crid),\r\n        metadata: JSON.stringify(metadata),\r\n        file_names: JSON.stringify(file_names),\r\n        hashes_dict: JSON.stringify(hashes),\r\n      },\r\n      success: function (status) {\r\n        console.log(status);\r\n        console.log(\"success\");\r\n      },\r\n      error: function (status) {\r\n        console.log(\"failed\");\r\n      },\r\n    });\r\n  };\r\n\r\n  async function hashAllFiles() {\r\n    setOpenProgressDialog(true);\r\n    setProgressDialogTitle(\"Processing...\");\r\n    setProgressDialogMessages(\"Starting...\");\r\n    setProgress(0);\r\n    let hashDict = {};\r\n    const increment = 100 / (loadedFiles.length + 1 + 1); // num of files plus one certification process plus one zipping process\r\n    // hashing\r\n    for (let i = 0; i < loadedFiles.length; i++) {\r\n      setProgressDialogMessages(`Hashing \"${loadedFiles[i][\"name\"]}\"...`);\r\n      const result = await readAndHash(loadedFiles[i]);\r\n      setProgress((i + 1) * increment);\r\n      hashDict[result[0]] = result[1];\r\n    }\r\n    setProgressDialogMessages(`Finished hashing all files.`);\r\n    console.log(\"finished:\", hashDict);\r\n    setHashes(hashDict);\r\n    // certifying\r\n    setProgressDialogMessages(`Certifying all files...`);\r\n    const result = await certifyOnBloxberg(hashDict, {});\r\n    console.log(\"result:\", result);\r\n    setProgress((loadedFiles.length + 1) * increment);\r\n\r\n    // zip the results together\r\n    if (result[\"status_code\"] === 200) {\r\n      setProgressDialogMessages(`Zipping certificates...`);\r\n      const zip = new JSZip();\r\n      for (const [file_name, content] of Object.entries(result[\"data\"])) {\r\n        zip.file(file_name, content, { base64: true });\r\n      }\r\n\r\n      zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n        saveAs(content, \"certificates.zip\");\r\n      });\r\n      setProgress(100);\r\n      setProgressDialogTitle(\"Process complete\");\r\n      setProgressDialogMessages(`Finished everything.`);\r\n    } else {\r\n      setProgress(0);\r\n      setProgressDialogTitle(\"ERROR\");\r\n      setProgressDialogMessages(`ERROR`);\r\n    }\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------------------\r\n\r\n  // Asynchronously read selected files and hash\r\n  const handleShowFiles = () => {\r\n    const selectedFile = document.getElementById(\"browsefiles\").files;\r\n    setLoadedFiles(selectedFile);\r\n    console.log(selectedFile);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"10px\" }}>\r\n      <div>Test page to experiment with async. functions</div>\r\n      <input\r\n        onChange={() => handleShowFiles()}\r\n        type=\"file\"\r\n        id=\"browsefiles\"\r\n        multiple\r\n      ></input>\r\n      <Button onClick={() => asyncCall()}>Async Test</Button>\r\n      <Button onClick={() => hashAllFiles()} color=\"primary\">\r\n        Hash all\r\n      </Button>\r\n      <ProgressDialog\r\n        openProgressDialog={openProgressDialog}\r\n        setOpenProgressDialog={setOpenProgressDialog}\r\n        progress={progress}\r\n        title={progressDialogTitle}\r\n        messages={progressDialogMessages}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AsyncTestPage;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport AdamantMain from \"./pages/AdamantMain\";\r\nimport AdamantRequest from \"./pages/AdamantRequest\";\r\nimport AdamantProcess from \"./pages/AdamantProcess\";\r\nimport \"cors\";\r\nimport packageJson from \"../package.json\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport AdamantBrowseExp from \"./pages/AdamantBrowseExp\";\r\nimport AsyncTestPage from \"./pages/AsyncTestPage\"\r\n\r\nexport default function App() {\r\n\r\n  // check if adamant endpoint exists in the homepage\r\n  const homepage = packageJson[\"homepage\"];\r\n  const adamantEndpoint = homepage.includes(\"/adamant\")\r\n\r\n  if (adamantEndpoint) {\r\n    console.log(\"/adamant endpoint is detected\")\r\n    return (\r\n      /** Use this for if homepage has /adamant endpoint, this is only for deploying on github-page */\r\n      <>\r\n        <div className=\"the_app\">\r\n          <Switch>\r\n            <Redirect exact from=\"/\" to=\"/adamant\" />\r\n            <Route exact path=\"/adamant\" component={AdamantMain}></Route>\r\n            <Route exact path=\"/adamant/request-job\" component={AdamantRequest}></Route>\r\n            <Route exact path=\"/adamant/process-request\" component={AdamantProcess}></Route>\r\n            <Route exact path=\"/adamant/browse-experiment\" component={AdamantBrowseExp}></Route>\r\n            <Route exact path=\"/adamant/async-testpage\" component={AsyncTestPage}></Route>\r\n          </Switch>\r\n        </div>\r\n        <ToastContainer\r\n          position=\"bottom-right\"\r\n          autoClose={5000}\r\n          hideProgressBar={false}\r\n          closeOnClick={true}\r\n          pauseOnHover={true}\r\n          draggable={false}\r\n          progress={undefined} />\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <div className=\"the_app\">\r\n          <Switch>\r\n            <Route exact path=\"/\" component={AdamantMain}></Route>\r\n            <Route exact path=\"/request-job\" component={AdamantRequest}></Route>\r\n            <Route exact path=\"/process-request\" component={AdamantProcess}></Route>\r\n            <Route exact path=\"/browse-experiment\" component={AdamantBrowseExp}></Route>\r\n            <Route exact path=\"/async-testpage\" component={AsyncTestPage}></Route>\r\n          </Switch>\r\n        </div>\r\n        <ToastContainer\r\n          position=\"bottom-right\"\r\n          autoClose={2000}\r\n          hideProgressBar={false}\r\n          closeOnClick={true}\r\n          pauseOnHover={true}\r\n          draggable={false}\r\n          progress={undefined} />\r\n      </>\r\n    );\r\n  };\r\n};","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n//import { HashRouter as Router } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\n// strict mode is disabled so that findDOMNode warning is suppressed\r\nReactDOM.render(\r\n  <Router>\r\n    <CssBaseline />\r\n    <App />\r\n  </Router>,\r\n  rootElement\r\n);\r\n\r\n\r\n//use this for strict mode, however it always throws the findDOMNode warning\r\n/*ReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <CssBaseline />\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n*/"],"sourceRoot":""}