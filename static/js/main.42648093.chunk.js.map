{"version":3,"sources":["assets/json-file-svgrepo-com.svg","assets/header-image.png","components/utils/getValue.js","components/utils/checkIfFieldIDExist.js","FormContext.js","components/utils/updateRequired.js","components/EditElement.js","components/utils/deleteKey.js","components/elements/StringType.js","components/utils/getUnit.js","components/elements/NumberType.js","components/AddElement.js","components/elements/ObjectType.js","components/elements/IntegerType.js","components/elements/BooleanType.js","components/elements/array_items/ItemIntegerType.js","components/elements/array_items/ItemNumberType.js","components/elements/array_items/ItemStringType.js","components/elements/array_items/ItemObjectType.js","components/elements/ArrayItemRenderer.js","components/utils/generateUniqueID.js","components/elements/ArrayType.js","components/utils/object2array.js","components/elements/AnyOfKeyword.js","components/elements/FileUpload.js","components/ElementRenderer.js","components/EditSchemaHeader.js","components/JSONSchemaViewerDialog.js","components/utils/fillForm.js","components/FormRenderer.js","components/utils/array2object.js","components/utils/deleteKeySchema.js","components/utils/validateAgainstSchema.js","components/CreateELabFTWExperimentDialog.js","components/utils/createDescriptionList.js","components/utils/convData2DescList.js","components/utils/getPaths.js","components/utils/getValueInSchema.js","components/utils/getPathURIsAndLabels.js","components/utils/preProcessB4DescList.js","components/utils/nicelySort.js","components/utils/array2objectAnyOf.js","components/utils/fillValueWithEmptyString.js","components/utils/convData2FormData.js","pages/AdamantMain.jsx","App.js","index.js"],"names":["_g","_g2","_g3","_g4","_g5","_g6","_g7","_g8","_g9","_g10","_g11","_g12","_g13","_g14","_g15","_g16","getValue","json","path","undefined","jsonData","JSON","parse","stringify","split","tempValue","i","length","checkIfFieldIDExist","schema","fieldkey","result","forEach","element","value","newPath","pop","join","FormContext","createContext","updateRequired","selectedType","requiredChecked","field_key","convertedSchema","set","require","immediateValue","requiredArray","push","Set","includes","filter","item","EditElement","makeStyles","theme","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","field_uri","enumerated","field_enumerate","field_required","UISchema","pathFormData","openDialog","setOpenDialog","defaultValue","useState","setSelectedType","title","setTitle","setFieldKey","fieldUri","setFieldUri","description","setDescription","defValue","setDefValue","useContext","updateParent","updateFormDataId","setRequiredChecked","enumChecked","setEnumChecked","enumList","setEnumList","tempUISchema","notImplemented","handleUpdateSchemaOnClick","toString","replace","existed","alert","newConvertedSchema","newList","Array","isArray","parsed","map","parseInt","x","parseFloat","handleChangeUISchema","event","keyword","target","handleCancelEdit","handleCheckBoxOnChange","prev","Dialog","open","DialogTitle","id","style","display","verticalAlign","color","alignSelf","IconButton","onClick","Divider","DialogContent","DialogActions","Button","disabled","autoFocus","DialogContentText","component","FormControl","FormLabel","TextField","margin","required","onChange","marginTop","variant","fullWidth","label","helperText","multiline","rows","select","SelectProps","native","content","index","FormControlLabel","control","Checkbox","checked","marginBottom","paddingTop","paddingBottom","FormGroup","deleteKey","elementValue","deleteIndex","at","splice","useStyles","StringType","withinObject","dataInputItems","setDataInputItems","withinArray","field_index","edit","field_label","field_description","handleDataInput","handleDataDelete","handleConvertedDataInput","fieldValue","setFieldValue","classes","handleOnChange","e","handleDeleteElement","pathArr","indexOf","val","handleOnBlur","type","newPathFormData","arr","items","from","useEffect","dataInputItemVal","onKeyDown","key","shiftKey","preventDefault","onBlur","className","Tooltip","placement","marginLeft","height","getUnit","addorn","match","NumberType","descriptionText","setDescriptionText","inputValue","setInputValue","inputError","setInputError","unit","handleInputOnChange","inputValueVar","handleInputOnBlur","isNaN","onFocus","error","InputProps","endAdornment","InputAdornment","position","tex","String","raw","onMouseEnter","AddElement","defaultSchema","schemaTitle","inputProps","maxLength","handleOnBlurFieldId","properties","Accordion","withStyles","border","borderBottom","boxShadow","expanded","MuiAccordion","AccordionSummary","backgroundColor","minHeight","MuiAccordionSummary","ObjectType","pathSchema","field_properties","openDialogAddElement","setOpenDialogAddElement","expand","setExpand","padding","expandIcon","IconButtonProps","Typography","AccordionDetails","onDragEnd","destination","source","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","Object","keys","isDragDisabled","draggableId","draggableProps","dragHandleProps","fieldIndex","elementRequired","field","placeholder","justifyContent","IntegerType","Number","isInteger","BooleanType","onMouseLeave","alignItems","paddingLeft","textAlign","FormHelperText","ItemIntegerType","oDataInputItems","oSetDataInputItems","arrayFieldKey","handleDeleteArrayItem","arr2","items2","prevIndex","ItemNumberType","field_type","ItemStringType","console","log","ItemObjectType","field_items","objectIndex","newVal","justifySelf","tempField","ArrayItemRenderer","enumerate","generateUID","firstPart","Math","random","secondPart","slice","ArrayType","maxItems","field_prefixItems","inputItems","setInputItems","generateUniqueID","newFieldItems","currentInputItems","reorderedItem2","toast","warning","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","handleAddArrayItem","paddingRight","object2array","propert","someArray","tempVariable2","tempVariable","item_","AnyOfKeyword","anyOf_list","setField_items","globalIndex","setGlobalIndex","schemaList","fill","val2","val3","prop","handleChooseAnyOfSchema","FileUpload","contentEncoding","dataUrl","setDataUrl","renderingInProgress","setRenderingInProgress","onDrop","useCallback","acceptedFile","acceptedTypes","matches","submatch","replaceAll","getAcceptedTypes","valid","fileType","validateAcceptedFile","reader","FileReader","onabort","onerror","onload","binaryStr","readAsDataURL","useDropzone","multiple","getRootProps","getInputProps","Box","sx","LinearProgress","src","whiteSpace","textOverflow","overflow","handleOnClickedClear","ElementRenderer","$id","anyOf","_excluded","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgJsonFileSvgrepoCom","_ref","svgRef","titleId","props","xmlns","xmlnsXlink","y","viewBox","enableBackground","xmlSpace","d","points","cx","cy","r","ForwardRef","EditSchemaHeader","schemaID","schemaURI","_schemaID","_setSchemaID","_title","_setTitle","_description","_setDescription","_schemaURI","_setSchemaURI","JSONSchemaViewerDialog","openSchemaViewer","setOpenSchemaViewer","jsonschema","onClose","maxWidth","fillForm","schemaProp","data","FormRenderer","revertAllChanges","originalSchema","receivedData","setReceivedData","validity","file","message","checkFormDataValidity","obj","readAsText","newValue","$schema","array2object","someObject","tempKey","tempElements","enumContent","deleteKeySchema","pathArray","tobeDeleted","validateAgainstSchema","formData","validate","Ajv04","schemaId","allErrors","compile","Ajv","ajv","CreateELabFTWExperimentDialog","getTagsELabFTW","eLabURL","setELabURL","setTags","setRetrievedTags","tags","retrievedTags","setExperimentTitle","setToken","token","setOpenSubmitDialog","openSubmitDialog","createExperimentELabFTW","Autocomplete","freeSolo","options","getOptionLabel","option","tag","values","renderInput","params","trim","createDescriptionList","descList","emptyString","titleDiv","some","convData2DescList","convDataProp","getPaths","object","reduce","k","kk","p","getValueInSchema","getPathURIsAndLabels","uris","labels","thePath","pathPreProcess","processedArr","preProcessB4DescList","originalContent","path_key","path_label","URIsAndLabels","nicelySort","sortedArr","loc","checkObjectExistance","newObj","array2objectAnyOf","fillValueWithEmptyString","jsonObjProp","convData2FormData","createFormDataBlueprint","schemaProperties","newObject","removeEmpty","AdamantMain","disable","setDisable","schemaMessage","setSchemaMessage","schemaValidity","setSchemaValidity","setSchema","setSchemaIntermediate","renderReady","setRenderReady","editMode","setEditMode","setSchemaList","schemaNameList","setSchemaNameList","selectedSchemaName","setSelectedSchemaName","setOriginalSchema","inputMode","setInputMode","setConvertedSchema","createScratchMode","setCreateScratchMode","setJsonData","descriptionList","setDescriptionList","setSchemaWithValues","experimentTitle","onlineMode","setOnlineMode","anchorEl","setAnchorEl","Boolean","handleClose","ajax","url","success","SchemaOne","SchemaTwo","SchemaThree","SchemaFour","status","sch","schemaFile","oriSchema","checkSchemaValidity","isDragActive","clearSchemaOnClick","Provider","updatedSchema","tempSchema","updatedSchema2","tempSchema2","jData","oldFieldId","newFieldId","convSchemaData","borderRadius","alt","HeaderImage","selectedSchema","handleSelectSchemaOnChange","createSchemaFromScratch","marginRight","toEditMode","float","convSch","convProp","cleaned","preProcessed","nicelySorted","descListHeading","contentSchema","validation","errorMessages","errors","currentMessage","handleOnClickProceedButton","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","sha256_hash","CryptoJS","SHA256","a","document","createElement","Blob","href","URL","createObjectURL","download","click","compileOnClick","async","dataType","javascript_data","eLabToken","body","App","exact","to","rootElement","getElementById","ReactDOM","render","CssBaseline"],"mappings":"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","file":"static/js/main.42648093.chunk.js","sourcesContent":["var _g, _g2, _g3, _g4, _g5, _g6, _g7, _g8, _g9, _g10, _g11, _g12, _g13, _g14, _g15, _g16;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgJsonFileSvgrepoCom(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Capa_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 58 58\",\n    style: {\n      enableBackground: \"new 0 0 58 58\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M50.949,12.187l-1.361-1.361l-9.504-9.505c-0.001-0.001-0.001-0.001-0.002-0.001l-0.77-0.771 C38.957,0.195,38.486,0,37.985,0H8.963C7.776,0,6.5,0.916,6.5,2.926V39v16.537V56c0,0.837,0.841,1.652,1.836,1.909 c0.051,0.014,0.1,0.033,0.152,0.043C8.644,57.983,8.803,58,8.963,58h40.074c0.16,0,0.319-0.017,0.475-0.048 c0.052-0.01,0.101-0.029,0.152-0.043C50.659,57.652,51.5,56.837,51.5,56v-0.463V39V13.978C51.5,13.211,51.407,12.644,50.949,12.187 z M39.5,3.565L47.935,12H39.5V3.565z M8.963,56c-0.071,0-0.135-0.025-0.198-0.049C8.61,55.877,8.5,55.721,8.5,55.537V41h41v14.537 c0,0.184-0.11,0.34-0.265,0.414C49.172,55.975,49.108,56,49.037,56H8.963z M8.5,39V2.926C8.5,2.709,8.533,2,8.963,2h28.595 C37.525,2.126,37.5,2.256,37.5,2.391V13.78c-0.532-0.48-1.229-0.78-2-0.78c-0.553,0-1,0.448-1,1s0.447,1,1,1c0.552,0,1,0.449,1,1v4 c0,1.2,0.542,2.266,1.382,3c-0.84,0.734-1.382,1.8-1.382,3v4c0,0.551-0.448,1-1,1c-0.553,0-1,0.448-1,1s0.447,1,1,1 c1.654,0,3-1.346,3-3v-4c0-1.103,0.897-2,2-2c0.553,0,1-0.448,1-1s-0.447-1-1-1c-1.103,0-2-0.897-2-2v-4 c0-0.771-0.301-1.468-0.78-2h11.389c0.135,0,0.265-0.025,0.391-0.058c0,0.015,0.001,0.021,0.001,0.036V39H8.5z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.354,51.43c-0.019,0.446-0.171,0.764-0.458,0.95s-0.672,0.28-1.155,0.28c-0.191,0-0.396-0.022-0.615-0.068 s-0.429-0.098-0.629-0.157s-0.385-0.123-0.554-0.191s-0.299-0.135-0.39-0.198l-0.697,1.107c0.183,0.137,0.405,0.26,0.67,0.369 s0.54,0.207,0.827,0.294s0.565,0.15,0.834,0.191s0.504,0.062,0.704,0.062c0.401,0,0.791-0.039,1.169-0.116 c0.378-0.077,0.713-0.214,1.005-0.41s0.524-0.456,0.697-0.779s0.26-0.723,0.26-1.196v-7.848h-1.668V51.43z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M25.083,49.064c-0.314-0.228-0.654-0.422-1.019-0.581s-0.702-0.323-1.012-0.492s-0.569-0.364-0.779-0.588 s-0.314-0.518-0.314-0.882c0-0.146,0.036-0.299,0.109-0.458s0.173-0.303,0.301-0.431s0.273-0.234,0.438-0.321 s0.337-0.139,0.52-0.157c0.328-0.027,0.597-0.032,0.807-0.014s0.378,0.05,0.506,0.096s0.226,0.091,0.294,0.137 s0.13,0.082,0.185,0.109c0.009-0.009,0.036-0.055,0.082-0.137s0.101-0.185,0.164-0.308s0.132-0.255,0.205-0.396 s0.137-0.271,0.191-0.39c-0.265-0.173-0.61-0.299-1.039-0.376s-0.853-0.116-1.271-0.116c-0.41,0-0.8,0.063-1.169,0.191 s-0.692,0.313-0.971,0.554s-0.499,0.535-0.663,0.882S20.4,46.13,20.4,46.576c0,0.492,0.104,0.902,0.314,1.23 s0.474,0.613,0.793,0.854s0.661,0.451,1.025,0.629s0.704,0.355,1.019,0.533s0.576,0.376,0.786,0.595s0.314,0.483,0.314,0.793 c0,0.511-0.148,0.896-0.444,1.155s-0.723,0.39-1.278,0.39c-0.183,0-0.378-0.019-0.588-0.055s-0.419-0.084-0.629-0.144 s-0.412-0.123-0.608-0.191s-0.357-0.139-0.485-0.212l-0.287,1.176c0.155,0.137,0.34,0.253,0.554,0.349s0.439,0.171,0.677,0.226 c0.237,0.055,0.472,0.094,0.704,0.116s0.458,0.034,0.677,0.034c0.511,0,0.966-0.077,1.367-0.232s0.738-0.362,1.012-0.622 s0.485-0.561,0.636-0.902s0.226-0.695,0.226-1.06c0-0.538-0.104-0.978-0.314-1.319S25.397,49.292,25.083,49.064z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.872,45.072c-0.378-0.429-0.82-0.754-1.326-0.978s-1.06-0.335-1.661-0.335s-1.155,0.111-1.661,0.335 s-0.948,0.549-1.326,0.978s-0.675,0.964-0.889,1.606s-0.321,1.388-0.321,2.235s0.107,1.595,0.321,2.242s0.511,1.185,0.889,1.613 s0.82,0.752,1.326,0.971s1.06,0.328,1.661,0.328s1.155-0.109,1.661-0.328s0.948-0.542,1.326-0.971s0.675-0.966,0.889-1.613 s0.321-1.395,0.321-2.242s-0.107-1.593-0.321-2.235S35.25,45.501,34.872,45.072z M34.195,50.698 c-0.137,0.487-0.326,0.882-0.567,1.183s-0.515,0.518-0.82,0.649s-0.627,0.198-0.964,0.198c-0.328,0-0.641-0.07-0.937-0.212 s-0.561-0.364-0.793-0.67s-0.415-0.699-0.547-1.183s-0.203-1.066-0.212-1.75c0.009-0.702,0.082-1.294,0.219-1.777 c0.137-0.483,0.326-0.877,0.567-1.183s0.515-0.521,0.82-0.649s0.627-0.191,0.964-0.191c0.328,0,0.641,0.068,0.937,0.205 s0.561,0.36,0.793,0.67s0.415,0.704,0.547,1.183s0.203,1.06,0.212,1.743C34.405,49.616,34.332,50.211,34.195,50.698z\"\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"44.012,50.869 40.061,43.924 38.393,43.924 38.393,54 40.061,54 40.061,47.055 44.012,54 45.68,54 45.68,43.924  44.012,43.924  \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20.5,20v-4c0-0.551,0.448-1,1-1c0.553,0,1-0.448,1-1s-0.447-1-1-1c-1.654,0-3,1.346-3,3v4c0,1.103-0.897,2-2,2 c-0.553,0-1,0.448-1,1s0.447,1,1,1c1.103,0,2,0.897,2,2v4c0,1.654,1.346,3,3,3c0.553,0,1-0.448,1-1s-0.447-1-1-1 c-0.552,0-1-0.449-1-1v-4c0-1.2-0.542-2.266-1.382-3C19.958,22.266,20.5,21.2,20.5,20z\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 28.5,\n    cy: 19.5,\n    r: 1.5\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M28.5,25c-0.553,0-1,0.448-1,1v3c0,0.552,0.447,1,1,1s1-0.448,1-1v-3C29.5,25.448,29.053,25,28.5,25z\"\n  }))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", null)), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", null)), _g4 || (_g4 = /*#__PURE__*/React.createElement(\"g\", null)), _g5 || (_g5 = /*#__PURE__*/React.createElement(\"g\", null)), _g6 || (_g6 = /*#__PURE__*/React.createElement(\"g\", null)), _g7 || (_g7 = /*#__PURE__*/React.createElement(\"g\", null)), _g8 || (_g8 = /*#__PURE__*/React.createElement(\"g\", null)), _g9 || (_g9 = /*#__PURE__*/React.createElement(\"g\", null)), _g10 || (_g10 = /*#__PURE__*/React.createElement(\"g\", null)), _g11 || (_g11 = /*#__PURE__*/React.createElement(\"g\", null)), _g12 || (_g12 = /*#__PURE__*/React.createElement(\"g\", null)), _g13 || (_g13 = /*#__PURE__*/React.createElement(\"g\", null)), _g14 || (_g14 = /*#__PURE__*/React.createElement(\"g\", null)), _g15 || (_g15 = /*#__PURE__*/React.createElement(\"g\", null)), _g16 || (_g16 = /*#__PURE__*/React.createElement(\"g\", null)));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgJsonFileSvgrepoCom);\nexport default __webpack_public_path__ + \"static/media/json-file-svgrepo-com.805d27de.svg\";\nexport { ForwardRef as ReactComponent };","export default __webpack_public_path__ + \"static/media/header-image.37bfe931.png\";","// get json value given path\r\nconst getValue = (json, path) => {\r\n    if (path === undefined) {\r\n        return json[\"properties\"]\r\n    }\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValue;","import getValue from \"./getValue\";\r\nconst checkIfFieldIDExist = (schema, path, fieldkey) => {\r\n    let result\r\n    if (path === undefined) {\r\n        let value = schema[\"properties\"]\r\n        value.forEach(element => {\r\n            if (element[\"fieldKey\"] === fieldkey) {\r\n                return result = true;\r\n            }\r\n        });\r\n    } else {\r\n\r\n        let value = getValue(schema, path)[\"properties\"]\r\n\r\n        if (value === undefined) {\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n            let value = getValue(schema, newPath)\r\n            value.forEach(element => {\r\n                if (element[\"fieldKey\"] === fieldkey) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        } else {\r\n            value.forEach(element => {\r\n                if (element[\"fieldKey\"] === fieldkey) {\r\n                    return result = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    if (result) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n\r\n}\r\n\r\nexport default checkIfFieldIDExist;","import { createContext } from 'react';\r\nexport const FormContext = createContext(null);","/*\r\nFunction to add or remove \"required\" flag for a specific field\r\n*/\r\n\r\n\r\n// get json value given path\r\nconst getValue = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    let tempValue = jsonData\r\n    for (let i = 0; i < path.length; i++) {\r\n        tempValue = tempValue[path[i]]\r\n    }\r\n    return tempValue\r\n}\r\n\r\nconst updateRequired = ({ selectedType, path, requiredChecked, field_key, convertedSchema }) => {\r\n\r\n    if (selectedType === \"object\") {\r\n        requiredChecked = false\r\n    }\r\n\r\n    const set = require(\"set-value\");\r\n\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const immediateValue = getValue(convertedSchema, newPath)\r\n    if (immediateValue !== undefined) {\r\n        // check if there is required array\r\n        if (immediateValue[\"required\"] !== undefined) {\r\n            let requiredArray = immediateValue[\"required\"]\r\n            if (requiredChecked) {\r\n                requiredArray.push(field_key)\r\n                requiredArray = [...new Set(requiredArray)]\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            } else {\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_key)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_key)\r\n                    set(convertedSchema, newPath + \".required\", requiredArray)\r\n\r\n                    if (requiredArray.length === 0) {\r\n                        delete immediateValue[\"required\"]\r\n                        set(convertedSchema, newPath, immediateValue)\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_key}`]\r\n                set(convertedSchema, newPath + \".required\", requiredArray)\r\n            }\r\n        }\r\n    } else {\r\n        // check if there is required array\r\n        if (convertedSchema[\"required\"] !== undefined) {\r\n            let requiredArray = convertedSchema[\"required\"]\r\n            if (requiredChecked) {\r\n                requiredArray.push(field_key)\r\n                requiredArray = [...new Set(requiredArray)]\r\n                convertedSchema[\"required\"] = requiredArray\r\n            } else {\r\n                // check if the field id exists\r\n                if (requiredArray.includes(field_key)) {\r\n                    requiredArray = requiredArray.filter(item => item !== field_key)\r\n                    convertedSchema[\"required\"] = requiredArray\r\n                    if (requiredArray.length === 0) {\r\n                        delete convertedSchema[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (requiredChecked) {\r\n                let requiredArray = [`${field_key}`]\r\n                convertedSchema[\"required\"] = requiredArray\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return convertedSchema;\r\n}\r\n\r\nexport default updateRequired;","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport checkIfFieldIDExist from './utils/checkIfFieldIDExist';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport { FormGroup } from '@material-ui/core';\r\nimport updateRequired from './utils/updateRequired';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\nconst EditElement = ({ field_uri, enumerated, field_enumerate, field_required, field_key, UISchema, path, pathFormData, openDialog, setOpenDialog, defaultValue }) => {\r\n\r\n    const [selectedType, setSelectedType] = useState(UISchema[\"type\"])\r\n    const [title, setTitle] = useState(UISchema[\"title\"])\r\n    const [fieldkey, setFieldKey] = useState(UISchema[\"fieldKey\"])\r\n    const [fieldUri, setFieldUri] = useState(UISchema[\"$id\"])\r\n    const [description, setDescription] = useState(UISchema[\"description\"])\r\n    const [defValue, setDefValue] = useState(defaultValue)\r\n    const { updateParent, convertedSchema, updateFormDataId } = useContext(FormContext);\r\n    const [requiredChecked, setRequiredChecked] = useState(field_required === undefined ? false : field_required)\r\n    const [enumChecked, setEnumChecked] = useState(enumerated === undefined ? false : enumerated)\r\n    const [enumList, setEnumList] = useState(field_enumerate === undefined ? [] : field_enumerate);\r\n\r\n    let tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n\r\n    let notImplemented = false;\r\n    if (![\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\"].includes(UISchema[\"type\"])) {\r\n        notImplemented = true;\r\n    }\r\n\r\n\r\n    const datatypes = [\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\"]\r\n\r\n\r\n    const handleOnChangeListField = (event) => {\r\n        setEnumList(event.target.value);\r\n    }\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        // update default value\r\n        if (defValue === undefined & defaultValue === undefined) {\r\n            // do nothing\r\n        } else if (defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n            // do nothing\r\n        } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') === \"\" & defaultValue === undefined) {\r\n            // do nothing\r\n        } else if (selectedType === \"boolean\" & defValue.toString().replace(/\\s+/g, '') !== \"\" & defaultValue !== undefined) {\r\n            tempUISchema[\"defaultValue\"] = (defValue === \"true\")\r\n        } else if (defValue.toString().replace(/\\s+/g, '') === \"\") {\r\n            delete tempUISchema[\"defaultValue\"]\r\n        }\r\n        else {\r\n            tempUISchema[\"defaultValue\"] = defValue\r\n        };\r\n\r\n        // check if fieldkey already exist\r\n        let existed = checkIfFieldIDExist(convertedSchema, path, fieldkey)\r\n        if (UISchema[\"fieldKey\"] !== fieldkey) {\r\n            if (existed) {\r\n                alert(\"Field ID already exists!\")\r\n                return\r\n            }\r\n        }\r\n\r\n        if (fieldkey === undefined | fieldkey.replace(/\\s+/g, '') === \"\") {\r\n            alert(\"Field ID must be defined!\")\r\n            return\r\n        }\r\n\r\n        tempUISchema[\"fieldKey\"] = fieldkey;\r\n        if (fieldUri !== undefined) {\r\n            if (fieldUri.toString().replace(/\\s+/g, '') !== \"\") {\r\n                tempUISchema[\"$id\"] = fieldUri\r\n            }\r\n        }\r\n        tempUISchema[\"type\"] = selectedType;\r\n        if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n        if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n        if (tempUISchema[\"type\"] === \"object\" & tempUISchema[\"properties\"] === undefined) {\r\n            tempUISchema[\"properties\"] = []\r\n        }\r\n        if (tempUISchema[\"type\"] === \"array\" & tempUISchema[\"items\"] === undefined) {\r\n            tempUISchema[\"items\"] = {}\r\n        }\r\n        if (![\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"])) {\r\n            setEnumChecked(false);\r\n        }\r\n        const set = require(\"set-value\");\r\n        set(convertedSchema, path, tempUISchema)\r\n        // update the required value\r\n        const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_key, convertedSchema })\r\n        // update enum\r\n        if ([\"string\", \"integer\", \"number\"].includes(tempUISchema[\"type\"]) & enumChecked) {\r\n            let newList = enumList\r\n\r\n            switch (tempUISchema[\"type\"]) {\r\n                case 'string':\r\n                    if (Array.isArray(newList)) {\r\n                        set(newConvertedSchema, path + \".enumerate\", newList)\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                    }\r\n                case 'integer':\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseInt(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    }\r\n                case 'number':\r\n                    if (Array.isArray(newList)) {\r\n                        let parsed = newList.map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    } else {\r\n                        newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                        let parsed = newList.split(\",\").map(function (item) {\r\n                            return parseFloat(item, 10);\r\n                        })\r\n                        set(newConvertedSchema, path + \".enumerate\", parsed.filter(x => x.toString() !== \"NaN\"))\r\n                    }\r\n            }\r\n        }\r\n        // update main component\r\n        updateParent(newConvertedSchema)\r\n        setOpenDialog(false)\r\n\r\n        //* update form data if fieldkey change\r\n        // update pathFormData with new fieldkey\r\n        updateFormDataId(field_key, fieldkey, pathFormData, defaultValue)\r\n\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'type':\r\n                return setSelectedType(event.target.value)\r\n            case 'title':\r\n                return setTitle(event.target.value)\r\n            case 'description':\r\n                return setDescription(event.target.value)\r\n            case 'fieldkey':\r\n                return setFieldKey(event.target.value.replace(/ /g, \"_\"))\r\n            case 'defaultValue':\r\n                return setDefValue(event.target.value)\r\n            case '$id':\r\n                return setFieldUri(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        tempUISchema = JSON.parse(JSON.stringify(UISchema))\r\n        setOpenDialog(false)\r\n        setEnumList(field_enumerate)\r\n        setDefValue(defaultValue)\r\n        setSelectedType(UISchema[\"type\"])\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleCheckBoxOnChange = () => {\r\n        setRequiredChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleEnumBoxOnChange = () => {\r\n        setEnumChecked(prev => !prev)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {notImplemented ?\r\n                <Dialog\r\n                    open={openDialog}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">\r\n                        <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                            <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                                Edit \"{tempUISchema[\"title\"]}\"\r\n                            </div>\r\n                            <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        We are sorry! Editing feature for the \"{UISchema[\"type\"]}\" type/keyword is not yet implemented.\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button disabled onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                :\r\n                <Dialog\r\n                    open={openDialog}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">\r\n                        <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                            <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                            <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                                Edit \"{tempUISchema[\"title\"]}\"\r\n                            </div>\r\n                            <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                            <div>\r\n                                <FormControl component=\"widget-type\">\r\n                                    <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                                    <TextField margin=\"normal\" required onChange={event => handleChangeUISchema(event, \"fieldKey\")} style={{ marginTop: \"20px\" }} defaultValue={field_key} variant=\"outlined\" fullWidth={true} label={\"Field Key\"} helperText='A unique json key for this field. Usually short and no spaces (use \"_\" instead). Spaces are replaced automatically with \"_\" upon saving.' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"$id\")} style={{ marginTop: \"10px\" }} defaultValue={field_uri} variant=\"outlined\" fullWidth={true} label={\"Field ID/URI\"} helperText='ID or URI for this field if available.' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"title\"]} variant=\"outlined\" fullWidth={true} label={\"Field Title\"} helperText='Label or title of the field. For a field that requires a unit, the unit can be placed within a square bracket, e,g., \"Chamber Pressure [Pa]\".' />\r\n                                    <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"description\"]} variant=\"outlined\" fullWidth={true} label={\"Field Description\"} multiline rows={3} helperText='A detailed description of the field, how the input should be formated, etc.' />\r\n                                    <TextField\r\n                                        margin=\"normal\"\r\n                                        helperText='Data type of the field input.'\r\n                                        onChange={event => handleChangeUISchema(event, \"type\")}\r\n                                        style={{ marginTop: \"10px\" }}\r\n                                        defaultValue={tempUISchema[\"type\"]}\r\n                                        select\r\n                                        fullWidth={true}\r\n                                        id={field_key}\r\n                                        label={\"Field Data Type\"}\r\n                                        variant=\"outlined\"\r\n                                        SelectProps={{\r\n                                            native: true,\r\n                                        }}\r\n                                    >\r\n                                        {datatypes.map((content, index) => (\r\n                                            <option key={index} value={content}>\r\n                                                {content}\r\n                                            </option>\r\n                                        ))}\r\n                                    </TextField>\r\n                                    {[\"string\", \"integer\", \"number\"].includes(selectedType) ?\r\n                                        <>\r\n                                            <FormControlLabel control={<Checkbox onChange={() => handleEnumBoxOnChange()} checked={enumChecked} />} label=\"Enumerated. Choose from an available list of inputs.\" />\r\n                                            <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\r\n                                                {enumChecked ? <TextField defaultValue={enumList !== undefined ? enumList : \"\"} onChange={handleOnChangeListField} variant=\"outlined\" fullWidth={true} label=\"Enumerate List\" multiline rows={4} helperText=\"A list of inputs separated by commas, e,g.: item 1, item 2, item 3. Make sure that the item data type matches the field input data type. Invalid items will be not saved.\" /> : null}\r\n                                            </div>\r\n                                        </> : null}\r\n                                </FormControl>\r\n                                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\" }}>\r\n                                    <FormControl component=\"validation-related\">\r\n                                        <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Validation Related:</FormLabel>\r\n                                    </FormControl>\r\n                                    <FormGroup>\r\n                                        {selectedType === \"array\" ?\r\n                                            <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                            : null}\r\n                                        {selectedType !== \"object\" & selectedType !== \"array\" & selectedType !== \"boolean\" ?\r\n                                            <>\r\n                                                <FormControlLabel control={<Checkbox onChange={() => handleCheckBoxOnChange()} checked={requiredChecked} />} label=\"Required. Checked means the field must be filled.\" />\r\n                                                <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"defaultValue\")} style={{ marginTop: \"10px\" }} defaultValue={defaultValue} variant=\"outlined\" fullWidth={true} label={\"Field Default Value\"} helperText=\"Initial value of the field.\" />\r\n                                            </>\r\n                                            : null}\r\n                                        {selectedType === \"boolean\" ?\r\n                                            <>\r\n                                                <TextField\r\n                                                    margin='normal'\r\n                                                    onChange={event => handleChangeUISchema(event, \"defaultValue\")}\r\n                                                    style={{ marginTop: \"20px\" }}\r\n                                                    defaultValue={defaultValue !== undefined ? defaultValue : \"\"}\r\n                                                    select\r\n                                                    fullWidth={true}\r\n                                                    id={field_key}\r\n                                                    label={\"Boolean Field Default Value\"}\r\n                                                    variant=\"outlined\"\r\n                                                    SelectProps={{\r\n                                                        native: true,\r\n                                                    }}\r\n                                                >\r\n                                                    {[\"\", \"true\", \"false\"].map((content, index) => (\r\n                                                        <option key={index} value={content}>\r\n                                                            {content}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </TextField>\r\n                                            </>\r\n                                            : null}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditElement;","import getValue from \"./getValue\";\r\n\r\n// delete key and value given path\r\nconst deleteKey = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    let newPath = path.split('.')\r\n    newPath.pop()\r\n    newPath = newPath.join('.')\r\n    const elementValue = getValue(jsonData, newPath);\r\n\r\n    if (Array.isArray(elementValue)) {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        elementValue.splice(parseInt(deleteIndex), 1)\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    } else {\r\n        let deleteIndex = path.split('.')\r\n        deleteIndex = deleteIndex.at(-1)\r\n\r\n        delete elementValue[deleteIndex]\r\n\r\n        const set = require(\"set-value\")\r\n\r\n        set(jsonData, newPath, elementValue)\r\n\r\n        return jsonData;\r\n    }\r\n\r\n};\r\n\r\nexport default deleteKey;","import React, { useContext, useEffect, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst StringType = ({ withinObject, field_uri, dataInputItems, setDataInputItems, withinArray, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate, defaultValue, value }) => {\r\n\r\n\r\n    //const [descriptionText, setDescriptionText] = useState(field_description);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [fieldValue, setFieldValue] = useState(defaultValue !== undefined ? defaultValue : value !== undefined ? value : \"\")\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    const handleOnChange = (event) => {\r\n        setFieldValue(event.target.value)\r\n    }\r\n\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"string\",\r\n        \"value\": value,\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle on blur\r\n    const handleOnBlur = (event, pathFormData, type) => {\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_key] = event.target.value;\r\n            setDataInputItems(items);\r\n\r\n            // store to the main form data\r\n            let value = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        items\r\n                }\r\n            }\r\n            handleDataInput(value, newPathFormData, \"string\")\r\n            // conv. schema data\r\n            handleConvertedDataInput(value, newPath + \".value\", \"string\")\r\n            handleConvertedDataInput(event, newPath + \".prevValue\", \"string\")\r\n\r\n            // update field value\r\n            setFieldValue(event.target.value)\r\n        } else {\r\n            handleDataInput(event, pathFormData, type)\r\n            // conv. schema data\r\n            handleConvertedDataInput(event, path + \".value\", \"string\")\r\n            handleConvertedDataInput(event, path + \".prevValue\", \"string\")\r\n            // update field value\r\n            setFieldValue(event.target.value)\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            if (val === \"\") {\r\n                setFieldValue(\"\")\r\n            } else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setFieldValue(val)\r\n                }\r\n                else {\r\n                    setDataInputItems(items);\r\n\r\n                    // store to the main form data\r\n                    let event = {\r\n                        \"target\": {\r\n                            \"value\":\r\n                                items\r\n                        }\r\n                    }\r\n                    handleDataInput(event, newPathFormData, \"string\")\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(event, newPath + \".value\", \"string\")\r\n                    handleConvertedDataInput(event, newPath + \".prevValue\", \"string\")\r\n                    // update field value\r\n                    setFieldValue(val)\r\n                }\r\n            }\r\n        } else {\r\n            //let latestVal = getValue(convertedSchema, path + \".prevValue\")\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            let event = {\r\n                \"target\": {\r\n                    \"value\":\r\n                        val\r\n                }\r\n            }\r\n\r\n            if (val === \"\") {\r\n                setFieldValue(val)\r\n            } else {\r\n                handleDataInput(event, pathFormData, \"string\")\r\n                // conv. schema data\r\n                handleConvertedDataInput(event, path + \".value\", \"string\")\r\n                handleConvertedDataInput(event, path + \".prevValue\", \"string\")\r\n                // update field value\r\n                setFieldValue(val)\r\n            }\r\n        }\r\n\r\n    }, [value])\r\n\r\n    if (field_enumerate === undefined) {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField\r\n                        multiline\r\n                        onKeyDown={(e) => {\r\n                            if (e.key === \"Enter\" && !(e.shiftKey)) {\r\n                                e.preventDefault();\r\n                                //setFieldValue(e.target.value);\r\n                            }\r\n                        }}\r\n                        onBlur={(event) => handleOnBlur(event, pathFormData, \"string\")} required={required} helperText={field_description} onChange={(event) => { handleOnChange(event) }} value={fieldValue} fullWidth={true} className={classes.heading} id={field_key} label={field_label} variant=\"outlined\" />\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} defaultValue={defaultValue} enumerated={enumerated} field_enumerate={field_enumerate} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    < TextField\r\n                        onBlur={(event) => handleOnBlur(event, pathFormData, \"string\")}\r\n                        onChange={event => handleOnChange(event)}\r\n                        required={required}\r\n                        select\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_key}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }\r\n                        }\r\n                        helperText={field_description}\r\n                        value={fieldValue === undefined ? defaultValue : fieldValue}\r\n                    >\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField >\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div >\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} enumerated={enumerated} defaultValue={defaultValue} field_enumerate={field_enumerate} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default StringType;\r\n","const getUnit = (field_label) => {\r\n\r\n    if (field_label === undefined) {\r\n        return \"\"\r\n    }\r\n\r\n    let addorn = field_label.match(/[^[\\]]+(?=])/g)\r\n    if (addorn === null) {\r\n        return \"\"\r\n    } else {\r\n        return addorn\r\n    }\r\n}\r\n\r\nexport default getUnit;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { InputAdornment } from '@material-ui/core';\r\nimport getUnit from '../utils/getUnit';\r\nimport { MathComponent } from 'mathjax-react'\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst NumberType = ({ field_uri, value, dataInputItems, setDataInputItems, withinArray, withinObject, path, pathFormData, defaultValue, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate }) => {\r\n    const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue !== undefined & value === undefined ? defaultValue : value === undefined ? \"\" : value)//useState(defaultValue !== undefined ? defaultValue : value)\r\n    const [inputError, setInputError] = useState(false)\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"number\",\r\n        \"value\": value,\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        setInputError(false)\r\n        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n\r\n        setInputError(false)\r\n        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_key] = value;\r\n                setDataInputItems(items);\r\n\r\n                // store to the main form data\r\n                handleDataInput(items, newPathFormData, \"number\")\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, newPath + \".value\", \"number\")\r\n                handleConvertedDataInput(items, newPath + \".prevValue\", \"number\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                handleDataInput(parseFloat(inputValue), pathFormData, \"number\")\r\n                // conv. schema data\r\n                handleConvertedDataInput(parseFloat(inputValue), path + \".value\", \"number\")\r\n                handleConvertedDataInput(parseFloat(inputValue), path + \".prevValue\", \"number\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"number\") {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setInputValue(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    // store to the main form data\r\n                    let event = {\r\n                        \"target\": {\r\n                            \"value\":\r\n                                items\r\n                        }\r\n                    }\r\n                    handleDataInput(event, newPathFormData, \"number\")\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(val, newPath + \".value\", \"number\")\r\n                    handleConvertedDataInput(val, newPath + \".prevValue\", \"number\")\r\n                    // update field value\r\n                    setInputValue(val)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            //let latestVal = getValue(convertedSchema, path + \".prevValue\")\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n\r\n            // check if input is of type number\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"number\") {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a number type.\")\r\n            } else {\r\n                handleDataInput(val, pathFormData, \"number\")\r\n                // conv. schema data\r\n                handleConvertedDataInput(val, path + \".value\", \"number\")\r\n                handleConvertedDataInput(val, path + \".prevValue\", \"number\")\r\n                // update field value\r\n                setInputValue(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onFocus={() => {\r\n                        if (inputError === true) {\r\n                            setInputValue(\"\")\r\n                            // then delete the value the convertedSchema\r\n                            let value = { ...convertedSchema }\r\n                            if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                value = deleteKey(value, path + \".value\")\r\n                                updateParent(value)\r\n                            } else {\r\n                                let newPath = path.split(\".\")\r\n                                newPath.pop()\r\n                                newPath = newPath.join(\".\")\r\n                                value = deleteKey(value, newPath + \".value\")\r\n                                updateParent(value)\r\n                            }\r\n                        }\r\n                    }} error={inputError} onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} helperText={field_description} fullWidth={true} className={classes.heading} id={field_key} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                    }} helperText={descriptionText} />\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div onMouseEnter={() => {\r\n                    if (inputValue !== undefined & inputValue !== \"\") {\r\n                        setInputError(false)\r\n                        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n                    }\r\n                }} style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField\r\n                        onFocus={() => {\r\n                            if (inputError === true) {\r\n                                setInputValue(\"\")\r\n                                // then delete the value the convertedSchema\r\n                                let value = { ...convertedSchema }\r\n                                if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                    value = deleteKey(value, path + \".value\")\r\n                                    updateParent(value)\r\n                                } else {\r\n                                    let newPath = path.split(\".\")\r\n                                    newPath.pop()\r\n                                    newPath = newPath.join(\".\")\r\n                                    value = deleteKey(value, newPath + \".value\")\r\n                                    updateParent(value)\r\n                                }\r\n                            }\r\n                        }}\r\n                        error={inputError}\r\n                        helperText={descriptionText}\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        helperText={field_description}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_key}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default NumberType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport updateRequired from './utils/updateRequired';\r\nimport getValue from './utils/getValue';\r\nimport checkIfFieldIDExist from './utils/checkIfFieldIDExist';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst AddElement = ({ enumerated, field_enumerate, field_required, defaultSchema, path, openDialog, setOpenDialog, UISchema, schemaTitle }) => {\r\n\r\n    const [selectedType, setSelectedType] = useState(\"string\")\r\n    const [fieldUri, setFieldUri] = useState(undefined)\r\n    const [fieldkey, setFieldKey] = useState(undefined)\r\n    const [title, setTitle] = useState(undefined)\r\n    const [description, setDescription] = useState(undefined)\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n    const [requiredChecked, setRequiredChecked] = useState(field_required === undefined ? false : field_required)\r\n    const [enumChecked, setEnumChecked] = useState(enumerated === undefined ? false : enumerated)\r\n    const [enumList, setEnumList] = useState(field_enumerate === undefined ? [] : field_enumerate.join(\",\"));\r\n\r\n    let tempUISchema = JSON.parse(JSON.stringify(defaultSchema))\r\n\r\n\r\n    const datatypes = [\"string\", \"number\", \"integer\", \"object\", \"array\", \"boolean\"]\r\n\r\n\r\n    const handleOnChangeListField = (event) => {\r\n        setEnumList(event.target.value);\r\n    }\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n        // check if fieldkey already exist\r\n        if (checkIfFieldIDExist(convertedSchema, path, fieldkey)) {\r\n            alert(\"Field ID already exists!\")\r\n            return\r\n        }\r\n\r\n        tempUISchema[\"fieldKey\"] = fieldkey;\r\n        if (fieldUri !== undefined) {\r\n            if (fieldUri.toString().replace(/\\s+/g, '') !== \"\") {\r\n                tempUISchema[\"$id\"] = fieldUri\r\n            }\r\n        }\r\n        tempUISchema[\"type\"] = selectedType;\r\n        if (title !== undefined) { tempUISchema[\"title\"] = title }\r\n        if (description !== undefined) { tempUISchema[\"description\"] = description }\r\n\r\n        if (fieldkey === undefined) {\r\n            alert(\"Field ID must be defined!\")\r\n            return\r\n        }\r\n\r\n        if (typeof (fieldkey) === \"string\" & fieldkey.replace(/\\s+/g, '') === \"\") {\r\n            alert(\"Field ID must be defined!\")\r\n            return\r\n        }\r\n\r\n        if (tempUISchema[\"type\"] === \"object\") {\r\n            tempUISchema[\"properties\"] = []\r\n        }\r\n        if (tempUISchema[\"type\"] === \"array\") {\r\n            tempUISchema[\"items\"] = {}\r\n        }\r\n        if (tempUISchema[\"type\"] !== \"string\") {\r\n            setEnumChecked(false);\r\n        }\r\n\r\n        if (path !== undefined) {\r\n            const set = require(\"set-value\");\r\n\r\n            let properties = getValue(convertedSchema, path)[\"properties\"]\r\n            properties.push(tempUISchema)\r\n            set(convertedSchema, path + \".properties\", properties)\r\n\r\n            // create a new path to the new element\r\n            path = path + \".properties.\" + (properties.length - 1).toString()\r\n            let field_key = fieldkey\r\n            // update the required value\r\n            const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_key, convertedSchema })\r\n            // update enum\r\n            if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                let newList = enumList\r\n                if (Array.isArray(newList)) {\r\n                    set(newConvertedSchema, path + \".enumerate\", newList)\r\n                } else {\r\n                    newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                    set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                }\r\n\r\n            }\r\n\r\n            updateParent(newConvertedSchema)\r\n            setOpenDialog(false)\r\n        } else {\r\n            const set = require(\"set-value\");\r\n            let properties = convertedSchema[\"properties\"]\r\n            properties.push(tempUISchema)\r\n            convertedSchema[\"properties\"] = properties\r\n\r\n            // create a new path to the new element\r\n            path = \"properties.\" + (properties.length - 1).toString()\r\n            let field_key = fieldkey\r\n            // update the required value\r\n            const newConvertedSchema = updateRequired({ selectedType, path, requiredChecked, field_key, convertedSchema })\r\n            // update enum\r\n            if (tempUISchema[\"type\"] === \"string\" & enumChecked) {\r\n                let newList = enumList\r\n                if (Array.isArray(newList)) {\r\n                    set(newConvertedSchema, path + \".enumerate\", newList)\r\n                } else {\r\n                    newList = newList.replace(/\\s*,\\s*/g, \",\")\r\n                    set(newConvertedSchema, path + \".enumerate\", newList.split(\",\"))\r\n                }\r\n\r\n            }\r\n\r\n            updateParent(newConvertedSchema)\r\n            setOpenDialog(false)\r\n        }\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'type':\r\n                return setSelectedType(event.target.value)\r\n            case 'title':\r\n                return setTitle(event.target.value)\r\n            case 'description':\r\n                return setDescription(event.target.value)\r\n            case 'fieldkey':\r\n                return setFieldKey(event.target.value)\r\n            case '$id':\r\n                return setFieldUri(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        tempUISchema = JSON.parse(JSON.stringify(defaultSchema))\r\n        setOpenDialog(false)\r\n        setEnumList(field_enumerate)\r\n        setSelectedType(\"string\")\r\n    }\r\n\r\n    // handle field id on change\r\n    const handleOnBlurFieldId = (event) => {\r\n        setFieldKey(event.target.value)\r\n        tempUISchema[\"fieldKey\"] = event.target.value\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleCheckBoxOnChange = () => {\r\n        setRequiredChecked(prev => !prev)\r\n    }\r\n\r\n    // handle change required check box\r\n    const handleEnumBoxOnChange = () => {\r\n        setEnumChecked(prev => !prev)\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <AddIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Add Element in \"{UISchema !== undefined ? UISchema[\"title\"] : schemaTitle}\"\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                            <TextField inputProps={{ maxLength: 12 }} required onBlur={event => handleOnBlurFieldId(event)} onChange={event => handleChangeUISchema(event, \"fieldKey\")} style={{ marginTop: \"20px\" }} defaultValue={tempUISchema[\"fieldKey\"]} variant=\"outlined\" fullWidth={true} label={\"Field Key\"} helperText='A unique json key for this field. Usually short and no spaces (use \"_\" instead). Spaces are replaced automatically with \"_\" upon saving.' />\r\n                            <TextField margin=\"normal\" onChange={event => handleChangeUISchema(event, \"$id\")} style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Field ID/URI\"} helperText='ID or URI for this field if available.' />\r\n                            <TextField onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"title\"]} variant=\"outlined\" fullWidth={true} label={\"Field Title\"} helperText='Label or title of the field. For a field that requires a unit, the unit can be placed within a square bracket, e,g., \"Chamber Pressure [Pa]\".' />\r\n                            <TextField onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={tempUISchema[\"description\"]} variant=\"outlined\" fullWidth={true} label={\"Field Description\"} multiline rows={3} helperText='A detailed description of the field, how the input should be formated, etc.' />\r\n                            <TextField\r\n                                onChange={event => handleChangeUISchema(event, \"type\")}\r\n                                style={{ marginTop: \"10px\" }}\r\n                                defaultValue={selectedType}\r\n                                helperText='Data type of the field input.'\r\n                                select\r\n                                fullWidth={true}\r\n                                label={\"Field Data Type\"}\r\n                                variant=\"outlined\"\r\n                                SelectProps={{\r\n                                    native: true,\r\n                                }}\r\n                            >\r\n                                {datatypes.map((content, index) => (\r\n                                    <option key={index} value={content}>\r\n                                        {content}\r\n                                    </option>\r\n                                ))}\r\n                            </TextField>\r\n                            {selectedType === \"string\" ?\r\n                                <>\r\n                                    <FormControlLabel control={<Checkbox onChange={() => handleEnumBoxOnChange()} checked={enumChecked} />} label=\"Enumerated\" />\r\n                                    <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\r\n                                        {enumChecked ? <TextField defaultValue={enumList !== undefined ? enumList : \"\"} onChange={handleOnChangeListField} variant=\"outlined\" fullWidth={true} label=\"Enumerate List\" multiline rows={4} /> : null}\r\n                                    </div>\r\n                                </> : null}\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                    ADD\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default AddElement;","import React, { useState, useContext } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"../ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\n//import Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport AddElement from \"../AddElement\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport getValue from \"../utils/getValue\";\r\nimport set from \"set-value\";\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst Accordion = withStyles({\r\n    root: {\r\n        border: '1px solid rgba(232, 244, 253, 1)',\r\n        '&:not(:last-child)': {\r\n            borderBottom: 0,\r\n        },\r\n        boxShadow: \"none\",\r\n        '&:before': {\r\n            display: 'none',\r\n        },\r\n        '&$expanded': {\r\n            margin: 'auto',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordion);\r\n\r\nconst AccordionSummary = withStyles({\r\n    root: {\r\n        backgroundColor: 'rgba(232, 244, 253, 1)',\r\n        borderBottom: '1px solid rgba(0, 0, 0, .0)',\r\n        marginBottom: -1,\r\n        minHeight: 56,\r\n        '&$expanded': {\r\n            minHeight: 56,\r\n        },\r\n    },\r\n    content: {\r\n        '&$expanded': {\r\n            margin: '12px 0',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst ObjectType = ({ dataInputItems, setDataInputItems, withinArray, withinObject, field_uri, path, pathSchema, pathFormData, field_required, field_key, field_index, edit, field_label, field_description, field_properties }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [expand, setExpand] = useState(true)// set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema, handleDataDelete } = useContext(FormContext);\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(field_properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        const set = require(\"set-value\");\r\n        let value = { ...convertedSchema }\r\n        set(convertedSchema, path + \".properties\", items)\r\n        updateParent(value);\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"properties\": field_properties,\r\n        \"$id\": field_uri,\r\n        \"type\": \"object\"\r\n    }\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={\r\n                        <Tooltip placement=\"top\" title={`Collapse/Expand this container\"`}>\r\n                            <ExpandMoreIcon />\r\n                        </Tooltip>}\r\n                    style={{ height: \"auto\" }}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography className={classes.heading}>{field_label}</Typography>\r\n                            {expand ? <div style={{ color: \"gray\" }}>\r\n                                {field_description}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit \"${field_label}\"`}>\r\n                                <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove \"${field_label}\"`}>\r\n                                <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(field_properties).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={!edit} key={field_properties[item][\"fieldKey\"]} draggableId={field_properties[item][\"fieldKey\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <Tooltip placement=\"top\" title={`Drag & drop to adjust the order of this field`}>\r\n                                                                    <DragHandleIcon fontSize=\"small\" />\r\n                                                                </Tooltip>\r\n                                                            </div> : null}\r\n                                                            <ElementRenderer withinArray={withinArray} withinObject={withinObject} path={path + \".properties\"} pathSchema={pathSchema + \".properties\"} pathFormData={pathFormData} fieldkey={field_properties[item][\"fieldKey\"]} fieldIndex={item} elementRequired={field_required} edit={edit} field={field_properties[item]} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <Tooltip placement=\"top\" title={`Add a new field to \"${field_label}\"`}>\r\n                                            <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                                        </Tooltip>\r\n                                    </div> : null}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} /> : null}\r\n        {openDialogAddElement ? <AddElement openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} path={path} defaultSchema={defaultSchema} UISchema={UISchema} /> : null}\r\n    </>);\r\n};\r\n\r\nexport default ObjectType;","import React, { useContext, useState, useEffect } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport getUnit from '../utils/getUnit';\r\nimport { InputAdornment } from '@material-ui/core';\r\nimport { MathComponent } from 'mathjax-react'\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst IntegerType = ({ field_uri, value, dataInputItems, setDataInputItems, withinArray, withinObject, defaultValue, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate }) => {\r\n    const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(defaultValue !== undefined & value === undefined ? defaultValue : value === undefined ? \"\" : value)// useState(defaultValue !== undefined ? defaultValue : value);\r\n    const [inputError, setInputError] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    let unit = getUnit(field_label)\r\n    if (unit[0] === '%') {\r\n        unit = \"\\\\\" + unit\r\n    }\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    var enumerated\r\n    if (field_enumerate === undefined) {\r\n        enumerated = false;\r\n    } else {\r\n        enumerated = true;\r\n    }\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"integer\",\r\n        \"value\": value\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar\r\n        if (inputValue === undefined) {\r\n            inputValueVar = \"\"\r\n        } else {\r\n            inputValueVar = inputValue\r\n        }\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            value = value.replace(/ /g, '')\r\n            setInputValue(value)\r\n\r\n            if (value.toString().length - event.target.value.length !== 0) {\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            } else {\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        setInputError(false)\r\n        setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n        if (withinArray !== undefined & withinArray) {\r\n\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                let newPathFormData = pathFormData.split(\".\");\r\n                newPathFormData.pop()\r\n                newPathFormData = newPathFormData.join(\".\")\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[field_index][field_key] = value;\r\n                setDataInputItems(items);\r\n\r\n                // store to the main form data\r\n                handleDataInput(items, newPathFormData, \"integer\")\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, newPath + \".value\", \"integer\")\r\n                handleConvertedDataInput(items, newPath + \".prevValue\", \"integer\")\r\n            }\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n                // store in jData\r\n                handleDataInput(parseInt(inputValue), pathFormData, \"integer\")\r\n                // conv. schema data\r\n                handleConvertedDataInput(parseInt(inputValue), path + \".value\", \"integer\")\r\n                handleConvertedDataInput(parseInt(inputValue), path + \".prevValue\", \"integer\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (!Number.isInteger(val)) {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setInputValue(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    // store to the main form data\r\n                    let event = {\r\n                        \"target\": {\r\n                            \"value\":\r\n                                items\r\n                        }\r\n                    }\r\n                    handleDataInput(event, newPathFormData, \"integer\")\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(val, newPath + \".value\", \"integer\")\r\n                    handleConvertedDataInput(val, newPath + \".prevValue\", \"integer\")\r\n                    // update field value\r\n                    setInputValue(val)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            //let latestVal = getValue(convertedSchema, path + \".prevValue\")\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : field_enumerate !== undefined ? field_enumerate[0] : \"\")\r\n\r\n            // check if input is of type number\r\n            if (val === \"\") {\r\n                setInputValue(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (!Number.isInteger(val)) {\r\n                setInputValue(val)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of an integer type.\")\r\n            } else {\r\n                handleDataInput(val, pathFormData, \"integer\")\r\n                // conv. schema data\r\n                handleConvertedDataInput(val, path + \".value\", \"integer\")\r\n                handleConvertedDataInput(val, path + \".prevValue\", \"integer\")\r\n                // update field value\r\n                setInputValue(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    if (field_enumerate === undefined) {\r\n\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField onFocus={() => {\r\n                        if (inputError === true) {\r\n                            setInputValue(\"\")\r\n                            // then delete the value the convertedSchema\r\n                            let value = { ...convertedSchema }\r\n                            if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                value = deleteKey(value, path + \".value\")\r\n                                updateParent(value)\r\n                            } else {\r\n                                let newPath = path.split(\".\")\r\n                                newPath.pop()\r\n                                newPath = newPath.join(\".\")\r\n                                value = deleteKey(value, newPath + \".value\")\r\n                                updateParent(value)\r\n                            }\r\n                        }\r\n                    }} error={inputError} onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue === undefined ? defaultValue : inputValue} required={required} helperText={field_description} fullWidth={true} className={classes.heading} id={field_key} label={field_label} variant=\"outlined\" InputProps={{\r\n                        endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                    }} helperText={descriptionText} />\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                    <TextField\r\n                        onFocus={() => {\r\n                            if (inputError === true) {\r\n                                setInputValue(\"\")\r\n                                // then delete the value the convertedSchema\r\n                                let value = { ...convertedSchema }\r\n                                if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                                    value = deleteKey(value, path + \".value\")\r\n                                    updateParent(value)\r\n                                } else {\r\n                                    let newPath = path.split(\".\")\r\n                                    newPath.pop()\r\n                                    newPath = newPath.join(\".\")\r\n                                    value = deleteKey(value, newPath + \".value\")\r\n                                    updateParent(value)\r\n                                }\r\n                            }\r\n                        }}\r\n                        error={inputError}\r\n                        helperText={descriptionText}\r\n                        select\r\n                        onBlur={() => handleInputOnBlur()}\r\n                        onChange={e => handleInputOnChange(e)}\r\n                        value={inputValue === undefined ? defaultValue : inputValue}\r\n                        required={required}\r\n                        helperText={field_description}\r\n                        fullWidth={true}\r\n                        className={classes.heading}\r\n                        id={field_key}\r\n                        label={field_label}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"start\">{<MathComponent tex={String.raw`\\\\${unit}`} />}</InputAdornment>,\r\n                        }}\r\n                        SelectProps={{\r\n                            native: true,\r\n                        }}>\r\n                        {\r\n                            field_enumerate.map((content, index) => (\r\n                                <option key={index} value={content}>\r\n                                    {content}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </TextField>\r\n                    {edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null}\r\n                </div>\r\n                {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_enumerate={field_enumerate} enumerated={enumerated} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default IntegerType;\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport { Checkbox, FormLabel, FormHelperText, FormControl } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst BooleanType = ({ field_uri, withinArray, withinObject, value, dataInputItems, setDataInputItems, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, defaultValue }) => {\r\n    const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputValue, setInputValue] = useState(value !== undefined ? value : typeof (defaultValue) === \"boolean\" ? defaultValue : false);\r\n    const [inputError, setInputError] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"boolean\",\r\n        \"value\": value\r\n    }\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // handle input on change for checkbox (boolean type: checked is true unchecked is false)\r\n    const handleInputOnChange = () => {\r\n        let value = inputValue\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_key] = !value;\r\n            setDataInputItems(items);\r\n\r\n            setInputValue(!value)\r\n            handleDataInput(items, newPathFormData, \"boolean\")\r\n            handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n            handleConvertedDataInput(items, newPath + \".prevValue\", \"boolean\")\r\n\r\n        } else {\r\n            setInputValue(!value)\r\n            handleDataInput(!value, pathFormData, \"boolean\")\r\n            handleConvertedDataInput(!value, path + \".value\", \"boolean\")\r\n            handleConvertedDataInput(!value, path + \".prevValue\", \"boolean\")\r\n        }\r\n    }\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            //let latestVal = getValue(convertedSchema, newPath + \".prevValue\")\r\n            //if (Array.isArray(latestVal)) { latestVal = latestVal[field_key] }\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(false)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"boolean\") {\r\n                setInputValue(false)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a boolean type.\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setInputValue(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    setInputValue(val)\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    handleDataInput(items, newPathFormData, \"boolean\")\r\n                    handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n                    handleConvertedDataInput(items, newPath + \".prevValue\", \"boolean\")\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            //let latestVal = getValue(convertedSchema, path + \".prevValue\")\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : \"\")\r\n            if (val === \"\") {\r\n                setInputValue(false)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else if (typeof (val) !== \"boolean\") {\r\n                setInputValue(false)\r\n                setInputError(true)\r\n                setDescriptionText(\"Invalid input type. This field only accepts input of a boolean type.\")\r\n            }\r\n            else {\r\n                setInputValue(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                handleDataInput(val, pathFormData, \"boolean\")\r\n                handleConvertedDataInput(val, path + \".value\", \"boolean\")\r\n                handleConvertedDataInput(val, path + \".prevValue\", \"boolean\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div onMouseLeave={() => {\r\n                if (inputError === true) {\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    // then delete the value the convertedSchema\r\n                    let value = { ...convertedSchema }\r\n                    if (withinArray === undefined | (withinArray !== undefined & withinArray === true)) {\r\n                        value = deleteKey(value, path + \".value\")\r\n                        updateParent(value)\r\n                    } else {\r\n                        let newPath = path.split(\".\")\r\n                        newPath.pop()\r\n                        newPath = newPath.join(\".\")\r\n                        value = deleteKey(value, newPath + \".value\")\r\n                        updateParent(value)\r\n                    }\r\n                }\r\n            }} style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', alignItems: \"center\", width: '100%' }}>\r\n                <div style={{ paddingLeft: \"15px\", width: \"100%\" }}>\r\n                    <FormControl >\r\n                        <FormLabel style={{ color: `${inputError ? \"red\" : \"\"}` }}>{field_label === undefined ? \"\" : field_label + \":\"}</FormLabel>\r\n                        <div style={{ textAlign: \"center\", width: \"100%\" }}>\r\n                            <Checkbox onChange={() => handleInputOnChange()} checked={inputValue} />\r\n                        </div>\r\n                        <FormHelperText style={{ color: `${inputError ? \"red\" : \"\"}` }}>{descriptionText}</FormHelperText>\r\n                    </FormControl>\r\n                </div>\r\n                {edit ? <>\r\n                    <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                        <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                            <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                        <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                            <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </> : null}\r\n            </div>\r\n            {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default BooleanType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemIntegerType = ({ oDataInputItems, oSetDataInputItems, arrayFieldKey, withinObject, value, path, pathFormData, dataInputItems, setDataInputItems, edit, index, field_key, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const [inputValue, setInputValue] = useState(value === undefined ? \"\" : value[index] === undefined ? \"\" : value[index]);\r\n    const { handleDataInput, handleConvertedDataInput } = useContext(FormContext);\r\n\r\n    // handle input on change for signed integer\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n\r\n        inputValueVar = inputValueVar.toString()\r\n        if (event.target.value === \".\") {\r\n            return\r\n        }\r\n        if ((event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9]/g, \"\")\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        if (withinObject !== undefined & withinObject === true) {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n\r\n                let arr = dataInputItems;\r\n                let arr2 = oDataInputItems\r\n                let items = Array.from(arr);\r\n                let items2 = Array.from(arr2);\r\n\r\n                let prevIndex = parseInt(path.split(\".\").pop())\r\n                items[index] = value;\r\n                items2[prevIndex][arrayFieldKey] = items\r\n                oSetDataInputItems(items2);\r\n\r\n                setInputValue(value)\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                // store to form data\r\n                //handleDataInput(items, pathFormData, \"array\")\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n            }\r\n\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseInt(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n\r\n                // store it to input data array\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[index] = value;\r\n                setDataInputItems(items);\r\n\r\n                // store to the main form data\r\n                handleDataInput(items, pathFormData, \"array\")\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, path + \".value\", \"array\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_key} variant=\"outlined\" />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemIntegerType;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemNumberType = ({ oDataInputItems, oSetDataInputItems, arrayFieldKey, withinObject, value, pathFormData, dataInputItems, setDataInputItems, path, field_type, edit, index, field_key, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const [inputValue, setInputValue] = useState(value === undefined ? \"\" : value[index] === undefined ? \"\" : value[index]);\r\n    const { handleDataInput, handleConvertedDataInput } = useContext(FormContext);\r\n\r\n\r\n    // handle input on change for number a.k.a signed float\r\n    const handleInputOnChange = (event) => {\r\n        let inputValueVar = inputValue\r\n        inputValueVar = inputValueVar.toString()\r\n        if (((inputValueVar.split('.').length - 1) > 1) & (event.target.value.at(-1) === '.')) {\r\n            let value = inputValueVar\r\n            setInputValue(value.replace(/ /g, ''))\r\n        } else {\r\n            let value = event.target.value.replace(/(?!^-)[^0-9.]/g, \"\").replace(/(\\..*)\\./g, '$1')\r\n            setInputValue(value.replace(/ /g, ''))\r\n        }\r\n    }\r\n\r\n    // handle input on blur for signed integer\r\n    const handleInputOnBlur = () => {\r\n        if (withinObject !== undefined & withinObject === true) {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n\r\n                let arr = dataInputItems;\r\n                let arr2 = oDataInputItems\r\n                let items = Array.from(arr);\r\n                let items2 = Array.from(arr2);\r\n\r\n                let prevIndex = parseInt(path.split(\".\").pop())\r\n                items[index] = value;\r\n                items2[prevIndex][arrayFieldKey] = items\r\n                oSetDataInputItems(items2);\r\n\r\n                setInputValue(value)\r\n\r\n                let newPath = path.split(\".\")\r\n                newPath.pop()\r\n                newPath = newPath.join(\".\")\r\n\r\n                // store to form data\r\n                //handleDataInput(items, pathFormData, \"array\")\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n            }\r\n\r\n        } else {\r\n            let value = inputValue;\r\n            value = parseFloat(value)\r\n            if (!isNaN(value)) {\r\n                setInputValue(value)\r\n\r\n                // store it to input data array\r\n                let arr = dataInputItems;\r\n                const items = Array.from(arr);\r\n                items[index] = value;\r\n                setDataInputItems(items);\r\n\r\n                // store to the main form data\r\n                handleDataInput(items, pathFormData, \"array\")\r\n\r\n                // conv. schema data\r\n                handleConvertedDataInput(items, path + \".value\", \"array\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={() => handleInputOnBlur()} onChange={e => handleInputOnChange(e)} value={inputValue} fullWidth={true} className={classes.heading} id={field_key} variant=\"outlined\" />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ItemNumberType;\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { FormContext } from '../../../FormContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemStringType = ({ oDataInputItems, oSetDataInputItems, arrayFieldKey, withinObject, value, pathFormData, dataInputItems, setDataInputItems, path, edit, index, field_key, handleDeleteArrayItem }) => {\r\n    const classes = useStyles();\r\n    const { handleDataInput, handleConvertedDataInput } = useContext(FormContext)\r\n    const [fieldValue, setFieldValue] = useState(value === undefined ? undefined : value[index])\r\n\r\n\r\n    // handle input field on blur\r\n    const handleOnBlur = (event, index) => {\r\n        if (withinObject !== undefined & withinObject === true) {\r\n            let arr = dataInputItems;\r\n            let arr2 = oDataInputItems\r\n            let items = Array.from(arr);\r\n            let items2 = Array.from(arr2);\r\n\r\n            let prevIndex = parseInt(path.split(\".\").pop())\r\n            items[index] = event.target.value;\r\n            items2[prevIndex][arrayFieldKey] = items\r\n            console.log(items2)\r\n            oSetDataInputItems(items2);\r\n\r\n            setFieldValue(event.target.value)\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            // store to form data\r\n            //handleDataInput(items, pathFormData, \"array\")\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n\r\n        } else {\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[index] = event.target.value;\r\n            setDataInputItems(items);\r\n            setFieldValue(event.target.value)\r\n\r\n            // store to form data\r\n            handleDataInput(items, pathFormData, \"array\")\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items, path + \".value\", \"array\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {index !== undefined ? <div style={{ padding: \"5px\" }}>\r\n                <Typography className={classes.heading}>{index + 1}.</Typography>\r\n            </div> : null}\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <TextField onBlur={(event) => handleOnBlur(event, index)} id={field_key} fullWidth={true} className={classes.heading} variant=\"outlined\" defaultValue={fieldValue} />\r\n                {edit ? <>\r\n                    <IconButton onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><DeleteIcon fontSize=\"small\" color=\"secondary\" /></IconButton></> : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default ItemStringType;","import React, { useContext, useEffect, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"../../ElementRenderer\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Button } from '@material-ui/core';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { FormContext } from \"../../../FormContext\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\n\r\nconst ItemObjectType = ({ value, path, dataInputItems, setDataInputItems, field_label, pathFormData, field_required, field_items, field_type, edit, index, field_key, handleDeleteArrayItem }) => {\r\n    const [expand, setExpand] = useState(dataInputItems[index][\"expand\"] === undefined ? true : dataInputItems[index][\"expand\"]); // set to \"true\" for normally open accordion\r\n    let objectIndex = index;\r\n    let field_properties = field_items[\"properties\"]\r\n    let withinArray = true;\r\n    let withinObject = true;\r\n\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n\r\n        let newVal = [...dataInputItems]\r\n        newVal[index][\"expand\"] = !value\r\n\r\n        setDataInputItems(newVal)\r\n    };\r\n\r\n    //const classes = useStyles();\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    style={{ height: \"auto\" }}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\", justifySelf: \"center\" }}>\r\n                            {field_label + \" #\" + parseInt(index + 1)}\r\n                        </div>\r\n                        {edit ? <Button onClick={() => handleDeleteArrayItem(index)} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div style={{ width: \"100%\" }}>\r\n                        {Object.keys(field_properties).map((item, index) => {\r\n                            let tempField = JSON.parse(JSON.stringify(field_properties[item]));\r\n                            if (tempField[\"enum\"]) {\r\n                                tempField[\"enumerate\"] = tempField[\"enum\"]\r\n                            }\r\n                            if (tempField[\"default\"]) {\r\n                                tempField[\"defaultValue\"] = tempField[\"default\"]\r\n                            }\r\n                            return (\r\n                                <div key={item} style={{ display: \"flex\" }}>\r\n                                    <ElementRenderer withinObject={withinObject} path={path} pathFormData={pathFormData} withinArray={withinArray} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} fieldkey={item} fieldIndex={objectIndex} elementRequired={field_items[\"required\"]} edit={false} field={tempField} />\r\n                                </div>\r\n                            )\r\n                        })\r\n                        }\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div >\r\n    </>);\r\n\r\n};\r\n\r\nexport default ItemObjectType;\r\n","import React from 'react';\r\nimport ItemIntegerType from './array_items/ItemIntegerType';\r\nimport ItemNumberType from './array_items/ItemNumberType';\r\nimport ItemStringType from \"./array_items/ItemStringType\";\r\nimport ItemObjectType from \"./array_items/ItemObjectType\";\r\n\r\n\r\nconst ArrayItemRenderer = ({ oSetDataInputItems, oDataInputItems, arrayFieldKey, withinObject, value, pathSchema, pathFormData, dataInputItems, setDataInputItems, field_label, field_items, path, type, edit, fieldIndex, fieldkey, enumerate, handleDeleteArrayItem, properties }) => {\r\n    switch (type) {\r\n        case 'string':\r\n            return (<ItemStringType\r\n                value={value}\r\n                withinObject={withinObject}\r\n                arrayFieldKey={arrayFieldKey}\r\n                oSetDataInputItems={oSetDataInputItems}\r\n                oDataInputItems={oDataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                dataInputItems={dataInputItems}\r\n                path={path}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'number':\r\n            return (<ItemNumberType\r\n                value={value}\r\n                path={path}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                withinObject={withinObject}\r\n                arrayFieldKey={arrayFieldKey}\r\n                oSetDataInputItems={oSetDataInputItems}\r\n                oDataInputItems={oDataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'integer':\r\n            return (<ItemIntegerType\r\n                value={value}\r\n                path={path}\r\n                pathFormData={pathFormData}\r\n                withinObject={withinObject}\r\n                arrayFieldKey={arrayFieldKey}\r\n                oSetDataInputItems={oSetDataInputItems}\r\n                oDataInputItems={oDataInputItems}\r\n                pathSchema={pathSchema + \".value\"}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n            />)\r\n        case 'object':\r\n            return (<ItemObjectType\r\n                value={value}\r\n                setDataInputItems={setDataInputItems}\r\n                dataInputItems={dataInputItems}\r\n                field_label={field_label}\r\n                pathFormData={pathFormData}\r\n                pathSchema={pathSchema + \".value\"}\r\n                path={path}\r\n                index={fieldIndex}\r\n                field_key={fieldkey}\r\n                handleDeleteArrayItem={handleDeleteArrayItem}\r\n                edit={edit}\r\n                field_type={type}\r\n                field_items={field_items}\r\n            />)\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ArrayItemRenderer;\r\n","const generateUID = () => {\r\n    // I generate the UID from two parts here \r\n    // to ensure the random number provide enough bits.\r\n    var firstPart = (Math.random() * 46656) | 0;\r\n    var secondPart = (Math.random() * 46656) | 0;\r\n    firstPart = (\"000\" + firstPart.toString(36)).slice(-3);\r\n    secondPart = (\"000\" + secondPart.toString(36)).slice(-3);\r\n    return firstPart + secondPart;\r\n}\r\n\r\nexport default generateUID;","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { AccordionDetails } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ArrayItemRenderer from \"./ArrayItemRenderer\";\r\nimport generateUniqueID from \"../utils/generateUniqueID\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport getValue from \"../utils/getValue\";\r\nimport set from \"set-value\";\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst Accordion = withStyles({\r\n    root: {\r\n        border: '1px solid rgba(232, 244, 253, 1)',\r\n        '&:not(:last-child)': {\r\n            borderBottom: 0,\r\n        },\r\n        boxShadow: \"none\",\r\n        '&:before': {\r\n            display: 'none',\r\n        },\r\n        '&$expanded': {\r\n            margin: 'auto',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordion);\r\n\r\nconst AccordionSummary = withStyles({\r\n    root: {\r\n        backgroundColor: 'rgba(232, 244, 253, 1)',\r\n        borderBottom: '1px solid rgba(0, 0, 0, .0)',\r\n        marginBottom: -1,\r\n        minHeight: 56,\r\n        '&$expanded': {\r\n            minHeight: 56,\r\n        },\r\n    },\r\n    content: {\r\n        '&$expanded': {\r\n            margin: '12px 0',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst ArrayType = ({ maxItems, oSetDataInputItems, oDataInputItems, withinObject, withinArray, field_uri, value, pathFormData, path, pathSchema, field_required, field_key, field_index, edit, field_label, field_description, field_items, field_prefixItems }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [expand, setExpand] = useState(true);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputItems, setInputItems] = useState([]);\r\n    const [dataInputItems, setDataInputItems] = useState([]);\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists\r\n    /*\r\n    useEffect(() => {\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (value === undefined) {\r\n                console.log(\"do nothing\")\r\n            } else {\r\n                // use existing schema if items is not empty\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(newFieldItems);\r\n                setInputItems(items);\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    setDataInputItems(items2)\r\n\r\n                    // for form data\r\n                    handleDataInput(value, pathFormData, \"array\");\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                    handleConvertedDataInput(value, path + \".prevValue\", \"array\")\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push({});\r\n                    setDataInputItems(items2)\r\n\r\n                    // for form data\r\n                    handleDataInput(value, pathFormData, \"array\");\r\n                    // conv. schema data\r\n                    handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                    handleConvertedDataInput(value, path + \".prevValue\", \"array\")\r\n                }\r\n            }\r\n        }\r\n    }, [value])\r\n    */\r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            value = oDataInputItems[field_index][field_key]\r\n\r\n            if (value !== undefined) {\r\n                if (field_prefixItems === undefined & field_items !== undefined) {\r\n                    if (field_items[\"type\"] !== \"object\") {\r\n                        if (Object.keys(field_items).length === 0) {\r\n                            // create field_items if items is empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                field_items = { type: \"string\", field_key: `${generateUniqueID()}` }\r\n                                items.push(field_items);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        } else {\r\n                            // use existing schema if items is not empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (value !== undefined) {\r\n                if (field_prefixItems === undefined & field_items !== undefined) {\r\n                    if (field_items[\"type\"] !== \"object\") {\r\n                        if (Object.keys(field_items).length === 0) {\r\n                            // create field_items if items is empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                field_items = { type: \"string\", field_key: `${generateUniqueID()}` }\r\n                                items.push(field_items);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n\r\n                            // for form data\r\n                            handleDataInput(value, pathFormData, \"array\");\r\n                            // conv. schema data\r\n                            handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                            handleConvertedDataInput(value, path + \".prevValue\", \"array\")\r\n                        } else {\r\n                            // use existing schema if items is not empty\r\n                            let items = [];\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n\r\n                            // for form data\r\n                            handleDataInput(value, pathFormData, \"array\");\r\n                            // conv. schema data\r\n                            handleConvertedDataInput(value, path + \".value\", \"array\")\r\n                            handleConvertedDataInput(value, path + \".prevValue\", \"array\")\r\n                        }\r\n                    }\r\n                    else {\r\n                        // use existing schema if items is not empty\r\n                        let items = [];\r\n                        if (dataInputItems.length === 0) {\r\n                            let arr = value;\r\n                            arr = Array.from(arr);\r\n                            let currentInputItems = [...inputItems]\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = (currentInputItems[i] !== undefined & currentInputItems.length !== 0 ? currentInputItems[i] : {})\r\n                                if (Object.keys(newFieldItems).length === 0) {\r\n                                    newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                    newFieldItems[\"type\"] = \"object\"\r\n                                    newFieldItems[\"properties\"] = JSON.parse(JSON.stringify(field_items[\"properties\"]))\r\n                                    newFieldItems[\"required\"] = field_items[\"required\"]\r\n                                    Object.keys(newFieldItems[\"properties\"]).forEach((element) => {\r\n                                        newFieldItems[\"properties\"][element][\"value\"] = arr[i][element]\r\n                                    })\r\n                                }\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        } else {\r\n                            let arr = value;\r\n                            arr = Array.from(arr);\r\n                            for (let i = 0; i < value.length; i++) {\r\n                                let newFieldItems = {}\r\n                                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                                newFieldItems[\"type\"] = \"object\"\r\n                                newFieldItems[\"properties\"] = JSON.parse(JSON.stringify(field_items[\"properties\"]))\r\n                                newFieldItems[\"required\"] = field_items[\"required\"]\r\n                                Object.keys(newFieldItems[\"properties\"]).forEach((element) => {\r\n                                    newFieldItems[\"properties\"][element][\"value\"] = arr[i][element]\r\n                                })\r\n                                items.push(newFieldItems);\r\n                            }\r\n                            setInputItems(items);\r\n                            setDataInputItems(value);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                setInputItems([]);\r\n                setDataInputItems([])\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        if (withinObject & withinArray) {\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            const [reorderedItem] = items.splice(result.source.index, 1);\r\n            items.splice(result.destination.index, 0, reorderedItem);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems\r\n            const items2 = Array.from(arr2);\r\n            const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n            items2.splice(result.destination.index, 0, reorderedItem2);\r\n            setDataInputItems(items2)\r\n\r\n            /*\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, newPath + \".value\", \"array\")\r\n            handleConvertedDataInput(items2, newPath + \".prevValue\", \"array\")\r\n            */\r\n        }\r\n        else {\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            const [reorderedItem] = items.splice(result.source.index, 1);\r\n            items.splice(result.destination.index, 0, reorderedItem);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems\r\n            const items2 = Array.from(arr2);\r\n            const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n            items2.splice(result.destination.index, 0, reorderedItem2);\r\n            setDataInputItems(items2)\r\n\r\n            // for form data\r\n            handleDataInput(items2, pathFormData, \"array\");\r\n\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n            handleConvertedDataInput(items2, path + \".prevValue\", \"array\")\r\n\r\n        }\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"items\": field_items,\r\n        \"$id\": field_uri,\r\n        \"type\": \"array\",\r\n        \"value\": value\r\n    }\r\n\r\n    // handle add array item\r\n    const handleAddArrayItem = () => {\r\n        // check if current array still has not reached maximum item\r\n        if (maxItems !== undefined) {\r\n            if (maxItems === (dataInputItems.length)) {\r\n                toast.warning(\r\n                    `Can not add more item. Maximum number (${maxItems}) of items has been reached.`,\r\n                    {\r\n                        position: \"top-right\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: false,\r\n                        progress: undefined,\r\n                    }\r\n                );\r\n\r\n                return\r\n            }\r\n        }\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (Object.keys(field_items).length === 0) {\r\n                // create field_items if items is empty\r\n                field_items = { type: \"string\", field_key: `${generateUniqueID()}` }\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(field_items);\r\n                setInputItems(items);\r\n\r\n                // push a new item for the data\r\n                let arr2 = dataInputItems;\r\n                const items2 = Array.from(arr2);\r\n                items2.push(\"\");\r\n                setDataInputItems(items2)\r\n            } else {\r\n                // use existing schema if items is not empty\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(newFieldItems);\r\n                setInputItems(items);\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    console.log(items2)\r\n                    setDataInputItems(items2)\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push({});\r\n                    setDataInputItems(items2)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle delete item\r\n    const handleDeleteArrayItem = (index) => {\r\n\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            items.splice(index, 1);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems;\r\n            const items2 = Array.from(arr2);\r\n            items2.splice(index, 1);\r\n            setDataInputItems(items2)\r\n        } else {\r\n            // for schema\r\n            let arr = inputItems\r\n            const items = Array.from(arr);\r\n            items.splice(index, 1);\r\n            setInputItems(items)\r\n\r\n            // for data\r\n            let arr2 = dataInputItems;\r\n            const items2 = Array.from(arr2);\r\n            items2.splice(index, 1);\r\n            setDataInputItems(items2)\r\n\r\n            // for form data\r\n            handleDataInput(items2, pathFormData, \"array\");\r\n            // conv. schema data\r\n            handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n            handleConvertedDataInput(items2, path + \".prevValue\", \"array\")\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={withinObject ? null :\r\n                        <Tooltip placement=\"top\" title={`Collapse/Expand this container\"`}>\r\n                            <ExpandMoreIcon />\r\n                        </Tooltip>}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography className={classes.heading}>{field_label + (required ? \"*\" : \"\")}</Typography>\r\n                            {expand ? <div style={{ color: \"gray\" }}>\r\n                                {field_description}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit \"${field_label}\"`}>\r\n                                <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove \"${field_label}\"`}>\r\n                                <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        <Droppable droppableId=\"subforms\">\r\n                            {(provided) => (\r\n                                <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {Object.keys(inputItems).map((item, index) => {\r\n                                        return (\r\n                                            <Draggable isDragDisabled={false} key={inputItems[index][\"field_key\"]} draggableId={inputItems[index][\"field_key\"]} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                        <div style={{ display: \"flex\" }}>\r\n                                                            <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                <Tooltip placement=\"top\" title={`Drag & drop to adjust the order of this item`}>\r\n                                                                    <DragHandleIcon fontSize=\"small\" />\r\n                                                                </Tooltip>\r\n                                                            </div>\r\n                                                            <ArrayItemRenderer arrayFieldKey={field_key} withinObject={withinObject} value={value} pathSchema={pathSchema} pathFormData={pathFormData} dataInputItems={dataInputItems} oDataInputItems={oDataInputItems} oSetDataInputItems={oSetDataInputItems} setDataInputItems={setDataInputItems} field_label={field_label} field_items={inputItems.length !== 0 ? inputItems[index] : field_items} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path} fieldIndex={index} fieldkey={inputItems[index][\"field_key\"]} type={inputItems[index][\"type\"]} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        );\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                    <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                        <Button onClick={() => { handleAddArrayItem() }} style={{ fontSize: \"12px\", marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><AddIcon style={{ paddingRight: \"5px\" }} fontSize=\"small\" color=\"primary\" /> Add Item</Button>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n        <ToastContainer />\r\n    </>\r\n    );\r\n};\r\n\r\nexport default ArrayType;","// convert json schema properties to an iterable array\r\nconst object2array = (propert) => {\r\n    let someArray = [];\r\n    Object.keys(propert).forEach((item) => {\r\n        var tempVariable = {};\r\n        var tempVariable2;\r\n        tempVariable2 = propert[item];\r\n        tempVariable[\"fieldKey\"] = item;\r\n        Object.keys(tempVariable2).forEach((item_) => {\r\n            // make enum indexable by changing the key to \"enumerate\"\r\n            if (item_ === \"enum\") {\r\n                tempVariable[\"enumerate\"] = tempVariable2[item_];\r\n            }\r\n            if (item_ === \"default\") {\r\n                tempVariable[\"defaultValue\"] = tempVariable2[item_];\r\n            }\r\n            tempVariable[item_] = tempVariable2[item_];\r\n            if (item_ === \"properties\") {\r\n                // recursive on action to access nested properties\r\n                tempVariable[item_] = object2array(tempVariable2[item_]);\r\n            }\r\n        });\r\n        someArray.push(tempVariable);\r\n    });\r\n\r\n    return someArray;\r\n};\r\n\r\nexport default object2array;","import React, { useState, useContext } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\n//import Accordion from \"@material-ui/core/Accordion\";\r\nimport { AccordionDetails } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from \"../../FormContext\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport deleteKey from \"../utils/deleteKey\";\r\nimport EditElement from \"../EditElement\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ArrayItemRenderer from \"./ArrayItemRenderer\";\r\nimport generateUniqueID from \"../utils/generateUniqueID\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport ElementRenderer from \"../ElementRenderer\";\r\nimport ObjectType from \"./ObjectType\";\r\nimport object2array from \"../utils/object2array\";\r\nimport getValue from \"../utils/getValue\";\r\nimport set from \"set-value\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst Accordion = withStyles({\r\n    root: {\r\n        border: '1px solid rgba(232, 244, 253, 1)',\r\n        '&:not(:last-child)': {\r\n            borderBottom: 0,\r\n        },\r\n        boxShadow: \"none\",\r\n        '&:before': {\r\n            display: 'none',\r\n        },\r\n        '&$expanded': {\r\n            margin: 'auto',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordion);\r\n\r\nconst AccordionSummary = withStyles({\r\n    root: {\r\n        backgroundColor: 'rgba(232, 244, 253, 1)',\r\n        borderBottom: '1px solid rgba(0, 0, 0, .0)',\r\n        marginBottom: -1,\r\n        minHeight: 56,\r\n        '&$expanded': {\r\n            minHeight: 56,\r\n        },\r\n    },\r\n    content: {\r\n        '&$expanded': {\r\n            margin: '12px 0',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst AnyOfKeyword = ({ pathFormData, path, field_required, field_uri, field_key, field_index, edit, field_label, field_description, field_prefixItems, anyOf_list }) => {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [expand, setExpand] = useState(true); // set to \"true\" for normally open accordion\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [field_items, setField_items] = useState(Array.isArray(anyOf_list) & anyOf_list[0][\"type\"] === \"array\" ? anyOf_list[0][\"items\"] : anyOf_list[0])\r\n    const [globalIndex, setGlobalIndex] = useState(0);\r\n    const [inputItems, setInputItems] = useState([]);\r\n    const [dataInputItems, setDataInputItems] = useState([]);\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n\r\n    let newPath = path.split(\".\")\r\n    newPath.pop()\r\n    newPath = newPath.join(\".\")\r\n\r\n    let newPathFormData = pathFormData.split(\".\")\r\n    newPathFormData.pop()\r\n    newPathFormData = newPathFormData.join(\".\")\r\n\r\n\r\n    // This is to expand or contract the accordion, because normally open is used \r\n    const expandOnChange = () => {\r\n        const value = expand\r\n        setExpand(!value)\r\n    };\r\n\r\n    let schemaList = Array(anyOf_list.length).fill().map((x, i) => i)\r\n\r\n    // select existing schema option from anyOf list\r\n    const handleChooseAnyOfSchema = (event) => {\r\n        // reset states\r\n        setDataInputItems([]);\r\n        setInputItems([]);\r\n\r\n        // get rid of the current value everytime the subschema changes\r\n        handleDataDelete(pathFormData)\r\n        let val = getValue(convertedSchema, path)\r\n        delete val[\"value\"]\r\n        set(convertedSchema, path, val)\r\n        console.log(convertedSchema)\r\n        // if properties exist then delete it\r\n        let val2 = getValue(convertedSchema, path)\r\n        if (val2[\"properties\"] !== undefined) {\r\n            delete val2[\"properties\"]\r\n            set(convertedSchema, path, val2)\r\n        }\r\n        // if type exist then delete it\r\n        let val3 = getValue(convertedSchema, path)\r\n        if (val3[\"type\"] !== undefined) {\r\n            delete val3[\"type\"]\r\n            set(convertedSchema, path, val3)\r\n        }\r\n\r\n        const index = parseInt(event.target.value)\r\n        setGlobalIndex(index)\r\n        if (anyOf_list[index][\"type\"] === \"array\") {\r\n            setField_items(anyOf_list[index][\"items\"])\r\n        }\r\n        else if (anyOf_list[index][\"type\"] === \"object\") {\r\n            let prop = object2array(anyOf_list[index][\"properties\"])\r\n            let val = getValue(convertedSchema, path)\r\n            val[\"properties\"] = prop\r\n            val[\"type\"] = \"object\"\r\n            set(convertedSchema, path, val)\r\n            updateParent(convertedSchema)\r\n            setField_items(prop)\r\n        }\r\n        else {\r\n            setField_items(anyOf_list[index])\r\n        }\r\n    }\r\n\r\n    var required;\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n        setInputItems(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems\r\n        const items2 = Array.from(arr2);\r\n        const [reorderedItem2] = items2.splice(result.source.index, 1);\r\n        items2.splice(result.destination.index, 0, reorderedItem2);\r\n        setDataInputItems(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathFormData, \"array\");\r\n        // conv. schema data\r\n        handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n        handleConvertedDataInput(items2, path + \".prevValue\", \"array\")\r\n    }\r\n\r\n    // handle delete object UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    /*\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"items\": field_items,\r\n        \"type\": [anyOf_list[globalIndex][\"type\"]]\r\n    }*/\r\n\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"items\": field_items,\r\n        \"type\": \"anyOf\",\r\n    }\r\n\r\n    // handle add array item\r\n    const handleAddArrayItem = () => {\r\n        if (field_prefixItems === undefined & field_items !== undefined) {\r\n            if (Object.keys(field_items).length === 0) {\r\n                // create field_items if items is empty\r\n                field_items = { type: \"string\", field_key: `${generateUniqueID()}` }\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(field_items);\r\n                setInputItems(items);\r\n\r\n                // push a new item for the data\r\n                let arr2 = dataInputItems;\r\n                const items2 = Array.from(arr2);\r\n                items2.push(\"\");\r\n                setDataInputItems(items2)\r\n            } else {\r\n                // use existing schema if items is not empty\r\n                let newFieldItems = JSON.parse(JSON.stringify(field_items))\r\n                newFieldItems[\"field_key\"] = generateUniqueID();\r\n                let arr = inputItems;\r\n                const items = Array.from(arr);\r\n                items.push(newFieldItems);\r\n                setInputItems(items);\r\n\r\n                if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(newFieldItems[\"type\"])) {\r\n                    // push a new item for the data\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push(\"\");\r\n                    setDataInputItems(items2)\r\n                } else if (newFieldItems[\"type\"] === \"object\") {\r\n                    let arr2 = dataInputItems;\r\n                    const items2 = Array.from(arr2);\r\n                    items2.push({});\r\n                    setDataInputItems(items2)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle delete item\r\n    const handleDeleteArrayItem = (index) => {\r\n        // for schema\r\n        let arr = inputItems\r\n        const items = Array.from(arr);\r\n        items.splice(index, 1);\r\n        setInputItems(items)\r\n\r\n        // for data\r\n        let arr2 = dataInputItems;\r\n        const items2 = Array.from(arr2);\r\n        items2.splice(index, 1);\r\n        setDataInputItems(items2)\r\n\r\n        // for form data\r\n        handleDataInput(items2, pathFormData, \"array\");\r\n        // conv. schema data\r\n        handleConvertedDataInput(items2, path + \".value\", \"array\")\r\n        handleConvertedDataInput(items2, path + \".prevValue\", \"array\")\r\n    }\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={\r\n                        <Tooltip placement=\"top\" title={`Collapse/Expand this container\"`}>\r\n                            <ExpandMoreIcon />\r\n                        </Tooltip>}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <Typography className={classes.heading}>{field_label + (required ? \"*\" : \"\")}</Typography>\r\n                            {expand ? <div style={{ color: \"gray\" }}>\r\n                                {field_description}\r\n                            </div> : null}\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        {edit ? <>\r\n                            <Tooltip placement=\"top\" title={`Edit \"${field_label}\"`}>\r\n                                <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}><EditIcon color=\"primary\" /></Button>\r\n                            </Tooltip>\r\n                            <Tooltip placement=\"top\" title={`Remove \"${field_label}\"`}>\r\n                                <Button onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\" }}><DeleteIcon color=\"secondary\" /></Button>\r\n                            </Tooltip>\r\n                        </> : null}\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <TextField\r\n                    onChange={(event) => handleChooseAnyOfSchema(event)}\r\n                    style={{ width: \"220px\", marginLeft: \"10px\", marginTop: \"20px\" }}\r\n                    fullWidth={false}\r\n                    select\r\n                    id={\"select-schema\"}\r\n                    label={\"Choose a subschema\"}\r\n                    SelectProps={{ native: true }}\r\n                >\r\n                    {schemaList.map((content, index) => (\r\n                        <option key={index} value={content}>\r\n                            {content}\r\n                        </option>\r\n                    ))}\r\n                </TextField>\r\n                {anyOf_list[globalIndex][\"type\"] === \"array\" ?\r\n                    <AccordionDetails>\r\n                        <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                            <Droppable droppableId=\"subforms\">\r\n                                {(provided) => (\r\n                                    <div style={{ width: \"100%\" }}  {...provided.droppableProps} ref={provided.innerRef}>\r\n                                        {Object.keys(inputItems).map((item, index) => {\r\n                                            return (\r\n                                                <Draggable key={inputItems[index][\"field_key\"]} draggableId={inputItems[index][\"field_key\"]} index={index}>\r\n                                                    {(provided) => (\r\n                                                        <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                            <div style={{ display: \"flex\" }}>\r\n                                                                <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                                    <DragHandleIcon fontSize=\"small\" />\r\n                                                                </div>\r\n                                                                {/*\r\n                                                                <ArrayItemRenderer field_label={field_label} field_items={inputItems[index]} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path + \".properties\"} fieldIndex={index} fieldkey={inputItems[index][\"field_key\"]} type={inputItems[index][\"type\"]} />\r\n                                                                */}\r\n\r\n                                                                <ArrayItemRenderer pathFormData={pathFormData} dataInputItems={dataInputItems} setDataInputItems={setDataInputItems} field_label={field_label} field_items={field_items} edit={true} handleDeleteArrayItem={handleDeleteArrayItem} path={path} fieldIndex={index} fieldkey={inputItems[index][\"field_key\"]} type={inputItems[index][\"type\"]} />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    )}\r\n                                                </Draggable>\r\n                                            );\r\n                                        })}\r\n                                        {provided.placeholder}\r\n                                        <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                            <Button onClick={() => { handleAddArrayItem() }} style={{ fontSize: \"12px\", marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}><AddIcon style={{ paddingRight: \"5px\" }} fontSize=\"small\" color=\"primary\" /> Add Item</Button>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                        </DragDropContext>\r\n                    </AccordionDetails>\r\n                    :\r\n                    anyOf_list[globalIndex][\"type\"] === \"object\" ?\r\n                        <div style={{ padding: \"10px\" }}>\r\n                            <ObjectType\r\n                                path={path}\r\n                                pathFormData={pathFormData !== undefined ? pathFormData : field_key}\r\n                                field_key={field_key}\r\n                                field_label={undefined}\r\n                                field_description={undefined}\r\n                                field_required={field_required}\r\n                                field_properties={field_items}\r\n                                edit={false}\r\n                            />\r\n                        </div>\r\n                        :\r\n                        <div style={{ padding: \"10px\" }}>\r\n                            <ElementRenderer pathFormData={newPathFormData} path={newPath} fieldkey={field_key} fieldIndex={field_index} elementRequired={field_required} edit={false} field={field_items} />\r\n                        </div>}\r\n            </Accordion>\r\n        </div>\r\n        {openDialog ? <EditElement field_uri={field_uri} anyOf_list={anyOf_list} pathFormData={pathFormData} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n    </>\r\n    );\r\n};\r\n\r\nexport default AnyOfKeyword;","import React, { useContext, useEffect, useState, useCallback } from 'react'\r\nimport { FormLabel, FormHelperText, FormControl, TextField } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton, Button } from '@material-ui/core';\r\nimport EditElement from '../EditElement';\r\nimport { FormContext } from '../../FormContext';\r\nimport deleteKey from '../utils/deleteKey';\r\nimport { Tooltip } from '@material-ui/core';\r\nimport getValue from '../utils/getValue';\r\nimport set from 'set-value';\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 'auto',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"10px\",\r\n}\r\n\r\nconst getAcceptedTypes = (field_description) => {\r\n    let matches = field_description.match(/\\[(.*?)\\]/);\r\n\r\n    if (matches) {\r\n        let submatch = matches[1];\r\n        submatch = submatch.replaceAll(\"\\\"\", \"\")\r\n        submatch = submatch.replaceAll(\" \", \"\")\r\n        submatch = submatch.split(\",\")\r\n        return submatch\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\n\r\nconst validateAcceptedFile = (fileType, acceptedTypes) => {\r\n    fileType = fileType.split(\".\")\r\n    fileType = fileType.pop()\r\n    fileType = \".\" + fileType\r\n\r\n    if (acceptedTypes.includes(fileType)) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\n\r\nconst FileUpload = ({ contentEncoding, withinObject, field_uri, dataInputItems, setDataInputItems, withinArray, path, pathFormData, field_required, field_index, edit, field_key, field_label, field_description, field_enumerate, defaultValue, value }) => {\r\n\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const { updateParent, convertedSchema, handleDataInput, handleDataDelete, handleConvertedDataInput } = useContext(FormContext);\r\n    const [inputError, setInputError] = useState(false)\r\n    const [descriptionText, setDescriptionText] = useState(field_description !== undefined ? field_description : \"\");\r\n    const [dataUrl, setDataUrl] = useState(defaultValue !== undefined ? defaultValue : value !== undefined ? value : \"\")\r\n    const [renderingInProgress, setRenderingInProgress] = useState(false)\r\n    //const [required, setRequired] = useState(false)\r\n    const classes = useStyles();\r\n\r\n\r\n\r\n    // clean up empty strings in the paths\r\n    path = path.split(\".\")\r\n    path = path.filter(e => e)\r\n    path = path.join(\".\")\r\n    pathFormData = pathFormData.split(\".\")\r\n    pathFormData = pathFormData.filter(e => e)\r\n    pathFormData = pathFormData.join(\".\")\r\n\r\n\r\n    var required\r\n    if (field_required === undefined) {\r\n        required = false;\r\n    } else if (field_required.includes(field_key)) {\r\n        required = true;\r\n    };\r\n\r\n    // handle delete field UI\r\n    const handleDeleteElement = () => {\r\n        let value = deleteKey(convertedSchema, path)\r\n\r\n        // delete the field key in required array if applicable        \r\n        let pathArr = path.split(\".\")\r\n        if (pathArr.length <= 2) {\r\n            if (value[\"required\"] !== undefined) {\r\n                let index = value[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    value[\"required\"].splice(index, 1)\r\n                    if (value[\"required\"].length === 0) {\r\n                        delete value[\"required\"]\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            pathArr.pop()\r\n            pathArr.pop()\r\n            let val = getValue(value, pathArr.join(\".\"))\r\n            if (val[\"required\"] !== undefined) {\r\n                let index = val[\"required\"].indexOf(field_key)\r\n                if (index !== -1) {\r\n                    let newPath = pathArr.join(\".\") + \".required\"\r\n                    val[\"required\"].splice(index, 1)\r\n                    if (val[\"required\"].length === 0) {\r\n                        value = deleteKey(value, newPath)\r\n                    } else {\r\n                        set(value, newPath, val[\"required\"])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        updateParent(value)\r\n        handleDataDelete(pathFormData);\r\n    }\r\n\r\n    // browse or drag&drop file\r\n    const onDrop = useCallback(\r\n        (acceptedFile) => {\r\n            let acceptedTypes = getAcceptedTypes(field_description);\r\n            let valid = true\r\n            if (acceptedTypes.length === 0) {\r\n                valid = false\r\n            } else {\r\n                valid = validateAcceptedFile(acceptedFile[0][\"name\"], acceptedTypes)\r\n            }\r\n            if (valid) {\r\n                setRenderingInProgress(true)\r\n                // process the schema, validation etc\r\n                // read file and update receivedData\r\n                const reader = new FileReader();\r\n                reader.onabort = () => console.log(\"file reading was aborted\");\r\n                reader.onerror = () => console.log(\"file reading has failed\");\r\n                reader.onload = () => {\r\n                    const binaryStr = reader.result;\r\n                    setDataUrl(binaryStr)\r\n                    if (withinArray !== undefined & withinArray) {\r\n                        let newPathFormData = pathFormData.split(\".\");\r\n                        newPathFormData.pop()\r\n                        newPathFormData = newPathFormData.join(\".\")\r\n\r\n                        let newPath = path.split(\".\")\r\n                        newPath.pop()\r\n                        newPath = newPath.join(\".\")\r\n\r\n                        let arr = dataInputItems;\r\n                        const items = Array.from(arr);\r\n                        items[field_index][field_key] = binaryStr;\r\n                        setDataInputItems(items);\r\n                        handleDataInput(items, newPathFormData, \"boolean\")\r\n                        handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n\r\n                        setRenderingInProgress(false)\r\n                    } else {\r\n                        handleDataInput(binaryStr, pathFormData, \"boolean\")\r\n                        handleConvertedDataInput(binaryStr, path + \".value\", \"boolean\")\r\n\r\n                        setRenderingInProgress(false)\r\n                    }\r\n                }\r\n                reader.readAsDataURL(acceptedFile[0]);\r\n            } else {\r\n                setRenderingInProgress(false)\r\n                setInputError(true)\r\n                setDescriptionText(\"Seems like you've given a file with an unaccepted file type?\")\r\n                setDataUrl(\"\")\r\n            }\r\n        },\r\n        []\r\n    );\r\n    //\r\n\r\n\r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    // update this field input value everytime the value changes. E.g., when autofilling or first render of the field when defaultvalue exists \r\n    useEffect(() => {\r\n        if (withinArray !== undefined & withinArray === true) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n\r\n            //let latestVal = getValue(convertedSchema, newPath + \".prevValue\")\r\n            //if (Array.isArray(latestVal)) { latestVal = latestVal[field_key] }\r\n            let dataInputItemVal = \"\";\r\n            if (items.length !== 0) {\r\n                if (typeof (items[0]) === \"object\") {\r\n                    dataInputItemVal = items[field_index][field_key]\r\n                }\r\n            }\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : dataInputItemVal !== undefined ? dataInputItemVal : \"\")\r\n            if (val === \"\") {\r\n                setDataUrl(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else {\r\n                if (withinObject) {\r\n                    // if withinArray and withinObject skip setDataInputItems etc\r\n                    setDataUrl(val)\r\n                } else {\r\n                    items[field_index][field_key] = val;\r\n                    setDataInputItems(items);\r\n\r\n                    setDataUrl(val)\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    handleDataInput(items, newPathFormData, \"boolean\")\r\n                    handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            //let latestVal = getValue(convertedSchema, path + \".prevValue\")\r\n            let val = (value !== undefined ? value : defaultValue !== undefined ? defaultValue : \"\")\r\n            if (val === \"\") {\r\n                setDataUrl(\"\")\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n            }\r\n            else {\r\n                setDataUrl(val)\r\n                setInputError(false)\r\n                setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                handleDataInput(val, pathFormData, \"boolean\")\r\n                handleConvertedDataInput(val, path + \".value\", \"boolean\")\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    // construct UI schema\r\n    let UISchema = {\r\n        \"fieldKey\": field_key,\r\n        \"title\": field_label,\r\n        \"description\": field_description,\r\n        \"$id\": field_uri,\r\n        \"type\": \"string\",\r\n        \"value\": value,\r\n    }\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        multiple: false,\r\n    });\r\n\r\n    const handleOnClickedClear = () => {\r\n        setDataUrl(\"\")\r\n        // then delete in the form convdata\r\n        if (withinArray !== undefined & withinArray) {\r\n            let newPathFormData = pathFormData.split(\".\");\r\n            newPathFormData.pop()\r\n            newPathFormData = newPathFormData.join(\".\")\r\n\r\n            let newPath = path.split(\".\")\r\n            newPath.pop()\r\n            newPath = newPath.join(\".\")\r\n\r\n            let arr = dataInputItems;\r\n            const items = Array.from(arr);\r\n            items[field_index][field_key] = undefined;\r\n            setDataInputItems(items);\r\n            handleDataInput(items, newPathFormData, \"boolean\")\r\n            handleConvertedDataInput(items, newPath + \".value\", \"boolean\")\r\n            handleConvertedDataInput(items, newPath + \".prevValue\", \"boolean\")\r\n        } else {\r\n            handleDataInput(\"\", pathFormData, \"boolean\")\r\n            handleConvertedDataInput(\"\", path + \".value\", \"boolean\")\r\n            handleConvertedDataInput(\"\", path + \".prevValue\", \"boolean\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div onMouseEnter={() => {\r\n                if (inputError === true) {\r\n                    setInputError(false)\r\n                    setDescriptionText(field_description !== undefined ? field_description : \"\")\r\n\r\n                    // then delete the value the convertedSchema\r\n                }\r\n            }} style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', alignItems: \"center\", width: '100%' }}>\r\n                <div style={{ paddingLeft: \"15px\", width: \"100%\" }}>\r\n                    <FormControl >\r\n                        <FormLabel style={{ paddingBottom: \"10px\", color: `${inputError ? \"red\" : \"\"}` }}>{field_label === undefined ? \"\" : field_label + \":\"}</FormLabel>\r\n                        {renderingInProgress ? <Box sx={{ width: '225px' }}>\r\n                            <LinearProgress />\r\n                        </Box> : null}\r\n                        <div style={{ width: \"225px\", display: \"flex\", justifyContent: \"center\" }}>\r\n                            {dataUrl !== \"\" ? <img src={dataUrl} width=\"225\" /> : null}\r\n                        </div>\r\n                        <div style={{ width: \"225px\", fontSize: \"10px\", color: \"grey\", paddingTop: \"5px\", whiteSpace: \"nowrap\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>\r\n                            {dataUrl}\r\n                        </div>\r\n                        <div style={{ paddingTop: \"5px\", textAlign: \"left\", width: \"100%\" }} >\r\n                            <Button color={inputError ? \"secondary\" : \"\"} variant=\"outlined\" {...getRootProps()} ><input {...getInputProps()} />Upload a file</Button>\r\n                            {dataUrl !== \"\" ? <Button onClick={() => { handleOnClickedClear() }} style={{ marginLeft: \"5px\" }} variant=\"outlined\" color=\"secondary\">Clear</Button> : null}\r\n                        </div>\r\n                        <FormHelperText style={{ color: `${inputError ? \"red\" : \"\"}` }}>{descriptionText}</FormHelperText>\r\n                    </FormControl>\r\n                </div>\r\n                {\r\n                    edit ? <>\r\n                        <Tooltip placement=\"top\" title={`Edit field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <EditIcon fontSize=\"small\" color=\"primary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip placement=\"top\" title={`Remove field \"${field_label}\"`}>\r\n                            <IconButton onClick={() => handleDeleteElement()} style={{ marginLeft: \"5px\", marginTop: \"5px\", height: \"45px\" }}>\r\n                                <DeleteIcon fontSize=\"small\" color=\"secondary\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </> : null\r\n                }\r\n            </div >\r\n            {openDialog ? <EditElement field_uri={field_uri} pathFormData={pathFormData} defaultValue={defaultValue} field_key={field_key} field_index={field_index} openDialog={openDialog} setOpenDialog={setOpenDialog} path={path} UISchema={UISchema} field_required={required} /> : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default FileUpload;\r\n","import React from 'react';\r\nimport StringType from \"./elements/StringType\";\r\nimport NumberType from \"./elements/NumberType\";\r\nimport ObjectType from './elements/ObjectType';\r\nimport IntegerType from './elements/IntegerType';\r\nimport BooleanType from './elements/BooleanType';\r\nimport ArrayType from './elements/ArrayType';\r\nimport AnyOfKeyword from './elements/AnyOfKeyword';\r\nimport FileUpload from './elements/FileUpload';\r\n\r\n\r\nconst ElementRenderer = ({ withinObject, dataInputItems, setDataInputItems, withinArray, path, pathSchema, pathFormData, elementRequired, fieldkey, fieldIndex, edit, field: { maxItems, type, $id, title, contentEncoding, description, properties, required, enumerate, items, defaultValue, value, anyOf } }) => {\r\n\r\n    switch (type) {\r\n        case 'string':\r\n            if (contentEncoding !== undefined) {\r\n                return (<FileUpload\r\n                    contentEncoding={contentEncoding}\r\n                    value={value}\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    dataInputItems={dataInputItems}\r\n                    setDataInputItems={setDataInputItems}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_index={fieldIndex}\r\n                    field_label={title}\r\n                    field_uri={$id}\r\n                    field_description={description}\r\n                    field_required={elementRequired}\r\n                    defaultValue={defaultValue}\r\n                    edit={edit}\r\n                />)\r\n            } else {\r\n                return (<StringType\r\n                    value={value}\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    dataInputItems={dataInputItems}\r\n                    setDataInputItems={setDataInputItems}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_index={fieldIndex}\r\n                    field_label={title}\r\n                    field_uri={$id}\r\n                    field_description={description}\r\n                    field_required={elementRequired}\r\n                    field_enumerate={enumerate}\r\n                    defaultValue={defaultValue}\r\n                    edit={edit}\r\n                />)\r\n            }\r\n        case 'number':\r\n            return (<NumberType\r\n                value={value}\r\n                withinArray={withinArray}\r\n                withinObject={withinObject}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldkey}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                field_key={fieldkey}\r\n                field_uri={$id}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'integer':\r\n            return (<IntegerType\r\n                value={value}\r\n                withinArray={withinArray}\r\n                withinObject={withinObject}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldkey}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                field_key={fieldkey}\r\n                field_uri={$id}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_enumerate={enumerate}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'boolean':\r\n            return (<BooleanType\r\n                value={value}\r\n                withinArray={withinArray}\r\n                withinObject={withinObject}\r\n                dataInputItems={dataInputItems}\r\n                setDataInputItems={setDataInputItems}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldkey}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                field_key={fieldkey}\r\n                field_uri={$id}\r\n                field_index={fieldIndex}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                defaultValue={defaultValue}\r\n                edit={edit}\r\n            />)\r\n        case 'array':\r\n            return (<ArrayType\r\n                value={value}\r\n                maxItems={maxItems}\r\n                oDataInputItems={dataInputItems}\r\n                oSetDataInputItems={setDataInputItems}\r\n                withinArray={withinArray}\r\n                withinObject={withinObject}\r\n                path={path + \".\" + fieldIndex}\r\n                pathSchema={pathSchema + \".\" + fieldkey}\r\n                pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                field_key={fieldkey}\r\n                field_index={fieldIndex}\r\n                field_uri={$id}\r\n                field_label={title}\r\n                field_description={description}\r\n                field_required={elementRequired}\r\n                field_items={items}\r\n                edit={edit}\r\n            />)\r\n        case 'object':\r\n            if (anyOf !== undefined) {\r\n                return (\r\n                    <AnyOfKeyword\r\n                        pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                        withinArray={withinArray}\r\n                        withinObject={withinObject}\r\n                        dataInputItems={dataInputItems}\r\n                        setDataInputItems={setDataInputItems}\r\n                        path={path + \".\" + fieldIndex}\r\n                        field_index={fieldIndex}\r\n                        field_key={fieldkey}\r\n                        field_uri={$id}\r\n                        field_label={title}\r\n                        field_description={description}\r\n                        field_required={elementRequired}\r\n                        anyOf_list={anyOf}\r\n                        edit={edit}\r\n                    />\r\n                )\r\n            } else {\r\n                return (<ObjectType\r\n                    withinArray={withinArray}\r\n                    withinObject={withinObject}\r\n                    path={path + \".\" + fieldIndex}\r\n                    pathSchema={pathSchema + \".\" + fieldkey}\r\n                    pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                    field_key={fieldkey}\r\n                    field_uri={$id}\r\n                    field_label={title}\r\n                    field_description={description}\r\n                    field_required={required}\r\n                    field_properties={properties}\r\n                    edit={edit}\r\n                />)\r\n            }\r\n        case undefined:\r\n            if (anyOf) {\r\n                return (\r\n                    <AnyOfKeyword\r\n                        pathFormData={pathFormData !== undefined ? pathFormData + \".\" + fieldkey : fieldkey}\r\n                        withinArray={withinArray}\r\n                        withinObject={withinObject}\r\n                        path={path + \".\" + fieldIndex}\r\n                        field_index={fieldIndex}\r\n                        field_key={fieldkey}\r\n                        field_uri={$id}\r\n                        field_label={title}\r\n                        field_description={description}\r\n                        field_required={elementRequired}\r\n                        anyOf_list={anyOf}\r\n                        edit={edit}\r\n                    />\r\n                )\r\n            } else {\r\n                return null\r\n            }\r\n\r\n        default:\r\n            return null;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ElementRenderer;\r\n","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { FormContext } from '../FormContext';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst EditSchemaHeader = ({ schemaID, title, description, schemaURI, openDialog, setOpenDialog }) => {\r\n\r\n    const [_schemaID, _setSchemaID] = useState(schemaID);\r\n    const [_title, _setTitle] = useState(title);\r\n    const [_description, _setDescription] = useState(description);\r\n    const [_schemaURI, _setSchemaURI] = useState(schemaURI);\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n\r\n\r\n\r\n\r\n    // save the change and update the UI\r\n    const handleUpdateSchemaOnClick = () => {\r\n\r\n        if (_schemaURI === undefined) {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else if (_schemaURI.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"$schema\"]\r\n        } else {\r\n            convertedSchema[\"$schema\"] = _schemaURI\r\n        };\r\n\r\n        if (_schemaID === undefined) {\r\n            delete convertedSchema[\"id\"]\r\n        } else if (_schemaID.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"id\"]\r\n        } else {\r\n            convertedSchema[\"id\"] = _schemaID\r\n        };\r\n\r\n        if (_title === undefined) {\r\n            delete convertedSchema[\"title\"]\r\n        } else if (_title.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"title\"]\r\n        } else {\r\n            convertedSchema[\"title\"] = _title\r\n        };\r\n\r\n        if (_description === undefined) {\r\n            delete convertedSchema[\"description\"]\r\n        } else if (_description.replace(/\\s+/g, '') === \"\") {\r\n            delete convertedSchema[\"description\"]\r\n        } else {\r\n            convertedSchema[\"description\"] = _description\r\n        };\r\n\r\n        updateParent(convertedSchema)\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    // change descriptor value\r\n    const handleChangeUISchema = (event, keyword) => {\r\n\r\n        switch (keyword) {\r\n            case 'title':\r\n                return _setTitle(event.target.value)\r\n            case 'description':\r\n                return _setDescription(event.target.value)\r\n            case 'id':\r\n                return _setSchemaID(event.target.value)\r\n            case 'uri':\r\n                return _setSchemaURI(event.target.value)\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    // cancel editing\r\n    const handleCancelEdit = () => {\r\n        _setDescription(description);\r\n        _setSchemaID(schemaID);\r\n        _setSchemaURI(schemaURI);\r\n        _setTitle(title);\r\n        setOpenDialog(false)\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <EditIcon fontSize=\"large\" color=\"primary\" style={{ alignSelf: \"center\" }} />\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Edit schema \"{title}\"\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">Basic Descriptors:</FormLabel>\r\n                            <TextField disabled margin='normal' onChange={event => handleChangeUISchema(event, \"id\")} style={{ marginTop: \"20px\" }} defaultValue={schemaURI} variant=\"outlined\" fullWidth={true} label={\"$schema\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"id\")} style={{ marginTop: \"10px\" }} defaultValue={schemaID} variant=\"outlined\" fullWidth={true} label={\"Schema ID\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"title\")} style={{ marginTop: \"10px\" }} defaultValue={title} variant=\"outlined\" fullWidth={true} label={\"Schema Title\"} />\r\n                            <TextField margin='normal' onChange={event => handleChangeUISchema(event, \"description\")} style={{ marginTop: \"10px\" }} defaultValue={description} variant=\"outlined\" fullWidth={true} label={\"Schema Description\"} multiline rows={3} />\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => handleUpdateSchemaOnClick()} color=\"primary\" autoFocus>\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default EditSchemaHeader;","import React, { useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { TextField } from '@material-ui/core';\r\nimport { IconButton, Button } from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\nconst JSONSchemaViewerDialog = ({ openSchemaViewer, setOpenSchemaViewer, jsonschema }) => {\r\n\r\n    return (<>\r\n        <Dialog\r\n            onClose={() => setOpenSchemaViewer(false)}\r\n            maxWidth=\"md\"\r\n            fullWidth={true}\r\n            open={openSchemaViewer}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        JSON Schema viewer\r\n                    </div>\r\n                    <IconButton onClick={() => setOpenSchemaViewer(false)}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <TextField\r\n                    disabled\r\n                    fullWidth={true}\r\n                    variant=\"filled\"\r\n                    multiline\r\n                    defaultValue={JSON.stringify(jsonschema, null, 2)}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n            </DialogActions>\r\n        </Dialog>\r\n\r\n        {/*\r\n        <div style={{ width: \"100%\", padding: \"10px 0px 10px 0px\" }}>\r\n            <Accordion expanded={expand} >\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    IconButtonProps={{\r\n                        onClick: expandOnChange\r\n                    }}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                        <div>\r\n                            <Typography className={classes.heading}>JSON Schema Viewer</Typography>\r\n                        </div>\r\n                    </div>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <div >\r\n                        <pre style={{ overflowX: \"auto\", whiteSpace: \"pre-wrap\", wordWrap: \"break-word\" }}>\r\n                            {JSON.stringify(jsonschema, null, 2)}\r\n                        </pre>\r\n                    </div>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n                */}\r\n    </>);\r\n};\r\n\r\nexport default JSONSchemaViewerDialog;","const fillForm = (schemaProp, data) => {\r\n    schemaProp.forEach(element => {\r\n        if (element[\"type\"] === \"object\") {\r\n            // early exist\r\n            if (data === undefined) {\r\n                return\r\n            } //\r\n            fillForm(element[\"properties\"], data[element[\"fieldKey\"]])\r\n        } else {\r\n            // early exist\r\n            if (data === undefined) {\r\n                return\r\n            } //\r\n            if (data[element[\"fieldKey\"]] !== undefined) {\r\n                const type = element[\"type\"]\r\n\r\n                element[\"value\"] = data[element[\"fieldKey\"]]\r\n\r\n                // validate input data before filling\r\n                switch (type) {\r\n                    case 'number':\r\n                        if (typeof (data[element[\"fieldKey\"]]) === \"number\") {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'integer':\r\n                        if (Number.isInteger(data[element[\"fieldKey\"]])) {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'boolean':\r\n                        if (typeof (data[element[\"fieldKey\"]]) === \"boolean\") {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'array':\r\n                        if (typeof (data[element[\"fieldKey\"]]) === \"array\") {\r\n                            return element[\"prevValue\"] = data[element[\"fieldKey\"]]\r\n                        } else {\r\n                            return null\r\n                        };\r\n                    case 'string':\r\n                        return (element[\"prevValue\"] = JSON.parse(JSON.stringify(data[element[\"fieldKey\"]])).toString());\r\n                    default:\r\n                        return null;\r\n                }\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport default fillForm;","import React, { useContext, useState, useCallback, useEffect } from \"react\";\r\n//import { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ElementRenderer from \"./ElementRenderer\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from \"@material-ui/icons/AddBox\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { FormContext } from '../FormContext';\r\nimport DragHandleIcon from \"@material-ui/icons/DragIndicator\";\r\nimport UploadDataIcon from '@mui/icons-material/UploadFile';\r\nimport { ReactComponent as JsonIcon } from '../assets/json-file-svgrepo-com.svg'\r\nimport RevertIvon from \"@material-ui/icons/History\";\r\nimport AddElement from \"./AddElement\";\r\nimport EditSchemaHeader from \"./EditSchemaHeader\";\r\nimport JSONSchemaViewerDialog from \"./JSONSchemaViewerDialog\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport fillForm from \"./utils/fillForm\";\r\n\r\nconst checkFormDataValidity = (file) => {\r\n    let validity = false\r\n    let message = `INVALID TYPE!\\n Form data must be of a json file type.`\r\n    if (file[0].type === \"application/json\") {\r\n        validity = true;\r\n        message = \"Form data is of a valid file type.\"\r\n    }\r\n    return [validity, message]\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        color: 'rgba(82, 94, 103, 1)',\r\n        fontSize: theme.typography.pxToRem(25),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\nconst FormRenderer = ({ revertAllChanges, schema, edit, originalSchema }) => {\r\n    const { updateParent, convertedSchema } = useContext(FormContext);\r\n    const [openDialogAddElement, setOpenDialogAddElement] = useState(false);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [openSchemaViewer, setOpenSchemaViewer] = useState(false);\r\n    const [receivedData, setReceivedData] = useState()\r\n\r\n    const classes = useStyles();\r\n\r\n    // browse or drag&drop schema file\r\n    const onDrop = useCallback(\r\n        (acceptedFile) => {\r\n            // process the schema, validation etc\r\n            let validity = checkFormDataValidity(acceptedFile);\r\n            if (validity[0] === false) {\r\n                toast.error(\r\n                    <div><strong>{validity[1]}</strong></div>,\r\n                    {\r\n                        position: \"top-right\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: false,\r\n                        progress: undefined,\r\n                    }\r\n                );\r\n            } else {\r\n                // read file and update receivedData\r\n                const reader = new FileReader();\r\n                reader.onabort = () => console.log(\"file reading was aborted\");\r\n                reader.onerror = () => console.log(\"file reading has failed\");\r\n                reader.onload = () => {\r\n                    const binaryStr = reader.result;\r\n                    const obj = JSON.parse(binaryStr);\r\n                    setReceivedData(obj)\r\n                }\r\n                reader.readAsText(acceptedFile[0]);\r\n            };\r\n        },\r\n        []\r\n    );\r\n    //\r\n\r\n    // basically fill the form with the recieved data everytime we receive the data\r\n    useEffect(() => {\r\n        if (receivedData !== undefined) {\r\n            let newValue = { ...convertedSchema };\r\n\r\n            //fills this converted schema with the received data\r\n            console.log(\"before filling:\\n\", JSON.parse(JSON.stringify(newValue)))\r\n            fillForm(newValue[\"properties\"], receivedData);\r\n            console.log(\"filled form:\\n\", newValue);\r\n\r\n            updateParent(newValue);\r\n        }\r\n    }, [receivedData])\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        multiple: false,\r\n    });\r\n\r\n    // deconstruct\r\n    const { properties, title, description, required, $schema, id } = schema ?? {}\r\n\r\n    // update the order in properties on drag end\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(properties);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        let value = { ...convertedSchema };\r\n        value[\"properties\"] = items;\r\n        updateParent(value);\r\n    }\r\n\r\n    /*\r\n    console.log(\"converted:\", convertedSchema)\r\n    let deconvertedSchema = JSON.parse(JSON.stringify(convertedSchema))\r\n    deconvertedSchema[\"properties\"] = array2object(convertedSchema[\"properties\"])\r\n    console.log(\"deconverted:\", deconvertedSchema)\r\n    */\r\n\r\n    // default schema for add new element\r\n    let defaultSchema = {}\r\n\r\n    return (<>\r\n        <div style={{ width: \"100%\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\r\n            <div style={{ paddingTop: \"10px\", paddingBottom: \"10px\", display: 'inline-flex', width: '100%' }}>\r\n                <Typography className={classes.heading} style={{ width: \"100%\" }}>{title}</Typography>\r\n                <Tooltip placement=\"top\" title=\"View JSON Schema for this form\">\r\n                    <Button onClick={() => setOpenSchemaViewer(true)} style={{ marginLeft: \"5px\" }}><JsonIcon style={{ height: \"22px\" }} /></Button>\r\n                </Tooltip>\r\n                <Tooltip placement=\"top\" title=\"Upload input data for this form\">\r\n                    <Button style={{ marginLeft: \"5px\" }}{...getRootProps()}>\r\n                        <input {...getInputProps()} />\r\n                        <UploadDataIcon />\r\n                    </Button>\r\n                </Tooltip>\r\n                {edit ? <>\r\n                    <Tooltip placement=\"top\" title=\"Edit json schema header\">\r\n                        <Button onClick={() => setOpenDialog(true)} style={{ marginLeft: \"5px\" }}>\r\n                            <EditIcon color=\"primary\" />\r\n                        </Button>\r\n                    </Tooltip>\r\n                    <Tooltip placement=\"top\" title=\"Revert all changes made to this form\">\r\n                        <Button onClick={() => revertAllChanges()} style={{ marginLeft: \"5px\" }}>\r\n                            <RevertIvon color=\"primary\" />\r\n                        </Button>\r\n                    </Tooltip>\r\n                </> : null}\r\n            </div>\r\n            <Divider />\r\n            <Typography>{description}</Typography>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"forms\">\r\n                    {(provided) => (\r\n                        <form {...provided.droppableProps} ref={provided.innerRef}>\r\n                            {Object.keys(properties).map((item, index) => {\r\n                                return (\r\n                                    <Draggable isDragDisabled={!edit} key={properties[item][\"fieldKey\"]} draggableId={properties[item][\"fieldKey\"]} index={index}>\r\n                                        {(provided) => (\r\n                                            <div {...provided.draggableProps} ref={provided.innerRef}>\r\n                                                <div style={{ display: \"flex\" }}>\r\n                                                    {edit ? <div style={{ width: \"20px\", marginTop: \"10px\", height: \"30px\" }} {...provided.dragHandleProps}>\r\n                                                        <Tooltip placement=\"top\" title={`Drag & drop to adjust the order of this field`}>\r\n                                                            <DragHandleIcon fontSize=\"small\" />\r\n                                                        </Tooltip>\r\n                                                    </div> : null}\r\n                                                    <ElementRenderer schema={schema} path={\"properties\"} pathSchema={\"properties\"} fieldkey={properties[item][\"fieldKey\"]} fieldIndex={item} elementRequired={required} edit={edit} field={properties[item]} />\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                );\r\n                            })}\r\n                            {provided.placeholder}\r\n                            {edit ? <div style={{ display: \"flex\", justifyContent: \"right\" }}>\r\n                                <Tooltip placement=\"top\" title={`Add a new element/field to this schema`}>\r\n                                    <Button onClick={() => setOpenDialogAddElement(true)} style={{ marginLeft: \"5px\" }}><AddIcon color=\"primary\" /> ADD ELEMENT</Button>\r\n                                </Tooltip>\r\n                            </div> : null}\r\n                        </form>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n        {openDialogAddElement ? <AddElement openDialog={openDialogAddElement} setOpenDialog={setOpenDialogAddElement} defaultSchema={defaultSchema} schemaTitle={title} /> : null}\r\n        {openDialog ? <EditSchemaHeader schemaID={id} title={title} description={description} schemaURI={$schema} openDialog={openDialog} setOpenDialog={setOpenDialog} /> : null}\r\n        {openSchemaViewer ? <JSONSchemaViewerDialog\r\n            openSchemaViewer={openSchemaViewer}\r\n            setOpenSchemaViewer={setOpenSchemaViewer}\r\n            jsonschema={originalSchema}\r\n        /> : null}\r\n        <ToastContainer />\r\n    </>);\r\n};\r\n\r\nexport default FormRenderer;","// convert iterable array to json schema properties\r\nconst array2object = (propert) => {\r\n    var someObject = {};\r\n    propert.forEach((item) => {\r\n        const tempKey = item[\"fieldKey\"];\r\n        delete item[\"fieldKey\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        Object.keys(tempElements).forEach((item) => {\r\n            // change \"enumerate\" to \"enum\"\r\n            if (item === \"enumerate\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"enumerate\"])\r\n                );\r\n                delete someObject[tempKey][\"enumerate\"];\r\n                someObject[tempKey][\"enum\"] = enumContent;\r\n            }\r\n            if (item === \"defaultValue\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"defaultValue\"])\r\n                );\r\n                delete someObject[tempKey][\"defaultValue\"];\r\n                someObject[tempKey][\"default\"] = enumContent;\r\n            }\r\n            if (item === \"properties\") {\r\n                // some recursion\r\n                someObject[tempKey][\"properties\"] = array2object(\r\n                    someObject[tempKey][\"properties\"]\r\n                );\r\n            }\r\n            if (item === \"value\") {\r\n                delete someObject[tempKey][\"value\"]\r\n            }\r\n            if (item === \"prevValue\") {\r\n                delete someObject[tempKey][item]\r\n            }\r\n        });\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default array2object;","import getValue from \"./getValue\";\r\nimport set from \"set-value\";\r\n\r\n// delete key and value given path\r\nconst deleteKeySchema = (json, path) => {\r\n    let jsonData = JSON.parse(JSON.stringify(json));\r\n    let pathArray = path.split('.');\r\n\r\n    if (pathArray.length === 1) {\r\n        delete jsonData[pathArray[0]];\r\n    } else {\r\n        let tobeDeleted = pathArray.pop();\r\n        pathArray = pathArray.join(\".\");\r\n        let value = getValue(jsonData, pathArray);\r\n        delete value[tobeDeleted]\r\n        set(jsonData, pathArray, value);\r\n    }\r\n\r\n    return jsonData;\r\n\r\n\r\n};\r\n\r\nexport default deleteKeySchema;","// validate form data against its schema using the Ajv package\r\n\r\n//\r\n// TO DO: since AJV does not really check the nested schemas easily, we must then implement a recursion to check every object type that has subschemas\r\n//      : for both formData and schema\r\n\r\nimport Ajv from \"ajv\";\r\nimport Ajv04 from \"ajv-draft-04\";\r\nimport deleteKeySchema from \"./deleteKeySchema\";\r\n\r\nconst validateAgainstSchema = (formData, schema) => {\r\n\r\n    if (schema[\"$schema\"] !== undefined) {\r\n        if (schema[\"$schema\"].includes(\"draft-04\")) {\r\n            console.log(\"draft-04 is detected\")\r\n            const ajv = new Ajv04({ schemaId: \"id\", allErrors: true });\r\n\r\n            const validate = ajv.compile(schema);\r\n            const valid = validate(formData)\r\n\r\n            return [valid, validate];\r\n        } else {\r\n            const ajv = new Ajv({ allErrors: true });\r\n            /*\r\n            if (schema[\"$schema\"] !== undefined) {\r\n                schema = deleteKeySchema(schema, \"$schema\")\r\n            }\r\n            if (schema[\"id\"] !== undefined) {\r\n                schema = deleteKeySchema(schema, \"id\")\r\n            }\r\n            */\r\n\r\n\r\n            const validate = ajv.compile(schema);\r\n            const valid = validate(formData)\r\n\r\n            return [valid, validate];\r\n        }\r\n    } else if (schema[\"schema\"] !== undefined) {\r\n        const ajv = new Ajv({ allErrors: true });\r\n        const validate = ajv.compile(schema);\r\n        const valid = validate(formData)\r\n\r\n        return [valid, validate];\r\n    } else {\r\n        const ajv = new Ajv({ allErrors: true });\r\n        if (schema[\"$schema\"] !== undefined) {\r\n            schema = deleteKeySchema(schema, \"$schema\")\r\n        }\r\n        if (schema[\"id\"] !== undefined) {\r\n            schema = deleteKeySchema(schema, \"id\")\r\n        }\r\n\r\n\r\n        const validate = ajv.compile(schema);\r\n        const valid = validate(formData)\r\n\r\n        return [valid, validate];\r\n    }\r\n}\r\n\r\nexport default validateAgainstSchema;","import React, { useContext, useState } from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { Button } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { Autocomplete } from '@material-ui/lab';\r\n\r\n\r\nconst CreateELabFTWExperimentDialog = ({ getTagsELabFTW, eLabURL, setELabURL, setTags, tags, setRetrievedTags, retrievedTags, setExperimentTitle, setToken, token, setOpenSubmitDialog, openSubmitDialog, createExperimentELabFTW }) => {\r\n\r\n    const onTagsChange = (event, values) => {\r\n        setTags(values);\r\n    };\r\n\r\n    // cancel submit\r\n    const handleCancelEdit = () => {\r\n        setOpenSubmitDialog(false)\r\n        setRetrievedTags([])\r\n        setELabURL(\"\")\r\n        setToken(\"\")\r\n        setTags([])\r\n    }\r\n\r\n    return (\r\n        <><Dialog\r\n            open={openSubmitDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                <div style={{ display: \"inline-flex\", width: \"100%\", verticalAlign: \"middle\" }}>\r\n                    <div style={{ width: \"100%\", alignSelf: \"center\" }}>\r\n                        Create eLabFTW Experiment\r\n                    </div>\r\n                    <IconButton onClick={() => handleCancelEdit()}><CloseIcon fontSize=\"large\" color=\"secondary\" /></IconButton>\r\n                </div>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\" component=\"span\">\r\n                    <div>\r\n                        <FormControl component=\"widget-type\">\r\n                            <FormLabel style={{ color: \"#01579b\" }} component=\"legend\">eLabFTW</FormLabel>\r\n                            <TextField required margin='normal' onChange={event => setELabURL(event.target.value)} style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Your eLabFTW main URL\"} />\r\n                            <TextField required margin='normal' onChange={event => setToken(event.target.value)} style={{ marginTop: \"20px\" }} variant=\"outlined\" fullWidth={true} label={\"Your eLabFTW token\"} />\r\n                            <TextField margin='normal' onBlur={event => setExperimentTitle(event.target.value)} style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Experiment title\"} />\r\n                            <div style={{ display: 'inline-flex', width: '100%' }}>\r\n                                <Autocomplete\r\n                                    style={{ width: \"100%\" }}\r\n                                    disabled={retrievedTags.length === 0 ? true : false}\r\n                                    multiple\r\n                                    freeSolo\r\n                                    options={retrievedTags}\r\n                                    getOptionLabel={option => option.tag || option}\r\n                                    onChange={onTagsChange}\r\n                                    renderInput={params => (\r\n                                        <TextField\r\n                                            {...params}\r\n                                            disabled={retrievedTags.length === 0 ? true : false}\r\n                                            variant=\"outlined\"\r\n                                            label=\"Tags\"\r\n                                            margin=\"normal\"\r\n                                            style={{ marginTop: \"10px\" }}\r\n                                            helperText='Press the \"GET TAGS\" button to retrieve available tags from your eLabFTW system.Note: you have to provide the eLabFTW main URL and token to enable the button.'\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                {/*<TextField disabled={retrievedTags.length === 0 ? true : false} margin='normal' style={{ marginTop: \"10px\" }} variant=\"outlined\" fullWidth={true} label={\"Tags\"} helperText='Press the \"GET TAGS\" button to retrieve available tags from your eLabFTW system. Note: you have to provide the eLabFTW main URL and token to enable the button.' />*/}\r\n                                <Button onClick={() => getTagsELabFTW()} disabled={(token.trim() === \"\" | eLabURL.trim() === \"\") | (token === undefined | eLabURL === undefined) ? true : false} style={{ marginLeft: \"5px\", height: \"55px\", marginTop: \"11px\" }} variant=\"contained\" color=\"primary\">Get Tags</Button>\r\n                            </div>\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleCancelEdit()} color=\"secondary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={(token.trim() === \"\" | eLabURL.trim() === \"\") | (token === undefined | eLabURL === undefined) ? true : false} onClick={() => createExperimentELabFTW()} color=\"primary\" autoFocus>\r\n                    Create Experiment\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default CreateELabFTWExperimentDialog;","const createDescriptionList = (data) => {\r\n    let descList = \"\";\r\n    const emptyString = (element) => element === \"\";\r\n\r\n    data.forEach(element => {\r\n        if (element[\"path\"] === \"\") {\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span style=\"color: #ffffff;\"><a style=\"color: #ffffff;\" title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                } else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n        } else {\r\n            let pathArr = element[\"path\"].split(\".\");\r\n            let titleDiv = `<dt style=\"background-color: #ffffff; border: 0px; height: 10px;\"></dt>\\n`\r\n            titleDiv += `<dt style=\"background-color: #ffffff; border: 0px;\">`\r\n            pathArr.forEach((item, index) => {\r\n                if (element[\"pathURIs\"] !== undefined & !element[\"pathURIs\"].some(emptyString)) {\r\n                    if (item !== \"\") {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a title=${element[\"pathURIs\"][index]} href=${element[\"pathURIs\"][index]}>${element[\"pathLabels\"][index]}</a><a style=\"color: #29aeb9;\">/</a>`\r\n                        }\r\n                    } else {\r\n                        if (index === (pathArr.length - 1)) {\r\n                            titleDiv += `<a style=\"color:#000000;\"><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                        } else {\r\n                            titleDiv += `<a style=\"color:#000000;\">${element[\"pathLabels\"][index]}/</a>`\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (index === (pathArr.length - 1)) {\r\n                        titleDiv += `<a style=\"color:#000000;\"><strong>${element[\"pathLabels\"][index]}</strong></a>`\r\n\r\n                    } else {\r\n                        titleDiv += `<a style=\"color:#000000;\">${element[\"pathLabels\"][index]}/</a>`\r\n                    }\r\n                }\r\n            })\r\n            titleDiv += \"</dt>\\n\"\r\n\r\n            descList += titleDiv\r\n            //descList += \"<dl>\\n\";\r\n            element[\"fields\"].forEach(item => {\r\n                if (item[\"$id\"] !== undefined) {\r\n                    descList += `<dt><span style=\"color: #ffffff;\"><a style=\"color: #ffffff;\" title=${item[\"$id\"]} href=${item[\"$id\"]}>${item[\"label\"]}</a></span></dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                } else {\r\n                    descList += `<dt>${item[\"label\"]}</dt>\\n`\r\n                    descList += `<dd>${item[\"value\"]}</dd>\\n`\r\n                }\r\n            })\r\n            //descList += \"</dl>\\n\"\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    return descList;\r\n}\r\n\r\nexport default createDescriptionList;","const convData2DescList = (convDataProp) => {\r\n    let someObject = {};\r\n    convDataProp.forEach((item) => {\r\n        const fieldkey = item[\"fieldKey\"];\r\n        const type = item[\"type\"];\r\n\r\n        if (type === \"object\") {\r\n            someObject[fieldkey] = convData2DescList(item[\"properties\"])\r\n        } else {\r\n            if (item[\"value\"] !== undefined) {\r\n                someObject[fieldkey] = { value: item[\"value\"] }\r\n                someObject[fieldkey][\"label\"] = item[\"title\"]\r\n                someObject[fieldkey][\"key\"] = item[\"fieldKey\"]\r\n                someObject[fieldkey][\"$id\"] = item[\"$id\"]\r\n            }\r\n        }\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default convData2DescList;","const getPaths = (object, value) => {\r\n    return Object\r\n        .keys(object)\r\n        .reduce((r, k) => {\r\n            var kk = Array.isArray(object) ? `[${k}]` : `${k}`;\r\n            if (object[k] === value) {\r\n                r.push(kk);\r\n            }\r\n            if (object[k] && typeof object[k] === 'object') {\r\n                r.push(...getPaths(object[k], value).map(p => kk + (p[0] === '[' ? '' : '.') + p));\r\n            }\r\n            return r;\r\n        }, []);\r\n}\r\n\r\nexport default getPaths;","// get json value in schema given path\r\nconst getValueInSchema = (json, path) => {\r\n    if (path === undefined) {\r\n        return json[\"properties\"]\r\n    }\r\n    let jsonData = JSON.parse(JSON.stringify(json))\r\n    path = path.split('.')\r\n    if (path[0] === \"\") {\r\n        return undefined;\r\n    }\r\n    let tempValue = jsonData[\"properties\"]\r\n    for (let i = 0; i < path.length; i++) {\r\n        if (tempValue[\"type\"] === \"object\") {\r\n            tempValue = tempValue[\"properties\"][path[i]]\r\n        } else {\r\n            tempValue = tempValue[path[i]]\r\n        }\r\n    }\r\n    return tempValue\r\n};\r\n\r\nexport default getValueInSchema;","import getValueInSchema from \"./getValueInSchema\";\r\n\r\nconst getPathURIsAndLabels = (object, path) => {\r\n\r\n    let pathArr = path.split(\".\")\r\n    let newPath = []\r\n    let uris = []\r\n    let labels = []\r\n    for (let i = 0; i < pathArr.length; i++) {\r\n        newPath.push(pathArr[i])\r\n\r\n        let thePath = JSON.parse(JSON.stringify(newPath));\r\n        thePath = thePath.join(\".\")\r\n        let value = getValueInSchema(object, thePath)\r\n        if (typeof (value) === \"object\") {\r\n            if (value[\"$id\"] !== undefined) {\r\n                uris.push(value[\"$id\"])\r\n            } else {\r\n                uris.push(\"\")\r\n            }\r\n            if (value[\"title\"] !== undefined) {\r\n                labels.push(value[\"title\"])\r\n            } else {\r\n                labels.push(\"\")\r\n            }\r\n        } else {\r\n            uris.push(\"\")\r\n            labels.push(\"\")\r\n        }\r\n    }\r\n\r\n    return [uris, labels];\r\n\r\n}\r\n\r\nexport default getPathURIsAndLabels;","import getPaths from \"./getPaths\";\r\nimport getPathURIsAndLabels from \"./getPathURIsAndLabels\";\r\n\r\n/**\r\n * Get rid of the last two items of each path in pathArr\r\n * @param {*} pathArr \r\n * @returns processedArr\r\n */\r\nconst pathPreProcess = (pathArr) => {\r\n    let processedArr = []\r\n    pathArr.forEach((item) => {\r\n        item = item.split(\".\");\r\n        item.pop();\r\n        item.pop();\r\n        item = item.join(\".\");\r\n        processedArr.push(item)\r\n    })\r\n\r\n    return processedArr\r\n}\r\n\r\nconst preProcessB4DescList = (content, originalContent, originalSchema, arr) => {\r\n\r\n    Object.keys(content).forEach((item) => {\r\n        if (content[item][\"label\"] === undefined) {\r\n            preProcessB4DescList(content[item], originalContent, originalSchema, arr)\r\n        }\r\n        else {\r\n            if (content[item][\"value\"] !== undefined) {\r\n                /*\r\n                 a function to get a path of a given a key:attribute pair\r\n                */\r\n                let path_key = getPaths(originalContent, content[item][\"key\"])\r\n                path_key = pathPreProcess(path_key)\r\n                let path_label = getPaths(originalContent, content[item][\"label\"])\r\n                path_label = pathPreProcess(path_label)\r\n                let path = path_key.filter(value => path_label.includes(value));\r\n                let URIsAndLabels = getPathURIsAndLabels(originalSchema, path[0])\r\n\r\n                arr.push({\r\n                    \"path\": path[0],\r\n                    \"pathURIs\": URIsAndLabels[0],\r\n                    \"pathLabels\": URIsAndLabels[1],\r\n                    \"key\": content[item][\"key\"],\r\n                    \"label\": content[item][\"label\"],\r\n                    \"value\": content[item][\"value\"],\r\n                    \"$id\": content[item][\"$id\"]\r\n                })\r\n            }\r\n        }\r\n    })\r\n\r\n    return arr;\r\n};\r\n\r\nexport default preProcessB4DescList;","const checkObjectExistance = (arr, path) => {\r\n    let loc = false\r\n    arr.forEach((element, index) => {\r\n        if (element[\"path\"] === path) {\r\n            loc = index\r\n        }\r\n    })\r\n    return loc;\r\n}\r\n\r\nconst nicelySort = (arr) => {\r\n    let sortedArr = []\r\n    arr.forEach(element => {\r\n        // check if an object with element[\"path\"] already exists\r\n        let loc = checkObjectExistance(sortedArr, element[\"path\"])\r\n\r\n        if (loc !== false) {\r\n            let fieldArr = sortedArr[loc][\"fields\"]\r\n            fieldArr.push({ key: element[\"key\"], label: element[\"label\"], value: element[\"value\"], $id: element[\"$id\"] })\r\n        } else {\r\n            // if not then create a new object\r\n            let newObj = {}\r\n            newObj[\"path\"] = element[\"path\"]\r\n            newObj[\"pathURIs\"] = element[\"pathURIs\"]\r\n            newObj[\"pathLabels\"] = element[\"pathLabels\"]\r\n            newObj[\"fields\"] = [{ key: element[\"key\"], label: element[\"label\"], value: element[\"value\"], $id: element[\"$id\"] }]\r\n            //console.log(newObj)\r\n            sortedArr.push(newObj)\r\n        }\r\n    });\r\n\r\n\r\n    return sortedArr;\r\n}\r\n\r\nexport default nicelySort;","// convert iterable array to json schema properties\r\nconst array2objectAnyOf = (propert) => {\r\n    var someObject = {};\r\n    propert.forEach((item) => {\r\n        const tempKey = item[\"fieldKey\"];\r\n        delete item[\"fieldKey\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        Object.keys(tempElements).forEach((item) => {\r\n            // change \"enumerate\" to \"enum\"\r\n            if (item === \"enumerate\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"enumerate\"])\r\n                );\r\n                delete someObject[tempKey][\"enumerate\"];\r\n                someObject[tempKey][\"enum\"] = enumContent;\r\n            }\r\n            if (item === \"defaultValue\") {\r\n                const enumContent = JSON.parse(\r\n                    JSON.stringify(someObject[tempKey][\"defaultValue\"])\r\n                );\r\n                delete someObject[tempKey][\"defaultValue\"];\r\n                someObject[tempKey][\"default\"] = enumContent;\r\n            }\r\n            if (item === \"properties\") {\r\n                if (someObject[tempKey][\"anyOf\"] !== undefined) {\r\n                    delete someObject[tempKey][\"properties\"]\r\n                    delete someObject[tempKey][\"type\"]\r\n                } else {\r\n                    // some recursion\r\n                    someObject[tempKey][\"properties\"] = array2objectAnyOf(\r\n                        someObject[tempKey][\"properties\"]\r\n                    );\r\n                }\r\n            }\r\n            if (item === \"value\") {\r\n                delete someObject[tempKey][\"value\"]\r\n            }\r\n            if (item === \"prevValue\") {\r\n                delete someObject[tempKey][item]\r\n            }\r\n        });\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default array2objectAnyOf;","const fillValueWithEmptyString = (jsonObjProp) => {\r\n\r\n    jsonObjProp.forEach(element => {\r\n        if (element[\"type\"] === \"object\") {\r\n            fillValueWithEmptyString(element[\"properties\"])\r\n        } else {\r\n            if (element[\"value\"] === undefined) {\r\n                element[\"value\"] = \"\"\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n}\r\n\r\nexport default fillValueWithEmptyString;","const convData2FormData = (convDataProp) => {\r\n    var someObject = {};\r\n    convDataProp.forEach((item) => {\r\n        const tempKey = item[\"fieldKey\"];\r\n        delete item[\"fieldKey\"];\r\n        const tempElements = item;\r\n        someObject[tempKey] = tempElements;\r\n        if (someObject[tempKey][\"value\"] === undefined & someObject[tempKey][\"type\"] !== \"object\") {\r\n            delete someObject[tempKey]\r\n        } else {\r\n            someObject[tempKey] = tempElements;\r\n            Object.keys(tempElements).forEach((item) => {\r\n                if (item === \"properties\") {\r\n                    // some recursion\r\n                    someObject[tempKey] = convData2FormData(\r\n                        someObject[tempKey][\"properties\"]\r\n                    );\r\n                }\r\n                if (item === \"value\") {\r\n                    let value = someObject[tempKey][\"value\"]\r\n                    delete someObject[tempKey]\r\n                    someObject[tempKey] = value\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return someObject;\r\n};\r\n\r\nexport default convData2FormData;","import React, { useCallback, useState } from \"react\";\r\n//import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport HeaderImage from \"../assets/header-image.png\";\r\nimport FormRenderer from \"../components/FormRenderer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { FormContext } from \"../FormContext\";\r\nimport array2object from \"../components/utils/array2object\";\r\nimport object2array from \"../components/utils/object2array\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport DownloadIcon from \"@material-ui/icons/GetApp\";\r\nimport set from \"set-value\";\r\nimport getValue from \"../components/utils/getValue\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport deleteKeySchema from \"../components/utils/deleteKeySchema\";\r\nimport validateAgainstSchema from \"../components/utils/validateAgainstSchema\";\r\nimport CreateELabFTWExperimentDialog from \"../components/CreateELabFTWExperimentDialog\";\r\nimport { useEffect } from \"react\";\r\nimport createDescriptionList from \"../components/utils/createDescriptionList\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport convData2DescList from \"../components/utils/convData2DescList\";\r\nimport preProcessB4DescList from \"../components/utils/preProcessB4DescList\";\r\nimport nicelySort from \"../components/utils/nicelySort\";\r\nimport array2objectAnyOf from \"../components/utils/array2objectAnyOf\";\r\nimport SchemaOne from \"../schemas/plasma-mds.json\";\r\nimport SchemaTwo from \"../schemas/pak-schema.json\";\r\nimport SchemaThree from \"../schemas/appj-schema.json\";\r\nimport SchemaFour from \"../schemas/all-types.json\";\r\nimport fillValueWithEmptyString from \"../components/utils/fillValueWithEmptyString\";\r\nimport convData2FormData from \"../components/utils/convData2FormData\";\r\n\r\n// function that receive the schema and convert it to Form/json data blueprint\r\n// also to already put the default value to this blueprint\r\nconst createFormDataBlueprint = (schemaProperties) => {\r\n  let newObject = {};\r\n\r\n  Object.keys(schemaProperties).forEach((item) => {\r\n    if (schemaProperties[item][\"type\"] !== \"object\") {\r\n      if (schemaProperties[item][\"default\"] !== undefined) {\r\n        newObject[item] = schemaProperties[item][\"default\"];\r\n      } else if (\r\n        (schemaProperties[item][\"default\"] === undefined) &\r\n        (schemaProperties[item][\"enum\"] !== undefined)\r\n      ) {\r\n        newObject[item] = schemaProperties[item][\"enum\"][0];\r\n      } else if (\r\n        (schemaProperties[item][\"type\"] === \"boolean\") &\r\n        (schemaProperties[item][\"default\"] === undefined)\r\n      ) {\r\n        newObject[item] = false;\r\n      }\r\n    } else {\r\n      if (schemaProperties[item][\"properties\"] !== undefined) {\r\n        newObject[item] = createFormDataBlueprint(\r\n          schemaProperties[item][\"properties\"]\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return newObject;\r\n};\r\n\r\n/*\r\n// function to remove empty artributes\r\nconst removeEmpty = (obj) => {\r\n  return Object.fromEntries(\r\n    Object.entries(obj)\r\n      .filter(([_, v]) => (v !== null) & (v !== \"\") & (v !== {}) & (v !== []))\r\n      .map(([k, v]) => [k, v === Object(v) ? removeEmpty(v) : v])\r\n  );\r\n};\r\n*/\r\n\r\n// function to remove empty artributes\r\nconst removeEmpty = (obj) => {\r\n  Object.keys(obj).forEach((key) => {\r\n    if (obj[key] && typeof obj[key] === \"object\") {\r\n      const childObject = removeEmpty(obj[key]);\r\n      if (childObject === undefined) {\r\n        delete obj[key];\r\n      }\r\n    } else if (obj[key] === \"\" || obj[key] === null || obj[key] === undefined) {\r\n      delete obj[key];\r\n    }\r\n  });\r\n  return Object.keys(obj).length > 0 || obj instanceof Array ? obj : undefined;\r\n};\r\n\r\nconst AdamantMain = () => {\r\n  // state management\r\n  const [disable, setDisable] = useState(true);\r\n  const [schemaMessage, setSchemaMessage] = useState(null);\r\n  const [schemaValidity, setSchemaValidity] = useState(false);\r\n  const [schema, setSchema] = useState(null);\r\n  const [schemaIntermediate, setSchemaIntermediate] = useState(null);\r\n  const [renderReady, setRenderReady] = useState(false);\r\n  const [editMode, setEditMode] = useState(true);\r\n  const [schemaList, setSchemaList] = useState([]);\r\n  const [schemaNameList, setSchemaNameList] = useState([]);\r\n  const [selectedSchemaName, setSelectedSchemaName] = useState(\"\");\r\n  const [originalSchema, setOriginalSchema] = useState();\r\n  const [inputMode, setInputMode] = useState(false);\r\n  const [convertedSchema, setConvertedSchema] = useState(null);\r\n  const [createScratchMode, setCreateScratchMode] = useState(false);\r\n  const [jsonData, setJsonData] = useState({});\r\n  const [descriptionList, setDescriptionList] = useState(\"\");\r\n  const [schemaWithValues, setSchemaWithValues] = useState({});\r\n  const [token, setToken] = useState(\"\");\r\n  const [eLabURL, setELabURL] = useState(\"\");\r\n  const [experimentTitle, setExperimentTitle] = useState(\"\");\r\n  const [onlineMode, setOnlineMode] = useState(false);\r\n  const [tags, setTags] = useState([]);\r\n  const [retrievedTags, setRetrievedTags] = useState([]);\r\n  // for dropdown buttons\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [openSubmitDialog, setOpenSubmitDialog] = useState(false);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  }; //\r\n\r\n  // check if the front-end is connected to backend at all\r\n  useEffect(() => {\r\n    let $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"GET\",\r\n      url: \"/adamant/api/check_mode\",\r\n      success: function () {\r\n        console.log(\"Connection to server is established. Online mode\");\r\n        setOnlineMode(true);\r\n        toast.success(\"Connection to server is established. Online mode.\", {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        });\r\n      },\r\n      error: function () {\r\n        console.log(\"Unable to establish connection to server. Offline mode\");\r\n        setOnlineMode(false);\r\n\r\n        // use available schema as a place holder\r\n        setSchemaNameList([\r\n          \"\",\r\n          \"plasma-mds.json\",\r\n          \"pak-schema.json\",\r\n          \"appj-schema.json\",\r\n          \"all-types.json\",\r\n        ]);\r\n        setSchemaList([null, SchemaOne, SchemaTwo, SchemaThree, SchemaFour]);\r\n\r\n        toast.warning(\r\n          \"Unable to establish connection to server. Offline mode.\",\r\n          {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false,\r\n            progress: undefined,\r\n          }\r\n        );\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // get schemas from server when onlinemode is true\r\n  useEffect(() => {\r\n    // if online mode then get available schemas from server\r\n    if (onlineMode === true) {\r\n      let $ = require(\"jquery\");\r\n      $.ajax({\r\n        type: \"GET\",\r\n        url: \"/adamant/api/get_schemas\",\r\n        success: function (status) {\r\n          console.log(\"SUCCESS\");\r\n\r\n          // do this to preserver the order\r\n          let sch = [];\r\n          status[\"schema\"].forEach((element) => {\r\n            sch.push(JSON.parse(element));\r\n          });\r\n\r\n          setSchemaList(sch);\r\n          setSchemaNameList(status[\"schemaName\"]);\r\n        },\r\n        error: function () {\r\n          console.log(\"ERROR\");\r\n          toast.warning(\r\n            \"Error while fetching the schemas. Using basic list of schemas.\",\r\n            {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: false,\r\n              progress: undefined,\r\n            }\r\n          );\r\n          // if unable to fetch the schemas then use the basic list of schemas\r\n          setSchemaNameList([\r\n            \"\",\r\n            \"plasma-mds.json\",\r\n            \"pak-schema.json\",\r\n            \"appj-schema.json\",\r\n            \"all-types.json\",\r\n          ]);\r\n          setSchemaList([null, SchemaOne, SchemaTwo, SchemaThree, SchemaFour]);\r\n        },\r\n      });\r\n    }\r\n  }, [onlineMode]);\r\n\r\n  // handle select schema on change\r\n  const handleSelectSchemaOnChange = (event) => {\r\n    // first reset states\r\n    setRenderReady(false);\r\n    setDisable(true);\r\n    setCreateScratchMode(false);\r\n    setJsonData({});\r\n    //\r\n\r\n    console.log(\"selected schema:\", event.target.value);\r\n    setSelectedSchemaName(event.target.value);\r\n\r\n    let selectedSchema = schemaList[schemaNameList.indexOf(event.target.value)];\r\n\r\n    // reset everything when selectedSchema is empty\r\n    if (selectedSchema === null) {\r\n      setDisable(true);\r\n      setRenderReady(false);\r\n      setSchema(null);\r\n      setSchemaValidity(false);\r\n      setSchemaMessage();\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      return;\r\n    }\r\n\r\n    // convert selectedSchema schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n    try {\r\n      convertedSchema[\"properties\"] = object2array(\r\n        selectedSchema[\"properties\"]\r\n      );\r\n\r\n      // update states\r\n      setSchemaValidity(true);\r\n      setSchemaMessage(`${event.target.value} is a valid schema`);\r\n      setSchema(selectedSchema);\r\n      let oriSchema = JSON.parse(JSON.stringify(selectedSchema));\r\n      setOriginalSchema(oriSchema);\r\n      setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n      setConvertedSchema(convertedSchema);\r\n      setEditMode(true);\r\n\r\n      // create form data\r\n      let formData = createFormDataBlueprint(selectedSchema[\"properties\"]);\r\n      setJsonData(formData);\r\n    } catch (error) {\r\n      console.log(error);\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${event.target.value} is invalid`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // function to check if the file accepted is of json format and json schema valid\r\n  const checkSchemaValidity = (schemaFile) => {\r\n    // place holder\r\n    if (schemaFile[0][\"type\"] === \"application/json\") {\r\n      // read the file with FileReadr API\r\n      const reader = new FileReader();\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = () => {\r\n        const binaryStr = reader.result;\r\n        const obj = JSON.parse(binaryStr);\r\n\r\n        // convert obj schema to iterable array properties\r\n        let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n        try {\r\n          convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n          // update states\r\n          setSchemaValidity(true);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is a valid schema`);\r\n          setSchema(obj);\r\n          let oriSchema = JSON.parse(JSON.stringify(obj));\r\n          setOriginalSchema(oriSchema);\r\n          setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n          setConvertedSchema(convertedSchema);\r\n          setEditMode(true);\r\n\r\n          // create form data\r\n          let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n          setJsonData(formData);\r\n        } catch (error) {\r\n          console.log(error);\r\n          // update states\r\n          setSchemaValidity(false);\r\n          setSchemaMessage(`${schemaFile[0][\"name\"]} is invalid`);\r\n          setSchema(null);\r\n        }\r\n      };\r\n      reader.readAsText(schemaFile[0]);\r\n    } else {\r\n      // update states\r\n      setSchemaValidity(false);\r\n      setSchemaMessage(`${schemaFile[0][\"name\"]} is of incorrect file type`);\r\n      setSchema(null);\r\n    }\r\n  };\r\n\r\n  // browse or drag&drop schema file\r\n  const onDrop = useCallback(\r\n    (acceptedFile) => {\r\n      // process the schema, validation etc\r\n      checkSchemaValidity(acceptedFile);\r\n\r\n      // store schema file in the state\r\n      // update states\r\n      setRenderReady(false);\r\n      setDisable(true);\r\n      setCreateScratchMode(false);\r\n      setJsonData({});\r\n      setSelectedSchemaName(\"\");\r\n    },\r\n    [setRenderReady]\r\n  );\r\n  //\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    multiple: false,\r\n  });\r\n\r\n  // render on-click handle\r\n  const renderOnClick = () => {\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // clear schema on-click handle\r\n  const clearSchemaOnClick = () => {\r\n    setDisable(true);\r\n    setRenderReady(false);\r\n    setSchema(null);\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setCreateScratchMode(false);\r\n    setSelectedSchemaName(\"\");\r\n  };\r\n\r\n  // create new schema from scratch\r\n  const createSchemaFromScratch = () => {\r\n    // update browse schema render states\r\n    setSchemaValidity(false);\r\n    setSchemaMessage();\r\n    setJsonData({});\r\n    setSelectedSchemaName(\"\");\r\n\r\n    let schemaBlueprint = {\r\n      $schema: \"http://json-schema.org/draft-04/schema#\",\r\n      properties: {},\r\n      type: \"object\",\r\n    };\r\n    const obj = JSON.parse(JSON.stringify(schemaBlueprint));\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(obj[\"properties\"]);\r\n    setJsonData(formData);\r\n\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(obj));\r\n    convertedSchema[\"properties\"] = object2array(obj[\"properties\"]);\r\n\r\n    // update states\r\n    setCreateScratchMode(true);\r\n    setSchema(obj);\r\n    let oriSchema = JSON.parse(JSON.stringify(obj));\r\n    setOriginalSchema(oriSchema);\r\n    setSchemaWithValues(JSON.parse(JSON.stringify(oriSchema)));\r\n    setConvertedSchema(convertedSchema);\r\n    setEditMode(true);\r\n\r\n    setDisable(false);\r\n    setRenderReady(true);\r\n  };\r\n\r\n  // compile on-click handle\r\n  const compileOnClick = () => {\r\n    let value = schema;\r\n    setInputMode(true);\r\n    setSchema(value);\r\n    setEditMode(false);\r\n    setDisable(true);\r\n  };\r\n\r\n  // return to edit mode handle\r\n  const toEditMode = () => {\r\n    let value = schema;\r\n    setInputMode(false);\r\n    setSchema(value);\r\n    setEditMode(true);\r\n    setDisable(false);\r\n  };\r\n\r\n  // update parent (re-render everything)\r\n  const updateParent = (value) => {\r\n    let newValue = { ...value };\r\n\r\n    // update original schema\r\n    let updatedSchema = JSON.parse(JSON.stringify(newValue));\r\n    let tempSchema = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema[\"properties\"] = array2object(tempSchema[\"properties\"]);\r\n\r\n    setConvertedSchema(newValue);\r\n    setSchema(updatedSchema);\r\n\r\n    // update intermediate schema\r\n    let updatedSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    let tempSchema2 = JSON.parse(JSON.stringify(newValue));\r\n    updatedSchema2[\"properties\"] = array2objectAnyOf(tempSchema2[\"properties\"]);\r\n    setSchemaIntermediate(updatedSchema2);\r\n  };\r\n\r\n  // revert all changes to the schema\r\n  const revertAllChanges = () => {\r\n    let value = { ...originalSchema };\r\n    // convert obj schema to iterable array properties\r\n    let convertedSchema = JSON.parse(JSON.stringify(value));\r\n    convertedSchema[\"properties\"] = object2array(value[\"properties\"]);\r\n    console.log(convertedSchema);\r\n    setConvertedSchema(convertedSchema);\r\n    setSchema(value);\r\n    setSchemaWithValues(value);\r\n    setDescriptionList(\"\");\r\n\r\n    // create form data again\r\n    let formData = createFormDataBlueprint(value[\"properties\"]);\r\n    setJsonData(formData);\r\n  };\r\n\r\n  // handle data input on blur\r\n  const handleDataInput = (event, path, type) => {\r\n    let jData = { ...jsonData };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(jData, path, value);\r\n    //console.log(\"Current form data    (jData):\", jData);\r\n    setJsonData(jData);\r\n  };\r\n  //\r\n\r\n  // handle data input on blur to convertedSchema\r\n  const handleConvertedDataInput = (event, path, type) => {\r\n    let convSchemaData = { ...convertedSchema };\r\n    let value;\r\n    if ([\"string\", \"number\", \"integer\", \"boolean\"].includes(type)) {\r\n      if ([\"number\", \"integer\", \"boolean\"].includes(type)) {\r\n        value = event;\r\n      } else {\r\n        value = event.target.value;\r\n      }\r\n    } else if (type === \"array\") {\r\n      value = event;\r\n    }\r\n    set(convSchemaData, path, value);\r\n    setConvertedSchema(convSchemaData);\r\n    //console.log(convSchemaData);\r\n\r\n    // convert to form data\r\n    console.log(\r\n      \"Current form data (convData):\",\r\n      convData2FormData(\r\n        JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n      )\r\n    );\r\n\r\n    // unconverted\r\n    //console.log(\"Current form data (unconverted convData):\", convSchemaData);\r\n  };\r\n\r\n  // delete data in jsonData when the field in schema is deleted\r\n  const handleDataDelete = (path) => {\r\n    let jData = { ...jsonData };\r\n    let value = deleteKeySchema(jData, path);\r\n    setJsonData(value);\r\n    console.log(\"Current form data:\", value);\r\n  };\r\n\r\n  // update form data id if a fieldkey changes, simply delete key value pair of the oldfieldid from jsonData\r\n  const updateFormDataId = (\r\n    oldFieldId,\r\n    newFieldId,\r\n    pathFormData,\r\n    defaultValue\r\n  ) => {\r\n    if (oldFieldId === newFieldId) {\r\n      return;\r\n    }\r\n    if (defaultValue === undefined) {\r\n      let jData = { ...jsonData };\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    } else {\r\n      let newPathFormData = pathFormData.split(\".\");\r\n      newPathFormData.pop();\r\n      newPathFormData.push(newFieldId);\r\n\r\n      let jData = { ...jsonData };\r\n      let value = getValue(jData, pathFormData);\r\n      set(jData, newPathFormData, value);\r\n      jData = deleteKeySchema(jData, pathFormData);\r\n      setJsonData(jData);\r\n      console.log(\"Current form data:\", jData);\r\n    }\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadJsonSchema = () => {\r\n    let content = { ...schema };\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `jsonschema-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadFormData = () => {\r\n    //let content = { ...jsonData };\r\n    let convSchemaData = { ...convertedSchema };\r\n    let content = convData2FormData(\r\n      JSON.parse(JSON.stringify(convSchemaData[\"properties\"]))\r\n    );\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, validation] = validateAgainstSchema(content, contentSchema);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      let errorMessages = \"\";\r\n      if (validation.errors !== null) {\r\n        for (let i = 0; i < validation.errors.length; i++) {\r\n          let currentMessage = validation.errors[i].message + \".\";\r\n          errorMessages += currentMessage + \"\\n\";\r\n        }\r\n      }\r\n      errorMessages = errorMessages.split(\"\\n\");\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {errorMessages.map((item, index) => {\r\n            return <div key={index}>{item}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    // calculate hash for the content\r\n    // calculate hash using CryptoJS\r\n    let sha256_hash = CryptoJS.SHA256(JSON.stringify(content));\r\n\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([JSON.stringify(content)], {\r\n      type: \"application/json\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `formdata-${sha256_hash}.json`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // handle download json schema\r\n  const handleDownloadDescriptionList = () => {\r\n    let content = { ...jsonData };\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n\r\n    //\r\n    // validate jsonData against its schema before download\r\n    //\r\n    const [valid, validation] = validateAgainstSchema(content, contentSchema);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      let errorMessages = \"\";\r\n      if (validation.errors !== null) {\r\n        for (let i = 0; i < validation.errors.length; i++) {\r\n          let currentMessage = validation.errors[i].message + \".\";\r\n          errorMessages += currentMessage + \"\\n\";\r\n        }\r\n      }\r\n      errorMessages = errorMessages.split(\"\\n\");\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {errorMessages.map((item, index) => {\r\n            return <div key={index}>{item}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = convData2DescList(convProp);\r\n    //let cleaned = removeEmpty(convData2DescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to download. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    let preProcessed = preProcessB4DescList(cleaned, cleaned, schema, []);\r\n    //console.log(preProcessed);\r\n    let nicelySorted = nicelySort(preProcessed);\r\n    let descList = `<dl>\\n${createDescriptionList(nicelySorted)}</dl>\\n`;\r\n    let descListHeading = `<h1><strong>${convSch[\"title\"]}</strong></h1>\\n`;\r\n    descListHeading += descList;\r\n    descListHeading += `<div> This experiment template was generated with <span><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>ADAMANT v0.0.1</a></span> </div>`;\r\n    console.log(\"created description list:\\n\", descListHeading);\r\n    setDescriptionList(descList);\r\n\r\n    let sha256_hash = CryptoJS.SHA256(descListHeading);\r\n    let a = document.createElement(\"a\");\r\n    let file = new Blob([descListHeading], {\r\n      type: \"text/plain\",\r\n    });\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = `desclist-${sha256_hash}.tpl`;\r\n    a.click();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  // get available tags from elabftw\r\n  const getTagsELabFTW = () => {\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/adamant/api/get_tags\",\r\n      dataType: \"json\",\r\n      data: {\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n      },\r\n      success: function (status) {\r\n        console.log(\"Tags retrieved successfully\");\r\n        //let arr = [];\r\n        //for (let i = 0; i < status.length; i++) {\r\n        //  arr.push(status[i][\"tag\"]);\r\n        //}\r\n        setRetrievedTags(status);\r\n        toast.success(`Successfully retrieved the tags!`, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        });\r\n      },\r\n      error: function (status) {\r\n        console.log(\"Failed to retrieve tags\");\r\n        console.log(status);\r\n        toast.error(`Failed to get the tags!\\nMaybe wrong url or token?`, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // create an experiment in elabftw based on the schema and data\r\n  const createExperimentELabFTW = () => {\r\n    // validate the data first using ajv\r\n    let content = { ...jsonData };\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, validation] = validateAgainstSchema(\r\n      content,\r\n      JSON.parse(JSON.stringify(contentSchema))\r\n    );\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      let errorMessages = \"\";\r\n      if (validation.errors !== null) {\r\n        for (let i = 0; i < validation.errors.length; i++) {\r\n          let currentMessage = validation.errors[i].message + \".\";\r\n          errorMessages += currentMessage + \"\\n\";\r\n        }\r\n      }\r\n      errorMessages = errorMessages.split(\"\\n\");\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {errorMessages.map((item, index) => {\r\n            return <div key={index}>{item}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      // clear states\r\n      setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    }\r\n\r\n    // call create experiment api\r\n    console.log(\"tags:\", tags);\r\n    var $ = require(\"jquery\");\r\n    $.ajax({\r\n      type: \"POST\",\r\n      url: \"/adamant/api/create_experiment\",\r\n      async: false,\r\n      dataType: \"json\",\r\n      data: {\r\n        javascript_data: JSON.stringify(content),\r\n        schema: JSON.stringify(contentSchema),\r\n        eLabURL: eLabURL,\r\n        eLabToken: token,\r\n        title: experimentTitle,\r\n        body: descriptionList,\r\n        tags: JSON.stringify(tags),\r\n      },\r\n      success: function (status) {\r\n        console.log(\"SUCCESS\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenSubmitDialog(false);\r\n        toast.success(\r\n          `Successfully created an experiment with id: ${status[\"experimentId\"]}!`,\r\n          {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false,\r\n            progress: undefined,\r\n          }\r\n        );\r\n\r\n        // clear states\r\n        setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n      error: function (status) {\r\n        console.log(\"ERROR\");\r\n        console.log(status);\r\n\r\n        // close submit dialog\r\n        setOpenSubmitDialog(false);\r\n        toast.error(\r\n          `Failed to create an experiment!\\nMaybe wrong url or token?`,\r\n          {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false,\r\n            progress: undefined,\r\n          }\r\n        );\r\n        // clear states\r\n        setToken(\"\");\r\n        setExperimentTitle(\"\");\r\n        setRetrievedTags([]);\r\n        setTags([]);\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleOnClickProceedButton = () => {\r\n    // Create elab ftw description list and store it to the description list state\r\n    let convSch = { ...convertedSchema };\r\n    // use this if we want to show all fields in description list\r\n    let convProp = JSON.parse(JSON.stringify(convSch[\"properties\"]));\r\n    fillValueWithEmptyString(convProp);\r\n    let cleaned = convData2DescList(convProp);\r\n    //let cleaned = removeEmpty(convData2DescList(convSch[\"properties\"]));\r\n    if ((cleaned === undefined) | (cleaned === {})) {\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>\r\n              Unable to proceed. Form data is not valid. Maybe empty?\r\n            </strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    let preProcessed = preProcessB4DescList(cleaned, cleaned, schema, []);\r\n    //console.log(preProcessed);\r\n    let nicelySorted = nicelySort(preProcessed);\r\n    let descList = `<dl>\\n${createDescriptionList(nicelySorted)}</dl>\\n`;\r\n    let descListHeading = `<h1><strong>${convSch[\"title\"]}</strong></h1>\\n`;\r\n    descListHeading += descList;\r\n    descListHeading += `<div> This experiment template was generated with <span ><a title=https://github.com/csihda/adamant href=https://github.com/csihda/adamant>ADAMANT v0.0.1</a></span> </div>`;\r\n    console.log(\"created description list:\\n\", descListHeading);\r\n    setDescriptionList(descListHeading);\r\n\r\n    // validate the data first using ajv\r\n    let content = { ...jsonData };\r\n    let contentSchema = { ...schema };\r\n\r\n    // get rid of empty values in content\r\n    content = removeEmpty(content);\r\n    if (content === undefined) {\r\n      content = {};\r\n    }\r\n    //console.log(\"content\", content);\r\n\r\n    //\r\n    // validate jsonData against its schema before submission\r\n    //\r\n    const [valid, validation] = validateAgainstSchema(content, contentSchema);\r\n    if (!valid | (Object.keys(content).length === 0)) {\r\n      let errorMessages = \"\";\r\n      if (validation.errors !== null) {\r\n        for (let i = 0; i < validation.errors.length; i++) {\r\n          let currentMessage = validation.errors[i].message + \".\";\r\n          errorMessages += currentMessage + \"\\n\";\r\n        }\r\n      }\r\n      errorMessages = errorMessages.split(\"\\n\");\r\n      toast.error(\r\n        <>\r\n          <div>\r\n            <strong>Form data is not valid.</strong>\r\n          </div>\r\n          <div style={{ paddingBottom: \"10px\" }}>Check your inputs!</div>\r\n          {errorMessages.map((item, index) => {\r\n            return <div key={index}>{item}</div>;\r\n          })}\r\n        </>,\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 10000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: false,\r\n          progress: undefined,\r\n        }\r\n      );\r\n      // clear states\r\n      setToken(\"\");\r\n      setExperimentTitle(\"\");\r\n      setTags([]);\r\n      return;\r\n    } else {\r\n      setOpenSubmitDialog(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormContext.Provider\r\n        value={{\r\n          updateParent,\r\n          convertedSchema,\r\n          handleDataInput,\r\n          updateFormDataId,\r\n          handleDataDelete,\r\n          handleConvertedDataInput,\r\n        }}\r\n      >\r\n        <div style={{ paddingBottom: \"5px\" }}>\r\n          <img\r\n            style={{ width: \"100%\", borderRadius: \"5px\" }}\r\n            alt=\"header\"\r\n            src={HeaderImage}\r\n          />\r\n          {!inputMode ? (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                textAlign: \"left\",\r\n                padding: \"10px 10px 0px 10px\",\r\n              }}\r\n            >\r\n              <Button variant=\"contained\" color=\"primary\" {...getRootProps()}>\r\n                <input {...getInputProps()} />\r\n                {isDragActive ? \"Drop here\" : \"Browse Schema\"}\r\n              </Button>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <TextField\r\n                onChange={(event) => handleSelectSchemaOnChange(event)}\r\n                style={{ width: \"220px\", marginLeft: \"10px\" }}\r\n                fullWidth={false}\r\n                value={selectedSchemaName}\r\n                select\r\n                id={\"select-schema\"}\r\n                label={\"Select existing schema\"}\r\n                variant=\"outlined\"\r\n                SelectProps={{ native: true }}\r\n              >\r\n                {schemaNameList.map((content, index) => (\r\n                  <option key={index} value={content}>\r\n                    {content}\r\n                  </option>\r\n                ))}\r\n              </TextField>\r\n              <div\r\n                style={{\r\n                  paddingLeft: \"10px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                OR\r\n              </div>\r\n              <Button\r\n                onClick={() => createSchemaFromScratch()}\r\n                style={{\r\n                  marginLeft: \"10px\",\r\n                  marginRight: \"10px\",\r\n                }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                CREATE FROM SCRATCH\r\n              </Button>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        {!inputMode ? (\r\n          <div\r\n            style={{\r\n              paddingLeft: \"10px\",\r\n              display: \"flex\",\r\n              width: \"100%\",\r\n              textAlign: \"left\",\r\n            }}\r\n          >\r\n            {schemaValidity === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    width: \"498px\",\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"left\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}. You can now render the form.\r\n                </div>\r\n                <Button\r\n                  style={{ marginRight: \"5px\" }}\r\n                  onClick={() => renderOnClick()}\r\n                  variant=\"outlined\"\r\n                >\r\n                  Render\r\n                </Button>\r\n                <Button\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    paddingTop: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"red\",\r\n                  }}\r\n                >\r\n                  {schemaMessage}\r\n                </div>\r\n              </>\r\n            )}\r\n            {createScratchMode === true ? (\r\n              <>\r\n                <div\r\n                  style={{\r\n                    paddingRight: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"green\",\r\n                  }}\r\n                >\r\n                  Create from scratch mode. You can now start editing.\r\n                </div>\r\n                <Button\r\n                  onClick={() => clearSchemaOnClick()}\r\n                  variant=\"outlined\"\r\n                  color=\"secondary\"\r\n                >\r\n                  Clear\r\n                </Button>\r\n              </>\r\n            ) : null}\r\n          </div>\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        {renderReady === true ? (\r\n          <FormRenderer\r\n            revertAllChanges={revertAllChanges}\r\n            schema={convertedSchema}\r\n            originalSchema={schema}\r\n            edit={editMode}\r\n          />\r\n        ) : null}\r\n        <div style={{ padding: \"10px\" }}>\r\n          <Divider />\r\n        </div>\r\n        <div\r\n          style={{\r\n            padding: \"10px 10px\",\r\n            display: \"flex\",\r\n            justifyContent: \"right\",\r\n          }}\r\n        >\r\n          {inputMode ? (\r\n            <div style={{ width: \"100%\", display: \"inline-block\" }}>\r\n              <Button\r\n                onClick={() => toEditMode()}\r\n                style={{ float: \"left\", marginRight: \"5px\" }}\r\n                variant=\"outlined\"\r\n              >\r\n                Back to Edit Mode\r\n              </Button>\r\n              <Button\r\n                disabled={!onlineMode}\r\n                onClick={() => handleOnClickProceedButton()}\r\n                style={{ float: \"right\" }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Proceed\r\n              </Button>\r\n              <Button\r\n                style={{ float: \"right\", marginRight: \"5px\" }}\r\n                id=\"demo-positioned-button\"\r\n                aria-controls={open ? \"demo-positioned-menu\" : undefined}\r\n                aria-haspopup=\"true\"\r\n                aria-expanded={open ? \"true\" : undefined}\r\n                onClick={handleClick}\r\n              >\r\n                <DownloadIcon /> Download Schema/Data\r\n              </Button>\r\n              <Menu\r\n                id=\"demo-positioned-menu\"\r\n                aria-labelledby=\"demo-positioned-button\"\r\n                anchorEl={anchorEl}\r\n                open={open}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n                transformOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n              >\r\n                <MenuItem onClick={handleDownloadJsonSchema}>\r\n                  Download JSON Schema\r\n                </MenuItem>\r\n                <MenuItem onClick={handleDownloadFormData}>\r\n                  Download JSON Data\r\n                </MenuItem>\r\n                <MenuItem onClick={handleDownloadDescriptionList}>\r\n                  Download Description List\r\n                </MenuItem>\r\n              </Menu>\r\n            </div>\r\n          ) : (\r\n            <Button\r\n              disabled={disable}\r\n              onClick={() => compileOnClick()}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Compile\r\n            </Button>\r\n          )}\r\n        </div>\r\n        <div style={{ padding: \"10px\", color: \"grey\" }}>ADAMANT v0.0.1</div>\r\n      </FormContext.Provider>\r\n      <CreateELabFTWExperimentDialog\r\n        setTags={setTags}\r\n        tags={tags}\r\n        setRetrievedTags={setRetrievedTags}\r\n        retrievedTags={retrievedTags}\r\n        setExperimentTitle={setExperimentTitle}\r\n        createExperimentELabFTW={createExperimentELabFTW}\r\n        setToken={setToken}\r\n        token={token}\r\n        setELabURL={setELabURL}\r\n        eLabURL={eLabURL}\r\n        setOpenSubmitDialog={setOpenSubmitDialog}\r\n        openSubmitDialog={openSubmitDialog}\r\n        getTagsELabFTW={getTagsELabFTW}\r\n      />\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdamantMain;\r\n","import React from \"react\";\nimport \"./styles.css\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport AdamantMain from \"./pages/AdamantMain\";\nimport \"cors\";\n\nexport default function App() {\n\n\n  return (\n    /*\n    <div className=\"the_app\">\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/pbb/adamant\" />\n        <Route exact path=\"/pbb/adamant\" component={AdamantMain}></Route>\n      </Switch>\n    </div>\n    */\n    <div className=\"the_app\">\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/adamant\" />\n        <Route exact path=\"/adamant\" component={AdamantMain}></Route>\n      </Switch>\n    </div>\n  );\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n//import { HashRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nconst rootElement = document.getElementById(\"root\");\n\n// strict mode is disabled so that findDOMNode warning is suppressed\nReactDOM.render(\n  <Router>\n    <CssBaseline />\n    <App />\n  </Router>,\n  rootElement\n);\n\n\n/* use this for strict mode, however it always throws the findDOMNode warning\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <CssBaseline />\n      <App />\n    </Router>\n  </React.StrictMode>,\n  rootElement\n);\n*/"],"sourceRoot":""}